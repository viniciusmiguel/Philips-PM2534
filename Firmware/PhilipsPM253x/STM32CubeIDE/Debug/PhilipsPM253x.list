
PhilipsPM253x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000225f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036a4  080227c0  080227c0  000327c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025e64  08025e64  0004020c  2**0
                  CONTENTS
  4 .ARM          00000008  08025e64  08025e64  00035e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025e6c  08025e6c  0004020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025e6c  08025e6c  00035e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025e70  08025e70  00035e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08025e74  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011d9c  2000020c  08026080  0004020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011fa8  08026080  00041fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00076af4  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000eadd  00000000  00000000  000b6d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004410  00000000  00000000  000c5810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003f78  00000000  00000000  000c9c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00048adf  00000000  00000000  000cdb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00070a04  00000000  00000000  00116677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014420b  00000000  00000000  0018707b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002cb286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000121b0  00000000  00000000  002cb2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080227a8 	.word	0x080227a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	080227a8 	.word	0x080227a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_ADC3_Init+0x98>)
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <MX_ADC3_Init+0x9c>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_ADC3_Init+0x98>)
 80005c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC3_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_ADC3_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC3_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ADC3_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC3_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC3_Init+0x98>)
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <MX_ADC3_Init+0xa0>)
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC3_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC3_Init+0x98>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC3_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC3_Init+0x98>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC3_Init+0x98>)
 800060a:	f003 fffd 	bl	8004608 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000614:	f001 f8b2 	bl	800177c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000618:	2304      	movs	r3, #4
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC3_Init+0x98>)
 800062a:	f004 f831 	bl	8004690 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000634:	f001 f8a2 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20009104 	.word	0x20009104
 8000644:	40012200 	.word	0x40012200
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <HAL_ADC_MspInit+0xa4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d13c      	bne.n	80006e8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80006b6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80006ba:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006bc:	2303      	movs	r3, #3
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <HAL_ADC_MspInit+0xac>)
 80006cc:	f006 f874 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80006d0:	2301      	movs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <HAL_ADC_MspInit+0xb0>)
 80006e4:	f006 f868 	bl	80067b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40012200 	.word	0x40012200
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40021400 	.word	0x40021400
 80006fc:	40020000 	.word	0x40020000

08000700 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_CRC_Init+0x3c>)
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <MX_CRC_Init+0x40>)
 8000708:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_CRC_Init+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_CRC_Init+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_CRC_Init+0x3c>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_CRC_Init+0x3c>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_CRC_Init+0x3c>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_CRC_Init+0x3c>)
 800072a:	f004 fad7 	bl	8004cdc <HAL_CRC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000734:	f001 f822 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000914c 	.word	0x2000914c
 8000740:	40023000 	.word	0x40023000

08000744 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_CRC_MspInit+0x38>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d10b      	bne.n	800076e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_CRC_MspInit+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <HAL_CRC_MspInit+0x3c>)
 800075c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_CRC_MspInit+0x3c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023000 	.word	0x40023000
 8000780:	40023800 	.word	0x40023800

08000784 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_DCMI_Init+0x60>)
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_DCMI_Init+0x64>)
 800078c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_DCMI_Init+0x60>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007d2:	f004 fb6d 	bl	8004eb0 <HAL_DCMI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 ffce 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20009170 	.word	0x20009170
 80007e8:	50050000 	.word	0x50050000

080007ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a50      	ldr	r2, [pc, #320]	; (800094c <HAL_DCMI_MspInit+0x160>)
 800080a:	4293      	cmp	r3, r2
 800080c:	f040 809a 	bne.w	8000944 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000810:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	4a4e      	ldr	r2, [pc, #312]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6353      	str	r3, [r2, #52]	; 0x34
 800081c:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800081e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	623b      	str	r3, [r7, #32]
 8000826:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000828:	4b49      	ldr	r3, [pc, #292]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	4a48      	ldr	r2, [pc, #288]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6313      	str	r3, [r2, #48]	; 0x30
 8000834:	4b46      	ldr	r3, [pc, #280]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a42      	ldr	r2, [pc, #264]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a3c      	ldr	r2, [pc, #240]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
 8000864:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000870:	4b37      	ldr	r3, [pc, #220]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	4a36      	ldr	r2, [pc, #216]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	6313      	str	r3, [r2, #48]	; 0x30
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a30      	ldr	r2, [pc, #192]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b0:	230d      	movs	r3, #13
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4826      	ldr	r0, [pc, #152]	; (8000954 <HAL_DCMI_MspInit+0x168>)
 80008bc:	f005 ff7c 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80008c0:	2308      	movs	r3, #8
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d0:	230d      	movs	r3, #13
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	481f      	ldr	r0, [pc, #124]	; (8000958 <HAL_DCMI_MspInit+0x16c>)
 80008dc:	f005 ff6c 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f2:	230d      	movs	r3, #13
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <HAL_DCMI_MspInit+0x170>)
 80008fe:	f005 ff5b 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000902:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000914:	230d      	movs	r3, #13
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4810      	ldr	r0, [pc, #64]	; (8000960 <HAL_DCMI_MspInit+0x174>)
 8000920:	f005 ff4a 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000924:	2350      	movs	r3, #80	; 0x50
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000934:	230d      	movs	r3, #13
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <HAL_DCMI_MspInit+0x178>)
 8000940:	f005 ff3a 	bl	80067b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000944:	bf00      	nop
 8000946:	3738      	adds	r7, #56	; 0x38
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	50050000 	.word	0x50050000
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021800 	.word	0x40021800
 8000960:	40021c00 	.word	0x40021c00
 8000964:	40020000 	.word	0x40020000

08000968 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <MX_DMA2D_Init+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800099e:	f004 fb9b 	bl	80050d8 <HAL_DMA2D_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009a8:	f000 fee8 	bl	800177c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009ac:	2101      	movs	r1, #1
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 80009b0:	f004 fcec 	bl	800538c <HAL_DMA2D_ConfigLayer>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 fedf 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200091c0 	.word	0x200091c0
 80009c8:	4002b000 	.word	0x4002b000

080009cc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_DMA2D_MspInit+0x44>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d113      	bne.n	8000a06 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	205a      	movs	r0, #90	; 0x5a
 80009fc:	f004 f944 	bl	8004c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a00:	205a      	movs	r0, #90	; 0x5a
 8000a02:	f004 f95d 	bl	8004cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	4002b000 	.word	0x4002b000
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
 8000a2c:	615a      	str	r2, [r3, #20]
 8000a2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a32:	4a20      	ldr	r2, [pc, #128]	; (8000ab4 <MX_FMC_Init+0x9c>)
 8000a34:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a50:	2240      	movs	r2, #64	; 0x40
 8000a52:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a56:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a5a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a68:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a84:	2307      	movs	r3, #7
 8000a86:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_FMC_Init+0x98>)
 8000a9a:	f00a ffe8 	bl	800ba6e <HAL_SDRAM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000aa4:	f000 fe6a 	bl	800177c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20009200 	.word	0x20009200
 8000ab4:	a0000140 	.word	0xa0000140

08000ab8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000acc:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <HAL_FMC_MspInit+0x100>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d16d      	bne.n	8000bb0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <HAL_FMC_MspInit+0x100>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ada:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <HAL_FMC_MspInit+0x104>)
 8000adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ade:	4a37      	ldr	r2, [pc, #220]	; (8000bbc <HAL_FMC_MspInit+0x104>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6393      	str	r3, [r2, #56]	; 0x38
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_FMC_MspInit+0x104>)
 8000ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000af2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000af6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b04:	230c      	movs	r3, #12
 8000b06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	482c      	ldr	r0, [pc, #176]	; (8000bc0 <HAL_FMC_MspInit+0x108>)
 8000b0e:	f005 fe53 	bl	80067b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000b12:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b16:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b24:	230c      	movs	r3, #12
 8000b26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <HAL_FMC_MspInit+0x10c>)
 8000b2e:	f005 fe43 	bl	80067b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b32:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b36:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b44:	230c      	movs	r3, #12
 8000b46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <HAL_FMC_MspInit+0x110>)
 8000b4e:	f005 fe33 	bl	80067b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b56:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b64:	230c      	movs	r3, #12
 8000b66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4817      	ldr	r0, [pc, #92]	; (8000bcc <HAL_FMC_MspInit+0x114>)
 8000b6e:	f005 fe23 	bl	80067b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000b72:	2328      	movs	r3, #40	; 0x28
 8000b74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b82:	230c      	movs	r3, #12
 8000b84:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <HAL_FMC_MspInit+0x118>)
 8000b8c:	f005 fe14 	bl	80067b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000b90:	2308      	movs	r3, #8
 8000b92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <HAL_FMC_MspInit+0x11c>)
 8000baa:	f005 fe05 	bl	80067b8 <HAL_GPIO_Init>
 8000bae:	e000      	b.n	8000bb2 <HAL_FMC_MspInit+0xfa>
    return;
 8000bb0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000228 	.word	0x20000228
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40021800 	.word	0x40021800
 8000bc8:	40020c00 	.word	0x40020c00
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40021c00 	.word	0x40021c00
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000be0:	f7ff ff6a 	bl	8000ab8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <MX_FREERTOS_Init+0x18>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_FREERTOS_Init+0x1c>)
 8000c2a:	f00f f805 	bl	800fc38 <osThreadNew>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <MX_FREERTOS_Init+0x20>)
 8000c32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	08025b90 	.word	0x08025b90
 8000c3c:	08000c45 	.word	0x08000c45
 8000c40:	20009234 	.word	0x20009234

08000c44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c4c:	f002 fa90 	bl	8003170 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c50:	f002 ff32 	bl	8003ab8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f00f f895 	bl	800fd84 <osDelay>
 8000c5a:	e7fb      	b.n	8000c54 <StartDefaultTask+0x10>

08000c5c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b090      	sub	sp, #64	; 0x40
 8000c60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c72:	4baf      	ldr	r3, [pc, #700]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4aae      	ldr	r2, [pc, #696]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4bac      	ldr	r3, [pc, #688]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8a:	4ba9      	ldr	r3, [pc, #676]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4aa8      	ldr	r2, [pc, #672]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4ba6      	ldr	r3, [pc, #664]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4ba3      	ldr	r3, [pc, #652]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4aa2      	ldr	r2, [pc, #648]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4ba0      	ldr	r3, [pc, #640]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b9d      	ldr	r3, [pc, #628]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a9c      	ldr	r2, [pc, #624]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b97      	ldr	r3, [pc, #604]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a96      	ldr	r2, [pc, #600]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b94      	ldr	r3, [pc, #592]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b91      	ldr	r3, [pc, #580]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a90      	ldr	r2, [pc, #576]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b8e      	ldr	r3, [pc, #568]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d02:	4b8b      	ldr	r3, [pc, #556]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a8a      	ldr	r2, [pc, #552]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b88      	ldr	r3, [pc, #544]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d1a:	4b85      	ldr	r3, [pc, #532]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a84      	ldr	r2, [pc, #528]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b82      	ldr	r3, [pc, #520]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d32:	4b7f      	ldr	r3, [pc, #508]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a7e      	ldr	r2, [pc, #504]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b7c      	ldr	r3, [pc, #496]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b79      	ldr	r3, [pc, #484]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a78      	ldr	r2, [pc, #480]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b76      	ldr	r3, [pc, #472]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b73      	ldr	r3, [pc, #460]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a72      	ldr	r2, [pc, #456]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b70      	ldr	r3, [pc, #448]	; (8000f30 <MX_GPIO_Init+0x2d4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	486d      	ldr	r0, [pc, #436]	; (8000f34 <MX_GPIO_Init+0x2d8>)
 8000d80:	f005 fede 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	210c      	movs	r1, #12
 8000d88:	486b      	ldr	r0, [pc, #428]	; (8000f38 <MX_GPIO_Init+0x2dc>)
 8000d8a:	f005 fed9 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2108      	movs	r1, #8
 8000d92:	486a      	ldr	r0, [pc, #424]	; (8000f3c <MX_GPIO_Init+0x2e0>)
 8000d94:	f005 fed4 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9e:	4866      	ldr	r0, [pc, #408]	; (8000f38 <MX_GPIO_Init+0x2dc>)
 8000da0:	f005 fece 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000daa:	4865      	ldr	r0, [pc, #404]	; (8000f40 <MX_GPIO_Init+0x2e4>)
 8000dac:	f005 fec8 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	21c8      	movs	r1, #200	; 0xc8
 8000db4:	4863      	ldr	r0, [pc, #396]	; (8000f44 <MX_GPIO_Init+0x2e8>)
 8000db6:	f005 fec3 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	485e      	ldr	r0, [pc, #376]	; (8000f48 <MX_GPIO_Init+0x2ec>)
 8000dce:	f005 fcf3 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000dd2:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000de4:	230a      	movs	r3, #10
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4857      	ldr	r0, [pc, #348]	; (8000f4c <MX_GPIO_Init+0x2f0>)
 8000df0:	f005 fce2 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4851      	ldr	r0, [pc, #324]	; (8000f50 <MX_GPIO_Init+0x2f4>)
 8000e0a:	f005 fcd5 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000e0e:	2340      	movs	r3, #64	; 0x40
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e12:	4b50      	ldr	r3, [pc, #320]	; (8000f54 <MX_GPIO_Init+0x2f8>)
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4844      	ldr	r0, [pc, #272]	; (8000f34 <MX_GPIO_Init+0x2d8>)
 8000e22:	f005 fcc9 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e26:	2320      	movs	r3, #32
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	483d      	ldr	r0, [pc, #244]	; (8000f34 <MX_GPIO_Init+0x2d8>)
 8000e3e:	f005 fcbb 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000e42:	f241 030c 	movw	r3, #4108	; 0x100c
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4837      	ldr	r0, [pc, #220]	; (8000f38 <MX_GPIO_Init+0x2dc>)
 8000e5c:	f005 fcac 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	4838      	ldr	r0, [pc, #224]	; (8000f58 <MX_GPIO_Init+0x2fc>)
 8000e76:	f005 fc9f 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482a      	ldr	r0, [pc, #168]	; (8000f3c <MX_GPIO_Init+0x2e0>)
 8000e92:	f005 fc91 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e96:	2310      	movs	r3, #16
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4822      	ldr	r0, [pc, #136]	; (8000f34 <MX_GPIO_Init+0x2d8>)
 8000eaa:	f005 fc85 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000eae:	f248 0304 	movw	r3, #32772	; 0x8004
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481f      	ldr	r0, [pc, #124]	; (8000f40 <MX_GPIO_Init+0x2e4>)
 8000ec4:	f005 fc78 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_GPIO_Init+0x2e4>)
 8000ee2:	f005 fc69 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eec:	2303      	movs	r3, #3
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <MX_GPIO_Init+0x2dc>)
 8000efc:	f005 fc5c 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_GPIO_Init+0x2f8>)
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_GPIO_Init+0x2dc>)
 8000f16:	f005 fc4f 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	e016      	b.n	8000f5c <MX_GPIO_Init+0x300>
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40022800 	.word	0x40022800
 8000f40:	40021c00 	.word	0x40021c00
 8000f44:	40021800 	.word	0x40021800
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40022400 	.word	0x40022400
 8000f54:	10120000 	.word	0x10120000
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4820      	ldr	r0, [pc, #128]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000f66:	f005 fc27 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000f6a:	23c8      	movs	r3, #200	; 0xc8
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	481a      	ldr	r0, [pc, #104]	; (8000fec <MX_GPIO_Init+0x390>)
 8000f82:	f005 fc19 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000f86:	2305      	movs	r3, #5
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f96:	230a      	movs	r3, #10
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <MX_GPIO_Init+0x394>)
 8000fa2:	f005 fc09 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_GPIO_Init+0x390>)
 8000fba:	f005 fbfd 	bl	80067b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000fbe:	2328      	movs	r3, #40	; 0x28
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_GPIO_Init+0x398>)
 8000fda:	f005 fbed 	bl	80067b8 <HAL_GPIO_Init>

}
 8000fde:	bf00      	nop
 8000fe0:	3740      	adds	r7, #64	; 0x40
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021c00 	.word	0x40021c00
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_I2C1_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <MX_I2C1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_I2C1_Init+0x74>)
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <MX_I2C1_Init+0x7c>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_I2C1_Init+0x74>)
 8001010:	2201      	movs	r2, #1
 8001012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_I2C1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_I2C1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <MX_I2C1_Init+0x74>)
 8001034:	f005 fd9e 	bl	8006b74 <HAL_I2C_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800103e:	f000 fb9d 	bl	800177c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <MX_I2C1_Init+0x74>)
 8001046:	f005 fe25 	bl	8006c94 <HAL_I2CEx_ConfigAnalogFilter>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001050:	f000 fb94 	bl	800177c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_I2C1_Init+0x74>)
 8001058:	f005 fe67 	bl	8006d2a <HAL_I2CEx_ConfigDigitalFilter>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001062:	f000 fb8b 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20009284 	.word	0x20009284
 8001070:	40005400 	.word	0x40005400
 8001074:	00c0eaff 	.word	0x00c0eaff

08001078 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_I2C3_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_I2C3_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_I2C3_Init+0x74>)
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <MX_I2C3_Init+0x7c>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_I2C3_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_I2C3_Init+0x74>)
 8001090:	2201      	movs	r2, #1
 8001092:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_I2C3_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_I2C3_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C3_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C3_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C3_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <MX_I2C3_Init+0x74>)
 80010b4:	f005 fd5e 	bl	8006b74 <HAL_I2C_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010be:	f000 fb5d 	bl	800177c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <MX_I2C3_Init+0x74>)
 80010c6:	f005 fde5 	bl	8006c94 <HAL_I2CEx_ConfigAnalogFilter>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010d0:	f000 fb54 	bl	800177c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_I2C3_Init+0x74>)
 80010d8:	f005 fe27 	bl	8006d2a <HAL_I2CEx_ConfigDigitalFilter>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f000 fb4b 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20009238 	.word	0x20009238
 80010f0:	40005c00 	.word	0x40005c00
 80010f4:	00c0eaff 	.word	0x00c0eaff

080010f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <HAL_I2C_MspInit+0xdc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d129      	bne.n	800116e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	2312      	movs	r3, #18
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001144:	2304      	movs	r3, #4
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4823      	ldr	r0, [pc, #140]	; (80011dc <HAL_I2C_MspInit+0xe4>)
 8001150:	f005 fb32 	bl	80067b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 800115a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800116c:	e02d      	b.n	80011ca <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_I2C_MspInit+0xe8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d128      	bne.n	80011ca <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 800117e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001190:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001196:	2312      	movs	r3, #18
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011a2:	2304      	movs	r3, #4
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_I2C_MspInit+0xec>)
 80011ae:	f005 fb03 	bl	80067b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 80011b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_I2C_MspInit+0xe0>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	; 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40005c00 	.word	0x40005c00
 80011e4:	40021c00 	.word	0x40021c00

080011e8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2234      	movs	r2, #52	; 0x34
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f020 fa5f 	bl	80216b8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <MX_LTDC_Init+0xfc>)
 80011fc:	4a3a      	ldr	r2, [pc, #232]	; (80012e8 <MX_LTDC_Init+0x100>)
 80011fe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <MX_LTDC_Init+0xfc>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <MX_LTDC_Init+0xfc>)
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001220:	2209      	movs	r2, #9
 8001222:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001226:	2235      	movs	r2, #53	; 0x35
 8001228:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <MX_LTDC_Init+0xfc>)
 800122c:	220b      	movs	r2, #11
 800122e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001232:	f240 2215 	movw	r2, #533	; 0x215
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_LTDC_Init+0xfc>)
 800123a:	f240 121b 	movw	r2, #283	; 0x11b
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001242:	f240 2235 	movw	r2, #565	; 0x235
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_LTDC_Init+0xfc>)
 800124a:	f240 121d 	movw	r2, #285	; 0x11d
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_LTDC_Init+0xfc>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_LTDC_Init+0xfc>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001268:	481e      	ldr	r0, [pc, #120]	; (80012e4 <MX_LTDC_Init+0xfc>)
 800126a:	f005 fdab 	bl	8006dc4 <HAL_LTDC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001274:	f000 fa82 	bl	800177c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800127c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001280:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001286:	f44f 7388 	mov.w	r3, #272	; 0x110
 800128a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800128c:	2302      	movs	r3, #2
 800128e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001290:	23ff      	movs	r3, #255	; 0xff
 8001292:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001298:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800129c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800129e:	2307      	movs	r3, #7
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012a2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80012a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80012ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_LTDC_Init+0xfc>)
 80012ce:	f005 ff0b 	bl	80070e8 <HAL_LTDC_ConfigLayer>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80012d8:	f000 fa50 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3738      	adds	r7, #56	; 0x38
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200092d0 	.word	0x200092d0
 80012e8:	40016800 	.word	0x40016800

080012ec <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a55      	ldr	r2, [pc, #340]	; (8001460 <HAL_LTDC_MspInit+0x174>)
 800130a:	4293      	cmp	r3, r2
 800130c:	f040 80a3 	bne.w	8001456 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001310:	4b54      	ldr	r3, [pc, #336]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800131a:	6453      	str	r3, [r2, #68]	; 0x44
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001324:	623b      	str	r3, [r7, #32]
 8001326:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001328:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001340:	4b48      	ldr	r3, [pc, #288]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a41      	ldr	r2, [pc, #260]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001370:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a35      	ldr	r2, [pc, #212]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <HAL_LTDC_MspInit+0x178>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80013a0:	2310      	movs	r3, #16
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b0:	230e      	movs	r3, #14
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	482b      	ldr	r0, [pc, #172]	; (8001468 <HAL_LTDC_MspInit+0x17c>)
 80013bc:	f005 f9fc 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80013c0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013d2:	230e      	movs	r3, #14
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	4823      	ldr	r0, [pc, #140]	; (800146c <HAL_LTDC_MspInit+0x180>)
 80013de:	f005 f9eb 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80013e2:	23f7      	movs	r3, #247	; 0xf7
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f2:	230e      	movs	r3, #14
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <HAL_LTDC_MspInit+0x184>)
 80013fe:	f005 f9db 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001414:	2309      	movs	r3, #9
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <HAL_LTDC_MspInit+0x188>)
 8001420:	f005 f9ca 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001424:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001436:	230e      	movs	r3, #14
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <HAL_LTDC_MspInit+0x18c>)
 8001442:	f005 f9b9 	bl	80067b8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	2058      	movs	r0, #88	; 0x58
 800144c:	f003 fc1c 	bl	8004c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001450:	2058      	movs	r0, #88	; 0x58
 8001452:	f003 fc35 	bl	8004cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001456:	bf00      	nop
 8001458:	3738      	adds	r7, #56	; 0x38
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40016800 	.word	0x40016800
 8001464:	40023800 	.word	0x40023800
 8001468:	40021000 	.word	0x40021000
 800146c:	40022400 	.word	0x40022400
 8001470:	40022800 	.word	0x40022800
 8001474:	40021800 	.word	0x40021800
 8001478:	40022000 	.word	0x40022000

0800147c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001480:	f3bf 8f4f 	dsb	sy
}
 8001484:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001486:	f3bf 8f6f 	isb	sy
}
 800148a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <SCB_EnableICache+0x48>)
 800148e:	2200      	movs	r2, #0
 8001490:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001494:	f3bf 8f4f 	dsb	sy
}
 8001498:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800149a:	f3bf 8f6f 	isb	sy
}
 800149e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SCB_EnableICache+0x48>)
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <SCB_EnableICache+0x48>)
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ac:	f3bf 8f4f 	dsb	sy
}
 80014b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014b2:	f3bf 8f6f 	isb	sy
}
 80014b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <SCB_EnableDCache+0x84>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014d6:	f3bf 8f4f 	dsb	sy
}
 80014da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <SCB_EnableDCache+0x84>)
 80014de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	0b5b      	lsrs	r3, r3, #13
 80014e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001500:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001506:	4911      	ldr	r1, [pc, #68]	; (800154c <SCB_EnableDCache+0x84>)
 8001508:	4313      	orrs	r3, r2
 800150a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	60ba      	str	r2, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ef      	bne.n	80014f8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1e5a      	subs	r2, r3, #1
 800151c:	60fa      	str	r2, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1e5      	bne.n	80014ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001522:	f3bf 8f4f 	dsb	sy
}
 8001526:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <SCB_EnableDCache+0x84>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <SCB_EnableDCache+0x84>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001534:	f3bf 8f4f 	dsb	sy
}
 8001538:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800153a:	f3bf 8f6f 	isb	sy
}
 800153e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001554:	f7ff ff92 	bl	800147c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001558:	f7ff ffb6 	bl	80014c8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155c:	f003 f802 	bl	8004564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001560:	f000 f83a 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001564:	f7ff fb7a 	bl	8000c5c <MX_GPIO_Init>
  MX_ADC3_Init();
 8001568:	f7ff f81e 	bl	80005a8 <MX_ADC3_Init>
  MX_CRC_Init();
 800156c:	f7ff f8c8 	bl	8000700 <MX_CRC_Init>
  MX_DCMI_Init();
 8001570:	f7ff f908 	bl	8000784 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001574:	f7ff f9f8 	bl	8000968 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001578:	f7ff fa4e 	bl	8000a18 <MX_FMC_Init>
  MX_I2C1_Init();
 800157c:	f7ff fd3c 	bl	8000ff8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001580:	f7ff fd7a 	bl	8001078 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001584:	f7ff fe30 	bl	80011e8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001588:	f000 f8fe 	bl	8001788 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800158c:	f000 f9b8 	bl	8001900 <MX_RTC_Init>
  MX_SAI2_Init();
 8001590:	f000 fa76 	bl	8001a80 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001594:	f000 fb86 	bl	8001ca4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001598:	f000 fc06 	bl	8001da8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800159c:	f000 fc76 	bl	8001e8c <MX_SPI2_Init>
  MX_TIM1_Init();
 80015a0:	f000 fea6 	bl	80022f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015a4:	f000 ff50 	bl	8002448 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015a8:	f000 ffc4 	bl	8002534 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015ac:	f001 f83a 	bl	8002624 <MX_TIM5_Init>
  MX_TIM8_Init();
 80015b0:	f001 f8b0 	bl	8002714 <MX_TIM8_Init>
  MX_TIM12_Init();
 80015b4:	f001 f902 	bl	80027bc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80015b8:	f001 faa2 	bl	8002b00 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80015bc:	f001 fad0 	bl	8002b60 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80015c0:	f001 fb92 	bl	8002ce8 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 80015c4:	f002 fa71 	bl	8003aaa <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80015c8:	f00e fa82 	bl	800fad0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80015cc:	f7ff fb28 	bl	8000c20 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80015d0:	f00e fad4 	bl	800fb7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <main+0x84>
	...

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0b4      	sub	sp, #208	; 0xd0
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f020 f866 	bl	80216b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	2284      	movs	r2, #132	; 0x84
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f020 f857 	bl	80216b8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800160a:	f007 f903 	bl	8008814 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b4f      	ldr	r3, [pc, #316]	; (800174c <SystemClock_Config+0x174>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a4e      	ldr	r2, [pc, #312]	; (800174c <SystemClock_Config+0x174>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b4c      	ldr	r3, [pc, #304]	; (800174c <SystemClock_Config+0x174>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <SystemClock_Config+0x178>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a49      	ldr	r2, [pc, #292]	; (8001750 <SystemClock_Config+0x178>)
 800162c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <SystemClock_Config+0x178>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800163e:	2309      	movs	r3, #9
 8001640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001660:	2319      	movs	r3, #25
 8001662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001666:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800166a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001674:	2309      	movs	r3, #9
 8001676:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800167e:	4618      	mov	r0, r3
 8001680:	f007 f9ea 	bl	8008a58 <HAL_RCC_OscConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800168a:	f000 f877 	bl	800177c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800168e:	f007 f8d1 	bl	8008834 <HAL_PWREx_EnableOverDrive>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001698:	f000 f870 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016c2:	2106      	movs	r1, #6
 80016c4:	4618      	mov	r0, r3
 80016c6:	f007 fc6b 	bl	8008fa0 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80016d0:	f000 f854 	bl	800177c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <SystemClock_Config+0x17c>)
 80016d6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80016d8:	2364      	movs	r3, #100	; 0x64
 80016da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80016e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80016ee:	2305      	movs	r3, #5
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80016f6:	2303      	movs	r3, #3
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800170e:	2300      	movs	r3, #0
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001712:	2300      	movs	r3, #0
 8001714:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001716:	2300      	movs	r3, #0
 8001718:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800171a:	2300      	movs	r3, #0
 800171c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800171e:	2300      	movs	r3, #0
 8001720:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4618      	mov	r0, r3
 8001736:	f007 fe3b 	bl	80093b0 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8001740:	f000 f81c 	bl	800177c <Error_Handler>
  }
}
 8001744:	bf00      	nop
 8001746:	37d0      	adds	r7, #208	; 0xd0
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000
 8001754:	01b14868 	.word	0x01b14868

08001758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800176a:	f002 ff09 	bl	8004580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40001000 	.word	0x40001000

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <MX_QUADSPI_Init+0x54>)
 8001790:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 8001794:	2201      	movs	r2, #1
 8001796:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 800179a:	2204      	movs	r2, #4
 800179c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 80017a0:	2210      	movs	r2, #16
 80017a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 80017a6:	2218      	movs	r2, #24
 80017a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 80017ac:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80017b0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_QUADSPI_Init+0x50>)
 80017c6:	f007 f885 	bl	80088d4 <HAL_QSPI_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80017d0:	f7ff ffd4 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20009378 	.word	0x20009378
 80017dc:	a0001000 	.word	0xa0001000

080017e0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a3b      	ldr	r2, [pc, #236]	; (80018ec <HAL_QSPI_MspInit+0x10c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d170      	bne.n	80018e4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	4a3a      	ldr	r2, [pc, #232]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6393      	str	r3, [r2, #56]	; 0x38
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800181a:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_QSPI_MspInit+0x110>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001862:	2304      	movs	r3, #4
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001872:	2309      	movs	r3, #9
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	481d      	ldr	r0, [pc, #116]	; (80018f4 <HAL_QSPI_MspInit+0x114>)
 800187e:	f004 ff9b 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001882:	2340      	movs	r3, #64	; 0x40
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001892:	230a      	movs	r3, #10
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4816      	ldr	r0, [pc, #88]	; (80018f8 <HAL_QSPI_MspInit+0x118>)
 800189e:	f004 ff8b 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a2:	2304      	movs	r3, #4
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018b2:	2309      	movs	r3, #9
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <HAL_QSPI_MspInit+0x118>)
 80018be:	f004 ff7b 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80018c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018d4:	2309      	movs	r3, #9
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <HAL_QSPI_MspInit+0x11c>)
 80018e0:	f004 ff6a 	bl	80067b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80018e4:	bf00      	nop
 80018e6:	3730      	adds	r7, #48	; 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	a0001000 	.word	0xa0001000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020c00 	.word	0x40020c00

08001900 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b092      	sub	sp, #72	; 0x48
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800191c:	463b      	mov	r3, r7
 800191e:	222c      	movs	r2, #44	; 0x2c
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f01f fec8 	bl	80216b8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001928:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <MX_RTC_Init+0x144>)
 800192a:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <MX_RTC_Init+0x148>)
 800192c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800192e:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <MX_RTC_Init+0x144>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <MX_RTC_Init+0x144>)
 8001936:	227f      	movs	r2, #127	; 0x7f
 8001938:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800193a:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <MX_RTC_Init+0x144>)
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001940:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <MX_RTC_Init+0x144>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <MX_RTC_Init+0x144>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <MX_RTC_Init+0x144>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001952:	483c      	ldr	r0, [pc, #240]	; (8001a44 <MX_RTC_Init+0x144>)
 8001954:	f008 fa60 	bl	8009e18 <HAL_RTC_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800195e:	f7ff ff0d 	bl	800177c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001974:	2300      	movs	r3, #0
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800197c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001980:	2201      	movs	r2, #1
 8001982:	4619      	mov	r1, r3
 8001984:	482f      	ldr	r0, [pc, #188]	; (8001a44 <MX_RTC_Init+0x144>)
 8001986:	f008 fad9 	bl	8009f3c <HAL_RTC_SetTime>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001990:	f7ff fef4 	bl	800177c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	2201      	movs	r2, #1
 80019b2:	4619      	mov	r1, r3
 80019b4:	4823      	ldr	r0, [pc, #140]	; (8001a44 <MX_RTC_Init+0x144>)
 80019b6:	f008 fb7f 	bl	800a0b8 <HAL_RTC_SetDate>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80019c0:	f7ff fedc 	bl	800177c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80019ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019f4:	463b      	mov	r3, r7
 80019f6:	2201      	movs	r2, #1
 80019f8:	4619      	mov	r1, r3
 80019fa:	4812      	ldr	r0, [pc, #72]	; (8001a44 <MX_RTC_Init+0x144>)
 80019fc:	f008 fc04 	bl	800a208 <HAL_RTC_SetAlarm>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a06:	f7ff feb9 	bl	800177c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	2201      	movs	r2, #1
 8001a14:	4619      	mov	r1, r3
 8001a16:	480b      	ldr	r0, [pc, #44]	; (8001a44 <MX_RTC_Init+0x144>)
 8001a18:	f008 fbf6 	bl	800a208 <HAL_RTC_SetAlarm>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001a22:	f7ff feab 	bl	800177c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a26:	2202      	movs	r2, #2
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_RTC_Init+0x144>)
 8001a2c:	f008 fd76 	bl	800a51c <HAL_RTCEx_SetTimeStamp>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001a36:	f7ff fea1 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3748      	adds	r7, #72	; 0x48
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200093c4 	.word	0x200093c4
 8001a48:	40002800 	.word	0x40002800

08001a4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_RTC_MspInit+0x2c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d105      	bne.n	8001a6a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_RTC_MspInit+0x30>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <HAL_RTC_MspInit+0x30>)
 8001a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a68:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40002800 	.word	0x40002800
 8001a7c:	40023800 	.word	0x40023800

08001a80 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a84:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001a86:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <MX_SAI2_Init+0x140>)
 8001a88:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a90:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001a98:	2240      	movs	r2, #64	; 0x40
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001aa8:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001ac0:	4b3e      	ldr	r3, [pc, #248]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ac2:	4a40      	ldr	r2, [pc, #256]	; (8001bc4 <MX_SAI2_Init+0x144>)
 8001ac4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ad8:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001b14:	4829      	ldr	r0, [pc, #164]	; (8001bbc <MX_SAI2_Init+0x13c>)
 8001b16:	f008 fd57 	bl	800a5c8 <HAL_SAI_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001b20:	f7ff fe2c 	bl	800177c <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b26:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <MX_SAI2_Init+0x14c>)
 8001b28:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b32:	2203      	movs	r2, #3
 8001b34:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b74:	2208      	movs	r2, #8
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001ba8:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <MX_SAI2_Init+0x148>)
 8001baa:	f008 fd0d 	bl	800a5c8 <HAL_SAI_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001bb4:	f7ff fde2 	bl	800177c <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20009468 	.word	0x20009468
 8001bc0:	40015c04 	.word	0x40015c04
 8001bc4:	0002ee00 	.word	0x0002ee00
 8001bc8:	200093e4 	.word	0x200093e4
 8001bcc:	40015c24 	.word	0x40015c24

08001bd0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_SAI_MspInit+0xbc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d124      	bne.n	8001c2c <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_SAI_MspInit+0xc0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_SAI_MspInit+0xc4>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_SAI_MspInit+0xc4>)
 8001bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_SAI_MspInit+0xc4>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_SAI_MspInit+0xc0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <HAL_SAI_MspInit+0xc0>)
 8001c0a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001c0c:	23f0      	movs	r3, #240	; 0xf0
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	481c      	ldr	r0, [pc, #112]	; (8001c98 <HAL_SAI_MspInit+0xc8>)
 8001c28:	f004 fdc6 	bl	80067b8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_SAI_MspInit+0xcc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d125      	bne.n	8001c82 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_SAI_MspInit+0xc0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10b      	bne.n	8001c56 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_SAI_MspInit+0xc4>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <HAL_SAI_MspInit+0xc4>)
 8001c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_SAI_MspInit+0xc4>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_SAI_MspInit+0xc0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_SAI_MspInit+0xc0>)
 8001c5e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c72:	230a      	movs	r3, #10
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <HAL_SAI_MspInit+0xd0>)
 8001c7e:	f004 fd9b 	bl	80067b8 <HAL_GPIO_Init>

    }
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40015c04 	.word	0x40015c04
 8001c90:	2000022c 	.word	0x2000022c
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40015c24 	.word	0x40015c24
 8001ca0:	40021800 	.word	0x40021800

08001ca4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_SDMMC1_SD_Init+0x38>)
 8001caa:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <MX_SDMMC1_SD_Init+0x3c>)
 8001cac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <MX_SDMMC1_SD_Init+0x38>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_SDMMC1_SD_Init+0x38>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <MX_SDMMC1_SD_Init+0x38>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_SDMMC1_SD_Init+0x38>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <MX_SDMMC1_SD_Init+0x38>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <MX_SDMMC1_SD_Init+0x38>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200094ec 	.word	0x200094ec
 8001ce0:	40012c00 	.word	0x40012c00

08001ce4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_SD_MspInit+0xb4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d144      	bne.n	8001d90 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_SD_MspInit+0xb8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001d4e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d52:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d60:	230c      	movs	r3, #12
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <HAL_SD_MspInit+0xbc>)
 8001d6c:	f004 fd24 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001d70:	2304      	movs	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d80:	230c      	movs	r3, #12
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4806      	ldr	r0, [pc, #24]	; (8001da4 <HAL_SD_MspInit+0xc0>)
 8001d8c:	f004 fd14 	bl	80067b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00

08001da8 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001db2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MX_SPDIFRX_Init+0x5c>)
 8001df2:	f009 fe71 	bl	800bad8 <HAL_SPDIFRX_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001dfc:	f7ff fcbe 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20009570 	.word	0x20009570

08001e08 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(spdifrxHandle->Instance==SPDIFRX)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001e28:	d127      	bne.n	8001e7a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_SPDIFRX_MspInit+0x7c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_SPDIFRX_MspInit+0x7c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_SPDIFRX_MspInit+0x7c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_SPDIFRX_MspInit+0x7c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_SPDIFRX_MspInit+0x7c>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_SPDIFRX_MspInit+0x7c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <HAL_SPDIFRX_MspInit+0x80>)
 8001e76:	f004 fc9f 	bl	80067b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020c00 	.word	0x40020c00

08001e8c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <MX_SPI2_Init+0x78>)
 8001e94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001e98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ea6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001eaa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001eda:	2207      	movs	r2, #7
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_SPI2_Init+0x74>)
 8001eec:	f009 fe50 	bl	800bb90 <HAL_SPI_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ef6:	f7ff fc41 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200095bc 	.word	0x200095bc
 8001f04:	40003800 	.word	0x40003800

08001f08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a25      	ldr	r2, [pc, #148]	; (8001fbc <HAL_SPI_MspInit+0xb4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d144      	bne.n	8001fb4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_SPI_MspInit+0xb8>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001f72:	2302      	movs	r3, #2
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f82:	2305      	movs	r3, #5
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <HAL_SPI_MspInit+0xbc>)
 8001f8e:	f004 fc13 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001f92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <HAL_SPI_MspInit+0xc0>)
 8001fb0:	f004 fc02 	bl	80067b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40003800 	.word	0x40003800
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40020400 	.word	0x40020400

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_MspInit+0x4c>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_MspInit+0x4c>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_MspInit+0x4c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_MspInit+0x4c>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	210f      	movs	r1, #15
 8002006:	f06f 0001 	mvn.w	r0, #1
 800200a:	f002 fe3d 	bl	8004c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	2036      	movs	r0, #54	; 0x36
 8002032:	f002 fe29 	bl	8004c88 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002036:	2036      	movs	r0, #54	; 0x36
 8002038:	f002 fe42 	bl	8004cc0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <HAL_InitTick+0xa0>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_InitTick+0xa0>)
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_InitTick+0xa0>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002054:	f107 0210 	add.w	r2, r7, #16
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f007 f974 	bl	800934c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002064:	f007 f94a 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
 8002068:	4603      	mov	r3, r0
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_InitTick+0xa4>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	0c9b      	lsrs	r3, r3, #18
 8002078:	3b01      	subs	r3, #1
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_InitTick+0xa8>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_InitTick+0xac>)
 8002080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_InitTick+0xa8>)
 8002084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002088:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_InitTick+0xa8>)
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_InitTick+0xa8>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_InitTick+0xa8>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800209c:	4809      	ldr	r0, [pc, #36]	; (80020c4 <HAL_InitTick+0xa8>)
 800209e:	f009 fe22 	bl	800bce6 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d104      	bne.n	80020b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80020a8:	4806      	ldr	r0, [pc, #24]	; (80020c4 <HAL_InitTick+0xa8>)
 80020aa:	f009 fe73 	bl	800bd94 <HAL_TIM_Base_Start_IT>
 80020ae:	4603      	mov	r3, r0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3730      	adds	r7, #48	; 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	20009620 	.word	0x20009620
 80020c8:	40001000 	.word	0x40001000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <TIM6_DAC_IRQHandler+0x10>)
 80020fe:	f009 ff18 	bl	800bf32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20009620 	.word	0x20009620

0800210c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <ETH_IRQHandler+0x10>)
 8002112:	f003 fdaf 	bl	8005c74 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2000b6e8 	.word	0x2000b6e8

08002120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <OTG_FS_IRQHandler+0x10>)
 8002126:	f005 fafd 	bl	8007724 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000e3d0 	.word	0x2000e3d0

08002134 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <LTDC_IRQHandler+0x10>)
 800213a:	f004 ff13 	bl	8006f64 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200092d0 	.word	0x200092d0

08002148 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <DMA2D_IRQHandler+0x10>)
 800214e:	f003 f80d 	bl	800516c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200091c0 	.word	0x200091c0

0800215c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <_kill+0x20>)
 8002178:	2216      	movs	r2, #22
 800217a:	601a      	str	r2, [r3, #0]
	return -1;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20011f70 	.word	0x20011f70

08002190 <_exit>:

void _exit (int status)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffe5 	bl	800216c <_kill>
	while (1) {}		/* Make sure we hang here */
 80021a2:	e7fe      	b.n	80021a2 <_exit+0x12>

080021a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e00a      	b.n	80021cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021b6:	f3af 8000 	nop.w
 80021ba:	4601      	mov	r1, r0
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	60ba      	str	r2, [r7, #8]
 80021c2:	b2ca      	uxtb	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf0      	blt.n	80021b6 <_read+0x12>
	}

return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e009      	b.n	8002204 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	60ba      	str	r2, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf1      	blt.n	80021f0 <_write+0x12>
	}
	return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_close>:

int _close(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return -1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223e:	605a      	str	r2, [r3, #4]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_isatty>:

int _isatty(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return 1;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	return 0;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d205      	bcs.n	80022bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <_sbrk+0x6c>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	20050000 	.word	0x20050000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	20000230 	.word	0x20000230
 80022e8:	20011fa8 	.word	0x20011fa8
 80022ec:	20011f70 	.word	0x20011f70

080022f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b09a      	sub	sp, #104	; 0x68
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	615a      	str	r2, [r3, #20]
 8002322:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	222c      	movs	r2, #44	; 0x2c
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f01f f9c4 	bl	80216b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002330:	4b43      	ldr	r3, [pc, #268]	; (8002440 <MX_TIM1_Init+0x150>)
 8002332:	4a44      	ldr	r2, [pc, #272]	; (8002444 <MX_TIM1_Init+0x154>)
 8002334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002336:	4b42      	ldr	r3, [pc, #264]	; (8002440 <MX_TIM1_Init+0x150>)
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <MX_TIM1_Init+0x150>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002342:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <MX_TIM1_Init+0x150>)
 8002344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002348:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <MX_TIM1_Init+0x150>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <MX_TIM1_Init+0x150>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <MX_TIM1_Init+0x150>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800235c:	4838      	ldr	r0, [pc, #224]	; (8002440 <MX_TIM1_Init+0x150>)
 800235e:	f009 fcc2 	bl	800bce6 <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002368:	f7ff fa08 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002370:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002376:	4619      	mov	r1, r3
 8002378:	4831      	ldr	r0, [pc, #196]	; (8002440 <MX_TIM1_Init+0x150>)
 800237a:	f00a f809 	bl	800c390 <HAL_TIM_ConfigClockSource>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002384:	f7ff f9fa 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002388:	482d      	ldr	r0, [pc, #180]	; (8002440 <MX_TIM1_Init+0x150>)
 800238a:	f009 fd7b 	bl	800be84 <HAL_TIM_PWM_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002394:	f7ff f9f2 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023a8:	4619      	mov	r1, r3
 80023aa:	4825      	ldr	r0, [pc, #148]	; (8002440 <MX_TIM1_Init+0x150>)
 80023ac:	f00a fc76 	bl	800cc9c <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80023b6:	f7ff f9e1 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ba:	2360      	movs	r3, #96	; 0x60
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	4818      	ldr	r0, [pc, #96]	; (8002440 <MX_TIM1_Init+0x150>)
 80023e0:	f009 fec6 	bl	800c170 <HAL_TIM_PWM_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023ea:	f7ff f9c7 	bl	800177c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002406:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4807      	ldr	r0, [pc, #28]	; (8002440 <MX_TIM1_Init+0x150>)
 8002424:	f00a fcc8 	bl	800cdb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800242e:	f7ff f9a5 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002432:	4803      	ldr	r0, [pc, #12]	; (8002440 <MX_TIM1_Init+0x150>)
 8002434:	f000 fa96 	bl	8002964 <HAL_TIM_MspPostInit>

}
 8002438:	bf00      	nop
 800243a:	3768      	adds	r7, #104	; 0x68
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20009750 	.word	0x20009750
 8002444:	40010000 	.word	0x40010000

08002448 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08e      	sub	sp, #56	; 0x38
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002468:	463b      	mov	r3, r7
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <MX_TIM2_Init+0xe8>)
 800247c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <MX_TIM2_Init+0xe8>)
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <MX_TIM2_Init+0xe8>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <MX_TIM2_Init+0xe8>)
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <MX_TIM2_Init+0xe8>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <MX_TIM2_Init+0xe8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024a2:	4823      	ldr	r0, [pc, #140]	; (8002530 <MX_TIM2_Init+0xe8>)
 80024a4:	f009 fc1f 	bl	800bce6 <HAL_TIM_Base_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80024ae:	f7ff f965 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024bc:	4619      	mov	r1, r3
 80024be:	481c      	ldr	r0, [pc, #112]	; (8002530 <MX_TIM2_Init+0xe8>)
 80024c0:	f009 ff66 	bl	800c390 <HAL_TIM_ConfigClockSource>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80024ca:	f7ff f957 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024ce:	4818      	ldr	r0, [pc, #96]	; (8002530 <MX_TIM2_Init+0xe8>)
 80024d0:	f009 fcd8 	bl	800be84 <HAL_TIM_PWM_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80024da:	f7ff f94f 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	4810      	ldr	r0, [pc, #64]	; (8002530 <MX_TIM2_Init+0xe8>)
 80024ee:	f00a fbd5 	bl	800cc9c <HAL_TIMEx_MasterConfigSynchronization>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024f8:	f7ff f940 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fc:	2360      	movs	r3, #96	; 0x60
 80024fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	2200      	movs	r2, #0
 8002510:	4619      	mov	r1, r3
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <MX_TIM2_Init+0xe8>)
 8002514:	f009 fe2c 	bl	800c170 <HAL_TIM_PWM_ConfigChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800251e:	f7ff f92d 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002522:	4803      	ldr	r0, [pc, #12]	; (8002530 <MX_TIM2_Init+0xe8>)
 8002524:	f000 fa1e 	bl	8002964 <HAL_TIM_MspPostInit>

}
 8002528:	bf00      	nop
 800252a:	3738      	adds	r7, #56	; 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	2000979c 	.word	0x2000979c

08002534 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002554:	463b      	mov	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002566:	4b2d      	ldr	r3, [pc, #180]	; (800261c <MX_TIM3_Init+0xe8>)
 8002568:	4a2d      	ldr	r2, [pc, #180]	; (8002620 <MX_TIM3_Init+0xec>)
 800256a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <MX_TIM3_Init+0xe8>)
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <MX_TIM3_Init+0xe8>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <MX_TIM3_Init+0xe8>)
 800257a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <MX_TIM3_Init+0xe8>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <MX_TIM3_Init+0xe8>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258c:	4823      	ldr	r0, [pc, #140]	; (800261c <MX_TIM3_Init+0xe8>)
 800258e:	f009 fbaa 	bl	800bce6 <HAL_TIM_Base_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002598:	f7ff f8f0 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a6:	4619      	mov	r1, r3
 80025a8:	481c      	ldr	r0, [pc, #112]	; (800261c <MX_TIM3_Init+0xe8>)
 80025aa:	f009 fef1 	bl	800c390 <HAL_TIM_ConfigClockSource>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80025b4:	f7ff f8e2 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b8:	4818      	ldr	r0, [pc, #96]	; (800261c <MX_TIM3_Init+0xe8>)
 80025ba:	f009 fc63 	bl	800be84 <HAL_TIM_PWM_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025c4:	f7ff f8da 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4811      	ldr	r0, [pc, #68]	; (800261c <MX_TIM3_Init+0xe8>)
 80025d8:	f00a fb60 	bl	800cc9c <HAL_TIMEx_MasterConfigSynchronization>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025e2:	f7ff f8cb 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e6:	2360      	movs	r3, #96	; 0x60
 80025e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f6:	463b      	mov	r3, r7
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4807      	ldr	r0, [pc, #28]	; (800261c <MX_TIM3_Init+0xe8>)
 80025fe:	f009 fdb7 	bl	800c170 <HAL_TIM_PWM_ConfigChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002608:	f7ff f8b8 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <MX_TIM3_Init+0xe8>)
 800260e:	f000 f9a9 	bl	8002964 <HAL_TIM_MspPostInit>

}
 8002612:	bf00      	nop
 8002614:	3738      	adds	r7, #56	; 0x38
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20009704 	.word	0x20009704
 8002620:	40000400 	.word	0x40000400

08002624 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	; 0x38
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002644:	463b      	mov	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <MX_TIM5_Init+0xe8>)
 8002658:	4a2d      	ldr	r2, [pc, #180]	; (8002710 <MX_TIM5_Init+0xec>)
 800265a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <MX_TIM5_Init+0xe8>)
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <MX_TIM5_Init+0xe8>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <MX_TIM5_Init+0xe8>)
 800266a:	f04f 32ff 	mov.w	r2, #4294967295
 800266e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <MX_TIM5_Init+0xe8>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002676:	4b25      	ldr	r3, [pc, #148]	; (800270c <MX_TIM5_Init+0xe8>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800267c:	4823      	ldr	r0, [pc, #140]	; (800270c <MX_TIM5_Init+0xe8>)
 800267e:	f009 fb32 	bl	800bce6 <HAL_TIM_Base_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002688:	f7ff f878 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002696:	4619      	mov	r1, r3
 8002698:	481c      	ldr	r0, [pc, #112]	; (800270c <MX_TIM5_Init+0xe8>)
 800269a:	f009 fe79 	bl	800c390 <HAL_TIM_ConfigClockSource>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80026a4:	f7ff f86a 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026a8:	4818      	ldr	r0, [pc, #96]	; (800270c <MX_TIM5_Init+0xe8>)
 80026aa:	f009 fbeb 	bl	800be84 <HAL_TIM_PWM_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80026b4:	f7ff f862 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4811      	ldr	r0, [pc, #68]	; (800270c <MX_TIM5_Init+0xe8>)
 80026c8:	f00a fae8 	bl	800cc9c <HAL_TIMEx_MasterConfigSynchronization>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80026d2:	f7ff f853 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d6:	2360      	movs	r3, #96	; 0x60
 80026d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	220c      	movs	r2, #12
 80026ea:	4619      	mov	r1, r3
 80026ec:	4807      	ldr	r0, [pc, #28]	; (800270c <MX_TIM5_Init+0xe8>)
 80026ee:	f009 fd3f 	bl	800c170 <HAL_TIM_PWM_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80026f8:	f7ff f840 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <MX_TIM5_Init+0xe8>)
 80026fe:	f000 f931 	bl	8002964 <HAL_TIM_MspPostInit>

}
 8002702:	bf00      	nop
 8002704:	3738      	adds	r7, #56	; 0x38
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200096b8 	.word	0x200096b8
 8002710:	40000c00 	.word	0x40000c00

08002714 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <MX_TIM8_Init+0xa0>)
 8002734:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <MX_TIM8_Init+0xa4>)
 8002736:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <MX_TIM8_Init+0xa0>)
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <MX_TIM8_Init+0xa0>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <MX_TIM8_Init+0xa0>)
 8002746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800274a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <MX_TIM8_Init+0xa0>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <MX_TIM8_Init+0xa0>)
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <MX_TIM8_Init+0xa0>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800275e:	4815      	ldr	r0, [pc, #84]	; (80027b4 <MX_TIM8_Init+0xa0>)
 8002760:	f009 fac1 	bl	800bce6 <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800276a:	f7ff f807 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4619      	mov	r1, r3
 800277a:	480e      	ldr	r0, [pc, #56]	; (80027b4 <MX_TIM8_Init+0xa0>)
 800277c:	f009 fe08 	bl	800c390 <HAL_TIM_ConfigClockSource>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002786:	f7fe fff9 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4806      	ldr	r0, [pc, #24]	; (80027b4 <MX_TIM8_Init+0xa0>)
 800279c:	f00a fa7e 	bl	800cc9c <HAL_TIMEx_MasterConfigSynchronization>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80027a6:	f7fe ffe9 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000966c 	.word	0x2000966c
 80027b8:	40010400 	.word	0x40010400

080027bc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MX_TIM12_Init+0x84>)
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <MX_TIM12_Init+0x88>)
 80027d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <MX_TIM12_Init+0x84>)
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <MX_TIM12_Init+0x84>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_TIM12_Init+0x84>)
 80027e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <MX_TIM12_Init+0x84>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <MX_TIM12_Init+0x84>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80027fa:	4811      	ldr	r0, [pc, #68]	; (8002840 <MX_TIM12_Init+0x84>)
 80027fc:	f009 fb42 	bl	800be84 <HAL_TIM_PWM_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002806:	f7fe ffb9 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280a:	2360      	movs	r3, #96	; 0x60
 800280c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	4807      	ldr	r0, [pc, #28]	; (8002840 <MX_TIM12_Init+0x84>)
 8002822:	f009 fca5 	bl	800c170 <HAL_TIM_PWM_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800282c:	f7fe ffa6 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <MX_TIM12_Init+0x84>)
 8002832:	f000 f897 	bl	8002964 <HAL_TIM_MspPostInit>

}
 8002836:	bf00      	nop
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200097e8 	.word	0x200097e8
 8002844:	40001800 	.word	0x40001800

08002848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <HAL_TIM_Base_MspInit+0xc8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800285a:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002872:	e046      	b.n	8002902 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d10c      	bne.n	8002898 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]
}
 8002896:	e034      	b.n	8002902 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_TIM_Base_MspInit+0xd0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10c      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
}
 80028ba:	e022      	b.n	8002902 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a16      	ldr	r2, [pc, #88]	; (800291c <HAL_TIM_Base_MspInit+0xd4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10c      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
}
 80028de:	e010      	b.n	8002902 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <HAL_TIM_Base_MspInit+0xd8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10b      	bne.n	8002902 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_TIM_Base_MspInit+0xcc>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	bf00      	nop
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40010000 	.word	0x40010000
 8002914:	40023800 	.word	0x40023800
 8002918:	40000400 	.word	0x40000400
 800291c:	40000c00 	.word	0x40000c00
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <HAL_TIM_PWM_MspInit+0x38>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10b      	bne.n	800294e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_TIM_PWM_MspInit+0x3c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_TIM_PWM_MspInit+0x3c>)
 800293c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_TIM_PWM_MspInit+0x3c>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40001800 	.word	0x40001800
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_TIM_MspPostInit+0x178>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11d      	bne.n	80029c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800299e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4619      	mov	r1, r3
 80029ba:	484a      	ldr	r0, [pc, #296]	; (8002ae4 <HAL_TIM_MspPostInit+0x180>)
 80029bc:	f003 fefc 	bl	80067b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80029c0:	e087      	b.n	8002ad2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d11d      	bne.n	8002a08 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	4b44      	ldr	r3, [pc, #272]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	4a43      	ldr	r2, [pc, #268]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6313      	str	r3, [r2, #48]	; 0x30
 80029d8:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80029e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029f6:	2301      	movs	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	4838      	ldr	r0, [pc, #224]	; (8002ae4 <HAL_TIM_MspPostInit+0x180>)
 8002a02:	f003 fed9 	bl	80067b8 <HAL_GPIO_Init>
}
 8002a06:	e064      	b.n	8002ad2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <HAL_TIM_MspPostInit+0x184>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d11c      	bne.n	8002a4c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a32      	ldr	r2, [pc, #200]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	4619      	mov	r1, r3
 8002a44:	4829      	ldr	r0, [pc, #164]	; (8002aec <HAL_TIM_MspPostInit+0x188>)
 8002a46:	f003 feb7 	bl	80067b8 <HAL_GPIO_Init>
}
 8002a4a:	e042      	b.n	8002ad2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_TIM_MspPostInit+0x18c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11c      	bne.n	8002a90 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4619      	mov	r1, r3
 8002a88:	481a      	ldr	r0, [pc, #104]	; (8002af4 <HAL_TIM_MspPostInit+0x190>)
 8002a8a:	f003 fe95 	bl	80067b8 <HAL_GPIO_Init>
}
 8002a8e:	e020      	b.n	8002ad2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_TIM_MspPostInit+0x194>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d11b      	bne.n	8002ad2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_TIM_MspPostInit+0x17c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002ab2:	2340      	movs	r3, #64	; 0x40
 8002ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002ac2:	2309      	movs	r3, #9
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	f107 031c 	add.w	r3, r7, #28
 8002aca:	4619      	mov	r1, r3
 8002acc:	480b      	ldr	r0, [pc, #44]	; (8002afc <HAL_TIM_MspPostInit+0x198>)
 8002ace:	f003 fe73 	bl	80067b8 <HAL_GPIO_Init>
}
 8002ad2:	bf00      	nop
 8002ad4:	3730      	adds	r7, #48	; 0x30
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40000c00 	.word	0x40000c00
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40001800 	.word	0x40001800
 8002afc:	40021c00 	.word	0x40021c00

08002b00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <MX_USART1_UART_Init+0x5c>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_USART1_UART_Init+0x58>)
 8002b44:	f00a f9d4 	bl	800cef0 <HAL_UART_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b4e:	f7fe fe15 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20009834 	.word	0x20009834
 8002b5c:	40011000 	.word	0x40011000

08002b60 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b66:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <MX_USART6_UART_Init+0x5c>)
 8002b68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b86:	220c      	movs	r2, #12
 8002b88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_USART6_UART_Init+0x58>)
 8002ba4:	f00a f9a4 	bl	800cef0 <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002bae:	f7fe fde5 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200098b8 	.word	0x200098b8
 8002bbc:	40011400 	.word	0x40011400

08002bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a3c      	ldr	r2, [pc, #240]	; (8002cd0 <HAL_UART_MspInit+0x110>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d145      	bne.n	8002c6e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be2:	4b3c      	ldr	r3, [pc, #240]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a3b      	ldr	r2, [pc, #236]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002be8:	f043 0310 	orr.w	r3, r3, #16
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a35      	ldr	r2, [pc, #212]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4824      	ldr	r0, [pc, #144]	; (8002cd8 <HAL_UART_MspInit+0x118>)
 8002c46:	f003 fdb7 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	4619      	mov	r1, r3
 8002c66:	481d      	ldr	r0, [pc, #116]	; (8002cdc <HAL_UART_MspInit+0x11c>)
 8002c68:	f003 fda6 	bl	80067b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c6c:	e02c      	b.n	8002cc8 <HAL_UART_MspInit+0x108>
  else if(uartHandle->Instance==USART6)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_UART_MspInit+0x120>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d127      	bne.n	8002cc8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	6453      	str	r3, [r2, #68]	; 0x44
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_UART_MspInit+0x114>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002ca8:	23c0      	movs	r3, #192	; 0xc0
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <HAL_UART_MspInit+0x124>)
 8002cc4:	f003 fd78 	bl	80067b8 <HAL_GPIO_Init>
}
 8002cc8:	bf00      	nop
 8002cca:	3730      	adds	r7, #48	; 0x30
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40011400 	.word	0x40011400
 8002ce4:	40020800 	.word	0x40020800

08002ce8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002cec:	4904      	ldr	r1, [pc, #16]	; (8002d00 <MX_FATFS_Init+0x18>)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_FATFS_Init+0x1c>)
 8002cf0:	f00c fed8 	bl	800faa4 <FATFS_LinkDriver>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <MX_FATFS_Init+0x20>)
 8002cfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20009940 	.word	0x20009940
 8002d04:	08025bb4 	.word	0x08025bb4
 8002d08:	2000993c 	.word	0x2000993c

08002d0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002d16:	f000 f87b 	bl	8002e10 <BSP_SD_IsDetected>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d001      	beq.n	8002d24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8002d20:	2302      	movs	r3, #2
 8002d22:	e012      	b.n	8002d4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8002d24:	480b      	ldr	r0, [pc, #44]	; (8002d54 <BSP_SD_Init+0x48>)
 8002d26:	f007 fe05 	bl	800a934 <HAL_SD_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d38:	4806      	ldr	r0, [pc, #24]	; (8002d54 <BSP_SD_Init+0x48>)
 8002d3a:	f008 fa53 	bl	800b1e4 <HAL_SD_ConfigWideBusOperation>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8002d48:	79fb      	ldrb	r3, [r7, #7]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200094ec 	.word	0x200094ec

08002d58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	4806      	ldr	r0, [pc, #24]	; (8002d88 <BSP_SD_ReadBlocks_DMA+0x30>)
 8002d70:	f007 fe96 	bl	800aaa0 <HAL_SD_ReadBlocks_DMA>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200094ec 	.word	0x200094ec

08002d8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <BSP_SD_WriteBlocks_DMA+0x30>)
 8002da4:	f007 ff5e 	bl	800ac64 <HAL_SD_WriteBlocks_DMA>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200094ec 	.word	0x200094ec

08002dc0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <BSP_SD_GetCardState+0x1c>)
 8002dc6:	f008 faa7 	bl	800b318 <HAL_SD_GetCardState>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200094ec 	.word	0x200094ec

08002de0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4803      	ldr	r0, [pc, #12]	; (8002df8 <BSP_SD_GetCardInfo+0x18>)
 8002dec:	f008 f9ce 	bl	800b18c <HAL_SD_GetCardInfo>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200094ec 	.word	0x200094ec

08002dfc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8002e04:	f000 f9a2 	bl	800314c <BSP_SD_ReadCpltCallback>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002e16:	2301      	movs	r3, #1
 8002e18:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8002e1a:	f000 f80b 	bl	8002e34 <BSP_PlatformIsDetected>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8002e24:	2300      	movs	r3, #0
 8002e26:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	b2db      	uxtb	r3, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e42:	4806      	ldr	r0, [pc, #24]	; (8002e5c <BSP_PlatformIsDetected+0x28>)
 8002e44:	f003 fe64 	bl	8006b10 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8002e52:	79fb      	ldrb	r3, [r7, #7]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40020800 	.word	0x40020800

08002e60 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8002e68:	f00c febe 	bl	800fbe8 <osKernelGetTickCount>
 8002e6c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8002e6e:	e006      	b.n	8002e7e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002e70:	f7ff ffa6 	bl	8002dc0 <BSP_SD_GetCardState>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e009      	b.n	8002e92 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8002e7e:	f00c feb3 	bl	800fbe8 <osKernelGetTickCount>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d8f0      	bhi.n	8002e70 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002eac:	f7ff ff88 	bl	8002dc0 <BSP_SD_GetCardState>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002ec4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8002ec6:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b2db      	uxtb	r3, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <SD_initialize+0x7c>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8002ee8:	f00c fe26 	bl	800fb38 <osKernelGetState>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d129      	bne.n	8002f46 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8002ef2:	f7ff ff0b 	bl	8002d0c <BSP_SD_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ffcc 	bl	8002e9c <SD_CheckStatus>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <SD_initialize+0x7c>)
 8002f0a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <SD_initialize+0x7c>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d017      	beq.n	8002f46 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <SD_initialize+0x80>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2102      	movs	r1, #2
 8002f22:	200a      	movs	r0, #10
 8002f24:	f00d f9fe 	bl	8010324 <osMessageQueueNew>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <SD_initialize+0x80>)
 8002f2c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <SD_initialize+0x80>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d107      	bne.n	8002f46 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <SD_initialize+0x7c>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <SD_initialize+0x7c>)
 8002f44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8002f46:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <SD_initialize+0x7c>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	b2db      	uxtb	r3, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000000 	.word	0x20000000
 8002f58:	20000234 	.word	0x20000234

08002f5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff97 	bl	8002e9c <SD_CheckStatus>
 8002f6e:	4603      	mov	r3, r0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4603      	mov	r3, r0
 8002f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002f8c:	f247 5030 	movw	r0, #30000	; 0x7530
 8002f90:	f7ff ff66 	bl	8002e60 <SD_CheckStatusWithTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	da01      	bge.n	8002f9e <SD_read+0x26>
  {
    return res;
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	e02f      	b.n	8002ffe <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	68b8      	ldr	r0, [r7, #8]
 8002fa4:	f7ff fed8 	bl	8002d58 <BSP_SD_ReadBlocks_DMA>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8002fac:	7fbb      	ldrb	r3, [r7, #30]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d124      	bne.n	8002ffc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <SD_read+0x90>)
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	f107 0112 	add.w	r1, r7, #18
 8002fba:	f247 5330 	movw	r3, #30000	; 0x7530
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f00d faaa 	bl	8010518 <osMessageQueueGet>
 8002fc4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d117      	bne.n	8002ffc <SD_read+0x84>
 8002fcc:	8a7b      	ldrh	r3, [r7, #18]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d114      	bne.n	8002ffc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8002fd2:	f00c fe09 	bl	800fbe8 <osKernelGetTickCount>
 8002fd6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8002fd8:	e007      	b.n	8002fea <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002fda:	f7ff fef1 	bl	8002dc0 <BSP_SD_GetCardState>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <SD_read+0x72>
              {
                res = RES_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8002fe8:	e008      	b.n	8002ffc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8002fea:	f00c fdfd 	bl	800fbe8 <osKernelGetTickCount>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f247 522f 	movw	r2, #29999	; 0x752f
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d9ee      	bls.n	8002fda <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000234 	.word	0x20000234

0800300c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8003020:	f247 5030 	movw	r0, #30000	; 0x7530
 8003024:	f7ff ff1c 	bl	8002e60 <SD_CheckStatusWithTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	da01      	bge.n	8003032 <SD_write+0x26>
  {
    return res;
 800302e:	7ffb      	ldrb	r3, [r7, #31]
 8003030:	e02d      	b.n	800308e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68b8      	ldr	r0, [r7, #8]
 8003038:	f7ff fea8 	bl	8002d8c <BSP_SD_WriteBlocks_DMA>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d124      	bne.n	800308c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <SD_write+0x8c>)
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	f107 0112 	add.w	r1, r7, #18
 800304a:	f247 5330 	movw	r3, #30000	; 0x7530
 800304e:	2200      	movs	r2, #0
 8003050:	f00d fa62 	bl	8010518 <osMessageQueueGet>
 8003054:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d117      	bne.n	800308c <SD_write+0x80>
 800305c:	8a7b      	ldrh	r3, [r7, #18]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d114      	bne.n	800308c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8003062:	f00c fdc1 	bl	800fbe8 <osKernelGetTickCount>
 8003066:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8003068:	e007      	b.n	800307a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800306a:	f7ff fea9 	bl	8002dc0 <BSP_SD_GetCardState>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <SD_write+0x6e>
          {
            res = RES_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
            break;
 8003078:	e008      	b.n	800308c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800307a:	f00c fdb5 	bl	800fbe8 <osKernelGetTickCount>
 800307e:	4602      	mov	r2, r0
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f247 522f 	movw	r2, #29999	; 0x752f
 8003088:	4293      	cmp	r3, r2
 800308a:	d9ee      	bls.n	800306a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800308c:	7ffb      	ldrb	r3, [r7, #31]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000234 	.word	0x20000234

0800309c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08c      	sub	sp, #48	; 0x30
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	603a      	str	r2, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
 80030a8:	460b      	mov	r3, r1
 80030aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <SD_ioctl+0xac>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <SD_ioctl+0x28>
 80030c0:	2303      	movs	r3, #3
 80030c2:	e03c      	b.n	800313e <SD_ioctl+0xa2>

  switch (cmd)
 80030c4:	79bb      	ldrb	r3, [r7, #6]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d834      	bhi.n	8003134 <SD_ioctl+0x98>
 80030ca:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <SD_ioctl+0x34>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	08003101 	.word	0x08003101
 80030dc:	0800311b 	.word	0x0800311b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80030e6:	e028      	b.n	800313a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fe77 	bl	8002de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80030f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80030fe:	e01c      	b.n	800313a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fe6b 	bl	8002de0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	b29a      	uxth	r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003118:	e00f      	b.n	800313a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe5e 	bl	8002de0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	0a5a      	lsrs	r2, r3, #9
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003132:	e002      	b.n	800313a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003134:	2304      	movs	r3, #4
 8003136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800313a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800313e:	4618      	mov	r0, r3
 8003140:	3730      	adds	r7, #48	; 0x30
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000000 	.word	0x20000000

0800314c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8003152:	2301      	movs	r3, #1
 8003154:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <BSP_SD_ReadCpltCallback+0x20>)
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	1db9      	adds	r1, r7, #6
 800315c:	2300      	movs	r3, #0
 800315e:	2200      	movs	r2, #0
 8003160:	f00d f966 	bl	8010430 <osMessageQueuePut>
#endif
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000234 	.word	0x20000234

08003170 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003176:	2100      	movs	r1, #0
 8003178:	2000      	movs	r0, #0
 800317a:	f01b ff7b 	bl	801f074 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800317e:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <MX_LWIP_Init+0xb8>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <MX_LWIP_Init+0xbc>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <MX_LWIP_Init+0xc0>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <MX_LWIP_Init+0xc4>)
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <MX_LWIP_Init+0xc8>)
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	2300      	movs	r3, #0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <MX_LWIP_Init+0xc0>)
 800319e:	4a23      	ldr	r2, [pc, #140]	; (800322c <MX_LWIP_Init+0xbc>)
 80031a0:	4921      	ldr	r1, [pc, #132]	; (8003228 <MX_LWIP_Init+0xb8>)
 80031a2:	4826      	ldr	r0, [pc, #152]	; (800323c <MX_LWIP_Init+0xcc>)
 80031a4:	f015 fac0 	bl	8018728 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80031a8:	4824      	ldr	r0, [pc, #144]	; (800323c <MX_LWIP_Init+0xcc>)
 80031aa:	f015 fc77 	bl	8018a9c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <MX_LWIP_Init+0xcc>)
 80031b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80031c0:	481e      	ldr	r0, [pc, #120]	; (800323c <MX_LWIP_Init+0xcc>)
 80031c2:	f015 fc7b 	bl	8018abc <netif_set_up>
 80031c6:	e002      	b.n	80031ce <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80031c8:	481c      	ldr	r0, [pc, #112]	; (800323c <MX_LWIP_Init+0xcc>)
 80031ca:	f015 fce3 	bl	8018b94 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80031ce:	491c      	ldr	r1, [pc, #112]	; (8003240 <MX_LWIP_Init+0xd0>)
 80031d0:	481a      	ldr	r0, [pc, #104]	; (800323c <MX_LWIP_Init+0xcc>)
 80031d2:	f015 fd79 	bl	8018cc8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2101      	movs	r1, #1
 80031da:	2001      	movs	r0, #1
 80031dc:	f00c ff48 	bl	8010070 <osSemaphoreNew>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <MX_LWIP_Init+0xd4>)
 80031e4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <MX_LWIP_Init+0xd8>)
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <MX_LWIP_Init+0xcc>)
 80031ea:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <MX_LWIP_Init+0xd4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <MX_LWIP_Init+0xd8>)
 80031f2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80031f4:	2224      	movs	r2, #36	; 0x24
 80031f6:	2100      	movs	r1, #0
 80031f8:	4814      	ldr	r0, [pc, #80]	; (800324c <MX_LWIP_Init+0xdc>)
 80031fa:	f01e fa5d 	bl	80216b8 <memset>
  attributes.name = "LinkThr";
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <MX_LWIP_Init+0xdc>)
 8003200:	4a13      	ldr	r2, [pc, #76]	; (8003250 <MX_LWIP_Init+0xe0>)
 8003202:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_LWIP_Init+0xdc>)
 8003206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <MX_LWIP_Init+0xdc>)
 800320e:	2210      	movs	r2, #16
 8003210:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <MX_LWIP_Init+0xdc>)
 8003214:	490c      	ldr	r1, [pc, #48]	; (8003248 <MX_LWIP_Init+0xd8>)
 8003216:	480f      	ldr	r0, [pc, #60]	; (8003254 <MX_LWIP_Init+0xe4>)
 8003218:	f00c fd0e 	bl	800fc38 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800321c:	4807      	ldr	r0, [pc, #28]	; (800323c <MX_LWIP_Init+0xcc>)
 800321e:	f010 ff7f 	bl	8014120 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20009e0c 	.word	0x20009e0c
 800322c:	20009e10 	.word	0x20009e10
 8003230:	20009e14 	.word	0x20009e14
 8003234:	0801efb1 	.word	0x0801efb1
 8003238:	08003869 	.word	0x08003869
 800323c:	20009dd4 	.word	0x20009dd4
 8003240:	0800394d 	.word	0x0800394d
 8003244:	20000238 	.word	0x20000238
 8003248:	20009da8 	.word	0x20009da8
 800324c:	20009db0 	.word	0x20009db0
 8003250:	080227cc 	.word	0x080227cc
 8003254:	080038d5 	.word	0x080038d5

08003258 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08e      	sub	sp, #56	; 0x38
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a44      	ldr	r2, [pc, #272]	; (8003388 <HAL_ETH_MspInit+0x130>)
 8003276:	4293      	cmp	r3, r2
 8003278:	f040 8081 	bne.w	800337e <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_ETH_MspInit+0x134>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	4a42      	ldr	r2, [pc, #264]	; (800338c <HAL_ETH_MspInit+0x134>)
 8003282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
 8003288:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_ETH_MspInit+0x134>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_ETH_MspInit+0x134>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_ETH_MspInit+0x134>)
 800329a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b3a      	ldr	r3, [pc, #232]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a36      	ldr	r2, [pc, #216]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032c4:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a30      	ldr	r2, [pc, #192]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b2e      	ldr	r3, [pc, #184]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032dc:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4a2a      	ldr	r2, [pc, #168]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6313      	str	r3, [r2, #48]	; 0x30
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4a24      	ldr	r2, [pc, #144]	; (800338c <HAL_ETH_MspInit+0x134>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003300:	4b22      	ldr	r3, [pc, #136]	; (800338c <HAL_ETH_MspInit+0x134>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800330c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	2302      	movs	r3, #2
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331a:	2303      	movs	r3, #3
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800331e:	230b      	movs	r3, #11
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003326:	4619      	mov	r1, r3
 8003328:	4819      	ldr	r0, [pc, #100]	; (8003390 <HAL_ETH_MspInit+0x138>)
 800332a:	f003 fa45 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800332e:	2332      	movs	r3, #50	; 0x32
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333a:	2303      	movs	r3, #3
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800333e:	230b      	movs	r3, #11
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003346:	4619      	mov	r1, r3
 8003348:	4812      	ldr	r0, [pc, #72]	; (8003394 <HAL_ETH_MspInit+0x13c>)
 800334a:	f003 fa35 	bl	80067b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800334e:	2386      	movs	r3, #134	; 0x86
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335a:	2303      	movs	r3, #3
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800335e:	230b      	movs	r3, #11
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003366:	4619      	mov	r1, r3
 8003368:	480b      	ldr	r0, [pc, #44]	; (8003398 <HAL_ETH_MspInit+0x140>)
 800336a:	f003 fa25 	bl	80067b8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2105      	movs	r1, #5
 8003372:	203d      	movs	r0, #61	; 0x3d
 8003374:	f001 fc88 	bl	8004c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003378:	203d      	movs	r0, #61	; 0x3d
 800337a:	f001 fca1 	bl	8004cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800337e:	bf00      	nop
 8003380:	3738      	adds	r7, #56	; 0x38
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40028000 	.word	0x40028000
 800338c:	40023800 	.word	0x40023800
 8003390:	40021800 	.word	0x40021800
 8003394:	40020800 	.word	0x40020800
 8003398:	40020000 	.word	0x40020000

0800339c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_ETH_RxCpltCallback+0x1c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f00c ff63 	bl	8010274 <osSemaphoreRelease>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000023c 	.word	0x2000023c

080033bc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b090      	sub	sp, #64	; 0x40
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80033c8:	4b5d      	ldr	r3, [pc, #372]	; (8003540 <low_level_init+0x184>)
 80033ca:	4a5e      	ldr	r2, [pc, #376]	; (8003544 <low_level_init+0x188>)
 80033cc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80033ce:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <low_level_init+0x184>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80033d4:	4b5a      	ldr	r3, [pc, #360]	; (8003540 <low_level_init+0x184>)
 80033d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033da:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80033dc:	4b58      	ldr	r3, [pc, #352]	; (8003540 <low_level_init+0x184>)
 80033de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80033e4:	4b56      	ldr	r3, [pc, #344]	; (8003540 <low_level_init+0x184>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80033ea:	2300      	movs	r3, #0
 80033ec:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80033f2:	23e1      	movs	r3, #225	; 0xe1
 80033f4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80033fa:	2300      	movs	r3, #0
 80033fc:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80033fe:	2300      	movs	r3, #0
 8003400:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8003402:	4a4f      	ldr	r2, [pc, #316]	; (8003540 <low_level_init+0x184>)
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800340a:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <low_level_init+0x184>)
 800340c:	2201      	movs	r2, #1
 800340e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <low_level_init+0x184>)
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <low_level_init+0x184>)
 8003418:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800341c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800341e:	4848      	ldr	r0, [pc, #288]	; (8003540 <low_level_init+0x184>)
 8003420:	f002 f846 	bl	80054b0 <HAL_ETH_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800342a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	b2da      	uxtb	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003444:	2304      	movs	r3, #4
 8003446:	4a40      	ldr	r2, [pc, #256]	; (8003548 <low_level_init+0x18c>)
 8003448:	4940      	ldr	r1, [pc, #256]	; (800354c <low_level_init+0x190>)
 800344a:	483d      	ldr	r0, [pc, #244]	; (8003540 <low_level_init+0x184>)
 800344c:	f002 f9ca 	bl	80057e4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003450:	2304      	movs	r3, #4
 8003452:	4a3f      	ldr	r2, [pc, #252]	; (8003550 <low_level_init+0x194>)
 8003454:	493f      	ldr	r1, [pc, #252]	; (8003554 <low_level_init+0x198>)
 8003456:	483a      	ldr	r0, [pc, #232]	; (8003540 <low_level_init+0x184>)
 8003458:	f002 fa2d 	bl	80058b6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2206      	movs	r2, #6
 8003460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <low_level_init+0x184>)
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <low_level_init+0x184>)
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	785a      	ldrb	r2, [r3, #1]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800347c:	4b30      	ldr	r3, [pc, #192]	; (8003540 <low_level_init+0x184>)
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	789a      	ldrb	r2, [r3, #2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <low_level_init+0x184>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	78da      	ldrb	r2, [r3, #3]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003494:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <low_level_init+0x184>)
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	791a      	ldrb	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <low_level_init+0x184>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	795a      	ldrb	r2, [r3, #5]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034ba:	f043 030a 	orr.w	r3, r3, #10
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2101      	movs	r1, #1
 80034ca:	2001      	movs	r0, #1
 80034cc:	f00c fdd0 	bl	8010070 <osSemaphoreNew>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4a21      	ldr	r2, [pc, #132]	; (8003558 <low_level_init+0x19c>)
 80034d4:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f01e f8ea 	bl	80216b8 <memset>
  attributes.name = "EthIf";
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <low_level_init+0x1a0>)
 80034e6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80034e8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80034ee:	2330      	movs	r3, #48	; 0x30
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	461a      	mov	r2, r3
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4819      	ldr	r0, [pc, #100]	; (8003560 <low_level_init+0x1a4>)
 80034fc:	f00c fb9c 	bl	800fc38 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003500:	480f      	ldr	r0, [pc, #60]	; (8003540 <low_level_init+0x184>)
 8003502:	f002 fd00 	bl	8005f06 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003506:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800350a:	461a      	mov	r2, r3
 800350c:	211d      	movs	r1, #29
 800350e:	480c      	ldr	r0, [pc, #48]	; (8003540 <low_level_init+0x184>)
 8003510:	f002 fc2b 	bl	8005d6a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003516:	f043 030b 	orr.w	r3, r3, #11
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	461a      	mov	r2, r3
 8003520:	211d      	movs	r1, #29
 8003522:	4807      	ldr	r0, [pc, #28]	; (8003540 <low_level_init+0x184>)
 8003524:	f002 fc89 	bl	8005e3a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800352c:	461a      	mov	r2, r3
 800352e:	211d      	movs	r1, #29
 8003530:	4803      	ldr	r0, [pc, #12]	; (8003540 <low_level_init+0x184>)
 8003532:	f002 fc1a 	bl	8005d6a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003536:	bf00      	nop
 8003538:	3740      	adds	r7, #64	; 0x40
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	2000b6e8 	.word	0x2000b6e8
 8003544:	40028000 	.word	0x40028000
 8003548:	2000b730 	.word	0x2000b730
 800354c:	20009e18 	.word	0x20009e18
 8003550:	20009e98 	.word	0x20009e98
 8003554:	2000b668 	.word	0x2000b668
 8003558:	2000023c 	.word	0x2000023c
 800355c:	080227d4 	.word	0x080227d4
 8003560:	08003809 	.word	0x08003809

08003564 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800356e:	4b4b      	ldr	r3, [pc, #300]	; (800369c <low_level_output+0x138>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003586:	4b45      	ldr	r3, [pc, #276]	; (800369c <low_level_output+0x138>)
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	e05a      	b.n	800364c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	da03      	bge.n	80035a6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800359e:	23f8      	movs	r3, #248	; 0xf8
 80035a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80035a4:	e05c      	b.n	8003660 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	895b      	ldrh	r3, [r3, #10]
 80035aa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80035b0:	e02f      	b.n	8003612 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	18d0      	adds	r0, r2, r3
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	18d1      	adds	r1, r2, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	f01e f867 	bl	802169c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	da03      	bge.n	80035e4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80035dc:	23f8      	movs	r3, #248	; 0xf8
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80035e2:	e03d      	b.n	8003660 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80035f4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003600:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800360c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800361c:	4293      	cmp	r3, r2
 800361e:	d8c8      	bhi.n	80035b2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	18d0      	adds	r0, r2, r3
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4619      	mov	r1, r3
 8003632:	f01e f833 	bl	802169c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	623b      	str	r3, [r7, #32]
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1a1      	bne.n	8003596 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	4811      	ldr	r0, [pc, #68]	; (800369c <low_level_output+0x138>)
 8003656:	f002 f99b 	bl	8005990 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <low_level_output+0x138>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	f241 0314 	movw	r3, #4116	; 0x1014
 8003668:	4413      	add	r3, r2
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <low_level_output+0x138>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	f241 0314 	movw	r3, #4116	; 0x1014
 800367c:	4413      	add	r3, r2
 800367e:	2220      	movs	r2, #32
 8003680:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <low_level_output+0x138>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f241 0304 	movw	r3, #4100	; 0x1004
 800368a:	4413      	add	r3, r2
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003694:	4618      	mov	r0, r3
 8003696:	3728      	adds	r7, #40	; 0x28
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	2000b6e8 	.word	0x2000b6e8

080036a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	; 0x30
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80036c4:	484f      	ldr	r0, [pc, #316]	; (8003804 <low_level_input+0x164>)
 80036c6:	f002 fa4d 	bl	8005b64 <HAL_ETH_GetReceivedFrame_IT>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <low_level_input+0x34>

    return NULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e092      	b.n	80037fa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <low_level_input+0x164>)
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <low_level_input+0x164>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80036e0:	89fb      	ldrh	r3, [r7, #14]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80036e6:	89fb      	ldrh	r3, [r7, #14]
 80036e8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80036ec:	4619      	mov	r1, r3
 80036ee:	2000      	movs	r0, #0
 80036f0:	f015 fbb4 	bl	8018e5c <pbuf_alloc>
 80036f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d04b      	beq.n	8003794 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80036fc:	4b41      	ldr	r3, [pc, #260]	; (8003804 <low_level_input+0x164>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
 800370a:	e040      	b.n	800378e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	895b      	ldrh	r3, [r3, #10]
 8003710:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003716:	e021      	b.n	800375c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	18d0      	adds	r0, r2, r3
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	18d1      	adds	r1, r2, r3
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	461a      	mov	r2, r3
 8003730:	f01d ffb4 	bl	802169c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	4413      	add	r3, r2
 8003746:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800374a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003756:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003766:	4293      	cmp	r3, r2
 8003768:	d8d6      	bhi.n	8003718 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	18d0      	adds	r0, r2, r3
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4619      	mov	r1, r3
 800377c:	f01d ff8e 	bl	802169c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4413      	add	r3, r2
 8003786:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1bb      	bne.n	800370c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <low_level_input+0x164>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e00b      	b.n	80037b8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3301      	adds	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <low_level_input+0x164>)
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d3ee      	bcc.n	80037a0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <low_level_input+0x164>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <low_level_input+0x164>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80037d0:	4413      	add	r3, r2
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <low_level_input+0x164>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	f241 0314 	movw	r3, #4116	; 0x1014
 80037e4:	4413      	add	r3, r2
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <low_level_input+0x164>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f241 0308 	movw	r3, #4104	; 0x1008
 80037f2:	4413      	add	r3, r2
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3730      	adds	r7, #48	; 0x30
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000b6e8 	.word	0x2000b6e8

08003808 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <ethernetif_input+0x58>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	4618      	mov	r0, r3
 800381e:	f00c fcc3 	bl	80101a8 <osSemaphoreAcquire>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f5      	bne.n	8003814 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003828:	480e      	ldr	r0, [pc, #56]	; (8003864 <ethernetif_input+0x5c>)
 800382a:	f016 f93d 	bl	8019aa8 <sys_mutex_lock>
        p = low_level_input( netif );
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff ff36 	bl	80036a0 <low_level_input>
 8003834:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	68b8      	ldr	r0, [r7, #8]
 8003844:	4798      	blx	r3
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800384c:	68b8      	ldr	r0, [r7, #8]
 800384e:	f015 fde9 	bl	8019424 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003852:	4804      	ldr	r0, [pc, #16]	; (8003864 <ethernetif_input+0x5c>)
 8003854:	f016 f937 	bl	8019ac6 <sys_mutex_unlock>
      } while(p!=NULL);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e4      	bne.n	8003828 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800385e:	e7d9      	b.n	8003814 <ethernetif_input+0xc>
 8003860:	2000023c 	.word	0x2000023c
 8003864:	20011f94 	.word	0x20011f94

08003868 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <ethernetif_init+0x1c>
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <ethernetif_init+0x48>)
 8003878:	f44f 720c 	mov.w	r2, #560	; 0x230
 800387c:	490d      	ldr	r1, [pc, #52]	; (80038b4 <ethernetif_init+0x4c>)
 800387e:	480e      	ldr	r0, [pc, #56]	; (80038b8 <ethernetif_init+0x50>)
 8003880:	f01d ffcc 	bl	802181c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2273      	movs	r2, #115	; 0x73
 8003888:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2274      	movs	r2, #116	; 0x74
 8003890:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <ethernetif_init+0x54>)
 8003898:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <ethernetif_init+0x58>)
 800389e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fd8b 	bl	80033bc <low_level_init>

  return ERR_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	080227dc 	.word	0x080227dc
 80038b4:	08022840 	.word	0x08022840
 80038b8:	08022850 	.word	0x08022850
 80038bc:	08015fed 	.word	0x08015fed
 80038c0:	08003565 	.word	0x08003565

080038c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038c8:	f000 fe6e 	bl	80045a8 <HAL_GetTick>
 80038cc:	4603      	mov	r3, r0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	461a      	mov	r2, r3
 80038ea:	2101      	movs	r1, #1
 80038ec:	4816      	ldr	r0, [pc, #88]	; (8003948 <ethernetif_set_link+0x74>)
 80038ee:	f002 fa3c 	bl	8005d6a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <ethernetif_set_link+0x48>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f015 f96f 	bl	8018bf8 <netif_set_link_up>
 800391a:	e011      	b.n	8003940 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <ethernetif_set_link+0x6c>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f015 f994 	bl	8018c68 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003940:	20c8      	movs	r0, #200	; 0xc8
 8003942:	f00c fa1f 	bl	800fd84 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003946:	e7cd      	b.n	80038e4 <ethernetif_set_link+0x10>
 8003948:	2000b6e8 	.word	0x2000b6e8

0800394c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d05d      	beq.n	8003a2a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <ethernetif_update_config+0xf4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d03f      	beq.n	80039f6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800397a:	2100      	movs	r1, #0
 800397c:	4830      	ldr	r0, [pc, #192]	; (8003a40 <ethernetif_update_config+0xf4>)
 800397e:	f002 fa5c 	bl	8005e3a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003982:	f000 fe11 	bl	80045a8 <HAL_GetTick>
 8003986:	4603      	mov	r3, r0
 8003988:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800398a:	f107 0308 	add.w	r3, r7, #8
 800398e:	461a      	mov	r2, r3
 8003990:	2101      	movs	r1, #1
 8003992:	482b      	ldr	r0, [pc, #172]	; (8003a40 <ethernetif_update_config+0xf4>)
 8003994:	f002 f9e9 	bl	8005d6a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003998:	f000 fe06 	bl	80045a8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a6:	d828      	bhi.n	80039fa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0eb      	beq.n	800398a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80039b2:	f107 0308 	add.w	r3, r7, #8
 80039b6:	461a      	mov	r2, r3
 80039b8:	2110      	movs	r1, #16
 80039ba:	4821      	ldr	r0, [pc, #132]	; (8003a40 <ethernetif_update_config+0xf4>)
 80039bc:	f002 f9d5 	bl	8005d6a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <ethernetif_update_config+0xf4>)
 80039cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	e002      	b.n	80039da <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80039d4:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <ethernetif_update_config+0xf4>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80039e4:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <ethernetif_update_config+0xf4>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	e016      	b.n	8003a1a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <ethernetif_update_config+0xf4>)
 80039ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	e011      	b.n	8003a1a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <ethernetif_update_config+0xb0>
          goto error;
 80039fa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <ethernetif_update_config+0xf4>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <ethernetif_update_config+0xf4>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	2100      	movs	r1, #0
 8003a14:	480a      	ldr	r0, [pc, #40]	; (8003a40 <ethernetif_update_config+0xf4>)
 8003a16:	f002 fa10 	bl	8005e3a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4808      	ldr	r0, [pc, #32]	; (8003a40 <ethernetif_update_config+0xf4>)
 8003a1e:	f002 fad1 	bl	8005fc4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003a22:	4807      	ldr	r0, [pc, #28]	; (8003a40 <ethernetif_update_config+0xf4>)
 8003a24:	f002 fa6f 	bl	8005f06 <HAL_ETH_Start>
 8003a28:	e002      	b.n	8003a30 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <ethernetif_update_config+0xf4>)
 8003a2c:	f002 fa9a 	bl	8005f64 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f807 	bl	8003a44 <ethernetif_notify_conn_changed>
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000b6e8 	.word	0x2000b6e8

08003a44 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a5c:	480d      	ldr	r0, [pc, #52]	; (8003a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a5e:	490e      	ldr	r1, [pc, #56]	; (8003a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a60:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a64:	e002      	b.n	8003a6c <LoopCopyDataInit>

08003a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a6a:	3304      	adds	r3, #4

08003a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a70:	d3f9      	bcc.n	8003a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a72:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a74:	4c0b      	ldr	r4, [pc, #44]	; (8003aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a78:	e001      	b.n	8003a7e <LoopFillZerobss>

08003a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a7c:	3204      	adds	r2, #4

08003a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a80:	d3fb      	bcc.n	8003a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a82:	f000 fd5d 	bl	8004540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a86:	f01d fdc7 	bl	8021618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a8a:	f7fd fd61 	bl	8001550 <main>
  bx  lr    
 8003a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a98:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003a9c:	08025e74 	.word	0x08025e74
  ldr r2, =_sbss
 8003aa0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003aa4:	20011fa8 	.word	0x20011fa8

08003aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aa8:	e7fe      	b.n	8003aa8 <ADC_IRQHandler>

08003aaa <MX_TouchGFX_Init>:
}
/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0
	//test();
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003abc:	2200      	movs	r2, #0
 8003abe:	4912      	ldr	r1, [pc, #72]	; (8003b08 <MX_USB_DEVICE_Init+0x50>)
 8003ac0:	4812      	ldr	r0, [pc, #72]	; (8003b0c <MX_USB_DEVICE_Init+0x54>)
 8003ac2:	f01c fc51 	bl	8020368 <USBD_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8003acc:	f7fd fe56 	bl	800177c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003ad0:	490f      	ldr	r1, [pc, #60]	; (8003b10 <MX_USB_DEVICE_Init+0x58>)
 8003ad2:	480e      	ldr	r0, [pc, #56]	; (8003b0c <MX_USB_DEVICE_Init+0x54>)
 8003ad4:	f01c fc8c 	bl	80203f0 <USBD_RegisterClass>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8003ade:	f7fd fe4d 	bl	800177c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003ae2:	490c      	ldr	r1, [pc, #48]	; (8003b14 <MX_USB_DEVICE_Init+0x5c>)
 8003ae4:	4809      	ldr	r0, [pc, #36]	; (8003b0c <MX_USB_DEVICE_Init+0x54>)
 8003ae6:	f01c fbd3 	bl	8020290 <USBD_CDC_RegisterInterface>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8003af0:	f7fd fe44 	bl	800177c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003af4:	4805      	ldr	r0, [pc, #20]	; (8003b0c <MX_USB_DEVICE_Init+0x54>)
 8003af6:	f01c fca9 	bl	802044c <USBD_Start>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8003b00:	f7fd fe3c 	bl	800177c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000018 	.word	0x20000018
 8003b0c:	2000cf00 	.word	0x2000cf00
 8003b10:	200000a4 	.word	0x200000a4
 8003b14:	20000004 	.word	0x20000004

08003b18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4905      	ldr	r1, [pc, #20]	; (8003b34 <CDC_Init_FS+0x1c>)
 8003b20:	4805      	ldr	r0, [pc, #20]	; (8003b38 <CDC_Init_FS+0x20>)
 8003b22:	f01c fbca 	bl	80202ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003b26:	4905      	ldr	r1, [pc, #20]	; (8003b3c <CDC_Init_FS+0x24>)
 8003b28:	4803      	ldr	r0, [pc, #12]	; (8003b38 <CDC_Init_FS+0x20>)
 8003b2a:	f01c fbdf 	bl	80202ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8003b2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	2000d9d0 	.word	0x2000d9d0
 8003b38:	2000cf00 	.word	0x2000cf00
 8003b3c:	2000d1d0 	.word	0x2000d1d0

08003b40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8003b44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	2b23      	cmp	r3, #35	; 0x23
 8003b64:	d84a      	bhi.n	8003bfc <CDC_Control_FS+0xac>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <CDC_Control_FS+0x1c>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003bfd 	.word	0x08003bfd
 8003b70:	08003bfd 	.word	0x08003bfd
 8003b74:	08003bfd 	.word	0x08003bfd
 8003b78:	08003bfd 	.word	0x08003bfd
 8003b7c:	08003bfd 	.word	0x08003bfd
 8003b80:	08003bfd 	.word	0x08003bfd
 8003b84:	08003bfd 	.word	0x08003bfd
 8003b88:	08003bfd 	.word	0x08003bfd
 8003b8c:	08003bfd 	.word	0x08003bfd
 8003b90:	08003bfd 	.word	0x08003bfd
 8003b94:	08003bfd 	.word	0x08003bfd
 8003b98:	08003bfd 	.word	0x08003bfd
 8003b9c:	08003bfd 	.word	0x08003bfd
 8003ba0:	08003bfd 	.word	0x08003bfd
 8003ba4:	08003bfd 	.word	0x08003bfd
 8003ba8:	08003bfd 	.word	0x08003bfd
 8003bac:	08003bfd 	.word	0x08003bfd
 8003bb0:	08003bfd 	.word	0x08003bfd
 8003bb4:	08003bfd 	.word	0x08003bfd
 8003bb8:	08003bfd 	.word	0x08003bfd
 8003bbc:	08003bfd 	.word	0x08003bfd
 8003bc0:	08003bfd 	.word	0x08003bfd
 8003bc4:	08003bfd 	.word	0x08003bfd
 8003bc8:	08003bfd 	.word	0x08003bfd
 8003bcc:	08003bfd 	.word	0x08003bfd
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003bfd 	.word	0x08003bfd
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	08003bfd 	.word	0x08003bfd
 8003be8:	08003bfd 	.word	0x08003bfd
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003bfd 	.word	0x08003bfd
 8003bf4:	08003bfd 	.word	0x08003bfd
 8003bf8:	08003bfd 	.word	0x08003bfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8003bfc:	bf00      	nop
  }

  return (USBD_OK);
 8003bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4805      	ldr	r0, [pc, #20]	; (8003c30 <CDC_Receive_FS+0x24>)
 8003c1a:	f01c fb67 	bl	80202ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003c1e:	4804      	ldr	r0, [pc, #16]	; (8003c30 <CDC_Receive_FS+0x24>)
 8003c20:	f01c fb78 	bl	8020314 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8003c24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000cf00 	.word	0x2000cf00

08003c34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8003c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2212      	movs	r2, #18
 8003c68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8003c6a:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	20000038 	.word	0x20000038

08003c7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8003c8e:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20000058 	.word	0x20000058

08003ca0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8003cb6:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8003cb8:	f01d fbce 	bl	8021458 <USBD_GetString>
 8003cbc:	e004      	b.n	8003cc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	4904      	ldr	r1, [pc, #16]	; (8003cd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8003cc2:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8003cc4:	f01d fbc8 	bl	8021458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003cc8:	4b02      	ldr	r3, [pc, #8]	; (8003cd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	2000e1d0 	.word	0x2000e1d0
 8003cd8:	08022878 	.word	0x08022878

08003cdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	4904      	ldr	r1, [pc, #16]	; (8003cfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8003cec:	4804      	ldr	r0, [pc, #16]	; (8003d00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8003cee:	f01d fbb3 	bl	8021458 <USBD_GetString>
  return USBD_StrDesc;
 8003cf2:	4b02      	ldr	r3, [pc, #8]	; (8003cfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	2000e1d0 	.word	0x2000e1d0
 8003d00:	08022888 	.word	0x08022888

08003d04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	221a      	movs	r2, #26
 8003d14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8003d16:	f000 f855 	bl	8003dc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8003d1a:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	2000005c 	.word	0x2000005c

08003d28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	4907      	ldr	r1, [pc, #28]	; (8003d5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8003d3e:	4808      	ldr	r0, [pc, #32]	; (8003d60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8003d40:	f01d fb8a 	bl	8021458 <USBD_GetString>
 8003d44:	e004      	b.n	8003d50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	4904      	ldr	r1, [pc, #16]	; (8003d5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8003d4a:	4805      	ldr	r0, [pc, #20]	; (8003d60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8003d4c:	f01d fb84 	bl	8021458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003d50:	4b02      	ldr	r3, [pc, #8]	; (8003d5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000e1d0 	.word	0x2000e1d0
 8003d60:	08022894 	.word	0x08022894

08003d64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4907      	ldr	r1, [pc, #28]	; (8003d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8003d7a:	4808      	ldr	r0, [pc, #32]	; (8003d9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8003d7c:	f01d fb6c 	bl	8021458 <USBD_GetString>
 8003d80:	e004      	b.n	8003d8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4904      	ldr	r1, [pc, #16]	; (8003d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8003d86:	4805      	ldr	r0, [pc, #20]	; (8003d9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8003d88:	f01d fb66 	bl	8021458 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003d8c:	4b02      	ldr	r3, [pc, #8]	; (8003d98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	2000e1d0 	.word	0x2000e1d0
 8003d9c:	080228a0 	.word	0x080228a0

08003da0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	6039      	str	r1, [r7, #0]
 8003daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	220c      	movs	r2, #12
 8003db0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8003db2:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	2000004c 	.word	0x2000004c

08003dc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <Get_SerialNum+0x44>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <Get_SerialNum+0x48>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <Get_SerialNum+0x4c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003dea:	2208      	movs	r2, #8
 8003dec:	4909      	ldr	r1, [pc, #36]	; (8003e14 <Get_SerialNum+0x50>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f814 	bl	8003e1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003df4:	2204      	movs	r2, #4
 8003df6:	4908      	ldr	r1, [pc, #32]	; (8003e18 <Get_SerialNum+0x54>)
 8003df8:	68b8      	ldr	r0, [r7, #8]
 8003dfa:	f000 f80f 	bl	8003e1c <IntToUnicode>
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	1ff0f420 	.word	0x1ff0f420
 8003e0c:	1ff0f424 	.word	0x1ff0f424
 8003e10:	1ff0f428 	.word	0x1ff0f428
 8003e14:	2000005e 	.word	0x2000005e
 8003e18:	2000006e 	.word	0x2000006e

08003e1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
 8003e32:	e027      	b.n	8003e84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	0f1b      	lsrs	r3, r3, #28
 8003e38:	2b09      	cmp	r3, #9
 8003e3a:	d80b      	bhi.n	8003e54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	0f1b      	lsrs	r3, r3, #28
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4619      	mov	r1, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3230      	adds	r2, #48	; 0x30
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e00a      	b.n	8003e6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	0f1b      	lsrs	r3, r3, #28
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4619      	mov	r1, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	440b      	add	r3, r1
 8003e64:	3237      	adds	r2, #55	; 0x37
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	3301      	adds	r3, #1
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	3301      	adds	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
 8003e84:	7dfa      	ldrb	r2, [r7, #23]
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3d3      	bcc.n	8003e34 <IntToUnicode+0x18>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	; 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebc:	d13c      	bne.n	8003f38 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8003ed6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ee8:	230a      	movs	r3, #10
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4814      	ldr	r0, [pc, #80]	; (8003f44 <HAL_PCD_MspInit+0xa8>)
 8003ef4:	f002 fc60 	bl	80067b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f02:	6353      	str	r3, [r2, #52]	; 0x34
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_PCD_MspInit+0xa4>)
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2105      	movs	r1, #5
 8003f2c:	2043      	movs	r0, #67	; 0x43
 8003f2e:	f000 feab 	bl	8004c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003f32:	2043      	movs	r0, #67	; 0x43
 8003f34:	f000 fec4 	bl	8004cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40020000 	.word	0x40020000

08003f48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f01c fabf 	bl	80204e2 <USBD_LL_SetupStage>
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	4619      	mov	r1, r3
 8003f96:	f01c faf9 	bl	802058c <USBD_LL_DataOutStage>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3348      	adds	r3, #72	; 0x48
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f01c fb42 	bl	8020652 <USBD_LL_DataInStage>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f01c fc46 	bl	8020876 <USBD_LL_SOF>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	e008      	b.n	800401e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d102      	bne.n	800401a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e001      	b.n	800401e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800401a:	f7fd fbaf 	bl	800177c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f01c fbe9 	bl	8020800 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004034:	4618      	mov	r0, r3
 8004036:	f01c fba2 	bl	802077e <USBD_LL_Reset>
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004052:	4618      	mov	r0, r3
 8004054:	f01c fbe4 	bl	8020820 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <HAL_PCD_SuspendCallback+0x48>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a03      	ldr	r2, [pc, #12]	; (800408c <HAL_PCD_SuspendCallback+0x48>)
 800407e:	f043 0306 	orr.w	r3, r3, #6
 8004082:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800409e:	4618      	mov	r0, r3
 80040a0:	f01c fbd3 	bl	802084a <USBD_LL_Resume>
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f01c fbfe 	bl	80208c4 <USBD_LL_IsoOUTIncomplete>
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f01c fbdf 	bl	80208aa <USBD_LL_IsoINIncomplete>
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004102:	4618      	mov	r0, r3
 8004104:	f01c fbeb 	bl	80208de <USBD_LL_DevConnected>
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800411e:	4618      	mov	r0, r3
 8004120:	f01c fbe8 	bl	80208f4 <USBD_LL_DevDisconnected>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d13c      	bne.n	80041b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800413c:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <USBD_LL_Init+0x94>)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <USBD_LL_Init+0x94>)
 8004148:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800414c:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <USBD_LL_Init+0x94>)
 800414e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004152:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <USBD_LL_Init+0x94>)
 8004156:	2206      	movs	r2, #6
 8004158:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800415a:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <USBD_LL_Init+0x94>)
 800415c:	2202      	movs	r2, #2
 800415e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <USBD_LL_Init+0x94>)
 8004162:	2200      	movs	r2, #0
 8004164:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <USBD_LL_Init+0x94>)
 8004168:	2202      	movs	r2, #2
 800416a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <USBD_LL_Init+0x94>)
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <USBD_LL_Init+0x94>)
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <USBD_LL_Init+0x94>)
 800417a:	2200      	movs	r2, #0
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <USBD_LL_Init+0x94>)
 8004180:	2200      	movs	r2, #0
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <USBD_LL_Init+0x94>)
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800418a:	480d      	ldr	r0, [pc, #52]	; (80041c0 <USBD_LL_Init+0x94>)
 800418c:	f003 f984 	bl	8007498 <HAL_PCD_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8004196:	f7fd faf1 	bl	800177c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	4808      	ldr	r0, [pc, #32]	; (80041c0 <USBD_LL_Init+0x94>)
 800419e:	f004 fb04 	bl	80087aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80041a2:	2240      	movs	r2, #64	; 0x40
 80041a4:	2100      	movs	r1, #0
 80041a6:	4806      	ldr	r0, [pc, #24]	; (80041c0 <USBD_LL_Init+0x94>)
 80041a8:	f004 fab8 	bl	800871c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	2101      	movs	r1, #1
 80041b0:	4803      	ldr	r0, [pc, #12]	; (80041c0 <USBD_LL_Init+0x94>)
 80041b2:	f004 fab3 	bl	800871c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	2000e3d0 	.word	0x2000e3d0

080041c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80041da:	4618      	mov	r0, r3
 80041dc:	f003 fa80 	bl	80076e0 <HAL_PCD_Start>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f97e 	bl	80044e8 <USBD_Get_USB_Status>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	461a      	mov	r2, r3
 8004208:	4603      	mov	r3, r0
 800420a:	70fb      	strb	r3, [r7, #3]
 800420c:	460b      	mov	r3, r1
 800420e:	70bb      	strb	r3, [r7, #2]
 8004210:	4613      	mov	r3, r2
 8004212:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004222:	78bb      	ldrb	r3, [r7, #2]
 8004224:	883a      	ldrh	r2, [r7, #0]
 8004226:	78f9      	ldrb	r1, [r7, #3]
 8004228:	f003 fe80 	bl	8007f2c <HAL_PCD_EP_Open>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f958 	bl	80044e8 <USBD_Get_USB_Status>
 8004238:	4603      	mov	r3, r0
 800423a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800423c:	7bbb      	ldrb	r3, [r7, #14]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f003 fec9 	bl	8007ffc <HAL_PCD_EP_Close>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f939 	bl	80044e8 <USBD_Get_USB_Status>
 8004276:	4603      	mov	r3, r0
 8004278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800427a:	7bbb      	ldrb	r3, [r7, #14]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 ffa1 	bl	80081ea <HAL_PCD_EP_SetStall>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f91a 	bl	80044e8 <USBD_Get_USB_Status>
 80042b4:	4603      	mov	r3, r0
 80042b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80042b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f003 ffe6 	bl	80082b2 <HAL_PCD_EP_ClrStall>
 80042e6:	4603      	mov	r3, r0
 80042e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f8fb 	bl	80044e8 <USBD_Get_USB_Status>
 80042f2:	4603      	mov	r3, r0
 80042f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80042f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004312:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8004314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da0b      	bge.n	8004334 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	333e      	adds	r3, #62	; 0x3e
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	e00b      	b.n	800434c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800434a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f003 fdb3 	bl	8007ee2 <HAL_PCD_SetAddress>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f8b0 	bl	80044e8 <USBD_Get_USB_Status>
 8004388:	4603      	mov	r3, r0
 800438a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800438c:	7bbb      	ldrb	r3, [r7, #14]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	460b      	mov	r3, r1
 80043a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80043b4:	7af9      	ldrb	r1, [r7, #11]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	f003 fecc 	bl	8008156 <HAL_PCD_EP_Transmit>
 80043be:	4603      	mov	r3, r0
 80043c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f88f 	bl	80044e8 <USBD_Get_USB_Status>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80043ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	460b      	mov	r3, r1
 80043e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80043f6:	7af9      	ldrb	r1, [r7, #11]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	f003 fe48 	bl	8008090 <HAL_PCD_EP_Receive>
 8004400:	4603      	mov	r3, r0
 8004402:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f86e 	bl	80044e8 <USBD_Get_USB_Status>
 800440c:	4603      	mov	r3, r0
 800440e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004410:	7dbb      	ldrb	r3, [r7, #22]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f003 fe78 	bl	8008126 <HAL_PCD_EP_GetRxCount>
 8004436:	4603      	mov	r3, r0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_PCDEx_LPM_Callback+0x18>
 8004452:	2b01      	cmp	r3, #1
 8004454:	d01f      	beq.n	8004496 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8004456:	e03b      	b.n	80044d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8004460:	f000 f83c 	bl	80044dc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800446a:	f023 0306 	bic.w	r3, r3, #6
 800446e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800448e:	4618      	mov	r0, r3
 8004490:	f01c f9db 	bl	802084a <USBD_LL_Resume>
    break;
 8004494:	e01c      	b.n	80044d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80044b4:	4618      	mov	r0, r3
 80044b6:	f01c f9b3 	bl	8020820 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80044c8:	f043 0306 	orr.w	r3, r3, #6
 80044cc:	6113      	str	r3, [r2, #16]
    break;
 80044ce:	bf00      	nop
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80044e0:	f7fd f87a 	bl	80015d8 <SystemClock_Config>
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d817      	bhi.n	800452c <USBD_Get_USB_Status+0x44>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <USBD_Get_USB_Status+0x1c>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004515 	.word	0x08004515
 8004508:	0800451b 	.word	0x0800451b
 800450c:	08004521 	.word	0x08004521
 8004510:	08004527 	.word	0x08004527
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
    break;
 8004518:	e00b      	b.n	8004532 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800451a:	2303      	movs	r3, #3
 800451c:	73fb      	strb	r3, [r7, #15]
    break;
 800451e:	e008      	b.n	8004532 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
    break;
 8004524:	e005      	b.n	8004532 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004526:	2303      	movs	r3, #3
 8004528:	73fb      	strb	r3, [r7, #15]
    break;
 800452a:	e002      	b.n	8004532 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800452c:	2303      	movs	r3, #3
 800452e:	73fb      	strb	r3, [r7, #15]
    break;
 8004530:	bf00      	nop
  }
  return usb_status;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <SystemInit+0x20>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	4a05      	ldr	r2, [pc, #20]	; (8004560 <SystemInit+0x20>)
 800454c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004568:	2003      	movs	r0, #3
 800456a:	f000 fb82 	bl	8004c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800456e:	2000      	movs	r0, #0
 8004570:	f7fd fd54 	bl	800201c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004574:	f7fd fd2a 	bl	8001fcc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_IncTick+0x20>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_IncTick+0x24>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4413      	add	r3, r2
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_IncTick+0x24>)
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000080 	.word	0x20000080
 80045a4:	2000e7d4 	.word	0x2000e7d4

080045a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return uwTick;
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_GetTick+0x14>)
 80045ae:	681b      	ldr	r3, [r3, #0]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	2000e7d4 	.word	0x2000e7d4

080045c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c8:	f7ff ffee 	bl	80045a8 <HAL_GetTick>
 80045cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d005      	beq.n	80045e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_Delay+0x44>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045e6:	bf00      	nop
 80045e8:	f7ff ffde 	bl	80045a8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d8f7      	bhi.n	80045e8 <HAL_Delay+0x28>
  {
  }
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000080 	.word	0x20000080

08004608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e031      	b.n	8004682 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fc f810 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d116      	bne.n	8004674 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_ADC_Init+0x84>)
 800464c:	4013      	ands	r3, r2
 800464e:	f043 0202 	orr.w	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f964 	bl	8004924 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	f043 0201 	orr.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
 8004672:	e001      	b.n	8004678 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	ffffeefd 	.word	0xffffeefd

08004690 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e12a      	b.n	8004902 <HAL_ADC_ConfigChannel+0x272>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	d93a      	bls.n	8004732 <HAL_ADC_ConfigChannel+0xa2>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c4:	d035      	beq.n	8004732 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68d9      	ldr	r1, [r3, #12]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	3b1e      	subs	r3, #30
 80046dc:	2207      	movs	r2, #7
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43da      	mvns	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	400a      	ands	r2, r1
 80046ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a87      	ldr	r2, [pc, #540]	; (8004910 <HAL_ADC_ConfigChannel+0x280>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10a      	bne.n	800470c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68d9      	ldr	r1, [r3, #12]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	061a      	lsls	r2, r3, #24
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800470a:	e035      	b.n	8004778 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68d9      	ldr	r1, [r3, #12]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4618      	mov	r0, r3
 800471e:	4603      	mov	r3, r0
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4403      	add	r3, r0
 8004724:	3b1e      	subs	r3, #30
 8004726:	409a      	lsls	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004730:	e022      	b.n	8004778 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6919      	ldr	r1, [r3, #16]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	4613      	mov	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4413      	add	r3, r2
 8004746:	2207      	movs	r2, #7
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43da      	mvns	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	400a      	ands	r2, r1
 8004754:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6919      	ldr	r1, [r3, #16]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	4618      	mov	r0, r3
 8004768:	4603      	mov	r3, r0
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	4403      	add	r3, r0
 800476e:	409a      	lsls	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b06      	cmp	r3, #6
 800477e:	d824      	bhi.n	80047ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	3b05      	subs	r3, #5
 8004792:	221f      	movs	r2, #31
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43da      	mvns	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	400a      	ands	r2, r1
 80047a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	3b05      	subs	r3, #5
 80047bc:	fa00 f203 	lsl.w	r2, r0, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	635a      	str	r2, [r3, #52]	; 0x34
 80047c8:	e04c      	b.n	8004864 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	d824      	bhi.n	800481c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	3b23      	subs	r3, #35	; 0x23
 80047e4:	221f      	movs	r2, #31
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43da      	mvns	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	400a      	ands	r2, r1
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4618      	mov	r0, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	3b23      	subs	r3, #35	; 0x23
 800480e:	fa00 f203 	lsl.w	r2, r0, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
 800481a:	e023      	b.n	8004864 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	3b41      	subs	r3, #65	; 0x41
 800482e:	221f      	movs	r2, #31
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43da      	mvns	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	400a      	ands	r2, r1
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	4618      	mov	r0, r3
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	3b41      	subs	r3, #65	; 0x41
 8004858:	fa00 f203 	lsl.w	r2, r0, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2a      	ldr	r2, [pc, #168]	; (8004914 <HAL_ADC_ConfigChannel+0x284>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10a      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x1f4>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004876:	d105      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004878:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_ADC_ConfigChannel+0x288>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <HAL_ADC_ConfigChannel+0x288>)
 800487e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004882:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a22      	ldr	r2, [pc, #136]	; (8004914 <HAL_ADC_ConfigChannel+0x284>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d109      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x212>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b12      	cmp	r3, #18
 8004894:	d105      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_ADC_ConfigChannel+0x288>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_ADC_ConfigChannel+0x288>)
 800489c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1b      	ldr	r2, [pc, #108]	; (8004914 <HAL_ADC_ConfigChannel+0x284>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d125      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x268>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a17      	ldr	r2, [pc, #92]	; (8004910 <HAL_ADC_ConfigChannel+0x280>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <HAL_ADC_ConfigChannel+0x22e>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b11      	cmp	r3, #17
 80048bc:	d11c      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80048be:	4b16      	ldr	r3, [pc, #88]	; (8004918 <HAL_ADC_ConfigChannel+0x288>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <HAL_ADC_ConfigChannel+0x288>)
 80048c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <HAL_ADC_ConfigChannel+0x280>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d111      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_ADC_ConfigChannel+0x28c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_ADC_ConfigChannel+0x290>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	0c9a      	lsrs	r2, r3, #18
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80048ea:	e002      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f9      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	10000012 	.word	0x10000012
 8004914:	40012000 	.word	0x40012000
 8004918:	40012300 	.word	0x40012300
 800491c:	20000078 	.word	0x20000078
 8004920:	431bde83 	.word	0x431bde83

08004924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800492c:	4b78      	ldr	r3, [pc, #480]	; (8004b10 <ADC_Init+0x1ec>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a77      	ldr	r2, [pc, #476]	; (8004b10 <ADC_Init+0x1ec>)
 8004932:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004936:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004938:	4b75      	ldr	r3, [pc, #468]	; (8004b10 <ADC_Init+0x1ec>)
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4973      	ldr	r1, [pc, #460]	; (8004b10 <ADC_Init+0x1ec>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6899      	ldr	r1, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <ADC_Init+0x1f0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6899      	ldr	r1, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	e00f      	b.n	8004a1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0202 	bic.w	r2, r2, #2
 8004a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	005a      	lsls	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	3b01      	subs	r3, #1
 8004a78:	035a      	lsls	r2, r3, #13
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	e007      	b.n	8004a94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	051a      	lsls	r2, r3, #20
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ad6:	025a      	lsls	r2, r3, #9
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6899      	ldr	r1, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	029a      	lsls	r2, r3, #10
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012300 	.word	0x40012300
 8004b14:	0f000001 	.word	0x0f000001

08004b18 <__NVIC_SetPriorityGrouping>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <__NVIC_SetPriorityGrouping+0x40>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b34:	4013      	ands	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <__NVIC_SetPriorityGrouping+0x44>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b46:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <__NVIC_SetPriorityGrouping+0x40>)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	60d3      	str	r3, [r2, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000ed00 	.word	0xe000ed00
 8004b5c:	05fa0000 	.word	0x05fa0000

08004b60 <__NVIC_GetPriorityGrouping>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <__NVIC_GetPriorityGrouping+0x18>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 0307 	and.w	r3, r3, #7
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_EnableIRQ>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	db0b      	blt.n	8004ba6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	f003 021f 	and.w	r2, r3, #31
 8004b94:	4907      	ldr	r1, [pc, #28]	; (8004bb4 <__NVIC_EnableIRQ+0x38>)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000e100 	.word	0xe000e100

08004bb8 <__NVIC_SetPriority>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db0a      	blt.n	8004be2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	490c      	ldr	r1, [pc, #48]	; (8004c04 <__NVIC_SetPriority+0x4c>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004be0:	e00a      	b.n	8004bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4908      	ldr	r1, [pc, #32]	; (8004c08 <__NVIC_SetPriority+0x50>)
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	761a      	strb	r2, [r3, #24]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000e100 	.word	0xe000e100
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <NVIC_EncodePriority>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	; 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f1c3 0307 	rsb	r3, r3, #7
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	bf28      	it	cs
 8004c2a:	2304      	movcs	r3, #4
 8004c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d902      	bls.n	8004c3c <NVIC_EncodePriority+0x30>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3b03      	subs	r3, #3
 8004c3a:	e000      	b.n	8004c3e <NVIC_EncodePriority+0x32>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	401a      	ands	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c54:	f04f 31ff 	mov.w	r1, #4294967295
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	43d9      	mvns	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	4313      	orrs	r3, r2
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff4c 	bl	8004b18 <__NVIC_SetPriorityGrouping>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c9a:	f7ff ff61 	bl	8004b60 <__NVIC_GetPriorityGrouping>
 8004c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	6978      	ldr	r0, [r7, #20]
 8004ca6:	f7ff ffb1 	bl	8004c0c <NVIC_EncodePriority>
 8004caa:	4602      	mov	r2, r0
 8004cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff80 	bl	8004bb8 <__NVIC_SetPriority>
}
 8004cb8:	bf00      	nop
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff ff54 	bl	8004b7c <__NVIC_EnableIRQ>
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e054      	b.n	8004d98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	7f5b      	ldrb	r3, [r3, #29]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fb fd20 	bl	8000744 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	791b      	ldrb	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a22      	ldr	r2, [pc, #136]	; (8004da0 <HAL_CRC_Init+0xc4>)
 8004d18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0218 	bic.w	r2, r2, #24
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	e00c      	b.n	8004d46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	461a      	mov	r2, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f834 	bl	8004da4 <HAL_CRCEx_Polynomial_Set>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e028      	b.n	8004d98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	795b      	ldrb	r3, [r3, #5]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295
 8004d56:	611a      	str	r2, [r3, #16]
 8004d58:	e004      	b.n	8004d64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6912      	ldr	r2, [r2, #16]
 8004d62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	04c11db7 	.word	0x04c11db7

08004da4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004db4:	231f      	movs	r3, #31
 8004db6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004db8:	bf00      	nop
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	613a      	str	r2, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <HAL_CRCEx_Polynomial_Set+0x34>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_CRCEx_Polynomial_Set+0x16>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b18      	cmp	r3, #24
 8004ddc:	d846      	bhi.n	8004e6c <HAL_CRCEx_Polynomial_Set+0xc8>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e73 	.word	0x08004e73
 8004de8:	08004e6d 	.word	0x08004e6d
 8004dec:	08004e6d 	.word	0x08004e6d
 8004df0:	08004e6d 	.word	0x08004e6d
 8004df4:	08004e6d 	.word	0x08004e6d
 8004df8:	08004e6d 	.word	0x08004e6d
 8004dfc:	08004e6d 	.word	0x08004e6d
 8004e00:	08004e6d 	.word	0x08004e6d
 8004e04:	08004e61 	.word	0x08004e61
 8004e08:	08004e6d 	.word	0x08004e6d
 8004e0c:	08004e6d 	.word	0x08004e6d
 8004e10:	08004e6d 	.word	0x08004e6d
 8004e14:	08004e6d 	.word	0x08004e6d
 8004e18:	08004e6d 	.word	0x08004e6d
 8004e1c:	08004e6d 	.word	0x08004e6d
 8004e20:	08004e6d 	.word	0x08004e6d
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e6d 	.word	0x08004e6d
 8004e2c:	08004e6d 	.word	0x08004e6d
 8004e30:	08004e6d 	.word	0x08004e6d
 8004e34:	08004e6d 	.word	0x08004e6d
 8004e38:	08004e6d 	.word	0x08004e6d
 8004e3c:	08004e6d 	.word	0x08004e6d
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e49 	.word	0x08004e49
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d913      	bls.n	8004e76 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e52:	e010      	b.n	8004e76 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b07      	cmp	r3, #7
 8004e58:	d90f      	bls.n	8004e7a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e5e:	e00c      	b.n	8004e7a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b0f      	cmp	r3, #15
 8004e64:	d90b      	bls.n	8004e7e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e6a:	e008      	b.n	8004e7e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e70:	e006      	b.n	8004e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e72:	bf00      	nop
 8004e74:	e004      	b.n	8004e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e76:	bf00      	nop
 8004e78:	e002      	b.n	8004e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e7e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 0118 	bic.w	r1, r3, #24
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e069      	b.n	8004f96 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fb fc8c 	bl	80007ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <HAL_DCMI_Init+0xf0>)
 8004ef6:	400b      	ands	r3, r1
 8004ef8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004f0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f1a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f26:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f32:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004f3e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d112      	bne.n	8004f76 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7f1b      	ldrb	r3, [r3, #28]
 8004f54:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	7f5b      	ldrb	r3, [r3, #29]
 8004f5a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004f5c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7f9b      	ldrb	r3, [r3, #30]
 8004f62:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004f64:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7fdb      	ldrb	r3, [r3, #31]
 8004f6c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004f72:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004f74:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 021e 	orr.w	r2, r2, #30
 8004f84:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	ffe0f007 	.word	0xffe0f007

08004fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_DMA_Start_IT+0x26>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e048      	b.n	800505c <HAL_DMA_Start_IT+0xb8>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d137      	bne.n	800504e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f842 	bl	800507c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffc:	223f      	movs	r2, #63	; 0x3f
 8004ffe:	409a      	lsls	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0216 	orr.w	r2, r2, #22
 8005012:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695a      	ldr	r2, [r3, #20]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005022:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0208 	orr.w	r2, r2, #8
 800503a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e005      	b.n	800505a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005056:	2302      	movs	r3, #2
 8005058:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d108      	bne.n	80050bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050ba:	e007      	b.n	80050cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e039      	b.n	800515e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fb fc64 	bl	80009cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	f023 0107 	bic.w	r1, r3, #7
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <HAL_DMA2D_Init+0x90>)
 8005140:	4013      	ands	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d1      	ldr	r1, [r2, #12]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	430b      	orrs	r3, r1
 800514c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	ffffc000 	.word	0xffffc000

0800516c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d026      	beq.n	80051dc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d021      	beq.n	80051dc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051a6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ac:	f043 0201 	orr.w	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2201      	movs	r2, #1
 80051ba:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2204      	movs	r2, #4
 80051c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d026      	beq.n	8005234 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d021      	beq.n	8005234 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051fe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2220      	movs	r2, #32
 8005206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	f043 0202 	orr.w	r2, r3, #2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2204      	movs	r2, #4
 8005218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d026      	beq.n	800528c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005244:	2b00      	cmp	r3, #0
 8005246:	d021      	beq.n	800528c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005256:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	f043 0204 	orr.w	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2204      	movs	r2, #4
 8005270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d013      	beq.n	80052be <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00e      	beq.n	80052be <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2204      	movs	r2, #4
 80052b6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f853 	bl	8005364 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d024      	beq.n	8005312 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01f      	beq.n	8005312 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2202      	movs	r2, #2
 80052e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01f      	beq.n	800535c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01a      	beq.n	800535c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005334:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2210      	movs	r2, #16
 800533c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f80e 	bl	8005378 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_DMA2D_ConfigLayer+0x20>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e079      	b.n	80054a0 <HAL_DMA2D_ConfigLayer+0x114>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	3318      	adds	r3, #24
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80053d6:	4b35      	ldr	r3, [pc, #212]	; (80054ac <HAL_DMA2D_ConfigLayer+0x120>)
 80053d8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b0a      	cmp	r3, #10
 80053e0:	d003      	beq.n	80053ea <HAL_DMA2D_ConfigLayer+0x5e>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b09      	cmp	r3, #9
 80053e8:	d107      	bne.n	80053fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e005      	b.n	8005406 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	061b      	lsls	r3, r3, #24
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d120      	bne.n	800544e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	43db      	mvns	r3, r3
 8005416:	ea02 0103 	and.w	r1, r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	430a      	orrs	r2, r1
 8005422:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b0a      	cmp	r3, #10
 8005434:	d003      	beq.n	800543e <HAL_DMA2D_ConfigLayer+0xb2>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b09      	cmp	r3, #9
 800543c:	d127      	bne.n	800548e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
 800544c:	e01f      	b.n	800548e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	43db      	mvns	r3, r3
 8005458:	ea02 0103 	and.w	r1, r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b0a      	cmp	r3, #10
 8005476:	d003      	beq.n	8005480 <HAL_DMA2D_ConfigLayer+0xf4>
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b09      	cmp	r3, #9
 800547e:	d106      	bne.n	800548e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800548c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	ff03000f 	.word	0xff03000f

080054b0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80054c0:	4ba9      	ldr	r3, [pc, #676]	; (8005768 <HAL_ETH_Init+0x2b8>)
 80054c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e181      	b.n	80057da <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd feb4 	bl	8003258 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f0:	4b9e      	ldr	r3, [pc, #632]	; (800576c <HAL_ETH_Init+0x2bc>)
 80054f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f4:	4a9d      	ldr	r2, [pc, #628]	; (800576c <HAL_ETH_Init+0x2bc>)
 80054f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054fa:	6453      	str	r3, [r2, #68]	; 0x44
 80054fc:	4b9b      	ldr	r3, [pc, #620]	; (800576c <HAL_ETH_Init+0x2bc>)
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005508:	4b99      	ldr	r3, [pc, #612]	; (8005770 <HAL_ETH_Init+0x2c0>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a98      	ldr	r2, [pc, #608]	; (8005770 <HAL_ETH_Init+0x2c0>)
 800550e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005512:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005514:	4b96      	ldr	r3, [pc, #600]	; (8005770 <HAL_ETH_Init+0x2c0>)
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	4994      	ldr	r1, [pc, #592]	; (8005770 <HAL_ETH_Init+0x2c0>)
 800551e:	4313      	orrs	r3, r2
 8005520:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005538:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800553a:	f7ff f835 	bl	80045a8 <HAL_GetTick>
 800553e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8005540:	e011      	b.n	8005566 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8005542:	f7ff f831 	bl	80045a8 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005550:	d909      	bls.n	8005566 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2203      	movs	r2, #3
 8005556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e139      	b.n	80057da <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e4      	bne.n	8005542 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f023 031c 	bic.w	r3, r3, #28
 8005586:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005588:	f003 feac 	bl	80092e4 <HAL_RCC_GetHCLKFreq>
 800558c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	4a78      	ldr	r2, [pc, #480]	; (8005774 <HAL_ETH_Init+0x2c4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d908      	bls.n	80055a8 <HAL_ETH_Init+0xf8>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	4a77      	ldr	r2, [pc, #476]	; (8005778 <HAL_ETH_Init+0x2c8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d804      	bhi.n	80055a8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f043 0308 	orr.w	r3, r3, #8
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	e027      	b.n	80055f8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	4a73      	ldr	r2, [pc, #460]	; (8005778 <HAL_ETH_Init+0x2c8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d908      	bls.n	80055c2 <HAL_ETH_Init+0x112>
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	4a6d      	ldr	r2, [pc, #436]	; (8005768 <HAL_ETH_Init+0x2b8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d204      	bcs.n	80055c2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f043 030c 	orr.w	r3, r3, #12
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	e01a      	b.n	80055f8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	4a68      	ldr	r2, [pc, #416]	; (8005768 <HAL_ETH_Init+0x2b8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d303      	bcc.n	80055d2 <HAL_ETH_Init+0x122>
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	4a6b      	ldr	r2, [pc, #428]	; (800577c <HAL_ETH_Init+0x2cc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d911      	bls.n	80055f6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	4a69      	ldr	r2, [pc, #420]	; (800577c <HAL_ETH_Init+0x2cc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d908      	bls.n	80055ec <HAL_ETH_Init+0x13c>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	4a68      	ldr	r2, [pc, #416]	; (8005780 <HAL_ETH_Init+0x2d0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d804      	bhi.n	80055ec <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e005      	b.n	80055f8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f043 0310 	orr.w	r3, r3, #16
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	e000      	b.n	80055f8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80055f6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8005600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005604:	2100      	movs	r1, #0
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fc17 	bl	8005e3a <HAL_ETH_WritePHYRegister>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8005616:	6939      	ldr	r1, [r7, #16]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fdcd 	bl	80061b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0d7      	b.n	80057da <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800562a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800562e:	f7fe ffc7 	bl	80045c0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 80a4 	beq.w	8005784 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800563c:	f7fe ffb4 	bl	80045a8 <HAL_GetTick>
 8005640:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005642:	f107 030c 	add.w	r3, r7, #12
 8005646:	461a      	mov	r2, r3
 8005648:	2101      	movs	r1, #1
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fb8d 	bl	8005d6a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8005650:	f7fe ffaa 	bl	80045a8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d90f      	bls.n	8005682 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8005666:	6939      	ldr	r1, [r7, #16]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fda5 	bl	80061b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0ab      	b.n	80057da <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0da      	beq.n	8005642 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800568c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005690:	2100      	movs	r1, #0
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fbd1 	bl	8005e3a <HAL_ETH_WritePHYRegister>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80056a2:	6939      	ldr	r1, [r7, #16]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fd87 	bl	80061b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80056b2:	2301      	movs	r3, #1
 80056b4:	e091      	b.n	80057da <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80056b6:	f7fe ff77 	bl	80045a8 <HAL_GetTick>
 80056ba:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	461a      	mov	r2, r3
 80056c2:	2101      	movs	r1, #1
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fb50 	bl	8005d6a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80056ca:	f7fe ff6d 	bl	80045a8 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d8:	4293      	cmp	r3, r2
 80056da:	d90f      	bls.n	80056fc <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80056e0:	6939      	ldr	r1, [r7, #16]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fd68 	bl	80061b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e06e      	b.n	80057da <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0da      	beq.n	80056bc <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005706:	f107 030c 	add.w	r3, r7, #12
 800570a:	461a      	mov	r2, r3
 800570c:	2110      	movs	r1, #16
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fb2b 	bl	8005d6a <HAL_ETH_ReadPHYRegister>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fd49 	bl	80061b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800572e:	2301      	movs	r3, #1
 8005730:	e053      	b.n	80057da <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005742:	60da      	str	r2, [r3, #12]
 8005744:	e002      	b.n	800574c <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	e034      	b.n	80057c8 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	e02f      	b.n	80057c8 <HAL_ETH_Init+0x318>
 8005768:	03938700 	.word	0x03938700
 800576c:	40023800 	.word	0x40023800
 8005770:	40013800 	.word	0x40013800
 8005774:	01312cff 	.word	0x01312cff
 8005778:	02160ebf 	.word	0x02160ebf
 800577c:	05f5e0ff 	.word	0x05f5e0ff
 8005780:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	08db      	lsrs	r3, r3, #3
 800578a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005794:	4313      	orrs	r3, r2
 8005796:	b29b      	uxth	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	2100      	movs	r1, #0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fb4c 	bl	8005e3a <HAL_ETH_WritePHYRegister>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80057ac:	6939      	ldr	r1, [r7, #16]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fd02 	bl	80061b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e00c      	b.n	80057da <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80057c0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80057c4:	f7fe fefc 	bl	80045c0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80057c8:	6939      	ldr	r1, [r7, #16]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fcf4 	bl	80061b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop

080057e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_ETH_DMATxDescListInit+0x20>
 8005800:	2302      	movs	r3, #2
 8005802:	e052      	b.n	80058aa <HAL_ETH_DMATxDescListInit+0xc6>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e030      	b.n	8005882 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	015b      	lsls	r3, r3, #5
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	4413      	add	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005830:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005838:	fb02 f303 	mul.w	r3, r2, r3
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4413      	add	r3, r2
 8005840:	461a      	mov	r2, r3
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	3b01      	subs	r3, #1
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	429a      	cmp	r2, r3
 8005862:	d208      	bcs.n	8005876 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	3301      	adds	r3, #1
 8005868:	015b      	lsls	r3, r3, #5
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	461a      	mov	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	e002      	b.n	800587c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	3301      	adds	r3, #1
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d3ca      	bcc.n	8005820 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	f241 0310 	movw	r3, #4112	; 0x1010
 8005894:	440b      	add	r3, r1
 8005896:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b087      	sub	sp, #28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_ETH_DMARxDescListInit+0x20>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e056      	b.n	8005984 <HAL_ETH_DMARxDescListInit+0xce>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e034      	b.n	800595c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	015b      	lsls	r3, r3, #5
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005902:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800590a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	461a      	mov	r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d105      	bne.n	8005934 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	3b01      	subs	r3, #1
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	d208      	bcs.n	8005950 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3301      	adds	r3, #1
 8005942:	015b      	lsls	r3, r3, #5
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	4413      	add	r3, r2
 8005948:	461a      	mov	r2, r3
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	e002      	b.n	8005956 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3301      	adds	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d3c6      	bcc.n	80058f2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6819      	ldr	r1, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	f241 030c 	movw	r3, #4108	; 0x100c
 800596e:	440b      	add	r3, r1
 8005970:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_ETH_TransmitFrame+0x24>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e0cd      	b.n	8005b50 <HAL_ETH_TransmitFrame+0x1c0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80059da:	2301      	movs	r3, #1
 80059dc:	e0b8      	b.n	8005b50 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da09      	bge.n	80059fc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2212      	movs	r2, #18
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0a9      	b.n	8005b50 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d915      	bls.n	8005a32 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	4a54      	ldr	r2, [pc, #336]	; (8005b5c <HAL_ETH_TransmitFrame+0x1cc>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	0a9b      	lsrs	r3, r3, #10
 8005a10:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4b51      	ldr	r3, [pc, #324]	; (8005b5c <HAL_ETH_TransmitFrame+0x1cc>)
 8005a16:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1a:	0a9b      	lsrs	r3, r3, #10
 8005a1c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e001      	b.n	8005a36 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8005a32:	2301      	movs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d11c      	bne.n	8005a76 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005a4a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005a56:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a66:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a74:	e04b      	b.n	8005b0e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e044      	b.n	8005b06 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a8a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d107      	bne.n	8005aa2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005aaa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d116      	bne.n	8005ae4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005ac4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <HAL_ETH_TransmitFrame+0x1d0>)
 8005aca:	fb02 f203 	mul.w	r2, r2, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005ad6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005ae2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005af2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	3301      	adds	r3, #1
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3b6      	bcc.n	8005a7c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b16:	4413      	add	r3, r2
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b2a:	4413      	add	r3, r2
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	f241 0304 	movw	r3, #4100	; 0x1004
 8005b38:	4413      	add	r3, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	ac02b00b 	.word	0xac02b00b
 8005b60:	fffffa0c 	.word	0xfffffa0c

08005b64 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e074      	b.n	8005c68 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8005b8e:	e05a      	b.n	8005c46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d10d      	bne.n	8005bc2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005bc0:	e041      	b.n	8005c46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10b      	bne.n	8005be8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	629a      	str	r2, [r3, #40]	; 0x28
 8005be6:	e02e      	b.n	8005c46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d103      	bne.n	8005c0a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005c16:	1f1a      	subs	r2, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e010      	b.n	8005c68 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	db02      	blt.n	8005c56 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d99c      	bls.n	8005b90 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c84:	4413      	add	r3, r2
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d112      	bne.n	8005cb6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fd fb83 	bl	800339c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c9e:	4413      	add	r3, r2
 8005ca0:	2240      	movs	r2, #64	; 0x40
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb4:	e01b      	b.n	8005cee <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	f241 0314 	movw	r3, #4116	; 0x1014
 8005cbe:	4413      	add	r3, r2
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d111      	bne.n	8005cee <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f839 	bl	8005d42 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	f241 0314 	movw	r3, #4116	; 0x1014
 8005cd8:	4413      	add	r3, r2
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f241 0314 	movw	r3, #4116	; 0x1014
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cfc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d06:	4413      	add	r3, r2
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d12:	d112      	bne.n	8005d3a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f81e 	bl	8005d56 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d22:	4413      	add	r3, r2
 8005d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d28:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	460b      	mov	r3, r1
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b82      	cmp	r3, #130	; 0x82
 8005d8a:	d101      	bne.n	8005d90 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e050      	b.n	8005e32 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2282      	movs	r2, #130	; 0x82
 8005d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f003 031c 	and.w	r3, r3, #28
 8005da6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8a1b      	ldrh	r3, [r3, #16]
 8005dac:	02db      	lsls	r3, r3, #11
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005db6:	897b      	ldrh	r3, [r7, #10]
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 0302 	bic.w	r3, r3, #2
 8005dca:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ddc:	f7fe fbe4 	bl	80045a8 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005de2:	e015      	b.n	8005e10 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005de4:	f7fe fbe0 	bl	80045a8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df2:	d309      	bcc.n	8005e08 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e014      	b.n	8005e32 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e4      	bne.n	8005de4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b086      	sub	sp, #24
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	460b      	mov	r3, r1
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b42      	cmp	r3, #66	; 0x42
 8005e5a:	d101      	bne.n	8005e60 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e04e      	b.n	8005efe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2242      	movs	r2, #66	; 0x42
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f003 031c 	and.w	r3, r3, #28
 8005e76:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8a1b      	ldrh	r3, [r3, #16]
 8005e7c:	02db      	lsls	r3, r3, #11
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005e86:	897b      	ldrh	r3, [r7, #10]
 8005e88:	019b      	lsls	r3, r3, #6
 8005e8a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005eb6:	f7fe fb77 	bl	80045a8 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005ebc:	e015      	b.n	8005eea <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005ebe:	f7fe fb73 	bl	80045a8 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d309      	bcc.n	8005ee2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e00d      	b.n	8005efe <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e4      	bne.n	8005ebe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_ETH_Start+0x16>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e01f      	b.n	8005f5c <HAL_ETH_Start+0x56>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fb45 	bl	80065bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fb7c 	bl	8006630 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc13 	bl	8006764 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fbb0 	bl	80066a4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fbdd 	bl	8006704 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_ETH_Stop+0x16>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e01f      	b.n	8005fba <HAL_ETH_Stop+0x56>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fba2 	bl	80066d4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fbcf 	bl	8006734 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fb67 	bl	800666a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fbe1 	bl	8006764 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fb27 	bl	80065f6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_ETH_ConfigMAC+0x1c>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e0e4      	b.n	80061aa <HAL_ETH_ConfigMAC+0x1e6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80b1 	beq.w	800615a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4b6c      	ldr	r3, [pc, #432]	; (80061b4 <HAL_ETH_ConfigMAC+0x1f0>)
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8006010:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8006016:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800601c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8006022:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8006028:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800602e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8006034:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800603a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8006040:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8006046:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800604c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8006052:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800606a:	2001      	movs	r0, #1
 800606c:	f7fe faa8 	bl	80045c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8006080:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8006086:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800608c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8006092:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8006098:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800609e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80060aa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80060ac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80060b6:	2001      	movs	r0, #1
 80060b8:	f7fe fa82 	bl	80045c0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80060cc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80060d6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80060e6:	4013      	ands	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80060f4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80060fa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8006100:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8006106:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800610c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006124:	2001      	movs	r0, #1
 8006126:	f7fe fa4b 	bl	80045c0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800614a:	2001      	movs	r0, #1
 800614c:	f7fe fa38 	bl	80045c0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	61da      	str	r2, [r3, #28]
 8006158:	e01e      	b.n	8006198 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006168:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800618a:	2001      	movs	r0, #1
 800618c:	f7fe fa18 	bl	80045c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	ff20810f 	.word	0xff20810f

080061b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b0b0      	sub	sp, #192	; 0xc0
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80061de:	2300      	movs	r3, #0
 80061e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80061e6:	2300      	movs	r3, #0
 80061e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80061fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006202:	663b      	str	r3, [r7, #96]	; 0x60
 8006204:	e001      	b.n	800620a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8006206:	2300      	movs	r3, #0
 8006208:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800620a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800620e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8006210:	2300      	movs	r3, #0
 8006212:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006214:	2300      	movs	r3, #0
 8006216:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8006218:	2300      	movs	r3, #0
 800621a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800621c:	2300      	movs	r3, #0
 800621e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8006220:	2300      	movs	r3, #0
 8006222:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8006224:	2340      	movs	r3, #64	; 0x40
 8006226:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8006228:	2300      	movs	r3, #0
 800622a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800622e:	2300      	movs	r3, #0
 8006230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8006234:	2300      	movs	r3, #0
 8006236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800623a:	2300      	movs	r3, #0
 800623c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8006240:	2300      	movs	r3, #0
 8006242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8006246:	2300      	movs	r3, #0
 8006248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800624c:	2300      	movs	r3, #0
 800624e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8006252:	2300      	movs	r3, #0
 8006254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8006264:	2300      	movs	r3, #0
 8006266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800626a:	2300      	movs	r3, #0
 800626c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800628c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006290:	4bab      	ldr	r3, [pc, #684]	; (8006540 <ETH_MACDMAConfig+0x388>)
 8006292:	4013      	ands	r3, r2
 8006294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8006298:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800629c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800629e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80062a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80062a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80062a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80062aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80062ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80062ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80062b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80062b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80062b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80062ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80062bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80062be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80062c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80062c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80062c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80062c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80062ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80062cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80062ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80062ec:	2001      	movs	r0, #1
 80062ee:	f7fe f967 	bl	80045c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80062fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80062fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006300:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8006302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8006304:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8006306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800630a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800630c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8006310:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8006312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8006316:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8006318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800631c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8006320:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8006328:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800632a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006336:	2001      	movs	r0, #1
 8006338:	f7fe f942 	bl	80045c0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006344:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800634e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006358:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8006364:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006368:	f64f 7341 	movw	r3, #65345	; 0xff41
 800636c:	4013      	ands	r3, r2
 800636e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8006372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006376:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8006378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800637c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800637e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8006382:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8006384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8006388:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800638a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800638e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8006390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8006394:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8006396:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80063a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80063b4:	2001      	movs	r0, #1
 80063b6:	f7fe f903 	bl	80045c0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80063c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80063c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80063c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80063de:	2001      	movs	r0, #1
 80063e0:	f7fe f8ee 	bl	80045c0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80063ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80063f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80063fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006400:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006402:	2300      	movs	r3, #0
 8006404:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800640a:	2300      	movs	r3, #0
 800640c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8006412:	2304      	movs	r3, #4
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8006416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800641c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006420:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800642c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8006432:	2300      	movs	r3, #0
 8006434:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006436:	2300      	movs	r3, #0
 8006438:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	f241 0318 	movw	r3, #4120	; 0x1018
 8006442:	4413      	add	r3, r2
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800644a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800644e:	4b3d      	ldr	r3, [pc, #244]	; (8006544 <ETH_MACDMAConfig+0x38c>)
 8006450:	4013      	ands	r3, r2
 8006452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8006456:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8006458:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800645a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800645c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800645e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8006460:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8006462:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8006464:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8006466:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8006468:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800646a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800646c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800646e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8006472:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8006476:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8006478:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	f241 0318 	movw	r3, #4120	; 0x1018
 800648a:	4413      	add	r3, r2
 800648c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006490:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	f241 0318 	movw	r3, #4120	; 0x1018
 800649a:	4413      	add	r3, r2
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80064a2:	2001      	movs	r0, #1
 80064a4:	f7fe f88c 	bl	80045c0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80064b0:	4413      	add	r3, r2
 80064b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80064b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80064b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80064bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80064be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80064c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80064c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80064c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80064c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80064ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80064ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80064d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80064d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80064dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80064f0:	2001      	movs	r0, #1
 80064f2:	f7fe f865 	bl	80045c0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006502:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10d      	bne.n	8006528 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	f241 031c 	movw	r3, #4124	; 0x101c
 8006514:	4413      	add	r3, r2
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6811      	ldr	r1, [r2, #0]
 800651c:	4a0a      	ldr	r2, [pc, #40]	; (8006548 <ETH_MACDMAConfig+0x390>)
 800651e:	431a      	orrs	r2, r3
 8006520:	f241 031c 	movw	r3, #4124	; 0x101c
 8006524:	440b      	add	r3, r1
 8006526:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	461a      	mov	r2, r3
 800652e:	2100      	movs	r1, #0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f80b 	bl	800654c <ETH_MACAddressConfig>
}
 8006536:	bf00      	nop
 8006538:	37c0      	adds	r7, #192	; 0xc0
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	ff20810f 	.word	0xff20810f
 8006544:	f8de3f23 	.word	0xf8de3f23
 8006548:	00010040 	.word	0x00010040

0800654c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3305      	adds	r3, #5
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	3204      	adds	r2, #4
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <ETH_MACAddressConfig+0x68>)
 800656e:	4413      	add	r3, r2
 8006570:	461a      	mov	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3303      	adds	r3, #3
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	061a      	lsls	r2, r3, #24
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3302      	adds	r3, #2
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	041b      	lsls	r3, r3, #16
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3301      	adds	r3, #1
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	4313      	orrs	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <ETH_MACAddressConfig+0x6c>)
 800659e:	4413      	add	r3, r2
 80065a0:	461a      	mov	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	6013      	str	r3, [r2, #0]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40028040 	.word	0x40028040
 80065b8:	40028044 	.word	0x40028044

080065bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0208 	orr.w	r2, r2, #8
 80065d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80065e0:	2001      	movs	r0, #1
 80065e2:	f7fd ffed 	bl	80045c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	601a      	str	r2, [r3, #0]
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0208 	bic.w	r2, r2, #8
 8006610:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800661a:	2001      	movs	r0, #1
 800661c:	f7fd ffd0 	bl	80045c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0204 	orr.w	r2, r2, #4
 800664a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006654:	2001      	movs	r0, #1
 8006656:	f7fd ffb3 	bl	80045c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0204 	bic.w	r2, r2, #4
 8006684:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800668e:	2001      	movs	r0, #1
 8006690:	f7fd ff96 	bl	80045c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80066b4:	4413      	add	r3, r2
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6811      	ldr	r1, [r2, #0]
 80066bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80066c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80066c4:	440b      	add	r3, r1
 80066c6:	601a      	str	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80066e4:	4413      	add	r3, r2
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6811      	ldr	r1, [r2, #0]
 80066ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80066f4:	440b      	add	r3, r1
 80066f6:	601a      	str	r2, [r3, #0]
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	f241 0318 	movw	r3, #4120	; 0x1018
 8006714:	4413      	add	r3, r2
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6811      	ldr	r1, [r2, #0]
 800671c:	f043 0202 	orr.w	r2, r3, #2
 8006720:	f241 0318 	movw	r3, #4120	; 0x1018
 8006724:	440b      	add	r3, r1
 8006726:	601a      	str	r2, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	f241 0318 	movw	r3, #4120	; 0x1018
 8006744:	4413      	add	r3, r2
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6811      	ldr	r1, [r2, #0]
 800674c:	f023 0202 	bic.w	r2, r3, #2
 8006750:	f241 0318 	movw	r3, #4120	; 0x1018
 8006754:	440b      	add	r3, r1
 8006756:	601a      	str	r2, [r3, #0]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	f241 0318 	movw	r3, #4120	; 0x1018
 8006778:	4413      	add	r3, r2
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6811      	ldr	r1, [r2, #0]
 8006780:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006784:	f241 0318 	movw	r3, #4120	; 0x1018
 8006788:	440b      	add	r3, r1
 800678a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	f241 0318 	movw	r3, #4120	; 0x1018
 8006794:	4413      	add	r3, r2
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800679a:	2001      	movs	r0, #1
 800679c:	f7fd ff10 	bl	80045c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80067aa:	440b      	add	r3, r1
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b089      	sub	sp, #36	; 0x24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	e175      	b.n	8006ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80067d8:	2201      	movs	r2, #1
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4013      	ands	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	f040 8164 	bne.w	8006abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d00b      	beq.n	8006816 <HAL_GPIO_Init+0x5e>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d007      	beq.n	8006816 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800680a:	2b11      	cmp	r3, #17
 800680c:	d003      	beq.n	8006816 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b12      	cmp	r3, #18
 8006814:	d130      	bne.n	8006878 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	2203      	movs	r2, #3
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43db      	mvns	r3, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4013      	ands	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4313      	orrs	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800684c:	2201      	movs	r2, #1
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	43db      	mvns	r3, r3
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	4013      	ands	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	091b      	lsrs	r3, r3, #4
 8006862:	f003 0201 	and.w	r2, r3, #1
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4313      	orrs	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	2203      	movs	r2, #3
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	43db      	mvns	r3, r3
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4013      	ands	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	4313      	orrs	r3, r2
 80068a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d003      	beq.n	80068b8 <HAL_GPIO_Init+0x100>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b12      	cmp	r3, #18
 80068b6:	d123      	bne.n	8006900 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	08da      	lsrs	r2, r3, #3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3208      	adds	r2, #8
 80068c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	220f      	movs	r2, #15
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	43db      	mvns	r3, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	4013      	ands	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	08da      	lsrs	r2, r3, #3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3208      	adds	r2, #8
 80068fa:	69b9      	ldr	r1, [r7, #24]
 80068fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	2203      	movs	r2, #3
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	43db      	mvns	r3, r3
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	4013      	ands	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 0203 	and.w	r2, r3, #3
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4313      	orrs	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80be 	beq.w	8006abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006942:	4b66      	ldr	r3, [pc, #408]	; (8006adc <HAL_GPIO_Init+0x324>)
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	4a65      	ldr	r2, [pc, #404]	; (8006adc <HAL_GPIO_Init+0x324>)
 8006948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800694c:	6453      	str	r3, [r2, #68]	; 0x44
 800694e:	4b63      	ldr	r3, [pc, #396]	; (8006adc <HAL_GPIO_Init+0x324>)
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800695a:	4a61      	ldr	r2, [pc, #388]	; (8006ae0 <HAL_GPIO_Init+0x328>)
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	089b      	lsrs	r3, r3, #2
 8006960:	3302      	adds	r3, #2
 8006962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006966:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	220f      	movs	r2, #15
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	43db      	mvns	r3, r3
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	4013      	ands	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a58      	ldr	r2, [pc, #352]	; (8006ae4 <HAL_GPIO_Init+0x32c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d037      	beq.n	80069f6 <HAL_GPIO_Init+0x23e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a57      	ldr	r2, [pc, #348]	; (8006ae8 <HAL_GPIO_Init+0x330>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d031      	beq.n	80069f2 <HAL_GPIO_Init+0x23a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a56      	ldr	r2, [pc, #344]	; (8006aec <HAL_GPIO_Init+0x334>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d02b      	beq.n	80069ee <HAL_GPIO_Init+0x236>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a55      	ldr	r2, [pc, #340]	; (8006af0 <HAL_GPIO_Init+0x338>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d025      	beq.n	80069ea <HAL_GPIO_Init+0x232>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a54      	ldr	r2, [pc, #336]	; (8006af4 <HAL_GPIO_Init+0x33c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01f      	beq.n	80069e6 <HAL_GPIO_Init+0x22e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a53      	ldr	r2, [pc, #332]	; (8006af8 <HAL_GPIO_Init+0x340>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d019      	beq.n	80069e2 <HAL_GPIO_Init+0x22a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a52      	ldr	r2, [pc, #328]	; (8006afc <HAL_GPIO_Init+0x344>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_GPIO_Init+0x226>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a51      	ldr	r2, [pc, #324]	; (8006b00 <HAL_GPIO_Init+0x348>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00d      	beq.n	80069da <HAL_GPIO_Init+0x222>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a50      	ldr	r2, [pc, #320]	; (8006b04 <HAL_GPIO_Init+0x34c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d007      	beq.n	80069d6 <HAL_GPIO_Init+0x21e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a4f      	ldr	r2, [pc, #316]	; (8006b08 <HAL_GPIO_Init+0x350>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <HAL_GPIO_Init+0x21a>
 80069ce:	2309      	movs	r3, #9
 80069d0:	e012      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069d2:	230a      	movs	r3, #10
 80069d4:	e010      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069d6:	2308      	movs	r3, #8
 80069d8:	e00e      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069da:	2307      	movs	r3, #7
 80069dc:	e00c      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069de:	2306      	movs	r3, #6
 80069e0:	e00a      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069e2:	2305      	movs	r3, #5
 80069e4:	e008      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069e6:	2304      	movs	r3, #4
 80069e8:	e006      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069ea:	2303      	movs	r3, #3
 80069ec:	e004      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e002      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <HAL_GPIO_Init+0x240>
 80069f6:	2300      	movs	r3, #0
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	f002 0203 	and.w	r2, r2, #3
 80069fe:	0092      	lsls	r2, r2, #2
 8006a00:	4093      	lsls	r3, r2
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006a08:	4935      	ldr	r1, [pc, #212]	; (8006ae0 <HAL_GPIO_Init+0x328>)
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	089b      	lsrs	r3, r3, #2
 8006a0e:	3302      	adds	r3, #2
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a16:	4b3d      	ldr	r3, [pc, #244]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4013      	ands	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a3a:	4a34      	ldr	r2, [pc, #208]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006a40:	4b32      	ldr	r3, [pc, #200]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a64:	4a29      	ldr	r2, [pc, #164]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a6a:	4b28      	ldr	r3, [pc, #160]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a8e:	4a1f      	ldr	r2, [pc, #124]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a94:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ab8:	4a14      	ldr	r2, [pc, #80]	; (8006b0c <HAL_GPIO_Init+0x354>)
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	f67f ae86 	bls.w	80067d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
 8006ad0:	3724      	adds	r7, #36	; 0x24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40013800 	.word	0x40013800
 8006ae4:	40020000 	.word	0x40020000
 8006ae8:	40020400 	.word	0x40020400
 8006aec:	40020800 	.word	0x40020800
 8006af0:	40020c00 	.word	0x40020c00
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40021400 	.word	0x40021400
 8006afc:	40021800 	.word	0x40021800
 8006b00:	40021c00 	.word	0x40021c00
 8006b04:	40022000 	.word	0x40022000
 8006b08:	40022400 	.word	0x40022400
 8006b0c:	40013c00 	.word	0x40013c00

08006b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	887b      	ldrh	r3, [r7, #2]
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e001      	b.n	8006b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	807b      	strh	r3, [r7, #2]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b50:	787b      	ldrb	r3, [r7, #1]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006b5c:	e003      	b.n	8006b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006b5e:	887b      	ldrh	r3, [r7, #2]
 8006b60:	041a      	lsls	r2, r3, #16
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	619a      	str	r2, [r3, #24]
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e07f      	b.n	8006c86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fa faac 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	; 0x24
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d107      	bne.n	8006bee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bea:	609a      	str	r2, [r3, #8]
 8006bec:	e006      	b.n	8006bfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006bfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d104      	bne.n	8006c0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6859      	ldr	r1, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <HAL_I2C_Init+0x11c>)
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	ea42 0103 	orr.w	r1, r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	021a      	lsls	r2, r3, #8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69d9      	ldr	r1, [r3, #28]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1a      	ldr	r2, [r3, #32]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	02008000 	.word	0x02008000

08006c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d138      	bne.n	8006d1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e032      	b.n	8006d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2224      	movs	r2, #36	; 0x24
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0201 	bic.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ce6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6819      	ldr	r1, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d139      	bne.n	8006db4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e033      	b.n	8006db6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2224      	movs	r2, #36	; 0x24
 8006d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
	...

08006dc4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e0bf      	b.n	8006f56 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fa fa7e 	bl	80012ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006e06:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6999      	ldr	r1, [r3, #24]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e1c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6899      	ldr	r1, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b4a      	ldr	r3, [pc, #296]	; (8006f60 <HAL_LTDC_Init+0x19c>)
 8006e38:	400b      	ands	r3, r1
 8006e3a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6899      	ldr	r1, [r3, #8]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68d9      	ldr	r1, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4b3e      	ldr	r3, [pc, #248]	; (8006f60 <HAL_LTDC_Init+0x19c>)
 8006e66:	400b      	ands	r3, r1
 8006e68:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	041b      	lsls	r3, r3, #16
 8006e70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68d9      	ldr	r1, [r3, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6919      	ldr	r1, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b33      	ldr	r3, [pc, #204]	; (8006f60 <HAL_LTDC_Init+0x19c>)
 8006e94:	400b      	ands	r3, r1
 8006e96:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	041b      	lsls	r3, r3, #16
 8006e9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6919      	ldr	r1, [r3, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6959      	ldr	r1, [r3, #20]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <HAL_LTDC_Init+0x19c>)
 8006ec2:	400b      	ands	r3, r1
 8006ec4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6959      	ldr	r1, [r3, #20]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0206 	orr.w	r2, r2, #6
 8006f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	f000f800 	.word	0xf000f800

08006f64 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d023      	beq.n	8006fce <HAL_LTDC_IRQHandler+0x6a>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01e      	beq.n	8006fce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0204 	bic.w	r2, r2, #4
 8006f9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fae:	f043 0201 	orr.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2204      	movs	r2, #4
 8006fbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f86f 	bl	80070ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d023      	beq.n	8007020 <HAL_LTDC_IRQHandler+0xbc>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01e      	beq.n	8007020 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0202 	bic.w	r2, r2, #2
 8006ff0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007000:	f043 0202 	orr.w	r2, r3, #2
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f846 	bl	80070ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01b      	beq.n	8007062 <HAL_LTDC_IRQHandler+0xfe>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d016      	beq.n	8007062 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f82f 	bl	80070c0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01b      	beq.n	80070a4 <HAL_LTDC_IRQHandler+0x140>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0308 	and.w	r3, r3, #8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d016      	beq.n	80070a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0208 	bic.w	r2, r2, #8
 8007084:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2208      	movs	r2, #8
 800708c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f818 	bl	80070d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80070e8:	b5b0      	push	{r4, r5, r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_LTDC_ConfigLayer+0x1a>
 80070fe:	2302      	movs	r3, #2
 8007100:	e02c      	b.n	800715c <HAL_LTDC_ConfigLayer+0x74>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2134      	movs	r1, #52	; 0x34
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	4413      	add	r3, r2
 800711e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4614      	mov	r4, r2
 8007126:	461d      	mov	r5, r3
 8007128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800712a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800712c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800712e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f811 	bl	8007164 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2201      	movs	r2, #1
 8007148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bdb0      	pop	{r4, r5, r7, pc}

08007164 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007164:	b480      	push	{r7}
 8007166:	b089      	sub	sp, #36	; 0x24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007180:	4413      	add	r3, r2
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	01db      	lsls	r3, r3, #7
 8007190:	4413      	add	r3, r2
 8007192:	3384      	adds	r3, #132	; 0x84
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	4611      	mov	r1, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	01d2      	lsls	r2, r2, #7
 80071a0:	440a      	add	r2, r1
 80071a2:	3284      	adds	r2, #132	; 0x84
 80071a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80071a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ba:	4413      	add	r3, r2
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	01db      	lsls	r3, r3, #7
 80071c8:	440b      	add	r3, r1
 80071ca:	3384      	adds	r3, #132	; 0x84
 80071cc:	4619      	mov	r1, r3
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071e2:	4413      	add	r3, r2
 80071e4:	041b      	lsls	r3, r3, #16
 80071e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	01db      	lsls	r3, r3, #7
 80071f2:	4413      	add	r3, r2
 80071f4:	3384      	adds	r3, #132	; 0x84
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	4611      	mov	r1, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	01d2      	lsls	r2, r2, #7
 8007202:	440a      	add	r2, r1
 8007204:	3284      	adds	r2, #132	; 0x84
 8007206:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800720a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800721a:	4413      	add	r3, r2
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4619      	mov	r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	01db      	lsls	r3, r3, #7
 8007228:	440b      	add	r3, r1
 800722a:	3384      	adds	r3, #132	; 0x84
 800722c:	4619      	mov	r1, r3
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4313      	orrs	r3, r2
 8007232:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	01db      	lsls	r3, r3, #7
 800723e:	4413      	add	r3, r2
 8007240:	3384      	adds	r3, #132	; 0x84
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	4611      	mov	r1, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	01d2      	lsls	r2, r2, #7
 800724e:	440a      	add	r2, r1
 8007250:	3284      	adds	r2, #132	; 0x84
 8007252:	f023 0307 	bic.w	r3, r3, #7
 8007256:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	01db      	lsls	r3, r3, #7
 8007262:	4413      	add	r3, r2
 8007264:	3384      	adds	r3, #132	; 0x84
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	01db      	lsls	r3, r3, #7
 8007294:	4413      	add	r3, r2
 8007296:	3384      	adds	r3, #132	; 0x84
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	01db      	lsls	r3, r3, #7
 80072a4:	4413      	add	r3, r2
 80072a6:	3384      	adds	r3, #132	; 0x84
 80072a8:	461a      	mov	r2, r3
 80072aa:	2300      	movs	r3, #0
 80072ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072b4:	461a      	mov	r2, r3
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	431a      	orrs	r2, r3
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	431a      	orrs	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4619      	mov	r1, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	01db      	lsls	r3, r3, #7
 80072c8:	440b      	add	r3, r1
 80072ca:	3384      	adds	r3, #132	; 0x84
 80072cc:	4619      	mov	r1, r3
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	01db      	lsls	r3, r3, #7
 80072de:	4413      	add	r3, r2
 80072e0:	3384      	adds	r3, #132	; 0x84
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	4611      	mov	r1, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	01d2      	lsls	r2, r2, #7
 80072ee:	440a      	add	r2, r1
 80072f0:	3284      	adds	r2, #132	; 0x84
 80072f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	01db      	lsls	r3, r3, #7
 8007302:	4413      	add	r3, r2
 8007304:	3384      	adds	r3, #132	; 0x84
 8007306:	461a      	mov	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	4413      	add	r3, r2
 800731a:	3384      	adds	r3, #132	; 0x84
 800731c:	69da      	ldr	r2, [r3, #28]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	440b      	add	r3, r1
 800732a:	3384      	adds	r3, #132	; 0x84
 800732c:	4619      	mov	r1, r3
 800732e:	4b58      	ldr	r3, [pc, #352]	; (8007490 <LTDC_SetConfig+0x32c>)
 8007330:	4013      	ands	r3, r2
 8007332:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	68f9      	ldr	r1, [r7, #12]
 800733e:	6809      	ldr	r1, [r1, #0]
 8007340:	4608      	mov	r0, r1
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	01c9      	lsls	r1, r1, #7
 8007346:	4401      	add	r1, r0
 8007348:	3184      	adds	r1, #132	; 0x84
 800734a:	4313      	orrs	r3, r2
 800734c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	01db      	lsls	r3, r3, #7
 8007358:	4413      	add	r3, r2
 800735a:	3384      	adds	r3, #132	; 0x84
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	01db      	lsls	r3, r3, #7
 8007368:	4413      	add	r3, r2
 800736a:	3384      	adds	r3, #132	; 0x84
 800736c:	461a      	mov	r2, r3
 800736e:	2300      	movs	r3, #0
 8007370:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	01db      	lsls	r3, r3, #7
 800737c:	4413      	add	r3, r2
 800737e:	3384      	adds	r3, #132	; 0x84
 8007380:	461a      	mov	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007390:	2304      	movs	r3, #4
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	e01b      	b.n	80073ce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d102      	bne.n	80073a4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800739e:	2303      	movs	r3, #3
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	e014      	b.n	80073ce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d00b      	beq.n	80073c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d007      	beq.n	80073c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d003      	beq.n	80073c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80073c0:	2b07      	cmp	r3, #7
 80073c2:	d102      	bne.n	80073ca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80073c4:	2302      	movs	r3, #2
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	e001      	b.n	80073ce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	01db      	lsls	r3, r3, #7
 80073d8:	4413      	add	r3, r2
 80073da:	3384      	adds	r3, #132	; 0x84
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	4611      	mov	r1, r2
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	01d2      	lsls	r2, r2, #7
 80073e8:	440a      	add	r2, r1
 80073ea:	3284      	adds	r2, #132	; 0x84
 80073ec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80073f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	fb02 f303 	mul.w	r3, r2, r3
 80073fc:	041a      	lsls	r2, r3, #16
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6859      	ldr	r1, [r3, #4]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	1acb      	subs	r3, r1, r3
 8007408:	69f9      	ldr	r1, [r7, #28]
 800740a:	fb01 f303 	mul.w	r3, r1, r3
 800740e:	3303      	adds	r3, #3
 8007410:	68f9      	ldr	r1, [r7, #12]
 8007412:	6809      	ldr	r1, [r1, #0]
 8007414:	4608      	mov	r0, r1
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	01c9      	lsls	r1, r1, #7
 800741a:	4401      	add	r1, r0
 800741c:	3184      	adds	r1, #132	; 0x84
 800741e:	4313      	orrs	r3, r2
 8007420:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	01db      	lsls	r3, r3, #7
 800742c:	4413      	add	r3, r2
 800742e:	3384      	adds	r3, #132	; 0x84
 8007430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	440b      	add	r3, r1
 800743e:	3384      	adds	r3, #132	; 0x84
 8007440:	4619      	mov	r1, r3
 8007442:	4b14      	ldr	r3, [pc, #80]	; (8007494 <LTDC_SetConfig+0x330>)
 8007444:	4013      	ands	r3, r2
 8007446:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	01db      	lsls	r3, r3, #7
 8007452:	4413      	add	r3, r2
 8007454:	3384      	adds	r3, #132	; 0x84
 8007456:	461a      	mov	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	01db      	lsls	r3, r3, #7
 8007468:	4413      	add	r3, r2
 800746a:	3384      	adds	r3, #132	; 0x84
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	4611      	mov	r1, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	01d2      	lsls	r2, r2, #7
 8007478:	440a      	add	r2, r1
 800747a:	3284      	adds	r2, #132	; 0x84
 800747c:	f043 0301 	orr.w	r3, r3, #1
 8007480:	6013      	str	r3, [r2, #0]
}
 8007482:	bf00      	nop
 8007484:	3724      	adds	r7, #36	; 0x24
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	fffff8f8 	.word	0xfffff8f8
 8007494:	fffff800 	.word	0xfffff800

08007498 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749a:	b08f      	sub	sp, #60	; 0x3c
 800749c:	af0a      	add	r7, sp, #40	; 0x28
 800749e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e116      	b.n	80076d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fc fce9 	bl	8003e9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2203      	movs	r2, #3
 80074ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f007 f866 	bl	800e5ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	687e      	ldr	r6, [r7, #4]
 80074f6:	466d      	mov	r5, sp
 80074f8:	f106 0410 	add.w	r4, r6, #16
 80074fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007508:	e885 0003 	stmia.w	r5, {r0, r1}
 800750c:	1d33      	adds	r3, r6, #4
 800750e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007510:	6838      	ldr	r0, [r7, #0]
 8007512:	f006 ff47 	bl	800e3a4 <USB_CoreInit>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0d7      	b.n	80076d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2100      	movs	r1, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f007 f854 	bl	800e5dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
 8007538:	e04a      	b.n	80075d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800753a:	7bfa      	ldrb	r2, [r7, #15]
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	1a9b      	subs	r3, r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	440b      	add	r3, r1
 8007548:	333d      	adds	r3, #61	; 0x3d
 800754a:	2201      	movs	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800754e:	7bfa      	ldrb	r2, [r7, #15]
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	4613      	mov	r3, r2
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	440b      	add	r3, r1
 800755c:	333c      	adds	r3, #60	; 0x3c
 800755e:	7bfa      	ldrb	r2, [r7, #15]
 8007560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007562:	7bfa      	ldrb	r2, [r7, #15]
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	b298      	uxth	r0, r3
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	1a9b      	subs	r3, r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	3342      	adds	r3, #66	; 0x42
 8007576:	4602      	mov	r2, r0
 8007578:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800757a:	7bfa      	ldrb	r2, [r7, #15]
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	1a9b      	subs	r3, r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	333f      	adds	r3, #63	; 0x3f
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800758e:	7bfa      	ldrb	r2, [r7, #15]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	3344      	adds	r3, #68	; 0x44
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075a2:	7bfa      	ldrb	r2, [r7, #15]
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	3348      	adds	r3, #72	; 0x48
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80075b6:	7bfa      	ldrb	r2, [r7, #15]
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	4613      	mov	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	1a9b      	subs	r3, r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	440b      	add	r3, r1
 80075c4:	3350      	adds	r3, #80	; 0x50
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	3301      	adds	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
 80075d0:	7bfa      	ldrb	r2, [r7, #15]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d3af      	bcc.n	800753a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]
 80075de:	e044      	b.n	800766a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80075e0:	7bfa      	ldrb	r2, [r7, #15]
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075f6:	7bfa      	ldrb	r2, [r7, #15]
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007608:	7bfa      	ldrb	r2, [r7, #15]
 800760a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800760c:	7bfa      	ldrb	r2, [r7, #15]
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007622:	7bfa      	ldrb	r2, [r7, #15]
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007638:	7bfa      	ldrb	r2, [r7, #15]
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800764e:	7bfa      	ldrb	r2, [r7, #15]
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	3301      	adds	r3, #1
 8007668:	73fb      	strb	r3, [r7, #15]
 800766a:	7bfa      	ldrb	r2, [r7, #15]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d3b5      	bcc.n	80075e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	603b      	str	r3, [r7, #0]
 800767a:	687e      	ldr	r6, [r7, #4]
 800767c:	466d      	mov	r5, sp
 800767e:	f106 0410 	add.w	r4, r6, #16
 8007682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800768a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800768e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007692:	1d33      	adds	r3, r6, #4
 8007694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007696:	6838      	ldr	r0, [r7, #0]
 8007698:	f006 ffca 	bl	800e630 <USB_DevInit>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2202      	movs	r2, #2
 80076a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e014      	b.n	80076d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d102      	bne.n	80076cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 f880 	bl	80087cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f008 f822 	bl	800f71a <USB_DevDisconnect>

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_PCD_Start+0x16>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e012      	b.n	800771c <HAL_PCD_Start+0x3c>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f006 ff48 	bl	800e598 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f007 ffe3 	bl	800f6d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007724:	b590      	push	{r4, r7, lr}
 8007726:	b08d      	sub	sp, #52	; 0x34
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f008 f8a1 	bl	800f882 <USB_GetMode>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 83ca 	bne.w	8007edc <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f008 f805 	bl	800f75c <USB_ReadInterrupts>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 83c0 	beq.w	8007eda <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f007 fffc 	bl	800f75c <USB_ReadInterrupts>
 8007764:	4603      	mov	r3, r0
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d107      	bne.n	800777e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695a      	ldr	r2, [r3, #20]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f002 0202 	and.w	r2, r2, #2
 800777c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f007 ffea 	bl	800f75c <USB_ReadInterrupts>
 8007788:	4603      	mov	r3, r0
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b10      	cmp	r3, #16
 8007790:	d161      	bne.n	8007856 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0210 	bic.w	r2, r2, #16
 80077a0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f003 020f 	and.w	r2, r3, #15
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	3304      	adds	r3, #4
 80077c0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	0c5b      	lsrs	r3, r3, #17
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d124      	bne.n	8007818 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d035      	beq.n	8007846 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80077e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	6a38      	ldr	r0, [r7, #32]
 80077ee:	f007 fe50 	bl	800f492 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	091b      	lsrs	r3, r3, #4
 80077fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077fe:	441a      	add	r2, r3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	091b      	lsrs	r3, r3, #4
 800780c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007810:	441a      	add	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	619a      	str	r2, [r3, #24]
 8007816:	e016      	b.n	8007846 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	0c5b      	lsrs	r3, r3, #17
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	2b06      	cmp	r3, #6
 8007822:	d110      	bne.n	8007846 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800782a:	2208      	movs	r2, #8
 800782c:	4619      	mov	r1, r3
 800782e:	6a38      	ldr	r0, [r7, #32]
 8007830:	f007 fe2f 	bl	800f492 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	699a      	ldr	r2, [r3, #24]
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007840:	441a      	add	r2, r3
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699a      	ldr	r2, [r3, #24]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0210 	orr.w	r2, r2, #16
 8007854:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f007 ff7e 	bl	800f75c <USB_ReadInterrupts>
 8007860:	4603      	mov	r3, r0
 8007862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007866:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800786a:	d16e      	bne.n	800794a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f007 ff84 	bl	800f782 <USB_ReadDevAllOutEpInterrupt>
 800787a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800787c:	e062      	b.n	8007944 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d057      	beq.n	8007938 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f007 ffa9 	bl	800f7ea <USB_ReadDevOutEPInterrupt>
 8007898:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00c      	beq.n	80078be <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	461a      	mov	r2, r3
 80078b2:	2301      	movs	r3, #1
 80078b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80078b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fddd 	bl	8008478 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00c      	beq.n	80078e2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	461a      	mov	r2, r3
 80078d6:	2308      	movs	r3, #8
 80078d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80078da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fed7 	bl	8008690 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	461a      	mov	r2, r3
 80078fa:	2310      	movs	r3, #16
 80078fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	2320      	movs	r3, #32
 8007918:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d009      	beq.n	8007938 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	461a      	mov	r2, r3
 8007932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007936:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	3301      	adds	r3, #1
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	085b      	lsrs	r3, r3, #1
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d199      	bne.n	800787e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f007 ff04 	bl	800f75c <USB_ReadInterrupts>
 8007954:	4603      	mov	r3, r0
 8007956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800795a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800795e:	f040 80c0 	bne.w	8007ae2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f007 ff25 	bl	800f7b6 <USB_ReadDevAllInEpInterrupt>
 800796c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007972:	e0b2      	b.n	8007ada <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80a7 	beq.w	8007ace <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f007 ff4b 	bl	800f826 <USB_ReadDevInEPInterrupt>
 8007990:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d057      	beq.n	8007a4c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	2201      	movs	r2, #1
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	43db      	mvns	r3, r3
 80079b6:	69f9      	ldr	r1, [r7, #28]
 80079b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079bc:	4013      	ands	r3, r2
 80079be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	461a      	mov	r2, r3
 80079ce:	2301      	movs	r3, #1
 80079d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d132      	bne.n	8007a40 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	3348      	adds	r3, #72	; 0x48
 80079ea:	6819      	ldr	r1, [r3, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f0:	4613      	mov	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4403      	add	r3, r0
 80079fa:	3344      	adds	r3, #68	; 0x44
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4419      	add	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a04:	4613      	mov	r3, r2
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	1a9b      	subs	r3, r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4403      	add	r3, r0
 8007a0e:	3348      	adds	r3, #72	; 0x48
 8007a10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d113      	bne.n	8007a40 <HAL_PCD_IRQHandler+0x31c>
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	3350      	adds	r3, #80	; 0x50
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d108      	bne.n	8007a40 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	f007 ff54 	bl	800f8e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fc faab 	bl	8003fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d008      	beq.n	8007a68 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	461a      	mov	r2, r3
 8007a64:	2308      	movs	r3, #8
 8007a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d008      	beq.n	8007a84 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7e:	461a      	mov	r2, r3
 8007a80:	2310      	movs	r3, #16
 8007a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	2302      	movs	r3, #2
 8007aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc48 	bl	800835e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f47f af49 	bne.w	8007974 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f007 fe38 	bl	800f75c <USB_ReadInterrupts>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af6:	d122      	bne.n	8007b3e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b06:	f023 0301 	bic.w	r3, r3, #1
 8007b0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d108      	bne.n	8007b28 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b1e:	2100      	movs	r1, #0
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fc fc8d 	bl	8004440 <HAL_PCDEx_LPM_Callback>
 8007b26:	e002      	b.n	8007b2e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fc fab1 	bl	8004090 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695a      	ldr	r2, [r3, #20]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f007 fe0a 	bl	800f75c <USB_ReadInterrupts>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b52:	d112      	bne.n	8007b7a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d102      	bne.n	8007b6a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7fc fa6d 	bl	8004044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695a      	ldr	r2, [r3, #20]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f007 fdec 	bl	800f75c <USB_ReadInterrupts>
 8007b84:	4603      	mov	r3, r0
 8007b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b8e:	d121      	bne.n	8007bd4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695a      	ldr	r2, [r3, #20]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007b9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d111      	bne.n	8007bce <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	f003 020f 	and.w	r2, r3, #15
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fc fc3a 	bl	8004440 <HAL_PCDEx_LPM_Callback>
 8007bcc:	e002      	b.n	8007bd4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fc fa38 	bl	8004044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f007 fdbf 	bl	800f75c <USB_ReadInterrupts>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be8:	f040 80c7 	bne.w	8007d7a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2110      	movs	r1, #16
 8007c06:	4618      	mov	r0, r3
 8007c08:	f006 fe80 	bl	800e90c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c10:	e056      	b.n	8007cc0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c44:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	461a      	mov	r2, r3
 8007c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8a:	0151      	lsls	r1, r2, #5
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	440a      	add	r2, r1
 8007c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007caa:	0151      	lsls	r1, r2, #5
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	440a      	add	r2, r1
 8007cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d3a3      	bcc.n	8007c12 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007cdc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d016      	beq.n	8007d14 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf6:	f043 030b 	orr.w	r3, r3, #11
 8007cfa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0c:	f043 030b 	orr.w	r3, r3, #11
 8007d10:	6453      	str	r3, [r2, #68]	; 0x44
 8007d12:	e015      	b.n	8007d40 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	695a      	ldr	r2, [r3, #20]
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d22:	4619      	mov	r1, r3
 8007d24:	f242 032b 	movw	r3, #8235	; 0x202b
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d3a:	f043 030b 	orr.w	r3, r3, #11
 8007d3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d64:	461a      	mov	r2, r3
 8007d66:	f007 fdbf 	bl	800f8e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	695a      	ldr	r2, [r3, #20]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f007 fcec 	bl	800f75c <USB_ReadInterrupts>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d8e:	d124      	bne.n	8007dda <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f007 fd83 	bl	800f8a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f006 fe15 	bl	800e9ce <USB_GetDevSpeed>
 8007da4:	4603      	mov	r3, r0
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681c      	ldr	r4, [r3, #0]
 8007db0:	f001 fa98 	bl	80092e4 <HAL_RCC_GetHCLKFreq>
 8007db4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f006 fb48 	bl	800e454 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7fc f914 	bl	8003ff2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	695a      	ldr	r2, [r3, #20]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f007 fcbc 	bl	800f75c <USB_ReadInterrupts>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d10a      	bne.n	8007e04 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fc f8f1 	bl	8003fd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	695a      	ldr	r2, [r3, #20]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f002 0208 	and.w	r2, r2, #8
 8007e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f007 fca7 	bl	800f75c <USB_ReadInterrupts>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e18:	d10f      	bne.n	8007e3a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fc f953 	bl	80040d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695a      	ldr	r2, [r3, #20]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f007 fc8c 	bl	800f75c <USB_ReadInterrupts>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e4e:	d10f      	bne.n	8007e70 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7fc f926 	bl	80040ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695a      	ldr	r2, [r3, #20]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f007 fc71 	bl	800f75c <USB_ReadInterrupts>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e84:	d10a      	bne.n	8007e9c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fc f934 	bl	80040f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695a      	ldr	r2, [r3, #20]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f007 fc5b 	bl	800f75c <USB_ReadInterrupts>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d115      	bne.n	8007edc <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fc f924 	bl	8004110 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6859      	ldr	r1, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
 8007ed8:	e000      	b.n	8007edc <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007eda:	bf00      	nop
    }
  }
}
 8007edc:	3734      	adds	r7, #52	; 0x34
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd90      	pop	{r4, r7, pc}

08007ee2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_PCD_SetAddress+0x1a>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e013      	b.n	8007f24 <HAL_PCD_SetAddress+0x42>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	78fa      	ldrb	r2, [r7, #3]
 8007f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f007 fbb9 	bl	800f68c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	70fb      	strb	r3, [r7, #3]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	803b      	strh	r3, [r7, #0]
 8007f42:	4613      	mov	r3, r2
 8007f44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	da0f      	bge.n	8007f72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	f003 020f 	and.w	r2, r3, #15
 8007f58:	4613      	mov	r3, r2
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	1a9b      	subs	r3, r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	3338      	adds	r3, #56	; 0x38
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	3304      	adds	r3, #4
 8007f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	705a      	strb	r2, [r3, #1]
 8007f70:	e00f      	b.n	8007f92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	f003 020f 	and.w	r2, r3, #15
 8007f78:	4613      	mov	r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	4413      	add	r3, r2
 8007f88:	3304      	adds	r3, #4
 8007f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f9e:	883a      	ldrh	r2, [r7, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	78ba      	ldrb	r2, [r7, #2]
 8007fa8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007fbc:	78bb      	ldrb	r3, [r7, #2]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d102      	bne.n	8007fc8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_PCD_EP_Open+0xaa>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e00e      	b.n	8007ff4 <HAL_PCD_EP_Open+0xc8>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f006 fd17 	bl	800ea18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800800c:	2b00      	cmp	r3, #0
 800800e:	da0f      	bge.n	8008030 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	f003 020f 	and.w	r2, r3, #15
 8008016:	4613      	mov	r3, r2
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	1a9b      	subs	r3, r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	3338      	adds	r3, #56	; 0x38
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	4413      	add	r3, r2
 8008024:	3304      	adds	r3, #4
 8008026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	705a      	strb	r2, [r3, #1]
 800802e:	e00f      	b.n	8008050 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	f003 020f 	and.w	r2, r3, #15
 8008036:	4613      	mov	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4413      	add	r3, r2
 8008046:	3304      	adds	r3, #4
 8008048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	b2da      	uxtb	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <HAL_PCD_EP_Close+0x6e>
 8008066:	2302      	movs	r3, #2
 8008068:	e00e      	b.n	8008088 <HAL_PCD_EP_Close+0x8c>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	4618      	mov	r0, r3
 800807a:	f006 fd55 	bl	800eb28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	607a      	str	r2, [r7, #4]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	460b      	mov	r3, r1
 800809e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	f003 020f 	and.w	r2, r3, #15
 80080a6:	4613      	mov	r3, r2
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	3304      	adds	r3, #4
 80080b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2200      	movs	r2, #0
 80080ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2200      	movs	r2, #0
 80080d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080d2:	7afb      	ldrb	r3, [r7, #11]
 80080d4:	f003 030f 	and.w	r3, r3, #15
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d102      	bne.n	80080ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d109      	bne.n	800810a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	6979      	ldr	r1, [r7, #20]
 8008104:	f007 f838 	bl	800f178 <USB_EP0StartXfer>
 8008108:	e008      	b.n	800811c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	6979      	ldr	r1, [r7, #20]
 8008118:	f006 fde2 	bl	800ece0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	f003 020f 	and.w	r2, r3, #15
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008148:	681b      	ldr	r3, [r3, #0]
}
 800814a:	4618      	mov	r0, r3
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b086      	sub	sp, #24
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	460b      	mov	r3, r1
 8008164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	f003 020f 	and.w	r2, r3, #15
 800816c:	4613      	mov	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	3338      	adds	r3, #56	; 0x38
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	3304      	adds	r3, #4
 800817c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2200      	movs	r2, #0
 800818e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2201      	movs	r2, #1
 8008194:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	b2da      	uxtb	r2, r3
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d102      	bne.n	80081b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	6979      	ldr	r1, [r7, #20]
 80081c8:	f006 ffd6 	bl	800f178 <USB_EP0StartXfer>
 80081cc:	e008      	b.n	80081e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	f006 fd80 	bl	800ece0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	f003 020f 	and.w	r2, r3, #15
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d901      	bls.n	8008208 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e050      	b.n	80082aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800820c:	2b00      	cmp	r3, #0
 800820e:	da0f      	bge.n	8008230 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	f003 020f 	and.w	r2, r3, #15
 8008216:	4613      	mov	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	3338      	adds	r3, #56	; 0x38
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	4413      	add	r3, r2
 8008224:	3304      	adds	r3, #4
 8008226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	705a      	strb	r2, [r3, #1]
 800822e:	e00d      	b.n	800824c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	4613      	mov	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	1a9b      	subs	r3, r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	3304      	adds	r3, #4
 8008244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	b2da      	uxtb	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_PCD_EP_SetStall+0x82>
 8008268:	2302      	movs	r3, #2
 800826a:	e01e      	b.n	80082aa <HAL_PCD_EP_SetStall+0xc0>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68f9      	ldr	r1, [r7, #12]
 800827a:	4618      	mov	r0, r3
 800827c:	f007 f932 	bl	800f4e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	b2d9      	uxtb	r1, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800829a:	461a      	mov	r2, r3
 800829c:	f007 fb24 	bl	800f8e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d901      	bls.n	80082d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e042      	b.n	8008356 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80082d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da0f      	bge.n	80082f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	f003 020f 	and.w	r2, r3, #15
 80082de:	4613      	mov	r3, r2
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	1a9b      	subs	r3, r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	3338      	adds	r3, #56	; 0x38
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	4413      	add	r3, r2
 80082ec:	3304      	adds	r3, #4
 80082ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2201      	movs	r2, #1
 80082f4:	705a      	strb	r2, [r3, #1]
 80082f6:	e00f      	b.n	8008318 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	f003 020f 	and.w	r2, r3, #15
 80082fe:	4613      	mov	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	3304      	adds	r3, #4
 8008310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	b2da      	uxtb	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_PCD_EP_ClrStall+0x86>
 8008334:	2302      	movs	r3, #2
 8008336:	e00e      	b.n	8008356 <HAL_PCD_EP_ClrStall+0xa4>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68f9      	ldr	r1, [r7, #12]
 8008346:	4618      	mov	r0, r3
 8008348:	f007 f93a 	bl	800f5c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b08a      	sub	sp, #40	; 0x28
 8008362:	af02      	add	r7, sp, #8
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	1a9b      	subs	r3, r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	3338      	adds	r3, #56	; 0x38
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	3304      	adds	r3, #4
 8008384:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	429a      	cmp	r2, r3
 8008390:	d901      	bls.n	8008396 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e06c      	b.n	8008470 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d902      	bls.n	80083b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	3303      	adds	r3, #3
 80083b6:	089b      	lsrs	r3, r3, #2
 80083b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083ba:	e02b      	b.n	8008414 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	695a      	ldr	r2, [r3, #20]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d902      	bls.n	80083d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	3303      	adds	r3, #3
 80083dc:	089b      	lsrs	r3, r3, #2
 80083de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68d9      	ldr	r1, [r3, #12]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	4603      	mov	r3, r0
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f007 f816 	bl	800f428 <USB_WritePacket>

    ep->xfer_buff  += len;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	441a      	add	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	441a      	add	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	b29b      	uxth	r3, r3
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	429a      	cmp	r2, r3
 8008428:	d809      	bhi.n	800843e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008432:	429a      	cmp	r2, r3
 8008434:	d203      	bcs.n	800843e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1be      	bne.n	80083bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	429a      	cmp	r2, r3
 8008448:	d811      	bhi.n	800846e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	2201      	movs	r2, #1
 8008452:	fa02 f303 	lsl.w	r3, r2, r3
 8008456:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	43db      	mvns	r3, r3
 8008464:	6939      	ldr	r1, [r7, #16]
 8008466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800846a:	4013      	ands	r3, r2
 800846c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	333c      	adds	r3, #60	; 0x3c
 8008490:	3304      	adds	r3, #4
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	f040 80a0 	bne.w	80085f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d015      	beq.n	80084e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4a72      	ldr	r2, [pc, #456]	; (8008688 <PCD_EP_OutXfrComplete_int+0x210>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	f240 80dd 	bls.w	800867e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 80d7 	beq.w	800867e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084dc:	461a      	mov	r2, r3
 80084de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084e2:	6093      	str	r3, [r2, #8]
 80084e4:	e0cb      	b.n	800867e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fc:	461a      	mov	r2, r3
 80084fe:	2320      	movs	r3, #32
 8008500:	6093      	str	r3, [r2, #8]
 8008502:	e0bc      	b.n	800867e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 80b7 	bne.w	800867e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4a5d      	ldr	r2, [pc, #372]	; (8008688 <PCD_EP_OutXfrComplete_int+0x210>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d90f      	bls.n	8008538 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852e:	461a      	mov	r2, r3
 8008530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008534:	6093      	str	r3, [r2, #8]
 8008536:	e0a2      	b.n	800867e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	4613      	mov	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800854a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	0159      	lsls	r1, r3, #5
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	440b      	add	r3, r1
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800855e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4403      	add	r3, r0
 800856e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008572:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4403      	add	r3, r0
 8008596:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4419      	add	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	4613      	mov	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4403      	add	r3, r0
 80085ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d114      	bne.n	80085e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d108      	bne.n	80085e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085da:	461a      	mov	r2, r3
 80085dc:	2101      	movs	r1, #1
 80085de:	f007 f983 	bl	800f8e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fb fcbf 	bl	8003f6c <HAL_PCD_DataOutStageCallback>
 80085ee:	e046      	b.n	800867e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a26      	ldr	r2, [pc, #152]	; (800868c <PCD_EP_OutXfrComplete_int+0x214>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d124      	bne.n	8008642 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	4413      	add	r3, r2
 800860a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860e:	461a      	mov	r2, r3
 8008610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008614:	6093      	str	r3, [r2, #8]
 8008616:	e032      	b.n	800867e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d008      	beq.n	8008634 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862e:	461a      	mov	r2, r3
 8008630:	2320      	movs	r3, #32
 8008632:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fb fc96 	bl	8003f6c <HAL_PCD_DataOutStageCallback>
 8008640:	e01d      	b.n	800867e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d114      	bne.n	8008672 <PCD_EP_OutXfrComplete_int+0x1fa>
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d108      	bne.n	8008672 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800866a:	461a      	mov	r2, r3
 800866c:	2100      	movs	r1, #0
 800866e:	f007 f93b 	bl	800f8e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7fb fc77 	bl	8003f6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	4f54300a 	.word	0x4f54300a
 800868c:	4f54310a 	.word	0x4f54310a

08008690 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	333c      	adds	r3, #60	; 0x3c
 80086a8:	3304      	adds	r3, #4
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	4a15      	ldr	r2, [pc, #84]	; (8008718 <PCD_EP_OutSetupPacket_int+0x88>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d90e      	bls.n	80086e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d009      	beq.n	80086e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086dc:	461a      	mov	r2, r3
 80086de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7fb fc2f 	bl	8003f48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4a0a      	ldr	r2, [pc, #40]	; (8008718 <PCD_EP_OutSetupPacket_int+0x88>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d90c      	bls.n	800870c <PCD_EP_OutSetupPacket_int+0x7c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d108      	bne.n	800870c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6818      	ldr	r0, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008704:	461a      	mov	r2, r3
 8008706:	2101      	movs	r1, #1
 8008708:	f007 f8ee 	bl	800f8e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	4f54300a 	.word	0x4f54300a

0800871c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
 8008728:	4613      	mov	r3, r2
 800872a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d107      	bne.n	800874a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800873a:	883b      	ldrh	r3, [r7, #0]
 800873c:	0419      	lsls	r1, r3, #16
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	430a      	orrs	r2, r1
 8008746:	629a      	str	r2, [r3, #40]	; 0x28
 8008748:	e028      	b.n	800879c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	4413      	add	r3, r2
 8008756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
 800875c:	e00d      	b.n	800877a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	3340      	adds	r3, #64	; 0x40
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4413      	add	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	3301      	adds	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	7bfa      	ldrb	r2, [r7, #15]
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	3b01      	subs	r3, #1
 8008780:	429a      	cmp	r2, r3
 8008782:	d3ec      	bcc.n	800875e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008784:	883b      	ldrh	r3, [r7, #0]
 8008786:	0418      	lsls	r0, r3, #16
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6819      	ldr	r1, [r3, #0]
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	3b01      	subs	r3, #1
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	4302      	orrs	r2, r0
 8008794:	3340      	adds	r3, #64	; 0x40
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	887a      	ldrh	r2, [r7, #2]
 80087bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087fa:	4b05      	ldr	r3, [pc, #20]	; (8008810 <HAL_PCDEx_ActivateLPM+0x44>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	10000003 	.word	0x10000003

08008814 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a04      	ldr	r2, [pc, #16]	; (8008830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800881e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008822:	6013      	str	r3, [r2, #0]
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	40007000 	.word	0x40007000

08008834 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800883e:	4b23      	ldr	r3, [pc, #140]	; (80088cc <HAL_PWREx_EnableOverDrive+0x98>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	4a22      	ldr	r2, [pc, #136]	; (80088cc <HAL_PWREx_EnableOverDrive+0x98>)
 8008844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008848:	6413      	str	r3, [r2, #64]	; 0x40
 800884a:	4b20      	ldr	r3, [pc, #128]	; (80088cc <HAL_PWREx_EnableOverDrive+0x98>)
 800884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008856:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800885c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008860:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008862:	f7fb fea1 	bl	80045a8 <HAL_GetTick>
 8008866:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008868:	e009      	b.n	800887e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800886a:	f7fb fe9d 	bl	80045a8 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008878:	d901      	bls.n	800887e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e022      	b.n	80088c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800887e:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d1ee      	bne.n	800886a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0f      	ldr	r2, [pc, #60]	; (80088d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008896:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008898:	f7fb fe86 	bl	80045a8 <HAL_GetTick>
 800889c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800889e:	e009      	b.n	80088b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80088a0:	f7fb fe82 	bl	80045a8 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ae:	d901      	bls.n	80088b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e007      	b.n	80088c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80088b4:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c0:	d1ee      	bne.n	80088a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40023800 	.word	0x40023800
 80088d0:	40007000 	.word	0x40007000

080088d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af02      	add	r7, sp, #8
 80088da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80088dc:	f7fb fe64 	bl	80045a8 <HAL_GetTick>
 80088e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e067      	b.n	80089bc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7f8 ff6d 	bl	80017e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008906:	f241 3188 	movw	r1, #5000	; 0x1388
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f85e 	bl	80089cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	021a      	lsls	r2, r3, #8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	2120      	movs	r1, #32
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f856 	bl	80089e8 <QSPI_WaitFlagStateUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d135      	bne.n	80089b2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <HAL_QSPI_Init+0xf0>)
 800894e:	4013      	ands	r3, r2
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6852      	ldr	r2, [r2, #4]
 8008954:	0611      	lsls	r1, r2, #24
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68d2      	ldr	r2, [r2, #12]
 800895a:	4311      	orrs	r1, r2
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	69d2      	ldr	r2, [r2, #28]
 8008960:	4311      	orrs	r1, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6a12      	ldr	r2, [r2, #32]
 8008966:	4311      	orrs	r1, r2
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	430b      	orrs	r3, r1
 800896e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <HAL_QSPI_Init+0xf4>)
 8008978:	4013      	ands	r3, r2
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6912      	ldr	r2, [r2, #16]
 800897e:	0411      	lsls	r1, r2, #16
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6952      	ldr	r2, [r2, #20]
 8008984:	4311      	orrs	r1, r2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6992      	ldr	r2, [r2, #24]
 800898a:	4311      	orrs	r1, r2
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	430b      	orrs	r3, r1
 8008992:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0201 	orr.w	r2, r2, #1
 80089a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80089ba:	7afb      	ldrb	r3, [r7, #11]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	00ffff2f 	.word	0x00ffff2f
 80089c8:	ffe0f8fe 	.word	0xffe0f8fe

080089cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	649a      	str	r2, [r3, #72]	; 0x48
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80089f8:	e01a      	b.n	8008a30 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d016      	beq.n	8008a30 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a02:	f7fb fdd1 	bl	80045a8 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d302      	bcc.n	8008a18 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a24:	f043 0201 	orr.w	r2, r3, #1
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e00e      	b.n	8008a4e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bf14      	ite	ne
 8008a3e:	2301      	movne	r3, #1
 8008a40:	2300      	moveq	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d1d6      	bne.n	80089fa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008a60:	2300      	movs	r3, #0
 8008a62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e291      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8087 	beq.w	8008b8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a7c:	4b96      	ldr	r3, [pc, #600]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f003 030c 	and.w	r3, r3, #12
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d00c      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a88:	4b93      	ldr	r3, [pc, #588]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 030c 	and.w	r3, r3, #12
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d112      	bne.n	8008aba <HAL_RCC_OscConfig+0x62>
 8008a94:	4b90      	ldr	r3, [pc, #576]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aa0:	d10b      	bne.n	8008aba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa2:	4b8d      	ldr	r3, [pc, #564]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d06c      	beq.n	8008b88 <HAL_RCC_OscConfig+0x130>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d168      	bne.n	8008b88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e26b      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac2:	d106      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x7a>
 8008ac4:	4b84      	ldr	r3, [pc, #528]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a83      	ldr	r2, [pc, #524]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	e02e      	b.n	8008b30 <HAL_RCC_OscConfig+0xd8>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10c      	bne.n	8008af4 <HAL_RCC_OscConfig+0x9c>
 8008ada:	4b7f      	ldr	r3, [pc, #508]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a7e      	ldr	r2, [pc, #504]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	4b7c      	ldr	r3, [pc, #496]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a7b      	ldr	r2, [pc, #492]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	e01d      	b.n	8008b30 <HAL_RCC_OscConfig+0xd8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008afc:	d10c      	bne.n	8008b18 <HAL_RCC_OscConfig+0xc0>
 8008afe:	4b76      	ldr	r3, [pc, #472]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a75      	ldr	r2, [pc, #468]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	4b73      	ldr	r3, [pc, #460]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a72      	ldr	r2, [pc, #456]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e00b      	b.n	8008b30 <HAL_RCC_OscConfig+0xd8>
 8008b18:	4b6f      	ldr	r3, [pc, #444]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a6e      	ldr	r2, [pc, #440]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	4b6c      	ldr	r3, [pc, #432]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a6b      	ldr	r2, [pc, #428]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d013      	beq.n	8008b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b38:	f7fb fd36 	bl	80045a8 <HAL_GetTick>
 8008b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b40:	f7fb fd32 	bl	80045a8 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b64      	cmp	r3, #100	; 0x64
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e21f      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b52:	4b61      	ldr	r3, [pc, #388]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0f0      	beq.n	8008b40 <HAL_RCC_OscConfig+0xe8>
 8008b5e:	e014      	b.n	8008b8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b60:	f7fb fd22 	bl	80045a8 <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b68:	f7fb fd1e 	bl	80045a8 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b64      	cmp	r3, #100	; 0x64
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e20b      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b7a:	4b57      	ldr	r3, [pc, #348]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f0      	bne.n	8008b68 <HAL_RCC_OscConfig+0x110>
 8008b86:	e000      	b.n	8008b8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d069      	beq.n	8008c6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b96:	4b50      	ldr	r3, [pc, #320]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ba2:	4b4d      	ldr	r3, [pc, #308]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 030c 	and.w	r3, r3, #12
 8008baa:	2b08      	cmp	r3, #8
 8008bac:	d11c      	bne.n	8008be8 <HAL_RCC_OscConfig+0x190>
 8008bae:	4b4a      	ldr	r3, [pc, #296]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d116      	bne.n	8008be8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bba:	4b47      	ldr	r3, [pc, #284]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x17a>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d001      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e1df      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd2:	4b41      	ldr	r3, [pc, #260]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	493d      	ldr	r1, [pc, #244]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008be6:	e040      	b.n	8008c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d023      	beq.n	8008c38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bf0:	4b39      	ldr	r3, [pc, #228]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a38      	ldr	r2, [pc, #224]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfc:	f7fb fcd4 	bl	80045a8 <HAL_GetTick>
 8008c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c02:	e008      	b.n	8008c16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c04:	f7fb fcd0 	bl	80045a8 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e1bd      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c16:	4b30      	ldr	r3, [pc, #192]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f0      	beq.n	8008c04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c22:	4b2d      	ldr	r3, [pc, #180]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4929      	ldr	r1, [pc, #164]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	600b      	str	r3, [r1, #0]
 8008c36:	e018      	b.n	8008c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c38:	4b27      	ldr	r3, [pc, #156]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a26      	ldr	r2, [pc, #152]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c3e:	f023 0301 	bic.w	r3, r3, #1
 8008c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c44:	f7fb fcb0 	bl	80045a8 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c4c:	f7fb fcac 	bl	80045a8 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e199      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c5e:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f0      	bne.n	8008c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d038      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d019      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c7e:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c82:	4a15      	ldr	r2, [pc, #84]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8a:	f7fb fc8d 	bl	80045a8 <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c92:	f7fb fc89 	bl	80045a8 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e176      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x23a>
 8008cb0:	e01a      	b.n	8008ce8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cb2:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb6:	4a08      	ldr	r2, [pc, #32]	; (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cbe:	f7fb fc73 	bl	80045a8 <HAL_GetTick>
 8008cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cc4:	e00a      	b.n	8008cdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cc6:	f7fb fc6f 	bl	80045a8 <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d903      	bls.n	8008cdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e15c      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
 8008cd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cdc:	4b91      	ldr	r3, [pc, #580]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1ee      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0304 	and.w	r3, r3, #4
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80a4 	beq.w	8008e3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cf6:	4b8b      	ldr	r3, [pc, #556]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10d      	bne.n	8008d1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d02:	4b88      	ldr	r3, [pc, #544]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	4a87      	ldr	r2, [pc, #540]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d0e:	4b85      	ldr	r3, [pc, #532]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d16:	60bb      	str	r3, [r7, #8]
 8008d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d1e:	4b82      	ldr	r3, [pc, #520]	; (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d118      	bne.n	8008d5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008d2a:	4b7f      	ldr	r3, [pc, #508]	; (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a7e      	ldr	r2, [pc, #504]	; (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d36:	f7fb fc37 	bl	80045a8 <HAL_GetTick>
 8008d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d3c:	e008      	b.n	8008d50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d3e:	f7fb fc33 	bl	80045a8 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b64      	cmp	r3, #100	; 0x64
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e120      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d50:	4b75      	ldr	r3, [pc, #468]	; (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d106      	bne.n	8008d72 <HAL_RCC_OscConfig+0x31a>
 8008d64:	4b6f      	ldr	r3, [pc, #444]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d68:	4a6e      	ldr	r2, [pc, #440]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d70:	e02d      	b.n	8008dce <HAL_RCC_OscConfig+0x376>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10c      	bne.n	8008d94 <HAL_RCC_OscConfig+0x33c>
 8008d7a:	4b6a      	ldr	r3, [pc, #424]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7e:	4a69      	ldr	r2, [pc, #420]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	6713      	str	r3, [r2, #112]	; 0x70
 8008d86:	4b67      	ldr	r3, [pc, #412]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8a:	4a66      	ldr	r2, [pc, #408]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d8c:	f023 0304 	bic.w	r3, r3, #4
 8008d90:	6713      	str	r3, [r2, #112]	; 0x70
 8008d92:	e01c      	b.n	8008dce <HAL_RCC_OscConfig+0x376>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2b05      	cmp	r3, #5
 8008d9a:	d10c      	bne.n	8008db6 <HAL_RCC_OscConfig+0x35e>
 8008d9c:	4b61      	ldr	r3, [pc, #388]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da0:	4a60      	ldr	r2, [pc, #384]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008da2:	f043 0304 	orr.w	r3, r3, #4
 8008da6:	6713      	str	r3, [r2, #112]	; 0x70
 8008da8:	4b5e      	ldr	r3, [pc, #376]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	4a5d      	ldr	r2, [pc, #372]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dae:	f043 0301 	orr.w	r3, r3, #1
 8008db2:	6713      	str	r3, [r2, #112]	; 0x70
 8008db4:	e00b      	b.n	8008dce <HAL_RCC_OscConfig+0x376>
 8008db6:	4b5b      	ldr	r3, [pc, #364]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dba:	4a5a      	ldr	r2, [pc, #360]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc2:	4b58      	ldr	r3, [pc, #352]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc6:	4a57      	ldr	r2, [pc, #348]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dc8:	f023 0304 	bic.w	r3, r3, #4
 8008dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d015      	beq.n	8008e02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd6:	f7fb fbe7 	bl	80045a8 <HAL_GetTick>
 8008dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ddc:	e00a      	b.n	8008df4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dde:	f7fb fbe3 	bl	80045a8 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e0ce      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df4:	4b4b      	ldr	r3, [pc, #300]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0ee      	beq.n	8008dde <HAL_RCC_OscConfig+0x386>
 8008e00:	e014      	b.n	8008e2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e02:	f7fb fbd1 	bl	80045a8 <HAL_GetTick>
 8008e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e08:	e00a      	b.n	8008e20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0a:	f7fb fbcd 	bl	80045a8 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e0b8      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e20:	4b40      	ldr	r3, [pc, #256]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ee      	bne.n	8008e0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d105      	bne.n	8008e3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e32:	4b3c      	ldr	r3, [pc, #240]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	4a3b      	ldr	r2, [pc, #236]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 80a4 	beq.w	8008f90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e48:	4b36      	ldr	r3, [pc, #216]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 030c 	and.w	r3, r3, #12
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d06b      	beq.n	8008f2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d149      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5c:	4b31      	ldr	r3, [pc, #196]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a30      	ldr	r2, [pc, #192]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e68:	f7fb fb9e 	bl	80045a8 <HAL_GetTick>
 8008e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e70:	f7fb fb9a 	bl	80045a8 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e087      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e82:	4b28      	ldr	r3, [pc, #160]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1f0      	bne.n	8008e70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69da      	ldr	r2, [r3, #28]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	019b      	lsls	r3, r3, #6
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	041b      	lsls	r3, r3, #16
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	061b      	lsls	r3, r3, #24
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	4a1b      	ldr	r2, [pc, #108]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008eb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ebc:	4b19      	ldr	r3, [pc, #100]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a18      	ldr	r2, [pc, #96]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec8:	f7fb fb6e 	bl	80045a8 <HAL_GetTick>
 8008ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed0:	f7fb fb6a 	bl	80045a8 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e057      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0f0      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x478>
 8008eee:	e04f      	b.n	8008f90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a0b      	ldr	r2, [pc, #44]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008efc:	f7fb fb54 	bl	80045a8 <HAL_GetTick>
 8008f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f02:	e008      	b.n	8008f16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f04:	f7fb fb50 	bl	80045a8 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d901      	bls.n	8008f16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e03d      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f16:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f0      	bne.n	8008f04 <HAL_RCC_OscConfig+0x4ac>
 8008f22:	e035      	b.n	8008f90 <HAL_RCC_OscConfig+0x538>
 8008f24:	40023800 	.word	0x40023800
 8008f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008f2c:	4b1b      	ldr	r3, [pc, #108]	; (8008f9c <HAL_RCC_OscConfig+0x544>)
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d028      	beq.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d121      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d11a      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d111      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	3b01      	subs	r3, #1
 8008f76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d001      	beq.n	8008f90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40023800 	.word	0x40023800

08008fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0d0      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb8:	4b6a      	ldr	r3, [pc, #424]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d910      	bls.n	8008fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fc6:	4b67      	ldr	r3, [pc, #412]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f023 020f 	bic.w	r2, r3, #15
 8008fce:	4965      	ldr	r1, [pc, #404]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fd6:	4b63      	ldr	r3, [pc, #396]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 030f 	and.w	r3, r3, #15
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d001      	beq.n	8008fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e0b8      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d020      	beq.n	8009036 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009000:	4b59      	ldr	r3, [pc, #356]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	4a58      	ldr	r2, [pc, #352]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800900a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009018:	4b53      	ldr	r3, [pc, #332]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	4a52      	ldr	r2, [pc, #328]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800901e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009024:	4b50      	ldr	r3, [pc, #320]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	494d      	ldr	r1, [pc, #308]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009032:	4313      	orrs	r3, r2
 8009034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d040      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d107      	bne.n	800905a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800904a:	4b47      	ldr	r3, [pc, #284]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d115      	bne.n	8009082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e07f      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d107      	bne.n	8009072 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009062:	4b41      	ldr	r3, [pc, #260]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e073      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009072:	4b3d      	ldr	r3, [pc, #244]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e06b      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009082:	4b39      	ldr	r3, [pc, #228]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f023 0203 	bic.w	r2, r3, #3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4936      	ldr	r1, [pc, #216]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009090:	4313      	orrs	r3, r2
 8009092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009094:	f7fb fa88 	bl	80045a8 <HAL_GetTick>
 8009098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800909a:	e00a      	b.n	80090b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800909c:	f7fb fa84 	bl	80045a8 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e053      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b2:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 020c 	and.w	r2, r3, #12
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d1eb      	bne.n	800909c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090c4:	4b27      	ldr	r3, [pc, #156]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d210      	bcs.n	80090f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b24      	ldr	r3, [pc, #144]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f023 020f 	bic.w	r2, r3, #15
 80090da:	4922      	ldr	r1, [pc, #136]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	4313      	orrs	r3, r2
 80090e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e2:	4b20      	ldr	r3, [pc, #128]	; (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d001      	beq.n	80090f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e032      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d008      	beq.n	8009112 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009100:	4b19      	ldr	r3, [pc, #100]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	4916      	ldr	r1, [pc, #88]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800910e:	4313      	orrs	r3, r2
 8009110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0308 	and.w	r3, r3, #8
 800911a:	2b00      	cmp	r3, #0
 800911c:	d009      	beq.n	8009132 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	490e      	ldr	r1, [pc, #56]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800912e:	4313      	orrs	r3, r2
 8009130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009132:	f000 f821 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 8009136:	4602      	mov	r2, r0
 8009138:	4b0b      	ldr	r3, [pc, #44]	; (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	091b      	lsrs	r3, r3, #4
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	490a      	ldr	r1, [pc, #40]	; (800916c <HAL_RCC_ClockConfig+0x1cc>)
 8009144:	5ccb      	ldrb	r3, [r1, r3]
 8009146:	fa22 f303 	lsr.w	r3, r2, r3
 800914a:	4a09      	ldr	r2, [pc, #36]	; (8009170 <HAL_RCC_ClockConfig+0x1d0>)
 800914c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <HAL_RCC_ClockConfig+0x1d4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4618      	mov	r0, r3
 8009154:	f7f8 ff62 	bl	800201c <HAL_InitTick>

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40023c00 	.word	0x40023c00
 8009168:	40023800 	.word	0x40023800
 800916c:	08025bc8 	.word	0x08025bc8
 8009170:	20000078 	.word	0x20000078
 8009174:	2000007c 	.word	0x2000007c

08009178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009178:	b5b0      	push	{r4, r5, r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800917e:	2100      	movs	r1, #0
 8009180:	6079      	str	r1, [r7, #4]
 8009182:	2100      	movs	r1, #0
 8009184:	60f9      	str	r1, [r7, #12]
 8009186:	2100      	movs	r1, #0
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800918a:	2100      	movs	r1, #0
 800918c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800918e:	4952      	ldr	r1, [pc, #328]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009190:	6889      	ldr	r1, [r1, #8]
 8009192:	f001 010c 	and.w	r1, r1, #12
 8009196:	2908      	cmp	r1, #8
 8009198:	d00d      	beq.n	80091b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800919a:	2908      	cmp	r1, #8
 800919c:	f200 8094 	bhi.w	80092c8 <HAL_RCC_GetSysClockFreq+0x150>
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d002      	beq.n	80091aa <HAL_RCC_GetSysClockFreq+0x32>
 80091a4:	2904      	cmp	r1, #4
 80091a6:	d003      	beq.n	80091b0 <HAL_RCC_GetSysClockFreq+0x38>
 80091a8:	e08e      	b.n	80092c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80091aa:	4b4c      	ldr	r3, [pc, #304]	; (80092dc <HAL_RCC_GetSysClockFreq+0x164>)
 80091ac:	60bb      	str	r3, [r7, #8]
      break;
 80091ae:	e08e      	b.n	80092ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80091b0:	4b4b      	ldr	r3, [pc, #300]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80091b2:	60bb      	str	r3, [r7, #8]
      break;
 80091b4:	e08b      	b.n	80092ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091b6:	4948      	ldr	r1, [pc, #288]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80091b8:	6849      	ldr	r1, [r1, #4]
 80091ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80091be:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80091c0:	4945      	ldr	r1, [pc, #276]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80091c2:	6849      	ldr	r1, [r1, #4]
 80091c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d024      	beq.n	8009216 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091cc:	4942      	ldr	r1, [pc, #264]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80091ce:	6849      	ldr	r1, [r1, #4]
 80091d0:	0989      	lsrs	r1, r1, #6
 80091d2:	4608      	mov	r0, r1
 80091d4:	f04f 0100 	mov.w	r1, #0
 80091d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80091dc:	f04f 0500 	mov.w	r5, #0
 80091e0:	ea00 0204 	and.w	r2, r0, r4
 80091e4:	ea01 0305 	and.w	r3, r1, r5
 80091e8:	493d      	ldr	r1, [pc, #244]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80091ea:	fb01 f003 	mul.w	r0, r1, r3
 80091ee:	2100      	movs	r1, #0
 80091f0:	fb01 f102 	mul.w	r1, r1, r2
 80091f4:	1844      	adds	r4, r0, r1
 80091f6:	493a      	ldr	r1, [pc, #232]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80091f8:	fba2 0101 	umull	r0, r1, r2, r1
 80091fc:	1863      	adds	r3, r4, r1
 80091fe:	4619      	mov	r1, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	461a      	mov	r2, r3
 8009204:	f04f 0300 	mov.w	r3, #0
 8009208:	f7f7 f852 	bl	80002b0 <__aeabi_uldivmod>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4613      	mov	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	e04a      	b.n	80092ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009216:	4b30      	ldr	r3, [pc, #192]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	099b      	lsrs	r3, r3, #6
 800921c:	461a      	mov	r2, r3
 800921e:	f04f 0300 	mov.w	r3, #0
 8009222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009226:	f04f 0100 	mov.w	r1, #0
 800922a:	ea02 0400 	and.w	r4, r2, r0
 800922e:	ea03 0501 	and.w	r5, r3, r1
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	f04f 0300 	mov.w	r3, #0
 800923e:	014b      	lsls	r3, r1, #5
 8009240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009244:	0142      	lsls	r2, r0, #5
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	1b00      	subs	r0, r0, r4
 800924c:	eb61 0105 	sbc.w	r1, r1, r5
 8009250:	f04f 0200 	mov.w	r2, #0
 8009254:	f04f 0300 	mov.w	r3, #0
 8009258:	018b      	lsls	r3, r1, #6
 800925a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800925e:	0182      	lsls	r2, r0, #6
 8009260:	1a12      	subs	r2, r2, r0
 8009262:	eb63 0301 	sbc.w	r3, r3, r1
 8009266:	f04f 0000 	mov.w	r0, #0
 800926a:	f04f 0100 	mov.w	r1, #0
 800926e:	00d9      	lsls	r1, r3, #3
 8009270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009274:	00d0      	lsls	r0, r2, #3
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	1912      	adds	r2, r2, r4
 800927c:	eb45 0303 	adc.w	r3, r5, r3
 8009280:	f04f 0000 	mov.w	r0, #0
 8009284:	f04f 0100 	mov.w	r1, #0
 8009288:	0299      	lsls	r1, r3, #10
 800928a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800928e:	0290      	lsls	r0, r2, #10
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4610      	mov	r0, r2
 8009296:	4619      	mov	r1, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	461a      	mov	r2, r3
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	f7f7 f806 	bl	80002b0 <__aeabi_uldivmod>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4613      	mov	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	3301      	adds	r3, #1
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c4:	60bb      	str	r3, [r7, #8]
      break;
 80092c6:	e002      	b.n	80092ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092c8:	4b04      	ldr	r3, [pc, #16]	; (80092dc <HAL_RCC_GetSysClockFreq+0x164>)
 80092ca:	60bb      	str	r3, [r7, #8]
      break;
 80092cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092ce:	68bb      	ldr	r3, [r7, #8]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bdb0      	pop	{r4, r5, r7, pc}
 80092d8:	40023800 	.word	0x40023800
 80092dc:	00f42400 	.word	0x00f42400
 80092e0:	017d7840 	.word	0x017d7840

080092e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092e8:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80092ea:	681b      	ldr	r3, [r3, #0]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	20000078 	.word	0x20000078

080092fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009300:	f7ff fff0 	bl	80092e4 <HAL_RCC_GetHCLKFreq>
 8009304:	4602      	mov	r2, r0
 8009306:	4b05      	ldr	r3, [pc, #20]	; (800931c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	0a9b      	lsrs	r3, r3, #10
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	4903      	ldr	r1, [pc, #12]	; (8009320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009312:	5ccb      	ldrb	r3, [r1, r3]
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009318:	4618      	mov	r0, r3
 800931a:	bd80      	pop	{r7, pc}
 800931c:	40023800 	.word	0x40023800
 8009320:	08025bd8 	.word	0x08025bd8

08009324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009328:	f7ff ffdc 	bl	80092e4 <HAL_RCC_GetHCLKFreq>
 800932c:	4602      	mov	r2, r0
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	0b5b      	lsrs	r3, r3, #13
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	4903      	ldr	r1, [pc, #12]	; (8009348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800933a:	5ccb      	ldrb	r3, [r1, r3]
 800933c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009340:	4618      	mov	r0, r3
 8009342:	bd80      	pop	{r7, pc}
 8009344:	40023800 	.word	0x40023800
 8009348:	08025bd8 	.word	0x08025bd8

0800934c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	220f      	movs	r2, #15
 800935a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800935c:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <HAL_RCC_GetClockConfig+0x5c>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0203 	and.w	r2, r3, #3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009368:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <HAL_RCC_GetClockConfig+0x5c>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009374:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <HAL_RCC_GetClockConfig+0x5c>)
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009380:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <HAL_RCC_GetClockConfig+0x5c>)
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	08db      	lsrs	r3, r3, #3
 8009386:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800938e:	4b07      	ldr	r3, [pc, #28]	; (80093ac <HAL_RCC_GetClockConfig+0x60>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 020f 	and.w	r2, r3, #15
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	601a      	str	r2, [r3, #0]
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	40023800 	.word	0x40023800
 80093ac:	40023c00 	.word	0x40023c00

080093b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d012      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80093d8:	4b69      	ldr	r3, [pc, #420]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	4a68      	ldr	r2, [pc, #416]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80093e2:	6093      	str	r3, [r2, #8]
 80093e4:	4b66      	ldr	r3, [pc, #408]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ec:	4964      	ldr	r1, [pc, #400]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80093fa:	2301      	movs	r3, #1
 80093fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d017      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800940a:	4b5d      	ldr	r3, [pc, #372]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800940c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009418:	4959      	ldr	r1, [pc, #356]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800941a:	4313      	orrs	r3, r2
 800941c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009428:	d101      	bne.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800942a:	2301      	movs	r3, #1
 800942c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009436:	2301      	movs	r3, #1
 8009438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d017      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009446:	4b4e      	ldr	r3, [pc, #312]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800944c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	494a      	ldr	r1, [pc, #296]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009456:	4313      	orrs	r3, r2
 8009458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009464:	d101      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009466:	2301      	movs	r3, #1
 8009468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009472:	2301      	movs	r3, #1
 8009474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009482:	2301      	movs	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 808b 	beq.w	80095aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009494:	4b3a      	ldr	r3, [pc, #232]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	4a39      	ldr	r2, [pc, #228]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800949a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800949e:	6413      	str	r3, [r2, #64]	; 0x40
 80094a0:	4b37      	ldr	r3, [pc, #220]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094a8:	60bb      	str	r3, [r7, #8]
 80094aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80094ac:	4b35      	ldr	r3, [pc, #212]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a34      	ldr	r2, [pc, #208]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094b8:	f7fb f876 	bl	80045a8 <HAL_GetTick>
 80094bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80094be:	e008      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c0:	f7fb f872 	bl	80045a8 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b64      	cmp	r3, #100	; 0x64
 80094cc:	d901      	bls.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e357      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80094d2:	4b2c      	ldr	r3, [pc, #176]	; (8009584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0f0      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094de:	4b28      	ldr	r3, [pc, #160]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d035      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d02e      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094fc:	4b20      	ldr	r3, [pc, #128]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009506:	4b1e      	ldr	r3, [pc, #120]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950a:	4a1d      	ldr	r2, [pc, #116]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800950c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009512:	4b1b      	ldr	r3, [pc, #108]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	4a1a      	ldr	r2, [pc, #104]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800951c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800951e:	4a18      	ldr	r2, [pc, #96]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009524:	4b16      	ldr	r3, [pc, #88]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b01      	cmp	r3, #1
 800952e:	d114      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009530:	f7fb f83a 	bl	80045a8 <HAL_GetTick>
 8009534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009536:	e00a      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009538:	f7fb f836 	bl	80045a8 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	f241 3288 	movw	r2, #5000	; 0x1388
 8009546:	4293      	cmp	r3, r2
 8009548:	d901      	bls.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e319      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d0ee      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009566:	d111      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009576:	400b      	ands	r3, r1
 8009578:	4901      	ldr	r1, [pc, #4]	; (8009580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800957a:	4313      	orrs	r3, r2
 800957c:	608b      	str	r3, [r1, #8]
 800957e:	e00b      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009580:	40023800 	.word	0x40023800
 8009584:	40007000 	.word	0x40007000
 8009588:	0ffffcff 	.word	0x0ffffcff
 800958c:	4bb1      	ldr	r3, [pc, #708]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	4ab0      	ldr	r2, [pc, #704]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009596:	6093      	str	r3, [r2, #8]
 8009598:	4bae      	ldr	r3, [pc, #696]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800959a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a4:	49ab      	ldr	r1, [pc, #684]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d010      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095b6:	4ba7      	ldr	r3, [pc, #668]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095bc:	4aa5      	ldr	r2, [pc, #660]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80095c6:	4ba3      	ldr	r3, [pc, #652]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d0:	49a0      	ldr	r1, [pc, #640]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095e4:	4b9b      	ldr	r3, [pc, #620]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095f2:	4998      	ldr	r1, [pc, #608]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009606:	4b93      	ldr	r3, [pc, #588]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009614:	498f      	ldr	r1, [pc, #572]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009616:	4313      	orrs	r3, r2
 8009618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00a      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009628:	4b8a      	ldr	r3, [pc, #552]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800962a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009636:	4987      	ldr	r1, [pc, #540]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009638:	4313      	orrs	r3, r2
 800963a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800964a:	4b82      	ldr	r3, [pc, #520]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800964c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009658:	497e      	ldr	r1, [pc, #504]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800965a:	4313      	orrs	r3, r2
 800965c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00a      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800966c:	4b79      	ldr	r3, [pc, #484]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009672:	f023 0203 	bic.w	r2, r3, #3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	4976      	ldr	r1, [pc, #472]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00a      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800968e:	4b71      	ldr	r3, [pc, #452]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009694:	f023 020c 	bic.w	r2, r3, #12
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800969c:	496d      	ldr	r1, [pc, #436]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00a      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80096b0:	4b68      	ldr	r3, [pc, #416]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096be:	4965      	ldr	r1, [pc, #404]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80096d2:	4b60      	ldr	r3, [pc, #384]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e0:	495c      	ldr	r1, [pc, #368]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80096f4:	4b57      	ldr	r3, [pc, #348]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009702:	4954      	ldr	r1, [pc, #336]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009704:	4313      	orrs	r3, r2
 8009706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009716:	4b4f      	ldr	r3, [pc, #316]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009724:	494b      	ldr	r1, [pc, #300]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009726:	4313      	orrs	r3, r2
 8009728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009738:	4b46      	ldr	r3, [pc, #280]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800973a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800973e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009746:	4943      	ldr	r1, [pc, #268]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009748:	4313      	orrs	r3, r2
 800974a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800975a:	4b3e      	ldr	r3, [pc, #248]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800975c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009768:	493a      	ldr	r1, [pc, #232]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800976a:	4313      	orrs	r3, r2
 800976c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800977c:	4b35      	ldr	r3, [pc, #212]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800977e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800978a:	4932      	ldr	r1, [pc, #200]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d011      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800979e:	4b2d      	ldr	r3, [pc, #180]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ac:	4929      	ldr	r1, [pc, #164]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097bc:	d101      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80097be:	2301      	movs	r3, #1
 80097c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80097ce:	2301      	movs	r3, #1
 80097d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097de:	4b1d      	ldr	r3, [pc, #116]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ec:	4919      	ldr	r1, [pc, #100]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009800:	4b14      	ldr	r3, [pc, #80]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009810:	4910      	ldr	r1, [pc, #64]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009812:	4313      	orrs	r3, r2
 8009814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d006      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 80d9 	beq.w	80099de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800982c:	4b09      	ldr	r3, [pc, #36]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a08      	ldr	r2, [pc, #32]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009838:	f7fa feb6 	bl	80045a8 <HAL_GetTick>
 800983c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800983e:	e00b      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009840:	f7fa feb2 	bl	80045a8 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	2b64      	cmp	r3, #100	; 0x64
 800984c:	d904      	bls.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e197      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009852:	bf00      	nop
 8009854:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009858:	4b6c      	ldr	r3, [pc, #432]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1ed      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d021      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009874:	2b00      	cmp	r3, #0
 8009876:	d11d      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009878:	4b64      	ldr	r3, [pc, #400]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800987a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800987e:	0c1b      	lsrs	r3, r3, #16
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009886:	4b61      	ldr	r3, [pc, #388]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800988c:	0e1b      	lsrs	r3, r3, #24
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	019a      	lsls	r2, r3, #6
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	041b      	lsls	r3, r3, #16
 800989e:	431a      	orrs	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	061b      	lsls	r3, r3, #24
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	071b      	lsls	r3, r3, #28
 80098ac:	4957      	ldr	r1, [pc, #348]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d004      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098c8:	d00a      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d02e      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098de:	d129      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80098e0:	4b4a      	ldr	r3, [pc, #296]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80098ee:	4b47      	ldr	r3, [pc, #284]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098f4:	0f1b      	lsrs	r3, r3, #28
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	019a      	lsls	r2, r3, #6
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	041b      	lsls	r3, r3, #16
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	061b      	lsls	r3, r3, #24
 800990e:	431a      	orrs	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	071b      	lsls	r3, r3, #28
 8009914:	493d      	ldr	r1, [pc, #244]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009916:	4313      	orrs	r3, r2
 8009918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800991c:	4b3b      	ldr	r3, [pc, #236]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800991e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009922:	f023 021f 	bic.w	r2, r3, #31
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	3b01      	subs	r3, #1
 800992c:	4937      	ldr	r1, [pc, #220]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800992e:	4313      	orrs	r3, r2
 8009930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01d      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009940:	4b32      	ldr	r3, [pc, #200]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009946:	0e1b      	lsrs	r3, r3, #24
 8009948:	f003 030f 	and.w	r3, r3, #15
 800994c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800994e:	4b2f      	ldr	r3, [pc, #188]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009954:	0f1b      	lsrs	r3, r3, #28
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	019a      	lsls	r2, r3, #6
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	041b      	lsls	r3, r3, #16
 8009968:	431a      	orrs	r2, r3
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	061b      	lsls	r3, r3, #24
 800996e:	431a      	orrs	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	071b      	lsls	r3, r3, #28
 8009974:	4925      	ldr	r1, [pc, #148]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009976:	4313      	orrs	r3, r2
 8009978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d011      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	019a      	lsls	r2, r3, #6
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	041b      	lsls	r3, r3, #16
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	061b      	lsls	r3, r3, #24
 800999c:	431a      	orrs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	071b      	lsls	r3, r3, #28
 80099a4:	4919      	ldr	r1, [pc, #100]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80099ac:	4b17      	ldr	r3, [pc, #92]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a16      	ldr	r2, [pc, #88]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099b8:	f7fa fdf6 	bl	80045a8 <HAL_GetTick>
 80099bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099be:	e008      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80099c0:	f7fa fdf2 	bl	80045a8 <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b64      	cmp	r3, #100	; 0x64
 80099cc:	d901      	bls.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e0d7      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80099d2:	4b0e      	ldr	r3, [pc, #56]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f0      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	f040 80cd 	bne.w	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a08      	ldr	r2, [pc, #32]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099f2:	f7fa fdd9 	bl	80045a8 <HAL_GetTick>
 80099f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80099f8:	e00a      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80099fa:	f7fa fdd5 	bl	80045a8 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b64      	cmp	r3, #100	; 0x64
 8009a06:	d903      	bls.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e0ba      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009a0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a10:	4b5e      	ldr	r3, [pc, #376]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a1c:	d0ed      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d009      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d02e      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d12a      	bne.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009a46:	4b51      	ldr	r3, [pc, #324]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4c:	0c1b      	lsrs	r3, r3, #16
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009a54:	4b4d      	ldr	r3, [pc, #308]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5a:	0f1b      	lsrs	r3, r3, #28
 8009a5c:	f003 0307 	and.w	r3, r3, #7
 8009a60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	019a      	lsls	r2, r3, #6
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	041b      	lsls	r3, r3, #16
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	061b      	lsls	r3, r3, #24
 8009a74:	431a      	orrs	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	071b      	lsls	r3, r3, #28
 8009a7a:	4944      	ldr	r1, [pc, #272]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009a82:	4b42      	ldr	r3, [pc, #264]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a90:	3b01      	subs	r3, #1
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	493d      	ldr	r1, [pc, #244]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d022      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ab0:	d11d      	bne.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ab2:	4b36      	ldr	r3, [pc, #216]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab8:	0e1b      	lsrs	r3, r3, #24
 8009aba:	f003 030f 	and.w	r3, r3, #15
 8009abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ac0:	4b32      	ldr	r3, [pc, #200]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	0f1b      	lsrs	r3, r3, #28
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	019a      	lsls	r2, r3, #6
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	431a      	orrs	r2, r3
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	061b      	lsls	r3, r3, #24
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	071b      	lsls	r3, r3, #28
 8009ae6:	4929      	ldr	r1, [pc, #164]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d028      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009afa:	4b24      	ldr	r3, [pc, #144]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b00:	0e1b      	lsrs	r3, r3, #24
 8009b02:	f003 030f 	and.w	r3, r3, #15
 8009b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b08:	4b20      	ldr	r3, [pc, #128]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0e:	0c1b      	lsrs	r3, r3, #16
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	019a      	lsls	r2, r3, #6
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	041b      	lsls	r3, r3, #16
 8009b20:	431a      	orrs	r2, r3
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	061b      	lsls	r3, r3, #24
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	071b      	lsls	r3, r3, #28
 8009b2e:	4917      	ldr	r1, [pc, #92]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009b36:	4b15      	ldr	r3, [pc, #84]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	4911      	ldr	r1, [pc, #68]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009b4c:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0e      	ldr	r2, [pc, #56]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b58:	f7fa fd26 	bl	80045a8 <HAL_GetTick>
 8009b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b60:	f7fa fd22 	bl	80045a8 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b64      	cmp	r3, #100	; 0x64
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e007      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b72:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b7e:	d1ef      	bne.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3720      	adds	r7, #32
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	40023800 	.word	0x40023800

08009b90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009bae:	f040 808c 	bne.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009bb2:	4b95      	ldr	r3, [pc, #596]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009bc0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc8:	d07c      	beq.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bd0:	d87d      	bhi.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d004      	beq.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bde:	d039      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009be0:	e075      	b.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009be2:	4b89      	ldr	r3, [pc, #548]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d108      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009bee:	4b86      	ldr	r3, [pc, #536]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bf6:	4a85      	ldr	r2, [pc, #532]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	e007      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009c00:	4b81      	ldr	r3, [pc, #516]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c08:	4a81      	ldr	r2, [pc, #516]	; (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009c10:	4b7d      	ldr	r3, [pc, #500]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c16:	0e1b      	lsrs	r3, r3, #24
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009c1e:	4b7a      	ldr	r3, [pc, #488]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c24:	099b      	lsrs	r3, r3, #6
 8009c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	fb02 f203 	mul.w	r2, r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009c38:	4b73      	ldr	r3, [pc, #460]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c3e:	0a1b      	lsrs	r3, r3, #8
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	3301      	adds	r3, #1
 8009c46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c50:	617b      	str	r3, [r7, #20]
        break;
 8009c52:	e03d      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009c54:	4b6c      	ldr	r3, [pc, #432]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d108      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c60:	4b69      	ldr	r3, [pc, #420]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c68:	4a68      	ldr	r2, [pc, #416]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6e:	613b      	str	r3, [r7, #16]
 8009c70:	e007      	b.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009c72:	4b65      	ldr	r3, [pc, #404]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c7a:	4a65      	ldr	r2, [pc, #404]	; (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009c82:	4b61      	ldr	r3, [pc, #388]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c88:	0e1b      	lsrs	r3, r3, #24
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009c90:	4b5d      	ldr	r3, [pc, #372]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c96:	099b      	lsrs	r3, r3, #6
 8009c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	fb02 f203 	mul.w	r2, r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009caa:	4b57      	ldr	r3, [pc, #348]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cb0:	f003 031f 	and.w	r3, r3, #31
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc0:	617b      	str	r3, [r7, #20]
        break;
 8009cc2:	e005      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cc4:	4b53      	ldr	r3, [pc, #332]	; (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009cc6:	617b      	str	r3, [r7, #20]
        break;
 8009cc8:	e002      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8009cca:	bf00      	nop
 8009ccc:	e000      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8009cce:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cd6:	f040 808c 	bne.w	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009cda:	4b4b      	ldr	r3, [pc, #300]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ce0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009ce8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cf0:	d07c      	beq.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cf8:	d87d      	bhi.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d06:	d039      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009d08:	e075      	b.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009d0a:	4b3f      	ldr	r3, [pc, #252]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d108      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d16:	4b3c      	ldr	r3, [pc, #240]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d1e:	4a3b      	ldr	r2, [pc, #236]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d24:	613b      	str	r3, [r7, #16]
 8009d26:	e007      	b.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009d28:	4b37      	ldr	r3, [pc, #220]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d30:	4a37      	ldr	r2, [pc, #220]	; (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d36:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009d38:	4b33      	ldr	r3, [pc, #204]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3e:	0e1b      	lsrs	r3, r3, #24
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009d46:	4b30      	ldr	r3, [pc, #192]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d4c:	099b      	lsrs	r3, r3, #6
 8009d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	fb02 f203 	mul.w	r2, r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009d60:	4b29      	ldr	r3, [pc, #164]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d66:	0a1b      	lsrs	r3, r3, #8
 8009d68:	f003 031f 	and.w	r3, r3, #31
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d78:	617b      	str	r3, [r7, #20]
        break;
 8009d7a:	e03d      	b.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009d7c:	4b22      	ldr	r3, [pc, #136]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d108      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d88:	4b1f      	ldr	r3, [pc, #124]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d90:	4a1e      	ldr	r2, [pc, #120]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d96:	613b      	str	r3, [r7, #16]
 8009d98:	e007      	b.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009da2:	4a1b      	ldr	r2, [pc, #108]	; (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009daa:	4b17      	ldr	r3, [pc, #92]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db0:	0e1b      	lsrs	r3, r3, #24
 8009db2:	f003 030f 	and.w	r3, r3, #15
 8009db6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009db8:	4b13      	ldr	r3, [pc, #76]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dbe:	099b      	lsrs	r3, r3, #6
 8009dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	fb02 f203 	mul.w	r2, r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009dd2:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd8:	f003 031f 	and.w	r3, r3, #31
 8009ddc:	3301      	adds	r3, #1
 8009dde:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de8:	617b      	str	r3, [r7, #20]
        break;
 8009dea:	e005      	b.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009dee:	617b      	str	r3, [r7, #20]
        break;
 8009df0:	e002      	b.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8009df2:	bf00      	nop
 8009df4:	e000      	b.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8009df6:	bf00      	nop

  return frequency;
 8009df8:	697b      	ldr	r3, [r7, #20]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	40023800 	.word	0x40023800
 8009e0c:	00f42400 	.word	0x00f42400
 8009e10:	017d7840 	.word	0x017d7840
 8009e14:	00bb8000 	.word	0x00bb8000

08009e18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e081      	b.n	8009f2e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	7f5b      	ldrb	r3, [r3, #29]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d105      	bne.n	8009e40 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7f7 fe06 	bl	8001a4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2202      	movs	r2, #2
 8009e44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	22ca      	movs	r2, #202	; 0xca
 8009e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2253      	movs	r2, #83	; 0x53
 8009e54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fb16 	bl	800a488 <RTC_EnterInitMode>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d008      	beq.n	8009e74 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	22ff      	movs	r2, #255	; 0xff
 8009e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2204      	movs	r2, #4
 8009e6e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e05c      	b.n	8009f2e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6899      	ldr	r1, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	4b2e      	ldr	r3, [pc, #184]	; (8009f38 <HAL_RTC_Init+0x120>)
 8009e80:	400b      	ands	r3, r1
 8009e82:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6899      	ldr	r1, [r3, #8]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	68d2      	ldr	r2, [r2, #12]
 8009eaa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6919      	ldr	r1, [r3, #16]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	041a      	lsls	r2, r3, #16
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ece:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10e      	bne.n	8009efc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 faaa 	bl	800a438 <HAL_RTC_WaitForSynchro>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	22ff      	movs	r2, #255	; 0xff
 8009ef0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e018      	b.n	8009f2e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0208 	bic.w	r2, r2, #8
 8009f0a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	22ff      	movs	r2, #255	; 0xff
 8009f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
  }
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	ff8fffbf 	.word	0xff8fffbf

08009f3c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f3c:	b590      	push	{r4, r7, lr}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	7f1b      	ldrb	r3, [r3, #28]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_RTC_SetTime+0x1c>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e0a8      	b.n	800a0aa <HAL_RTC_SetTime+0x16e>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2202      	movs	r2, #2
 8009f62:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d126      	bne.n	8009fb8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d102      	bne.n	8009f7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 faac 	bl	800a4e0 <RTC_ByteToBcd2>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 faa5 	bl	800a4e0 <RTC_ByteToBcd2>
 8009f96:	4603      	mov	r3, r0
 8009f98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009f9a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	789b      	ldrb	r3, [r3, #2]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fa9d 	bl	800a4e0 <RTC_ByteToBcd2>
 8009fa6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009fa8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	7b1b      	ldrb	r3, [r3, #12]
 8009fb0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]
 8009fb6:	e018      	b.n	8009fea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d102      	bne.n	8009fcc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009fd8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009fde:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	7b1b      	ldrb	r3, [r3, #12]
 8009fe4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	22ca      	movs	r2, #202	; 0xca
 8009ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2253      	movs	r2, #83	; 0x53
 8009ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fa44 	bl	800a488 <RTC_EnterInitMode>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00b      	beq.n	800a01e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	22ff      	movs	r2, #255	; 0xff
 800a00c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2204      	movs	r2, #4
 800a012:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e045      	b.n	800a0aa <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	6979      	ldr	r1, [r7, #20]
 800a024:	4b23      	ldr	r3, [pc, #140]	; (800a0b4 <HAL_RTC_SetTime+0x178>)
 800a026:	400b      	ands	r3, r1
 800a028:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a038:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6899      	ldr	r1, [r3, #8]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	691a      	ldr	r2, [r3, #16]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	431a      	orrs	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a060:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f003 0320 	and.w	r3, r3, #32
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d111      	bne.n	800a094 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 f9e1 	bl	800a438 <HAL_RTC_WaitForSynchro>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	22ff      	movs	r2, #255	; 0xff
 800a082:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2204      	movs	r2, #4
 800a088:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e00a      	b.n	800a0aa <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	22ff      	movs	r2, #255	; 0xff
 800a09a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
  }
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	371c      	adds	r7, #28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd90      	pop	{r4, r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	007f7f7f 	.word	0x007f7f7f

0800a0b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	7f1b      	ldrb	r3, [r3, #28]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d101      	bne.n	800a0d4 <HAL_RTC_SetDate+0x1c>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e092      	b.n	800a1fa <HAL_RTC_SetDate+0x142>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10e      	bne.n	800a104 <HAL_RTC_SetDate+0x4c>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	f003 0310 	and.w	r3, r3, #16
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d008      	beq.n	800a104 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	785b      	ldrb	r3, [r3, #1]
 800a0f6:	f023 0310 	bic.w	r3, r3, #16
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	330a      	adds	r3, #10
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d11c      	bne.n	800a144 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	78db      	ldrb	r3, [r3, #3]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 f9e6 	bl	800a4e0 <RTC_ByteToBcd2>
 800a114:	4603      	mov	r3, r0
 800a116:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 f9df 	bl	800a4e0 <RTC_ByteToBcd2>
 800a122:	4603      	mov	r3, r0
 800a124:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a126:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	789b      	ldrb	r3, [r3, #2]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 f9d7 	bl	800a4e0 <RTC_ByteToBcd2>
 800a132:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a134:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a13e:	4313      	orrs	r3, r2
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e00e      	b.n	800a162 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	78db      	ldrb	r3, [r3, #3]
 800a148:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a150:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a156:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a15e:	4313      	orrs	r3, r2
 800a160:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	22ca      	movs	r2, #202	; 0xca
 800a168:	625a      	str	r2, [r3, #36]	; 0x24
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2253      	movs	r2, #83	; 0x53
 800a170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f988 	bl	800a488 <RTC_EnterInitMode>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00b      	beq.n	800a196 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	22ff      	movs	r2, #255	; 0xff
 800a184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2204      	movs	r2, #4
 800a18a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e031      	b.n	800a1fa <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	6979      	ldr	r1, [r7, #20]
 800a19c:	4b19      	ldr	r3, [pc, #100]	; (800a204 <HAL_RTC_SetDate+0x14c>)
 800a19e:	400b      	ands	r3, r1
 800a1a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f003 0320 	and.w	r3, r3, #32
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d111      	bne.n	800a1e4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 f939 	bl	800a438 <HAL_RTC_WaitForSynchro>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	22ff      	movs	r2, #255	; 0xff
 800a1d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2204      	movs	r2, #4
 800a1d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e00a      	b.n	800a1fa <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	22ff      	movs	r2, #255	; 0xff
 800a1ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
  }
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	371c      	adds	r7, #28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd90      	pop	{r4, r7, pc}
 800a202:	bf00      	nop
 800a204:	00ffff3f 	.word	0x00ffff3f

0800a208 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a208:	b590      	push	{r4, r7, lr}
 800a20a:	b089      	sub	sp, #36	; 0x24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	61fb      	str	r3, [r7, #28]
 800a21c:	2300      	movs	r3, #0
 800a21e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	7f1b      	ldrb	r3, [r3, #28]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_RTC_SetAlarm+0x24>
 800a228:	2302      	movs	r3, #2
 800a22a:	e101      	b.n	800a430 <HAL_RTC_SetAlarm+0x228>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2201      	movs	r2, #1
 800a230:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2202      	movs	r2, #2
 800a236:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d137      	bne.n	800a2ae <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d102      	bne.n	800a252 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	2200      	movs	r2, #0
 800a250:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f000 f942 	bl	800a4e0 <RTC_ByteToBcd2>
 800a25c:	4603      	mov	r3, r0
 800a25e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f93b 	bl	800a4e0 <RTC_ByteToBcd2>
 800a26a:	4603      	mov	r3, r0
 800a26c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a26e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	789b      	ldrb	r3, [r3, #2]
 800a274:	4618      	mov	r0, r3
 800a276:	f000 f933 	bl	800a4e0 <RTC_ByteToBcd2>
 800a27a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a27c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	7b1b      	ldrb	r3, [r3, #12]
 800a284:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a286:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a290:	4618      	mov	r0, r3
 800a292:	f000 f925 	bl	800a4e0 <RTC_ByteToBcd2>
 800a296:	4603      	mov	r3, r0
 800a298:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a29a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a2a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e023      	b.n	800a2f6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	785b      	ldrb	r3, [r3, #1]
 800a2cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a2ce:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a2d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	7b1b      	ldrb	r3, [r3, #12]
 800a2da:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a2dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a2e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a2ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	22ca      	movs	r2, #202	; 0xca
 800a308:	625a      	str	r2, [r3, #36]	; 0x24
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2253      	movs	r2, #83	; 0x53
 800a310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a31a:	d13f      	bne.n	800a39c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a32a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a33a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a33c:	f7fa f934 	bl	80045a8 <HAL_GetTick>
 800a340:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a342:	e013      	b.n	800a36c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a344:	f7fa f930 	bl	80045a8 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a352:	d90b      	bls.n	800a36c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	22ff      	movs	r2, #255	; 0xff
 800a35a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2203      	movs	r2, #3
 800a360:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e061      	b.n	800a430 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0e4      	beq.n	800a344 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a398:	609a      	str	r2, [r3, #8]
 800a39a:	e03e      	b.n	800a41a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689a      	ldr	r2, [r3, #8]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689a      	ldr	r2, [r3, #8]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3bc:	f7fa f8f4 	bl	80045a8 <HAL_GetTick>
 800a3c0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a3c2:	e013      	b.n	800a3ec <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a3c4:	f7fa f8f0 	bl	80045a8 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3d2:	d90b      	bls.n	800a3ec <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	22ff      	movs	r2, #255	; 0xff
 800a3da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e021      	b.n	800a430 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0e4      	beq.n	800a3c4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69fa      	ldr	r2, [r7, #28]
 800a400:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a418:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	22ff      	movs	r2, #255	; 0xff
 800a420:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2201      	movs	r2, #1
 800a426:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3724      	adds	r7, #36	; 0x24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd90      	pop	{r4, r7, pc}

0800a438 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a452:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a454:	f7fa f8a8 	bl	80045a8 <HAL_GetTick>
 800a458:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a45a:	e009      	b.n	800a470 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a45c:	f7fa f8a4 	bl	80045a8 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a46a:	d901      	bls.n	800a470 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e007      	b.n	800a480 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f003 0320 	and.w	r3, r3, #32
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0ee      	beq.n	800a45c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d119      	bne.n	800a4d6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a4ac:	f7fa f87c 	bl	80045a8 <HAL_GetTick>
 800a4b0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a4b2:	e009      	b.n	800a4c8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a4b4:	f7fa f878 	bl	80045a8 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4c2:	d901      	bls.n	800a4c8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e007      	b.n	800a4d8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0ee      	beq.n	800a4b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a4ee:	e005      	b.n	800a4fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	3b0a      	subs	r3, #10
 800a4fa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d8f6      	bhi.n	800a4f0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	011b      	lsls	r3, r3, #4
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	b2db      	uxtb	r3, r3
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	7f1b      	ldrb	r3, [r3, #28]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a534:	2302      	movs	r3, #2
 800a536:	e03e      	b.n	800a5b6 <HAL_RTCEx_SetTimeStamp+0x9a>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2201      	movs	r2, #1
 800a53c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2202      	movs	r2, #2
 800a542:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	4b1e      	ldr	r3, [pc, #120]	; (800a5c4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	4313      	orrs	r3, r2
 800a556:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	22ca      	movs	r2, #202	; 0xca
 800a55e:	625a      	str	r2, [r3, #36]	; 0x24
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2253      	movs	r2, #83	; 0x53
 800a566:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f022 0206 	bic.w	r2, r2, #6
 800a576:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	430a      	orrs	r2, r1
 800a586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689a      	ldr	r2, [r3, #8]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a59e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	22ff      	movs	r2, #255	; 0xff
 800a5a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	371c      	adds	r7, #28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	fffff7f7 	.word	0xfffff7f7

0800a5c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e156      	b.n	800a894 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7f7 fae8 	bl	8001bd0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f95b 	bl	800a8c4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d00c      	beq.n	800a630 <HAL_SAI_Init+0x68>
 800a616:	2b02      	cmp	r3, #2
 800a618:	d80d      	bhi.n	800a636 <HAL_SAI_Init+0x6e>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <HAL_SAI_Init+0x5c>
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d003      	beq.n	800a62a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a622:	e008      	b.n	800a636 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	61fb      	str	r3, [r7, #28]
      break;
 800a628:	e006      	b.n	800a638 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a62a:	2310      	movs	r3, #16
 800a62c:	61fb      	str	r3, [r7, #28]
      break;
 800a62e:	e003      	b.n	800a638 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a630:	2320      	movs	r3, #32
 800a632:	61fb      	str	r3, [r7, #28]
      break;
 800a634:	e000      	b.n	800a638 <HAL_SAI_Init+0x70>
      break;
 800a636:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d81e      	bhi.n	800a67e <HAL_SAI_Init+0xb6>
 800a640:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <HAL_SAI_Init+0x80>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a659 	.word	0x0800a659
 800a64c:	0800a65f 	.word	0x0800a65f
 800a650:	0800a667 	.word	0x0800a667
 800a654:	0800a66f 	.word	0x0800a66f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a65c:	e010      	b.n	800a680 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a662:	617b      	str	r3, [r7, #20]
    }
    break;
 800a664:	e00c      	b.n	800a680 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a66a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a66c:	e008      	b.n	800a680 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a66e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a672:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f043 0301 	orr.w	r3, r3, #1
 800a67a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a67c:	e000      	b.n	800a680 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a67e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a85      	ldr	r2, [pc, #532]	; (800a89c <HAL_SAI_Init+0x2d4>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d004      	beq.n	800a694 <HAL_SAI_Init+0xcc>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a84      	ldr	r2, [pc, #528]	; (800a8a0 <HAL_SAI_Init+0x2d8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d103      	bne.n	800a69c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a694:	4a83      	ldr	r2, [pc, #524]	; (800a8a4 <HAL_SAI_Init+0x2dc>)
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	e002      	b.n	800a6a2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a69c:	4a82      	ldr	r2, [pc, #520]	; (800a8a8 <HAL_SAI_Init+0x2e0>)
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d04c      	beq.n	800a744 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a7a      	ldr	r2, [pc, #488]	; (800a89c <HAL_SAI_Init+0x2d4>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_SAI_Init+0xfa>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a78      	ldr	r2, [pc, #480]	; (800a8a0 <HAL_SAI_Init+0x2d8>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d104      	bne.n	800a6cc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a6c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a6c6:	f7ff fa63 	bl	8009b90 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6ca:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a76      	ldr	r2, [pc, #472]	; (800a8ac <HAL_SAI_Init+0x2e4>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d004      	beq.n	800a6e0 <HAL_SAI_Init+0x118>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a75      	ldr	r2, [pc, #468]	; (800a8b0 <HAL_SAI_Init+0x2e8>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d104      	bne.n	800a6ea <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a6e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a6e4:	f7ff fa54 	bl	8009b90 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6e8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	025b      	lsls	r3, r3, #9
 800a6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a700:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4a6b      	ldr	r2, [pc, #428]	; (800a8b4 <HAL_SAI_Init+0x2ec>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	08da      	lsrs	r2, r3, #3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a710:	68f9      	ldr	r1, [r7, #12]
 800a712:	4b68      	ldr	r3, [pc, #416]	; (800a8b4 <HAL_SAI_Init+0x2ec>)
 800a714:	fba3 2301 	umull	r2, r3, r3, r1
 800a718:	08da      	lsrs	r2, r3, #3
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	1aca      	subs	r2, r1, r3
 800a724:	2a08      	cmp	r2, #8
 800a726:	d904      	bls.n	800a732 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a736:	2b04      	cmp	r3, #4
 800a738:	d104      	bne.n	800a744 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	085a      	lsrs	r2, r3, #1
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <HAL_SAI_Init+0x18c>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	2b02      	cmp	r3, #2
 800a752:	d109      	bne.n	800a768 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d101      	bne.n	800a760 <HAL_SAI_Init+0x198>
 800a75c:	2300      	movs	r3, #0
 800a75e:	e001      	b.n	800a764 <HAL_SAI_Init+0x19c>
 800a760:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a764:	61bb      	str	r3, [r7, #24]
 800a766:	e008      	b.n	800a77a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d102      	bne.n	800a776 <HAL_SAI_Init+0x1ae>
 800a770:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a774:	e000      	b.n	800a778 <HAL_SAI_Init+0x1b0>
 800a776:	2300      	movs	r3, #0
 800a778:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	6819      	ldr	r1, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	4b4c      	ldr	r3, [pc, #304]	; (800a8b8 <HAL_SAI_Init+0x2f0>)
 800a786:	400b      	ands	r3, r1
 800a788:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6819      	ldr	r1, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a798:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a79e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a7b2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a7be:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
 800a7c4:	051b      	lsls	r3, r3, #20
 800a7c6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6859      	ldr	r1, [r3, #4]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	4b38      	ldr	r3, [pc, #224]	; (800a8bc <HAL_SAI_Init+0x2f4>)
 800a7dc:	400b      	ands	r3, r1
 800a7de:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6859      	ldr	r1, [r3, #4]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699a      	ldr	r2, [r3, #24]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6899      	ldr	r1, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	4b2d      	ldr	r3, [pc, #180]	; (800a8c0 <HAL_SAI_Init+0x2f8>)
 800a80a:	400b      	ands	r3, r1
 800a80c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6899      	ldr	r1, [r3, #8]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a818:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a81e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a824:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a82a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a830:	3b01      	subs	r3, #1
 800a832:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a834:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68d9      	ldr	r1, [r3, #12]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a84c:	400b      	ands	r3, r1
 800a84e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68d9      	ldr	r1, [r3, #12]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a864:	041b      	lsls	r3, r3, #16
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86c:	3b01      	subs	r3, #1
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3720      	adds	r7, #32
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	40015804 	.word	0x40015804
 800a8a0:	40015824 	.word	0x40015824
 800a8a4:	40015800 	.word	0x40015800
 800a8a8:	40015c00 	.word	0x40015c00
 800a8ac:	40015c04 	.word	0x40015c04
 800a8b0:	40015c24 	.word	0x40015c24
 800a8b4:	cccccccd 	.word	0xcccccccd
 800a8b8:	ff05c010 	.word	0xff05c010
 800a8bc:	ffff1ff0 	.word	0xffff1ff0
 800a8c0:	fff88000 	.word	0xfff88000

0800a8c4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a8cc:	4b17      	ldr	r3, [pc, #92]	; (800a92c <SAI_Disable+0x68>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a17      	ldr	r2, [pc, #92]	; (800a930 <SAI_Disable+0x6c>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	0b1b      	lsrs	r3, r3, #12
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a8ee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	1e5a      	subs	r2, r3, #1
 800a8f4:	60fa      	str	r2, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a900:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	72fb      	strb	r3, [r7, #11]
      break;
 800a90e:	e006      	b.n	800a91e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e8      	bne.n	800a8f0 <SAI_Disable+0x2c>

  return status;
 800a91e:	7afb      	ldrb	r3, [r7, #11]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	20000078 	.word	0x20000078
 800a930:	95cbec1b 	.word	0x95cbec1b

0800a934 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e022      	b.n	800a98c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7f7 f9c3 	bl	8001ce4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2203      	movs	r2, #3
 800a962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f814 	bl	800a994 <HAL_SD_InitCard>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e00a      	b.n	800a98c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a994:	b5b0      	push	{r4, r5, r7, lr}
 800a996:	b08e      	sub	sp, #56	; 0x38
 800a998:	af04      	add	r7, sp, #16
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a9b0:	2376      	movs	r3, #118	; 0x76
 800a9b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681d      	ldr	r5, [r3, #0]
 800a9b8:	466c      	mov	r4, sp
 800a9ba:	f107 0314 	add.w	r3, r7, #20
 800a9be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a9c6:	f107 0308 	add.w	r3, r7, #8
 800a9ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f002 ff83 	bl	800d8d8 <SDMMC_Init>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e056      	b.n	800aa92 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9f2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f002 ffa6 	bl	800d94a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa0c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fe0e 	bl	800b630 <SD_PowerON>
 800aa14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e02e      	b.n	800aa92 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fd2f 	bl	800b498 <SD_InitCard>
 800aa3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00b      	beq.n	800aa5a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	431a      	orrs	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e01b      	b.n	800aa92 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa62:	4618      	mov	r0, r3
 800aa64:	f003 f804 	bl	800da70 <SDMMC_CmdBlockLength>
 800aa68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00f      	beq.n	800aa90 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a09      	ldr	r2, [pc, #36]	; (800aa9c <HAL_SD_InitCard+0x108>)
 800aa76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e000      	b.n	800aa92 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3728      	adds	r7, #40	; 0x28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bdb0      	pop	{r4, r5, r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	004005ff 	.word	0x004005ff

0800aaa0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08c      	sub	sp, #48	; 0x30
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d107      	bne.n	800aac8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e0c3      	b.n	800ac50 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	f040 80bc 	bne.w	800ac4e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aadc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	441a      	add	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d907      	bls.n	800aafa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e0aa      	b.n	800ac50 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2203      	movs	r2, #3
 800aafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2200      	movs	r2, #0
 800ab08:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ab18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1e:	4a4e      	ldr	r2, [pc, #312]	; (800ac58 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ab20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab26:	4a4d      	ldr	r2, [pc, #308]	; (800ac5c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ab28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2e:	2200      	movs	r2, #0
 800ab30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab36:	2200      	movs	r2, #0
 800ab38:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	689a      	ldr	r2, [r3, #8]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3380      	adds	r3, #128	; 0x80
 800ab60:	4619      	mov	r1, r3
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	025b      	lsls	r3, r3, #9
 800ab68:	089b      	lsrs	r3, r3, #2
 800ab6a:	f7fa fa1b 	bl	8004fa4 <HAL_DMA_Start_IT>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d017      	beq.n	800aba4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ab82:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a35      	ldr	r2, [pc, #212]	; (800ac60 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e055      	b.n	800ac50 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f042 0208 	orr.w	r2, r2, #8
 800abb2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d002      	beq.n	800abc2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	025b      	lsls	r3, r3, #9
 800abc0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295
 800abc6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	025b      	lsls	r3, r3, #9
 800abcc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800abce:	2390      	movs	r3, #144	; 0x90
 800abd0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800abd2:	2302      	movs	r3, #2
 800abd4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800abda:	2301      	movs	r3, #1
 800abdc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f107 0210 	add.w	r2, r7, #16
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f002 ff15 	bl	800da18 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d90a      	bls.n	800ac0a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2282      	movs	r2, #130	; 0x82
 800abf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac00:	4618      	mov	r0, r3
 800ac02:	f002 ff79 	bl	800daf8 <SDMMC_CmdReadMultiBlock>
 800ac06:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ac08:	e009      	b.n	800ac1e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2281      	movs	r2, #129	; 0x81
 800ac0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac16:	4618      	mov	r0, r3
 800ac18:	f002 ff4c 	bl	800dab4 <SDMMC_CmdReadSingleBlock>
 800ac1c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d012      	beq.n	800ac4a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a0d      	ldr	r2, [pc, #52]	; (800ac60 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ac2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	431a      	orrs	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e002      	b.n	800ac50 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e000      	b.n	800ac50 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800ac4e:	2302      	movs	r3, #2
  }
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3730      	adds	r7, #48	; 0x30
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	0800b383 	.word	0x0800b383
 800ac5c:	0800b3f5 	.word	0x0800b3f5
 800ac60:	004005ff 	.word	0x004005ff

0800ac64 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08c      	sub	sp, #48	; 0x30
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d107      	bne.n	800ac8c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e0c6      	b.n	800ae1a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	f040 80bf 	bne.w	800ae18 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	441a      	add	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acaa:	429a      	cmp	r2, r3
 800acac:	d907      	bls.n	800acbe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e0ad      	b.n	800ae1a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2203      	movs	r2, #3
 800acc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2200      	movs	r2, #0
 800accc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f042 021a 	orr.w	r2, r2, #26
 800acdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace2:	4a50      	ldr	r2, [pc, #320]	; (800ae24 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800ace4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acea:	4a4f      	ldr	r2, [pc, #316]	; (800ae28 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800acec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf2:	2200      	movs	r2, #0
 800acf4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d002      	beq.n	800ad04 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	025b      	lsls	r3, r3, #9
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d90a      	bls.n	800ad20 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	22a0      	movs	r2, #160	; 0xa0
 800ad0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad16:	4618      	mov	r0, r3
 800ad18:	f002 ff32 	bl	800db80 <SDMMC_CmdWriteMultiBlock>
 800ad1c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ad1e:	e009      	b.n	800ad34 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2290      	movs	r2, #144	; 0x90
 800ad24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f002 ff05 	bl	800db3c <SDMMC_CmdWriteSingleBlock>
 800ad32:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d012      	beq.n	800ad60 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a3b      	ldr	r2, [pc, #236]	; (800ae2c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ad40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad48:	431a      	orrs	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e05c      	b.n	800ae1a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f042 0208 	orr.w	r2, r2, #8
 800ad6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad74:	2240      	movs	r2, #64	; 0x40
 800ad76:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad88:	689a      	ldr	r2, [r3, #8]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ad98:	68b9      	ldr	r1, [r7, #8]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3380      	adds	r3, #128	; 0x80
 800ada0:	461a      	mov	r2, r3
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	025b      	lsls	r3, r3, #9
 800ada6:	089b      	lsrs	r3, r3, #2
 800ada8:	f7fa f8fc 	bl	8004fa4 <HAL_DMA_Start_IT>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d01a      	beq.n	800ade8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 021a 	bic.w	r2, r2, #26
 800adc0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a19      	ldr	r2, [pc, #100]	; (800ae2c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800adc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e018      	b.n	800ae1a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ade8:	f04f 33ff 	mov.w	r3, #4294967295
 800adec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	025b      	lsls	r3, r3, #9
 800adf2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800adf4:	2390      	movs	r3, #144	; 0x90
 800adf6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800adf8:	2300      	movs	r3, #0
 800adfa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ae00:	2301      	movs	r3, #1
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f107 0210 	add.w	r2, r7, #16
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f002 fe02 	bl	800da18 <SDMMC_ConfigData>

      return HAL_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	e000      	b.n	800ae1a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800ae18:	2302      	movs	r3, #2
  }
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3730      	adds	r7, #48	; 0x30
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	0800b359 	.word	0x0800b359
 800ae28:	0800b3f5 	.word	0x0800b3f5
 800ae2c:	004005ff 	.word	0x004005ff

0800ae30 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae52:	0f9b      	lsrs	r3, r3, #30
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae5e:	0e9b      	lsrs	r3, r3, #26
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae70:	0e1b      	lsrs	r3, r3, #24
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae82:	0c1b      	lsrs	r3, r3, #16
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aea4:	0d1b      	lsrs	r3, r3, #20
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeb0:	0c1b      	lsrs	r3, r3, #16
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec2:	0bdb      	lsrs	r3, r3, #15
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aed4:	0b9b      	lsrs	r3, r3, #14
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aee6:	0b5b      	lsrs	r3, r3, #13
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aef8:	0b1b      	lsrs	r3, r3, #12
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	b2da      	uxtb	r2, r3
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2200      	movs	r2, #0
 800af0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af10:	2b00      	cmp	r3, #0
 800af12:	d163      	bne.n	800afdc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af18:	009a      	lsls	r2, r3, #2
 800af1a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800af1e:	4013      	ands	r3, r2
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800af24:	0f92      	lsrs	r2, r2, #30
 800af26:	431a      	orrs	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af30:	0edb      	lsrs	r3, r3, #27
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f003 0307 	and.w	r3, r3, #7
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af42:	0e1b      	lsrs	r3, r3, #24
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 0307 	and.w	r3, r3, #7
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af54:	0d5b      	lsrs	r3, r3, #21
 800af56:	b2db      	uxtb	r3, r3
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af66:	0c9b      	lsrs	r3, r3, #18
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af78:	0bdb      	lsrs	r3, r3, #15
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 0307 	and.w	r3, r3, #7
 800af80:	b2da      	uxtb	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	7e1b      	ldrb	r3, [r3, #24]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	3302      	adds	r3, #2
 800af9c:	2201      	movs	r2, #1
 800af9e:	fa02 f303 	lsl.w	r3, r2, r3
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800afa6:	fb02 f203 	mul.w	r2, r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	7a1b      	ldrb	r3, [r3, #8]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f003 030f 	and.w	r3, r3, #15
 800afb8:	2201      	movs	r2, #1
 800afba:	409a      	lsls	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800afc8:	0a52      	lsrs	r2, r2, #9
 800afca:	fb02 f203 	mul.w	r2, r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afd8:	661a      	str	r2, [r3, #96]	; 0x60
 800afda:	e031      	b.n	800b040 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d11d      	bne.n	800b020 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afe8:	041b      	lsls	r3, r3, #16
 800afea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	431a      	orrs	r2, r3
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	3301      	adds	r3, #1
 800b000:	029a      	lsls	r2, r3, #10
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b014:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	661a      	str	r2, [r3, #96]	; 0x60
 800b01e:	e00f      	b.n	800b040 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a58      	ldr	r2, [pc, #352]	; (800b188 <HAL_SD_GetCardCSD+0x344>)
 800b026:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e09d      	b.n	800b17c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b044:	0b9b      	lsrs	r3, r3, #14
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b056:	09db      	lsrs	r3, r3, #7
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b078:	0fdb      	lsrs	r3, r3, #31
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b084:	0f5b      	lsrs	r3, r3, #29
 800b086:	b2db      	uxtb	r3, r3
 800b088:	f003 0303 	and.w	r3, r3, #3
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b096:	0e9b      	lsrs	r3, r3, #26
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	f003 0307 	and.w	r3, r3, #7
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a8:	0d9b      	lsrs	r3, r3, #22
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	f003 030f 	and.w	r3, r3, #15
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ba:	0d5b      	lsrs	r3, r3, #21
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d6:	0c1b      	lsrs	r3, r3, #16
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ea:	0bdb      	lsrs	r3, r3, #15
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fe:	0b9b      	lsrs	r3, r3, #14
 800b100:	b2db      	uxtb	r3, r3
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	b2da      	uxtb	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b112:	0b5b      	lsrs	r3, r3, #13
 800b114:	b2db      	uxtb	r3, r3
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b126:	0b1b      	lsrs	r3, r3, #12
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13a:	0a9b      	lsrs	r3, r3, #10
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	b2da      	uxtb	r2, r3
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b14e:	0a1b      	lsrs	r3, r3, #8
 800b150:	b2db      	uxtb	r3, r3
 800b152:	f003 0303 	and.w	r3, r3, #3
 800b156:	b2da      	uxtb	r2, r3
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b162:	085b      	lsrs	r3, r3, #1
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	004005ff 	.word	0x004005ff

0800b18c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b1e4:	b5b0      	push	{r4, r5, r7, lr}
 800b1e6:	b08e      	sub	sp, #56	; 0x38
 800b1e8:	af04      	add	r7, sp, #16
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b200:	2b03      	cmp	r3, #3
 800b202:	d02e      	beq.n	800b262 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20a:	d106      	bne.n	800b21a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b210:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
 800b218:	e029      	b.n	800b26e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b220:	d10a      	bne.n	800b238 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 faba 	bl	800b79c <SD_WideBus_Enable>
 800b228:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	639a      	str	r2, [r3, #56]	; 0x38
 800b236:	e01a      	b.n	800b26e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 faf7 	bl	800b832 <SD_WideBus_Disable>
 800b244:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	431a      	orrs	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	639a      	str	r2, [r3, #56]	; 0x38
 800b252:	e00c      	b.n	800b26e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b258:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	639a      	str	r2, [r3, #56]	; 0x38
 800b260:	e005      	b.n	800b26e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b266:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a26      	ldr	r2, [pc, #152]	; (800b314 <HAL_SD_ConfigWideBusOperation+0x130>)
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b28c:	e01f      	b.n	800b2ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681d      	ldr	r5, [r3, #0]
 800b2b4:	466c      	mov	r4, sp
 800b2b6:	f107 0314 	add.w	r3, r7, #20
 800b2ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f002 fb05 	bl	800d8d8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f002 fbca 	bl	800da70 <SDMMC_CmdBlockLength>
 800b2dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00c      	beq.n	800b2fe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a0a      	ldr	r2, [pc, #40]	; (800b314 <HAL_SD_ConfigWideBusOperation+0x130>)
 800b2ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3728      	adds	r7, #40	; 0x28
 800b30e:	46bd      	mov	sp, r7
 800b310:	bdb0      	pop	{r4, r5, r7, pc}
 800b312:	bf00      	nop
 800b314:	004005ff 	.word	0x004005ff

0800b318 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa0e 	bl	800b74c <SD_SendStatus>
 800b330:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d005      	beq.n	800b344 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	431a      	orrs	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	0a5b      	lsrs	r3, r3, #9
 800b348:	f003 030f 	and.w	r3, r3, #15
 800b34c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b34e:	693b      	ldr	r3, [r7, #16]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b364:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b374:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b376:	bf00      	nop
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b084      	sub	sp, #16
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b394:	2b82      	cmp	r3, #130	; 0x82
 800b396:	d111      	bne.n	800b3bc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f002 fc11 	bl	800dbc4 <SDMMC_CmdStopTransfer>
 800b3a2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff fd3a 	bl	800ae30 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0208 	bic.w	r2, r2, #8
 800b3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b3d4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f7f7 fd09 	bl	8002dfc <HAL_SD_RxCpltCallback>
#endif
}
 800b3ea:	bf00      	nop
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
	...

0800b3f4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b400:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7f9 fe2e 	bl	8005064 <HAL_DMA_GetError>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d03e      	beq.n	800b48c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b414:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b41c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d002      	beq.n	800b42a <SD_DMAError+0x36>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d12d      	bne.n	800b486 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a19      	ldr	r2, [pc, #100]	; (800b494 <SD_DMAError+0xa0>)
 800b430:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b440:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b446:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f7ff ff62 	bl	800b318 <HAL_SD_GetCardState>
 800b454:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b06      	cmp	r3, #6
 800b45a:	d002      	beq.n	800b462 <SD_DMAError+0x6e>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b05      	cmp	r3, #5
 800b460:	d10a      	bne.n	800b478 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f002 fbac 	bl	800dbc4 <SDMMC_CmdStopTransfer>
 800b46c:	4602      	mov	r2, r0
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b472:	431a      	orrs	r2, r3
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2200      	movs	r2, #0
 800b484:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b486:	6978      	ldr	r0, [r7, #20]
 800b488:	f7ff fcd2 	bl	800ae30 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b48c:	bf00      	nop
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	004005ff 	.word	0x004005ff

0800b498 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b498:	b5b0      	push	{r4, r5, r7, lr}
 800b49a:	b094      	sub	sp, #80	; 0x50
 800b49c:	af04      	add	r7, sp, #16
 800b49e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f002 fa5d 	bl	800d968 <SDMMC_GetPowerState>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b4b8:	e0b6      	b.n	800b628 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d02f      	beq.n	800b522 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f002 fc87 	bl	800ddda <SDMMC_CmdSendCID>
 800b4cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <SD_InitCard+0x40>
    {
      return errorstate;
 800b4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d6:	e0a7      	b.n	800b628 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2100      	movs	r1, #0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f002 fa87 	bl	800d9f2 <SDMMC_GetResponse>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2104      	movs	r1, #4
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f002 fa7e 	bl	800d9f2 <SDMMC_GetResponse>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2108      	movs	r1, #8
 800b502:	4618      	mov	r0, r3
 800b504:	f002 fa75 	bl	800d9f2 <SDMMC_GetResponse>
 800b508:	4602      	mov	r2, r0
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	210c      	movs	r1, #12
 800b514:	4618      	mov	r0, r3
 800b516:	f002 fa6c 	bl	800d9f2 <SDMMC_GetResponse>
 800b51a:	4602      	mov	r2, r0
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b526:	2b03      	cmp	r3, #3
 800b528:	d00d      	beq.n	800b546 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f107 020e 	add.w	r2, r7, #14
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f002 fc8d 	bl	800de54 <SDMMC_CmdSetRelAdd>
 800b53a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <SD_InitCard+0xae>
    {
      return errorstate;
 800b542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b544:	e070      	b.n	800b628 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	d036      	beq.n	800b5bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b54e:	89fb      	ldrh	r3, [r7, #14]
 800b550:	461a      	mov	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55e:	041b      	lsls	r3, r3, #16
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f002 fc57 	bl	800de16 <SDMMC_CmdSendCSD>
 800b568:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b572:	e059      	b.n	800b628 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2100      	movs	r1, #0
 800b57a:	4618      	mov	r0, r3
 800b57c:	f002 fa39 	bl	800d9f2 <SDMMC_GetResponse>
 800b580:	4602      	mov	r2, r0
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2104      	movs	r1, #4
 800b58c:	4618      	mov	r0, r3
 800b58e:	f002 fa30 	bl	800d9f2 <SDMMC_GetResponse>
 800b592:	4602      	mov	r2, r0
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2108      	movs	r1, #8
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f002 fa27 	bl	800d9f2 <SDMMC_GetResponse>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	210c      	movs	r1, #12
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f002 fa1e 	bl	800d9f2 <SDMMC_GetResponse>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2104      	movs	r1, #4
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f002 fa15 	bl	800d9f2 <SDMMC_GetResponse>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	0d1a      	lsrs	r2, r3, #20
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b5d0:	f107 0310 	add.w	r3, r7, #16
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7ff fc34 	bl	800ae44 <HAL_SD_GetCardCSD>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d002      	beq.n	800b5e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b5e6:	e01f      	b.n	800b628 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6819      	ldr	r1, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f0:	041b      	lsls	r3, r3, #16
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	f002 fb05 	bl	800dc08 <SDMMC_CmdSelDesel>
 800b5fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <SD_InitCard+0x172>
  {
    return errorstate;
 800b606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b608:	e00e      	b.n	800b628 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681d      	ldr	r5, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	466c      	mov	r4, sp
 800b612:	f103 0210 	add.w	r2, r3, #16
 800b616:	ca07      	ldmia	r2, {r0, r1, r2}
 800b618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b61c:	3304      	adds	r3, #4
 800b61e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b620:	4628      	mov	r0, r5
 800b622:	f002 f959 	bl	800d8d8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3740      	adds	r7, #64	; 0x40
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bdb0      	pop	{r4, r5, r7, pc}

0800b630 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	2300      	movs	r3, #0
 800b642:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f002 fb00 	bl	800dc4e <SDMMC_CmdGoIdleState>
 800b64e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	e072      	b.n	800b740 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f002 fb13 	bl	800dc8a <SDMMC_CmdOperCond>
 800b664:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00d      	beq.n	800b688 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4618      	mov	r0, r3
 800b678:	f002 fae9 	bl	800dc4e <SDMMC_CmdGoIdleState>
 800b67c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d004      	beq.n	800b68e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	e05b      	b.n	800b740 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b692:	2b01      	cmp	r3, #1
 800b694:	d137      	bne.n	800b706 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2100      	movs	r1, #0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f002 fb13 	bl	800dcc8 <SDMMC_CmdAppCommand>
 800b6a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d02d      	beq.n	800b706 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6ae:	e047      	b.n	800b740 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f002 fb06 	bl	800dcc8 <SDMMC_CmdAppCommand>
 800b6bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <SD_PowerON+0x98>
    {
      return errorstate;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	e03b      	b.n	800b740 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	491e      	ldr	r1, [pc, #120]	; (800b748 <SD_PowerON+0x118>)
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f002 fb1c 	bl	800dd0c <SDMMC_CmdAppOperCommand>
 800b6d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6e0:	e02e      	b.n	800b740 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f002 f982 	bl	800d9f2 <SDMMC_GetResponse>
 800b6ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	0fdb      	lsrs	r3, r3, #31
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <SD_PowerON+0xcc>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e000      	b.n	800b6fe <SD_PowerON+0xce>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	613b      	str	r3, [r7, #16]

    count++;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	3301      	adds	r3, #1
 800b704:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d802      	bhi.n	800b716 <SD_PowerON+0xe6>
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0cc      	beq.n	800b6b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d902      	bls.n	800b726 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b724:	e00c      	b.n	800b740 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d003      	beq.n	800b738 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	645a      	str	r2, [r3, #68]	; 0x44
 800b736:	e002      	b.n	800b73e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	c1100000 	.word	0xc1100000

0800b74c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d102      	bne.n	800b762 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b75c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b760:	e018      	b.n	800b794 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b76a:	041b      	lsls	r3, r3, #16
 800b76c:	4619      	mov	r1, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	f002 fb91 	bl	800de96 <SDMMC_CmdSendStatus>
 800b774:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	e009      	b.n	800b794 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2100      	movs	r1, #0
 800b786:	4618      	mov	r0, r3
 800b788:	f002 f933 	bl	800d9f2 <SDMMC_GetResponse>
 800b78c:	4602      	mov	r2, r0
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f002 f91d 	bl	800d9f2 <SDMMC_GetResponse>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7c2:	d102      	bne.n	800b7ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7c8:	e02f      	b.n	800b82a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b7ca:	f107 030c 	add.w	r3, r7, #12
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f879 	bl	800b8c8 <SD_FindSCR>
 800b7d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	e023      	b.n	800b82a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01c      	beq.n	800b826 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f4:	041b      	lsls	r3, r3, #16
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	f002 fa65 	bl	800dcc8 <SDMMC_CmdAppCommand>
 800b7fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	e00f      	b.n	800b82a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2102      	movs	r1, #2
 800b810:	4618      	mov	r0, r3
 800b812:	f002 fa9f 	bl	800dd54 <SDMMC_CmdBusWidth>
 800b816:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	e003      	b.n	800b82a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b822:	2300      	movs	r3, #0
 800b824:	e001      	b.n	800b82a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b826:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b086      	sub	sp, #24
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	2300      	movs	r3, #0
 800b840:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2100      	movs	r1, #0
 800b848:	4618      	mov	r0, r3
 800b84a:	f002 f8d2 	bl	800d9f2 <SDMMC_GetResponse>
 800b84e:	4603      	mov	r3, r0
 800b850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b858:	d102      	bne.n	800b860 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b85a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b85e:	e02f      	b.n	800b8c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b860:	f107 030c 	add.w	r3, r7, #12
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f82e 	bl	800b8c8 <SD_FindSCR>
 800b86c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	e023      	b.n	800b8c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d01c      	beq.n	800b8bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88a:	041b      	lsls	r3, r3, #16
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f002 fa1a 	bl	800dcc8 <SDMMC_CmdAppCommand>
 800b894:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	e00f      	b.n	800b8c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f002 fa54 	bl	800dd54 <SDMMC_CmdBusWidth>
 800b8ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	e003      	b.n	800b8c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e001      	b.n	800b8c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b8bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b8c8:	b590      	push	{r4, r7, lr}
 800b8ca:	b08f      	sub	sp, #60	; 0x3c
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b8d2:	f7f8 fe69 	bl	80045a8 <HAL_GetTick>
 800b8d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60bb      	str	r3, [r7, #8]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2108      	movs	r1, #8
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f002 f8be 	bl	800da70 <SDMMC_CmdBlockLength>
 800b8f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	e0b2      	b.n	800ba66 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b908:	041b      	lsls	r3, r3, #16
 800b90a:	4619      	mov	r1, r3
 800b90c:	4610      	mov	r0, r2
 800b90e:	f002 f9db 	bl	800dcc8 <SDMMC_CmdAppCommand>
 800b912:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	e0a3      	b.n	800ba66 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b91e:	f04f 33ff 	mov.w	r3, #4294967295
 800b922:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b924:	2308      	movs	r3, #8
 800b926:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b928:	2330      	movs	r3, #48	; 0x30
 800b92a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b92c:	2302      	movs	r3, #2
 800b92e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b930:	2300      	movs	r3, #0
 800b932:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b934:	2301      	movs	r3, #1
 800b936:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f107 0210 	add.w	r2, r7, #16
 800b940:	4611      	mov	r1, r2
 800b942:	4618      	mov	r0, r3
 800b944:	f002 f868 	bl	800da18 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f002 fa23 	bl	800dd98 <SDMMC_CmdSendSCR>
 800b952:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	2b00      	cmp	r3, #0
 800b958:	d02a      	beq.n	800b9b0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95c:	e083      	b.n	800ba66 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00f      	beq.n	800b98c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6819      	ldr	r1, [r3, #0]
 800b970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	f107 0208 	add.w	r2, r7, #8
 800b978:	18d4      	adds	r4, r2, r3
 800b97a:	4608      	mov	r0, r1
 800b97c:	f001 ffd8 	bl	800d930 <SDMMC_ReadFIFO>
 800b980:	4603      	mov	r3, r0
 800b982:	6023      	str	r3, [r4, #0]
      index++;
 800b984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b986:	3301      	adds	r3, #1
 800b988:	637b      	str	r3, [r7, #52]	; 0x34
 800b98a:	e006      	b.n	800b99a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d012      	beq.n	800b9c0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b99a:	f7f8 fe05 	bl	80045a8 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a8:	d102      	bne.n	800b9b0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b9aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9ae:	e05a      	b.n	800ba66 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0cf      	beq.n	800b95e <SD_FindSCR+0x96>
 800b9be:	e000      	b.n	800b9c2 <SD_FindSCR+0xfa>
      break;
 800b9c0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c8:	f003 0308 	and.w	r3, r3, #8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d005      	beq.n	800b9dc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2208      	movs	r2, #8
 800b9d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b9d8:	2308      	movs	r3, #8
 800b9da:	e044      	b.n	800ba66 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e2:	f003 0302 	and.w	r3, r3, #2
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d005      	beq.n	800b9f6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	e037      	b.n	800ba66 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d005      	beq.n	800ba10 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ba0c:	2320      	movs	r3, #32
 800ba0e:	e02a      	b.n	800ba66 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba18:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	061a      	lsls	r2, r3, #24
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	021b      	lsls	r3, r3, #8
 800ba22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba26:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	0a1b      	lsrs	r3, r3, #8
 800ba2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba30:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	0e1b      	lsrs	r3, r3, #24
 800ba36:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3a:	601a      	str	r2, [r3, #0]
    scr++;
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	3304      	adds	r3, #4
 800ba40:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	061a      	lsls	r2, r3, #24
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	021b      	lsls	r3, r3, #8
 800ba4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba4e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	0a1b      	lsrs	r3, r3, #8
 800ba54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ba58:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	0e1b      	lsrs	r3, r3, #24
 800ba5e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ba60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba62:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	373c      	adds	r7, #60	; 0x3c
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd90      	pop	{r4, r7, pc}

0800ba6e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e025      	b.n	800bace <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d106      	bne.n	800ba9c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7f5 f89e 	bl	8000bd8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2202      	movs	r2, #2
 800baa0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f001 fe20 	bl	800d6f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	461a      	mov	r2, r3
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	f001 fe8a 	bl	800d7d8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
	...

0800bad8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e04c      	b.n	800bb84 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d106      	bne.n	800bb04 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7f6 f982 	bl	8001e08 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2202      	movs	r2, #2
 800bb08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f022 0203 	bic.w	r2, r2, #3
 800bb1a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4b19      	ldr	r3, [pc, #100]	; (800bb8c <HAL_SPDIFRX_Init+0xb4>)
 800bb28:	4013      	ands	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800bb34:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800bb3a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800bb40:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800bb46:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800bb4c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800bb52:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800bb58:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800bb5e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800bb64:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	fff88407 	.word	0xfff88407

0800bb90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e09d      	b.n	800bcde <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d108      	bne.n	800bbbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbb2:	d009      	beq.n	800bbc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	61da      	str	r2, [r3, #28]
 800bbba:	e005      	b.n	800bbc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7f6 f990 	bl	8001f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2202      	movs	r2, #2
 800bbec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc08:	d902      	bls.n	800bc10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	e002      	b.n	800bc16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bc10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bc1e:	d007      	beq.n	800bc30 <HAL_SPI_Init+0xa0>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc28:	d002      	beq.n	800bc30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bc40:	431a      	orrs	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0302 	and.w	r3, r3, #2
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	431a      	orrs	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc5e:	431a      	orrs	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc68:	431a      	orrs	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc72:	ea42 0103 	orr.w	r1, r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	430a      	orrs	r2, r1
 800bc84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	0c1b      	lsrs	r3, r3, #16
 800bc8c:	f003 0204 	and.w	r2, r3, #4
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	f003 0310 	and.w	r3, r3, #16
 800bc98:	431a      	orrs	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9e:	f003 0308 	and.w	r3, r3, #8
 800bca2:	431a      	orrs	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bcac:	ea42 0103 	orr.w	r1, r2, r3
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	69da      	ldr	r2, [r3, #28]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e049      	b.n	800bd8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7f6 fd9b 	bl	8002848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2202      	movs	r2, #2
 800bd16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3304      	adds	r3, #4
 800bd22:	4619      	mov	r1, r3
 800bd24:	4610      	mov	r0, r2
 800bd26:	f000 fc21 	bl	800c56c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d001      	beq.n	800bdac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e054      	b.n	800be56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68da      	ldr	r2, [r3, #12]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f042 0201 	orr.w	r2, r2, #1
 800bdc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a26      	ldr	r2, [pc, #152]	; (800be64 <HAL_TIM_Base_Start_IT+0xd0>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d022      	beq.n	800be14 <HAL_TIM_Base_Start_IT+0x80>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdd6:	d01d      	beq.n	800be14 <HAL_TIM_Base_Start_IT+0x80>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a22      	ldr	r2, [pc, #136]	; (800be68 <HAL_TIM_Base_Start_IT+0xd4>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d018      	beq.n	800be14 <HAL_TIM_Base_Start_IT+0x80>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a21      	ldr	r2, [pc, #132]	; (800be6c <HAL_TIM_Base_Start_IT+0xd8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d013      	beq.n	800be14 <HAL_TIM_Base_Start_IT+0x80>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a1f      	ldr	r2, [pc, #124]	; (800be70 <HAL_TIM_Base_Start_IT+0xdc>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d00e      	beq.n	800be14 <HAL_TIM_Base_Start_IT+0x80>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a1e      	ldr	r2, [pc, #120]	; (800be74 <HAL_TIM_Base_Start_IT+0xe0>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d009      	beq.n	800be14 <HAL_TIM_Base_Start_IT+0x80>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a1c      	ldr	r2, [pc, #112]	; (800be78 <HAL_TIM_Base_Start_IT+0xe4>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d004      	beq.n	800be14 <HAL_TIM_Base_Start_IT+0x80>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a1b      	ldr	r2, [pc, #108]	; (800be7c <HAL_TIM_Base_Start_IT+0xe8>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d115      	bne.n	800be40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	4b19      	ldr	r3, [pc, #100]	; (800be80 <HAL_TIM_Base_Start_IT+0xec>)
 800be1c:	4013      	ands	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2b06      	cmp	r3, #6
 800be24:	d015      	beq.n	800be52 <HAL_TIM_Base_Start_IT+0xbe>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be2c:	d011      	beq.n	800be52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f042 0201 	orr.w	r2, r2, #1
 800be3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be3e:	e008      	b.n	800be52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f042 0201 	orr.w	r2, r2, #1
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	e000      	b.n	800be54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	40010000 	.word	0x40010000
 800be68:	40000400 	.word	0x40000400
 800be6c:	40000800 	.word	0x40000800
 800be70:	40000c00 	.word	0x40000c00
 800be74:	40010400 	.word	0x40010400
 800be78:	40014000 	.word	0x40014000
 800be7c:	40001800 	.word	0x40001800
 800be80:	00010007 	.word	0x00010007

0800be84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	e049      	b.n	800bf2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d106      	bne.n	800beb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7f6 fd3a 	bl	8002924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2202      	movs	r2, #2
 800beb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3304      	adds	r3, #4
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f000 fb52 	bl	800c56c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b082      	sub	sp, #8
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	f003 0302 	and.w	r3, r3, #2
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d122      	bne.n	800bf8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	f003 0302 	and.w	r3, r3, #2
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d11b      	bne.n	800bf8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f06f 0202 	mvn.w	r2, #2
 800bf5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	f003 0303 	and.w	r3, r3, #3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fadb 	bl	800c530 <HAL_TIM_IC_CaptureCallback>
 800bf7a:	e005      	b.n	800bf88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 facd 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fade 	bl	800c544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	f003 0304 	and.w	r3, r3, #4
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	d122      	bne.n	800bfe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	f003 0304 	and.w	r3, r3, #4
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	d11b      	bne.n	800bfe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f06f 0204 	mvn.w	r2, #4
 800bfb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d003      	beq.n	800bfd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fab1 	bl	800c530 <HAL_TIM_IC_CaptureCallback>
 800bfce:	e005      	b.n	800bfdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 faa3 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fab4 	bl	800c544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	f003 0308 	and.w	r3, r3, #8
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d122      	bne.n	800c036 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	f003 0308 	and.w	r3, r3, #8
 800bffa:	2b08      	cmp	r3, #8
 800bffc:	d11b      	bne.n	800c036 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f06f 0208 	mvn.w	r2, #8
 800c006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2204      	movs	r2, #4
 800c00c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	f003 0303 	and.w	r3, r3, #3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d003      	beq.n	800c024 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fa87 	bl	800c530 <HAL_TIM_IC_CaptureCallback>
 800c022:	e005      	b.n	800c030 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fa79 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fa8a 	bl	800c544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	f003 0310 	and.w	r3, r3, #16
 800c040:	2b10      	cmp	r3, #16
 800c042:	d122      	bne.n	800c08a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	f003 0310 	and.w	r3, r3, #16
 800c04e:	2b10      	cmp	r3, #16
 800c050:	d11b      	bne.n	800c08a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f06f 0210 	mvn.w	r2, #16
 800c05a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2208      	movs	r2, #8
 800c060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fa5d 	bl	800c530 <HAL_TIM_IC_CaptureCallback>
 800c076:	e005      	b.n	800c084 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fa4f 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa60 	bl	800c544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b01      	cmp	r3, #1
 800c096:	d10e      	bne.n	800c0b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d107      	bne.n	800c0b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f06f 0201 	mvn.w	r2, #1
 800c0ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7f5 fb51 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c0:	2b80      	cmp	r3, #128	; 0x80
 800c0c2:	d10e      	bne.n	800c0e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ce:	2b80      	cmp	r3, #128	; 0x80
 800c0d0:	d107      	bne.n	800c0e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c0da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fef3 	bl	800cec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f0:	d10e      	bne.n	800c110 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0fc:	2b80      	cmp	r3, #128	; 0x80
 800c0fe:	d107      	bne.n	800c110 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fee6 	bl	800cedc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11a:	2b40      	cmp	r3, #64	; 0x40
 800c11c:	d10e      	bne.n	800c13c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c128:	2b40      	cmp	r3, #64	; 0x40
 800c12a:	d107      	bne.n	800c13c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fa0e 	bl	800c558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	f003 0320 	and.w	r3, r3, #32
 800c146:	2b20      	cmp	r3, #32
 800c148:	d10e      	bne.n	800c168 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	f003 0320 	and.w	r3, r3, #32
 800c154:	2b20      	cmp	r3, #32
 800c156:	d107      	bne.n	800c168 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f06f 0220 	mvn.w	r2, #32
 800c160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fea6 	bl	800ceb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c168:	bf00      	nop
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c182:	2b01      	cmp	r3, #1
 800c184:	d101      	bne.n	800c18a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c186:	2302      	movs	r3, #2
 800c188:	e0fd      	b.n	800c386 <HAL_TIM_PWM_ConfigChannel+0x216>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b14      	cmp	r3, #20
 800c196:	f200 80f0 	bhi.w	800c37a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c19a:	a201      	add	r2, pc, #4	; (adr r2, 800c1a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1f5 	.word	0x0800c1f5
 800c1a4:	0800c37b 	.word	0x0800c37b
 800c1a8:	0800c37b 	.word	0x0800c37b
 800c1ac:	0800c37b 	.word	0x0800c37b
 800c1b0:	0800c235 	.word	0x0800c235
 800c1b4:	0800c37b 	.word	0x0800c37b
 800c1b8:	0800c37b 	.word	0x0800c37b
 800c1bc:	0800c37b 	.word	0x0800c37b
 800c1c0:	0800c277 	.word	0x0800c277
 800c1c4:	0800c37b 	.word	0x0800c37b
 800c1c8:	0800c37b 	.word	0x0800c37b
 800c1cc:	0800c37b 	.word	0x0800c37b
 800c1d0:	0800c2b7 	.word	0x0800c2b7
 800c1d4:	0800c37b 	.word	0x0800c37b
 800c1d8:	0800c37b 	.word	0x0800c37b
 800c1dc:	0800c37b 	.word	0x0800c37b
 800c1e0:	0800c2f9 	.word	0x0800c2f9
 800c1e4:	0800c37b 	.word	0x0800c37b
 800c1e8:	0800c37b 	.word	0x0800c37b
 800c1ec:	0800c37b 	.word	0x0800c37b
 800c1f0:	0800c339 	.word	0x0800c339
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 fa56 	bl	800c6ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	699a      	ldr	r2, [r3, #24]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f042 0208 	orr.w	r2, r2, #8
 800c20e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	699a      	ldr	r2, [r3, #24]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f022 0204 	bic.w	r2, r2, #4
 800c21e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6999      	ldr	r1, [r3, #24]
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	691a      	ldr	r2, [r3, #16]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	430a      	orrs	r2, r1
 800c230:	619a      	str	r2, [r3, #24]
      break;
 800c232:	e0a3      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 faa8 	bl	800c790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	699a      	ldr	r2, [r3, #24]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c24e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	699a      	ldr	r2, [r3, #24]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c25e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6999      	ldr	r1, [r3, #24]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	021a      	lsls	r2, r3, #8
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	430a      	orrs	r2, r1
 800c272:	619a      	str	r2, [r3, #24]
      break;
 800c274:	e082      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68b9      	ldr	r1, [r7, #8]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 faff 	bl	800c880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	69da      	ldr	r2, [r3, #28]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f042 0208 	orr.w	r2, r2, #8
 800c290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	69da      	ldr	r2, [r3, #28]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 0204 	bic.w	r2, r2, #4
 800c2a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	69d9      	ldr	r1, [r3, #28]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	691a      	ldr	r2, [r3, #16]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	430a      	orrs	r2, r1
 800c2b2:	61da      	str	r2, [r3, #28]
      break;
 800c2b4:	e062      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68b9      	ldr	r1, [r7, #8]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 fb55 	bl	800c96c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	69da      	ldr	r2, [r3, #28]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	69da      	ldr	r2, [r3, #28]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	69d9      	ldr	r1, [r3, #28]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	021a      	lsls	r2, r3, #8
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	61da      	str	r2, [r3, #28]
      break;
 800c2f6:	e041      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68b9      	ldr	r1, [r7, #8]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fb8c 	bl	800ca1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f042 0208 	orr.w	r2, r2, #8
 800c312:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f022 0204 	bic.w	r2, r2, #4
 800c322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	691a      	ldr	r2, [r3, #16]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	430a      	orrs	r2, r1
 800c334:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c336:	e021      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 fbbe 	bl	800cac0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	021a      	lsls	r2, r3, #8
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	430a      	orrs	r2, r1
 800c376:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c378:	e000      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c37a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop

0800c390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <HAL_TIM_ConfigClockSource+0x18>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e0b3      	b.n	800c510 <HAL_TIM_ConfigClockSource+0x180>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	4b55      	ldr	r3, [pc, #340]	; (800c518 <HAL_TIM_ConfigClockSource+0x188>)
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e0:	d03e      	beq.n	800c460 <HAL_TIM_ConfigClockSource+0xd0>
 800c3e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e6:	f200 8087 	bhi.w	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ee:	f000 8085 	beq.w	800c4fc <HAL_TIM_ConfigClockSource+0x16c>
 800c3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3f6:	d87f      	bhi.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c3f8:	2b70      	cmp	r3, #112	; 0x70
 800c3fa:	d01a      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0xa2>
 800c3fc:	2b70      	cmp	r3, #112	; 0x70
 800c3fe:	d87b      	bhi.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c400:	2b60      	cmp	r3, #96	; 0x60
 800c402:	d050      	beq.n	800c4a6 <HAL_TIM_ConfigClockSource+0x116>
 800c404:	2b60      	cmp	r3, #96	; 0x60
 800c406:	d877      	bhi.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c408:	2b50      	cmp	r3, #80	; 0x50
 800c40a:	d03c      	beq.n	800c486 <HAL_TIM_ConfigClockSource+0xf6>
 800c40c:	2b50      	cmp	r3, #80	; 0x50
 800c40e:	d873      	bhi.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c410:	2b40      	cmp	r3, #64	; 0x40
 800c412:	d058      	beq.n	800c4c6 <HAL_TIM_ConfigClockSource+0x136>
 800c414:	2b40      	cmp	r3, #64	; 0x40
 800c416:	d86f      	bhi.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c418:	2b30      	cmp	r3, #48	; 0x30
 800c41a:	d064      	beq.n	800c4e6 <HAL_TIM_ConfigClockSource+0x156>
 800c41c:	2b30      	cmp	r3, #48	; 0x30
 800c41e:	d86b      	bhi.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c420:	2b20      	cmp	r3, #32
 800c422:	d060      	beq.n	800c4e6 <HAL_TIM_ConfigClockSource+0x156>
 800c424:	2b20      	cmp	r3, #32
 800c426:	d867      	bhi.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d05c      	beq.n	800c4e6 <HAL_TIM_ConfigClockSource+0x156>
 800c42c:	2b10      	cmp	r3, #16
 800c42e:	d05a      	beq.n	800c4e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c430:	e062      	b.n	800c4f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6818      	ldr	r0, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	6899      	ldr	r1, [r3, #8]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f000 fc0b 	bl	800cc5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c454:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	609a      	str	r2, [r3, #8]
      break;
 800c45e:	e04e      	b.n	800c4fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	6899      	ldr	r1, [r3, #8]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f000 fbf4 	bl	800cc5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689a      	ldr	r2, [r3, #8]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c482:	609a      	str	r2, [r3, #8]
      break;
 800c484:	e03b      	b.n	800c4fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6818      	ldr	r0, [r3, #0]
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	6859      	ldr	r1, [r3, #4]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	461a      	mov	r2, r3
 800c494:	f000 fb68 	bl	800cb68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2150      	movs	r1, #80	; 0x50
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 fbc1 	bl	800cc26 <TIM_ITRx_SetConfig>
      break;
 800c4a4:	e02b      	b.n	800c4fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6818      	ldr	r0, [r3, #0]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	6859      	ldr	r1, [r3, #4]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	f000 fb87 	bl	800cbc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2160      	movs	r1, #96	; 0x60
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 fbb1 	bl	800cc26 <TIM_ITRx_SetConfig>
      break;
 800c4c4:	e01b      	b.n	800c4fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6818      	ldr	r0, [r3, #0]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	6859      	ldr	r1, [r3, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f000 fb48 	bl	800cb68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2140      	movs	r1, #64	; 0x40
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 fba1 	bl	800cc26 <TIM_ITRx_SetConfig>
      break;
 800c4e4:	e00b      	b.n	800c4fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	f000 fb98 	bl	800cc26 <TIM_ITRx_SetConfig>
        break;
 800c4f6:	e002      	b.n	800c4fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800c4f8:	bf00      	nop
 800c4fa:	e000      	b.n	800c4fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800c4fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	fffeff88 	.word	0xfffeff88

0800c51c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a40      	ldr	r2, [pc, #256]	; (800c680 <TIM_Base_SetConfig+0x114>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d013      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c58a:	d00f      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a3d      	ldr	r2, [pc, #244]	; (800c684 <TIM_Base_SetConfig+0x118>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d00b      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a3c      	ldr	r2, [pc, #240]	; (800c688 <TIM_Base_SetConfig+0x11c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d007      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a3b      	ldr	r2, [pc, #236]	; (800c68c <TIM_Base_SetConfig+0x120>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d003      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a3a      	ldr	r2, [pc, #232]	; (800c690 <TIM_Base_SetConfig+0x124>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d108      	bne.n	800c5be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a2f      	ldr	r2, [pc, #188]	; (800c680 <TIM_Base_SetConfig+0x114>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d02b      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5cc:	d027      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a2c      	ldr	r2, [pc, #176]	; (800c684 <TIM_Base_SetConfig+0x118>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d023      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a2b      	ldr	r2, [pc, #172]	; (800c688 <TIM_Base_SetConfig+0x11c>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d01f      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a2a      	ldr	r2, [pc, #168]	; (800c68c <TIM_Base_SetConfig+0x120>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d01b      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a29      	ldr	r2, [pc, #164]	; (800c690 <TIM_Base_SetConfig+0x124>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d017      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a28      	ldr	r2, [pc, #160]	; (800c694 <TIM_Base_SetConfig+0x128>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d013      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a27      	ldr	r2, [pc, #156]	; (800c698 <TIM_Base_SetConfig+0x12c>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d00f      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a26      	ldr	r2, [pc, #152]	; (800c69c <TIM_Base_SetConfig+0x130>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d00b      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a25      	ldr	r2, [pc, #148]	; (800c6a0 <TIM_Base_SetConfig+0x134>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d007      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a24      	ldr	r2, [pc, #144]	; (800c6a4 <TIM_Base_SetConfig+0x138>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d003      	beq.n	800c61e <TIM_Base_SetConfig+0xb2>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a23      	ldr	r2, [pc, #140]	; (800c6a8 <TIM_Base_SetConfig+0x13c>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d108      	bne.n	800c630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	689a      	ldr	r2, [r3, #8]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a0a      	ldr	r2, [pc, #40]	; (800c680 <TIM_Base_SetConfig+0x114>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d003      	beq.n	800c664 <TIM_Base_SetConfig+0xf8>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a0c      	ldr	r2, [pc, #48]	; (800c690 <TIM_Base_SetConfig+0x124>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d103      	bne.n	800c66c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	691a      	ldr	r2, [r3, #16]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	615a      	str	r2, [r3, #20]
}
 800c672:	bf00      	nop
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	40010000 	.word	0x40010000
 800c684:	40000400 	.word	0x40000400
 800c688:	40000800 	.word	0x40000800
 800c68c:	40000c00 	.word	0x40000c00
 800c690:	40010400 	.word	0x40010400
 800c694:	40014000 	.word	0x40014000
 800c698:	40014400 	.word	0x40014400
 800c69c:	40014800 	.word	0x40014800
 800c6a0:	40001800 	.word	0x40001800
 800c6a4:	40001c00 	.word	0x40001c00
 800c6a8:	40002000 	.word	0x40002000

0800c6ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b087      	sub	sp, #28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a1b      	ldr	r3, [r3, #32]
 800c6ba:	f023 0201 	bic.w	r2, r3, #1
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	4b2b      	ldr	r3, [pc, #172]	; (800c784 <TIM_OC1_SetConfig+0xd8>)
 800c6d8:	4013      	ands	r3, r2
 800c6da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f023 0303 	bic.w	r3, r3, #3
 800c6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f023 0302 	bic.w	r3, r3, #2
 800c6f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a21      	ldr	r2, [pc, #132]	; (800c788 <TIM_OC1_SetConfig+0xdc>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d003      	beq.n	800c710 <TIM_OC1_SetConfig+0x64>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a20      	ldr	r2, [pc, #128]	; (800c78c <TIM_OC1_SetConfig+0xe0>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d10c      	bne.n	800c72a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f023 0308 	bic.w	r3, r3, #8
 800c716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	4313      	orrs	r3, r2
 800c720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f023 0304 	bic.w	r3, r3, #4
 800c728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a16      	ldr	r2, [pc, #88]	; (800c788 <TIM_OC1_SetConfig+0xdc>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d003      	beq.n	800c73a <TIM_OC1_SetConfig+0x8e>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a15      	ldr	r2, [pc, #84]	; (800c78c <TIM_OC1_SetConfig+0xe0>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d111      	bne.n	800c75e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	4313      	orrs	r3, r2
 800c752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	693a      	ldr	r2, [r7, #16]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	621a      	str	r2, [r3, #32]
}
 800c778:	bf00      	nop
 800c77a:	371c      	adds	r7, #28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr
 800c784:	fffeff8f 	.word	0xfffeff8f
 800c788:	40010000 	.word	0x40010000
 800c78c:	40010400 	.word	0x40010400

0800c790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c790:	b480      	push	{r7}
 800c792:	b087      	sub	sp, #28
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	f023 0210 	bic.w	r2, r3, #16
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	699b      	ldr	r3, [r3, #24]
 800c7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4b2e      	ldr	r3, [pc, #184]	; (800c874 <TIM_OC2_SetConfig+0xe4>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	021b      	lsls	r3, r3, #8
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f023 0320 	bic.w	r3, r3, #32
 800c7da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	011b      	lsls	r3, r3, #4
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a23      	ldr	r2, [pc, #140]	; (800c878 <TIM_OC2_SetConfig+0xe8>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d003      	beq.n	800c7f8 <TIM_OC2_SetConfig+0x68>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a22      	ldr	r2, [pc, #136]	; (800c87c <TIM_OC2_SetConfig+0xec>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d10d      	bne.n	800c814 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	011b      	lsls	r3, r3, #4
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	4313      	orrs	r3, r2
 800c80a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a18      	ldr	r2, [pc, #96]	; (800c878 <TIM_OC2_SetConfig+0xe8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d003      	beq.n	800c824 <TIM_OC2_SetConfig+0x94>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a17      	ldr	r2, [pc, #92]	; (800c87c <TIM_OC2_SetConfig+0xec>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d113      	bne.n	800c84c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c82a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	4313      	orrs	r3, r2
 800c84a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	621a      	str	r2, [r3, #32]
}
 800c866:	bf00      	nop
 800c868:	371c      	adds	r7, #28
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	feff8fff 	.word	0xfeff8fff
 800c878:	40010000 	.word	0x40010000
 800c87c:	40010400 	.word	0x40010400

0800c880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c880:	b480      	push	{r7}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4b2d      	ldr	r3, [pc, #180]	; (800c960 <TIM_OC3_SetConfig+0xe0>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f023 0303 	bic.w	r3, r3, #3
 800c8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a22      	ldr	r2, [pc, #136]	; (800c964 <TIM_OC3_SetConfig+0xe4>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d003      	beq.n	800c8e6 <TIM_OC3_SetConfig+0x66>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a21      	ldr	r2, [pc, #132]	; (800c968 <TIM_OC3_SetConfig+0xe8>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d10d      	bne.n	800c902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	021b      	lsls	r3, r3, #8
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a17      	ldr	r2, [pc, #92]	; (800c964 <TIM_OC3_SetConfig+0xe4>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d003      	beq.n	800c912 <TIM_OC3_SetConfig+0x92>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a16      	ldr	r2, [pc, #88]	; (800c968 <TIM_OC3_SetConfig+0xe8>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d113      	bne.n	800c93a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	011b      	lsls	r3, r3, #4
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	699b      	ldr	r3, [r3, #24]
 800c932:	011b      	lsls	r3, r3, #4
 800c934:	693a      	ldr	r2, [r7, #16]
 800c936:	4313      	orrs	r3, r2
 800c938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	685a      	ldr	r2, [r3, #4]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	621a      	str	r2, [r3, #32]
}
 800c954:	bf00      	nop
 800c956:	371c      	adds	r7, #28
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr
 800c960:	fffeff8f 	.word	0xfffeff8f
 800c964:	40010000 	.word	0x40010000
 800c968:	40010400 	.word	0x40010400

0800c96c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b087      	sub	sp, #28
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	4b1e      	ldr	r3, [pc, #120]	; (800ca10 <TIM_OC4_SetConfig+0xa4>)
 800c998:	4013      	ands	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	021b      	lsls	r3, r3, #8
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	031b      	lsls	r3, r3, #12
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a13      	ldr	r2, [pc, #76]	; (800ca14 <TIM_OC4_SetConfig+0xa8>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d003      	beq.n	800c9d4 <TIM_OC4_SetConfig+0x68>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a12      	ldr	r2, [pc, #72]	; (800ca18 <TIM_OC4_SetConfig+0xac>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d109      	bne.n	800c9e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	019b      	lsls	r3, r3, #6
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	685a      	ldr	r2, [r3, #4]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	feff8fff 	.word	0xfeff8fff
 800ca14:	40010000 	.word	0x40010000
 800ca18:	40010400 	.word	0x40010400

0800ca1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	4b1b      	ldr	r3, [pc, #108]	; (800cab4 <TIM_OC5_SetConfig+0x98>)
 800ca48:	4013      	ands	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	041b      	lsls	r3, r3, #16
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a12      	ldr	r2, [pc, #72]	; (800cab8 <TIM_OC5_SetConfig+0x9c>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d003      	beq.n	800ca7a <TIM_OC5_SetConfig+0x5e>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a11      	ldr	r2, [pc, #68]	; (800cabc <TIM_OC5_SetConfig+0xa0>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d109      	bne.n	800ca8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	621a      	str	r2, [r3, #32]
}
 800caa8:	bf00      	nop
 800caaa:	371c      	adds	r7, #28
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	fffeff8f 	.word	0xfffeff8f
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40010400 	.word	0x40010400

0800cac0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a1b      	ldr	r3, [r3, #32]
 800cace:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	4b1c      	ldr	r3, [pc, #112]	; (800cb5c <TIM_OC6_SetConfig+0x9c>)
 800caec:	4013      	ands	r3, r2
 800caee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	021b      	lsls	r3, r3, #8
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	051b      	lsls	r3, r3, #20
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a13      	ldr	r2, [pc, #76]	; (800cb60 <TIM_OC6_SetConfig+0xa0>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d003      	beq.n	800cb20 <TIM_OC6_SetConfig+0x60>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a12      	ldr	r2, [pc, #72]	; (800cb64 <TIM_OC6_SetConfig+0xa4>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d109      	bne.n	800cb34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	695b      	ldr	r3, [r3, #20]
 800cb2c:	029b      	lsls	r3, r3, #10
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	621a      	str	r2, [r3, #32]
}
 800cb4e:	bf00      	nop
 800cb50:	371c      	adds	r7, #28
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	feff8fff 	.word	0xfeff8fff
 800cb60:	40010000 	.word	0x40010000
 800cb64:	40010400 	.word	0x40010400

0800cb68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b087      	sub	sp, #28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6a1b      	ldr	r3, [r3, #32]
 800cb78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	f023 0201 	bic.w	r2, r3, #1
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	011b      	lsls	r3, r3, #4
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f023 030a 	bic.w	r3, r3, #10
 800cba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	621a      	str	r2, [r3, #32]
}
 800cbba:	bf00      	nop
 800cbbc:	371c      	adds	r7, #28
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	b087      	sub	sp, #28
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	60f8      	str	r0, [r7, #12]
 800cbce:	60b9      	str	r1, [r7, #8]
 800cbd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	f023 0210 	bic.w	r2, r3, #16
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cbf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	031b      	lsls	r3, r3, #12
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	011b      	lsls	r3, r3, #4
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	621a      	str	r2, [r3, #32]
}
 800cc1a:	bf00      	nop
 800cc1c:	371c      	adds	r7, #28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc26:	b480      	push	{r7}
 800cc28:	b085      	sub	sp, #20
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	f043 0307 	orr.w	r3, r3, #7
 800cc48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	609a      	str	r2, [r3, #8]
}
 800cc50:	bf00      	nop
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
 800cc68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	021a      	lsls	r2, r3, #8
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	431a      	orrs	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	697a      	ldr	r2, [r7, #20]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	609a      	str	r2, [r3, #8]
}
 800cc90:	bf00      	nop
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d101      	bne.n	800ccb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	e06d      	b.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a30      	ldr	r2, [pc, #192]	; (800cd9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d004      	beq.n	800cce8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a2f      	ldr	r2, [pc, #188]	; (800cda0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d108      	bne.n	800ccfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ccee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a20      	ldr	r2, [pc, #128]	; (800cd9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d022      	beq.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd26:	d01d      	beq.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a1d      	ldr	r2, [pc, #116]	; (800cda4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d018      	beq.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a1c      	ldr	r2, [pc, #112]	; (800cda8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d013      	beq.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a1a      	ldr	r2, [pc, #104]	; (800cdac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d00e      	beq.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a15      	ldr	r2, [pc, #84]	; (800cda0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d009      	beq.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a16      	ldr	r2, [pc, #88]	; (800cdb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d004      	beq.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a15      	ldr	r2, [pc, #84]	; (800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d10c      	bne.n	800cd7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	40010000 	.word	0x40010000
 800cda0:	40010400 	.word	0x40010400
 800cda4:	40000400 	.word	0x40000400
 800cda8:	40000800 	.word	0x40000800
 800cdac:	40000c00 	.word	0x40000c00
 800cdb0:	40014000 	.word	0x40014000
 800cdb4:	40001800 	.word	0x40001800

0800cdb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d101      	bne.n	800cdd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	e065      	b.n	800cea0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	041b      	lsls	r3, r3, #16
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a16      	ldr	r2, [pc, #88]	; (800ceac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d004      	beq.n	800ce62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a14      	ldr	r2, [pc, #80]	; (800ceb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d115      	bne.n	800ce8e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6c:	051b      	lsls	r3, r3, #20
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	69db      	ldr	r3, [r3, #28]
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	40010000 	.word	0x40010000
 800ceb0:	40010400 	.word	0x40010400

0800ceb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e040      	b.n	800cf84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7f5 fe54 	bl	8002bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2224      	movs	r2, #36	; 0x24
 800cf1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f022 0201 	bic.w	r2, r2, #1
 800cf2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f82c 	bl	800cf8c <UART_SetConfig>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d101      	bne.n	800cf3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e022      	b.n	800cf84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d002      	beq.n	800cf4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa82 	bl	800d450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f042 0201 	orr.w	r2, r2, #1
 800cf7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fb09 	bl	800d594 <UART_CheckIdleState>
 800cf82:	4603      	mov	r3, r0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b088      	sub	sp, #32
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	431a      	orrs	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	69db      	ldr	r3, [r3, #28]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	4ba7      	ldr	r3, [pc, #668]	; (800d254 <UART_SetConfig+0x2c8>)
 800cfb8:	4013      	ands	r3, r2
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	6812      	ldr	r2, [r2, #0]
 800cfbe:	6979      	ldr	r1, [r7, #20]
 800cfc0:	430b      	orrs	r3, r1
 800cfc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	430a      	orrs	r2, r1
 800cfd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a1b      	ldr	r3, [r3, #32]
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a95      	ldr	r2, [pc, #596]	; (800d258 <UART_SetConfig+0x2cc>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d120      	bne.n	800d04a <UART_SetConfig+0xbe>
 800d008:	4b94      	ldr	r3, [pc, #592]	; (800d25c <UART_SetConfig+0x2d0>)
 800d00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d00e:	f003 0303 	and.w	r3, r3, #3
 800d012:	2b03      	cmp	r3, #3
 800d014:	d816      	bhi.n	800d044 <UART_SetConfig+0xb8>
 800d016:	a201      	add	r2, pc, #4	; (adr r2, 800d01c <UART_SetConfig+0x90>)
 800d018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d01c:	0800d02d 	.word	0x0800d02d
 800d020:	0800d039 	.word	0x0800d039
 800d024:	0800d033 	.word	0x0800d033
 800d028:	0800d03f 	.word	0x0800d03f
 800d02c:	2301      	movs	r3, #1
 800d02e:	77fb      	strb	r3, [r7, #31]
 800d030:	e14f      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d032:	2302      	movs	r3, #2
 800d034:	77fb      	strb	r3, [r7, #31]
 800d036:	e14c      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d038:	2304      	movs	r3, #4
 800d03a:	77fb      	strb	r3, [r7, #31]
 800d03c:	e149      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d03e:	2308      	movs	r3, #8
 800d040:	77fb      	strb	r3, [r7, #31]
 800d042:	e146      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d044:	2310      	movs	r3, #16
 800d046:	77fb      	strb	r3, [r7, #31]
 800d048:	e143      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a84      	ldr	r2, [pc, #528]	; (800d260 <UART_SetConfig+0x2d4>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d132      	bne.n	800d0ba <UART_SetConfig+0x12e>
 800d054:	4b81      	ldr	r3, [pc, #516]	; (800d25c <UART_SetConfig+0x2d0>)
 800d056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d05a:	f003 030c 	and.w	r3, r3, #12
 800d05e:	2b0c      	cmp	r3, #12
 800d060:	d828      	bhi.n	800d0b4 <UART_SetConfig+0x128>
 800d062:	a201      	add	r2, pc, #4	; (adr r2, 800d068 <UART_SetConfig+0xdc>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d09d 	.word	0x0800d09d
 800d06c:	0800d0b5 	.word	0x0800d0b5
 800d070:	0800d0b5 	.word	0x0800d0b5
 800d074:	0800d0b5 	.word	0x0800d0b5
 800d078:	0800d0a9 	.word	0x0800d0a9
 800d07c:	0800d0b5 	.word	0x0800d0b5
 800d080:	0800d0b5 	.word	0x0800d0b5
 800d084:	0800d0b5 	.word	0x0800d0b5
 800d088:	0800d0a3 	.word	0x0800d0a3
 800d08c:	0800d0b5 	.word	0x0800d0b5
 800d090:	0800d0b5 	.word	0x0800d0b5
 800d094:	0800d0b5 	.word	0x0800d0b5
 800d098:	0800d0af 	.word	0x0800d0af
 800d09c:	2300      	movs	r3, #0
 800d09e:	77fb      	strb	r3, [r7, #31]
 800d0a0:	e117      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0a2:	2302      	movs	r3, #2
 800d0a4:	77fb      	strb	r3, [r7, #31]
 800d0a6:	e114      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0a8:	2304      	movs	r3, #4
 800d0aa:	77fb      	strb	r3, [r7, #31]
 800d0ac:	e111      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0ae:	2308      	movs	r3, #8
 800d0b0:	77fb      	strb	r3, [r7, #31]
 800d0b2:	e10e      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0b4:	2310      	movs	r3, #16
 800d0b6:	77fb      	strb	r3, [r7, #31]
 800d0b8:	e10b      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a69      	ldr	r2, [pc, #420]	; (800d264 <UART_SetConfig+0x2d8>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d120      	bne.n	800d106 <UART_SetConfig+0x17a>
 800d0c4:	4b65      	ldr	r3, [pc, #404]	; (800d25c <UART_SetConfig+0x2d0>)
 800d0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d0ce:	2b30      	cmp	r3, #48	; 0x30
 800d0d0:	d013      	beq.n	800d0fa <UART_SetConfig+0x16e>
 800d0d2:	2b30      	cmp	r3, #48	; 0x30
 800d0d4:	d814      	bhi.n	800d100 <UART_SetConfig+0x174>
 800d0d6:	2b20      	cmp	r3, #32
 800d0d8:	d009      	beq.n	800d0ee <UART_SetConfig+0x162>
 800d0da:	2b20      	cmp	r3, #32
 800d0dc:	d810      	bhi.n	800d100 <UART_SetConfig+0x174>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <UART_SetConfig+0x15c>
 800d0e2:	2b10      	cmp	r3, #16
 800d0e4:	d006      	beq.n	800d0f4 <UART_SetConfig+0x168>
 800d0e6:	e00b      	b.n	800d100 <UART_SetConfig+0x174>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	77fb      	strb	r3, [r7, #31]
 800d0ec:	e0f1      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	77fb      	strb	r3, [r7, #31]
 800d0f2:	e0ee      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0f4:	2304      	movs	r3, #4
 800d0f6:	77fb      	strb	r3, [r7, #31]
 800d0f8:	e0eb      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d0fa:	2308      	movs	r3, #8
 800d0fc:	77fb      	strb	r3, [r7, #31]
 800d0fe:	e0e8      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d100:	2310      	movs	r3, #16
 800d102:	77fb      	strb	r3, [r7, #31]
 800d104:	e0e5      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a57      	ldr	r2, [pc, #348]	; (800d268 <UART_SetConfig+0x2dc>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d120      	bne.n	800d152 <UART_SetConfig+0x1c6>
 800d110:	4b52      	ldr	r3, [pc, #328]	; (800d25c <UART_SetConfig+0x2d0>)
 800d112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d11a:	2bc0      	cmp	r3, #192	; 0xc0
 800d11c:	d013      	beq.n	800d146 <UART_SetConfig+0x1ba>
 800d11e:	2bc0      	cmp	r3, #192	; 0xc0
 800d120:	d814      	bhi.n	800d14c <UART_SetConfig+0x1c0>
 800d122:	2b80      	cmp	r3, #128	; 0x80
 800d124:	d009      	beq.n	800d13a <UART_SetConfig+0x1ae>
 800d126:	2b80      	cmp	r3, #128	; 0x80
 800d128:	d810      	bhi.n	800d14c <UART_SetConfig+0x1c0>
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <UART_SetConfig+0x1a8>
 800d12e:	2b40      	cmp	r3, #64	; 0x40
 800d130:	d006      	beq.n	800d140 <UART_SetConfig+0x1b4>
 800d132:	e00b      	b.n	800d14c <UART_SetConfig+0x1c0>
 800d134:	2300      	movs	r3, #0
 800d136:	77fb      	strb	r3, [r7, #31]
 800d138:	e0cb      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d13a:	2302      	movs	r3, #2
 800d13c:	77fb      	strb	r3, [r7, #31]
 800d13e:	e0c8      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d140:	2304      	movs	r3, #4
 800d142:	77fb      	strb	r3, [r7, #31]
 800d144:	e0c5      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d146:	2308      	movs	r3, #8
 800d148:	77fb      	strb	r3, [r7, #31]
 800d14a:	e0c2      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d14c:	2310      	movs	r3, #16
 800d14e:	77fb      	strb	r3, [r7, #31]
 800d150:	e0bf      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a45      	ldr	r2, [pc, #276]	; (800d26c <UART_SetConfig+0x2e0>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d125      	bne.n	800d1a8 <UART_SetConfig+0x21c>
 800d15c:	4b3f      	ldr	r3, [pc, #252]	; (800d25c <UART_SetConfig+0x2d0>)
 800d15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d16a:	d017      	beq.n	800d19c <UART_SetConfig+0x210>
 800d16c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d170:	d817      	bhi.n	800d1a2 <UART_SetConfig+0x216>
 800d172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d176:	d00b      	beq.n	800d190 <UART_SetConfig+0x204>
 800d178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d17c:	d811      	bhi.n	800d1a2 <UART_SetConfig+0x216>
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d003      	beq.n	800d18a <UART_SetConfig+0x1fe>
 800d182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d186:	d006      	beq.n	800d196 <UART_SetConfig+0x20a>
 800d188:	e00b      	b.n	800d1a2 <UART_SetConfig+0x216>
 800d18a:	2300      	movs	r3, #0
 800d18c:	77fb      	strb	r3, [r7, #31]
 800d18e:	e0a0      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d190:	2302      	movs	r3, #2
 800d192:	77fb      	strb	r3, [r7, #31]
 800d194:	e09d      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d196:	2304      	movs	r3, #4
 800d198:	77fb      	strb	r3, [r7, #31]
 800d19a:	e09a      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d19c:	2308      	movs	r3, #8
 800d19e:	77fb      	strb	r3, [r7, #31]
 800d1a0:	e097      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d1a2:	2310      	movs	r3, #16
 800d1a4:	77fb      	strb	r3, [r7, #31]
 800d1a6:	e094      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a30      	ldr	r2, [pc, #192]	; (800d270 <UART_SetConfig+0x2e4>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d125      	bne.n	800d1fe <UART_SetConfig+0x272>
 800d1b2:	4b2a      	ldr	r3, [pc, #168]	; (800d25c <UART_SetConfig+0x2d0>)
 800d1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d1bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d1c0:	d017      	beq.n	800d1f2 <UART_SetConfig+0x266>
 800d1c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d1c6:	d817      	bhi.n	800d1f8 <UART_SetConfig+0x26c>
 800d1c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1cc:	d00b      	beq.n	800d1e6 <UART_SetConfig+0x25a>
 800d1ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1d2:	d811      	bhi.n	800d1f8 <UART_SetConfig+0x26c>
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <UART_SetConfig+0x254>
 800d1d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1dc:	d006      	beq.n	800d1ec <UART_SetConfig+0x260>
 800d1de:	e00b      	b.n	800d1f8 <UART_SetConfig+0x26c>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	77fb      	strb	r3, [r7, #31]
 800d1e4:	e075      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	77fb      	strb	r3, [r7, #31]
 800d1ea:	e072      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	77fb      	strb	r3, [r7, #31]
 800d1f0:	e06f      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d1f2:	2308      	movs	r3, #8
 800d1f4:	77fb      	strb	r3, [r7, #31]
 800d1f6:	e06c      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d1f8:	2310      	movs	r3, #16
 800d1fa:	77fb      	strb	r3, [r7, #31]
 800d1fc:	e069      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a1c      	ldr	r2, [pc, #112]	; (800d274 <UART_SetConfig+0x2e8>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d137      	bne.n	800d278 <UART_SetConfig+0x2ec>
 800d208:	4b14      	ldr	r3, [pc, #80]	; (800d25c <UART_SetConfig+0x2d0>)
 800d20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d20e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d212:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d216:	d017      	beq.n	800d248 <UART_SetConfig+0x2bc>
 800d218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d21c:	d817      	bhi.n	800d24e <UART_SetConfig+0x2c2>
 800d21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d222:	d00b      	beq.n	800d23c <UART_SetConfig+0x2b0>
 800d224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d228:	d811      	bhi.n	800d24e <UART_SetConfig+0x2c2>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <UART_SetConfig+0x2aa>
 800d22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d232:	d006      	beq.n	800d242 <UART_SetConfig+0x2b6>
 800d234:	e00b      	b.n	800d24e <UART_SetConfig+0x2c2>
 800d236:	2300      	movs	r3, #0
 800d238:	77fb      	strb	r3, [r7, #31]
 800d23a:	e04a      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d23c:	2302      	movs	r3, #2
 800d23e:	77fb      	strb	r3, [r7, #31]
 800d240:	e047      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d242:	2304      	movs	r3, #4
 800d244:	77fb      	strb	r3, [r7, #31]
 800d246:	e044      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d248:	2308      	movs	r3, #8
 800d24a:	77fb      	strb	r3, [r7, #31]
 800d24c:	e041      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d24e:	2310      	movs	r3, #16
 800d250:	77fb      	strb	r3, [r7, #31]
 800d252:	e03e      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d254:	efff69f3 	.word	0xefff69f3
 800d258:	40011000 	.word	0x40011000
 800d25c:	40023800 	.word	0x40023800
 800d260:	40004400 	.word	0x40004400
 800d264:	40004800 	.word	0x40004800
 800d268:	40004c00 	.word	0x40004c00
 800d26c:	40005000 	.word	0x40005000
 800d270:	40011400 	.word	0x40011400
 800d274:	40007800 	.word	0x40007800
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a71      	ldr	r2, [pc, #452]	; (800d444 <UART_SetConfig+0x4b8>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d125      	bne.n	800d2ce <UART_SetConfig+0x342>
 800d282:	4b71      	ldr	r3, [pc, #452]	; (800d448 <UART_SetConfig+0x4bc>)
 800d284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d28c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d290:	d017      	beq.n	800d2c2 <UART_SetConfig+0x336>
 800d292:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d296:	d817      	bhi.n	800d2c8 <UART_SetConfig+0x33c>
 800d298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d29c:	d00b      	beq.n	800d2b6 <UART_SetConfig+0x32a>
 800d29e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2a2:	d811      	bhi.n	800d2c8 <UART_SetConfig+0x33c>
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d003      	beq.n	800d2b0 <UART_SetConfig+0x324>
 800d2a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2ac:	d006      	beq.n	800d2bc <UART_SetConfig+0x330>
 800d2ae:	e00b      	b.n	800d2c8 <UART_SetConfig+0x33c>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	77fb      	strb	r3, [r7, #31]
 800d2b4:	e00d      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	77fb      	strb	r3, [r7, #31]
 800d2ba:	e00a      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d2bc:	2304      	movs	r3, #4
 800d2be:	77fb      	strb	r3, [r7, #31]
 800d2c0:	e007      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d2c2:	2308      	movs	r3, #8
 800d2c4:	77fb      	strb	r3, [r7, #31]
 800d2c6:	e004      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	77fb      	strb	r3, [r7, #31]
 800d2cc:	e001      	b.n	800d2d2 <UART_SetConfig+0x346>
 800d2ce:	2310      	movs	r3, #16
 800d2d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2da:	d15b      	bne.n	800d394 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800d2dc:	7ffb      	ldrb	r3, [r7, #31]
 800d2de:	2b08      	cmp	r3, #8
 800d2e0:	d827      	bhi.n	800d332 <UART_SetConfig+0x3a6>
 800d2e2:	a201      	add	r2, pc, #4	; (adr r2, 800d2e8 <UART_SetConfig+0x35c>)
 800d2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e8:	0800d30d 	.word	0x0800d30d
 800d2ec:	0800d315 	.word	0x0800d315
 800d2f0:	0800d31d 	.word	0x0800d31d
 800d2f4:	0800d333 	.word	0x0800d333
 800d2f8:	0800d323 	.word	0x0800d323
 800d2fc:	0800d333 	.word	0x0800d333
 800d300:	0800d333 	.word	0x0800d333
 800d304:	0800d333 	.word	0x0800d333
 800d308:	0800d32b 	.word	0x0800d32b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d30c:	f7fb fff6 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
 800d310:	61b8      	str	r0, [r7, #24]
        break;
 800d312:	e013      	b.n	800d33c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d314:	f7fc f806 	bl	8009324 <HAL_RCC_GetPCLK2Freq>
 800d318:	61b8      	str	r0, [r7, #24]
        break;
 800d31a:	e00f      	b.n	800d33c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d31c:	4b4b      	ldr	r3, [pc, #300]	; (800d44c <UART_SetConfig+0x4c0>)
 800d31e:	61bb      	str	r3, [r7, #24]
        break;
 800d320:	e00c      	b.n	800d33c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d322:	f7fb ff29 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800d326:	61b8      	str	r0, [r7, #24]
        break;
 800d328:	e008      	b.n	800d33c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d32a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d32e:	61bb      	str	r3, [r7, #24]
        break;
 800d330:	e004      	b.n	800d33c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	77bb      	strb	r3, [r7, #30]
        break;
 800d33a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d074      	beq.n	800d42c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	005a      	lsls	r2, r3, #1
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	085b      	lsrs	r3, r3, #1
 800d34c:	441a      	add	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	fbb2 f3f3 	udiv	r3, r2, r3
 800d356:	b29b      	uxth	r3, r3
 800d358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	2b0f      	cmp	r3, #15
 800d35e:	d916      	bls.n	800d38e <UART_SetConfig+0x402>
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d366:	d212      	bcs.n	800d38e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f023 030f 	bic.w	r3, r3, #15
 800d370:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	085b      	lsrs	r3, r3, #1
 800d376:	b29b      	uxth	r3, r3
 800d378:	f003 0307 	and.w	r3, r3, #7
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	89fb      	ldrh	r3, [r7, #14]
 800d380:	4313      	orrs	r3, r2
 800d382:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	89fa      	ldrh	r2, [r7, #14]
 800d38a:	60da      	str	r2, [r3, #12]
 800d38c:	e04e      	b.n	800d42c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	77bb      	strb	r3, [r7, #30]
 800d392:	e04b      	b.n	800d42c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d394:	7ffb      	ldrb	r3, [r7, #31]
 800d396:	2b08      	cmp	r3, #8
 800d398:	d827      	bhi.n	800d3ea <UART_SetConfig+0x45e>
 800d39a:	a201      	add	r2, pc, #4	; (adr r2, 800d3a0 <UART_SetConfig+0x414>)
 800d39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a0:	0800d3c5 	.word	0x0800d3c5
 800d3a4:	0800d3cd 	.word	0x0800d3cd
 800d3a8:	0800d3d5 	.word	0x0800d3d5
 800d3ac:	0800d3eb 	.word	0x0800d3eb
 800d3b0:	0800d3db 	.word	0x0800d3db
 800d3b4:	0800d3eb 	.word	0x0800d3eb
 800d3b8:	0800d3eb 	.word	0x0800d3eb
 800d3bc:	0800d3eb 	.word	0x0800d3eb
 800d3c0:	0800d3e3 	.word	0x0800d3e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3c4:	f7fb ff9a 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
 800d3c8:	61b8      	str	r0, [r7, #24]
        break;
 800d3ca:	e013      	b.n	800d3f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3cc:	f7fb ffaa 	bl	8009324 <HAL_RCC_GetPCLK2Freq>
 800d3d0:	61b8      	str	r0, [r7, #24]
        break;
 800d3d2:	e00f      	b.n	800d3f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3d4:	4b1d      	ldr	r3, [pc, #116]	; (800d44c <UART_SetConfig+0x4c0>)
 800d3d6:	61bb      	str	r3, [r7, #24]
        break;
 800d3d8:	e00c      	b.n	800d3f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3da:	f7fb fecd 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800d3de:	61b8      	str	r0, [r7, #24]
        break;
 800d3e0:	e008      	b.n	800d3f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3e6:	61bb      	str	r3, [r7, #24]
        break;
 800d3e8:	e004      	b.n	800d3f4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	77bb      	strb	r3, [r7, #30]
        break;
 800d3f2:	bf00      	nop
    }

    if (pclk != 0U)
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d018      	beq.n	800d42c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	085a      	lsrs	r2, r3, #1
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	441a      	add	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	fbb2 f3f3 	udiv	r3, r2, r3
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	2b0f      	cmp	r3, #15
 800d414:	d908      	bls.n	800d428 <UART_SetConfig+0x49c>
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d41c:	d204      	bcs.n	800d428 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	693a      	ldr	r2, [r7, #16]
 800d424:	60da      	str	r2, [r3, #12]
 800d426:	e001      	b.n	800d42c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d438:	7fbb      	ldrb	r3, [r7, #30]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3720      	adds	r7, #32
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	40007c00 	.word	0x40007c00
 800d448:	40023800 	.word	0x40023800
 800d44c:	00f42400 	.word	0x00f42400

0800d450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45c:	f003 0301 	and.w	r3, r3, #1
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00a      	beq.n	800d47a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	430a      	orrs	r2, r1
 800d478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	f003 0302 	and.w	r3, r3, #2
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00a      	beq.n	800d49c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	430a      	orrs	r2, r1
 800d49a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a0:	f003 0304 	and.w	r3, r3, #4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00a      	beq.n	800d4be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	430a      	orrs	r2, r1
 800d4bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c2:	f003 0308 	and.w	r3, r3, #8
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e4:	f003 0310 	and.w	r3, r3, #16
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00a      	beq.n	800d502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	430a      	orrs	r2, r1
 800d500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d506:	f003 0320 	and.w	r3, r3, #32
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00a      	beq.n	800d524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	430a      	orrs	r2, r1
 800d522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d01a      	beq.n	800d566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d54e:	d10a      	bne.n	800d566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	430a      	orrs	r2, r1
 800d564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00a      	beq.n	800d588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	430a      	orrs	r2, r1
 800d586:	605a      	str	r2, [r3, #4]
  }
}
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af02      	add	r7, sp, #8
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5a4:	f7f7 f800 	bl	80045a8 <HAL_GetTick>
 800d5a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 0308 	and.w	r3, r3, #8
 800d5b4:	2b08      	cmp	r3, #8
 800d5b6:	d10e      	bne.n	800d5d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d5bc:	9300      	str	r3, [sp, #0]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f817 	bl	800d5fa <UART_WaitOnFlagUntilTimeout>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	e00d      	b.n	800d5f2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2220      	movs	r2, #32
 800d5da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2220      	movs	r2, #32
 800d5e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b084      	sub	sp, #16
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	60f8      	str	r0, [r7, #12]
 800d602:	60b9      	str	r1, [r7, #8]
 800d604:	603b      	str	r3, [r7, #0]
 800d606:	4613      	mov	r3, r2
 800d608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d60a:	e05e      	b.n	800d6ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d612:	d05a      	beq.n	800d6ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d614:	f7f6 ffc8 	bl	80045a8 <HAL_GetTick>
 800d618:	4602      	mov	r2, r0
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	69ba      	ldr	r2, [r7, #24]
 800d620:	429a      	cmp	r2, r3
 800d622:	d302      	bcc.n	800d62a <UART_WaitOnFlagUntilTimeout+0x30>
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d11b      	bne.n	800d662 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d638:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	689a      	ldr	r2, [r3, #8]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f022 0201 	bic.w	r2, r2, #1
 800d648:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2220      	movs	r2, #32
 800d64e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2220      	movs	r2, #32
 800d654:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d65e:	2303      	movs	r3, #3
 800d660:	e043      	b.n	800d6ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f003 0304 	and.w	r3, r3, #4
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d02c      	beq.n	800d6ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	69db      	ldr	r3, [r3, #28]
 800d676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d67a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d67e:	d124      	bne.n	800d6ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d688:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d698:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	689a      	ldr	r2, [r3, #8]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f022 0201 	bic.w	r2, r2, #1
 800d6a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2220      	movs	r2, #32
 800d6b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2220      	movs	r2, #32
 800d6ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	e00f      	b.n	800d6ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	69da      	ldr	r2, [r3, #28]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	bf0c      	ite	eq
 800d6da:	2301      	moveq	r3, #1
 800d6dc:	2300      	movne	r3, #0
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d091      	beq.n	800d60c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d027      	beq.n	800d75e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	4b2f      	ldr	r3, [pc, #188]	; (800d7d4 <FMC_SDRAM_Init+0xe0>)
 800d718:	4013      	ands	r3, r2
 800d71a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d724:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800d72a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800d730:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800d736:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800d73c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800d742:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800d748:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d74e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	4313      	orrs	r3, r2
 800d754:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	e032      	b.n	800d7c4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d76a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d774:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d77a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	4313      	orrs	r3, r2
 800d780:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	4b12      	ldr	r3, [pc, #72]	; (800d7d4 <FMC_SDRAM_Init+0xe0>)
 800d78c:	4013      	ands	r3, r2
 800d78e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d798:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800d79e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800d7a4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800d7aa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800d7b0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	ffff8000 	.word	0xffff8000

0800d7d8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b087      	sub	sp, #28
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d02e      	beq.n	800d850 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d7fe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d80e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	3b01      	subs	r3, #1
 800d816:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d818:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	68db      	ldr	r3, [r3, #12]
 800d81e:	3b01      	subs	r3, #1
 800d820:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d822:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	3b01      	subs	r3, #1
 800d82a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d82c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	3b01      	subs	r3, #1
 800d834:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d836:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d840:	4313      	orrs	r3, r2
 800d842:	697a      	ldr	r2, [r7, #20]
 800d844:	4313      	orrs	r3, r2
 800d846:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	609a      	str	r2, [r3, #8]
 800d84e:	e039      	b.n	800d8c4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	4b1e      	ldr	r3, [pc, #120]	; (800d8d4 <FMC_SDRAM_Timing_Init+0xfc>)
 800d85a:	4013      	ands	r3, r2
 800d85c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	3b01      	subs	r3, #1
 800d864:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	3b01      	subs	r3, #1
 800d86c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d86e:	4313      	orrs	r3, r2
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	4313      	orrs	r3, r2
 800d874:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d882:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	3b01      	subs	r3, #1
 800d890:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d892:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	3b01      	subs	r3, #1
 800d89a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d89c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d8a6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	699b      	ldr	r3, [r3, #24]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	693a      	ldr	r2, [r7, #16]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	697a      	ldr	r2, [r7, #20]
 800d8bc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	693a      	ldr	r2, [r7, #16]
 800d8c2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	371c      	adds	r7, #28
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	ff0f0fff 	.word	0xff0f0fff

0800d8d8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d8d8:	b084      	sub	sp, #16
 800d8da:	b480      	push	{r7}
 800d8dc:	b085      	sub	sp, #20
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	f107 001c 	add.w	r0, r7, #28
 800d8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d8ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d8f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d8f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d8fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d8fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d902:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4313      	orrs	r3, r2
 800d908:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	4b07      	ldr	r3, [pc, #28]	; (800d92c <SDMMC_Init+0x54>)
 800d910:	4013      	ands	r3, r2
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	431a      	orrs	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	b004      	add	sp, #16
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	ffff8100 	.word	0xffff8100

0800d930 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d93e:	4618      	mov	r0, r3
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2203      	movs	r2, #3
 800d956:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d958:	2002      	movs	r0, #2
 800d95a:	f7f6 fe31 	bl	80045c0 <HAL_Delay>
  
  return HAL_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 0303 	and.w	r3, r3, #3
}
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d9a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d9ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <SDMMC_SendCommand+0x50>)
 800d9bc:	4013      	ands	r3, r2
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	431a      	orrs	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	fffff000 	.word	0xfffff000

0800d9d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	b2db      	uxtb	r3, r3
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b085      	sub	sp, #20
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	3314      	adds	r3, #20
 800da00:	461a      	mov	r2, r3
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	4413      	add	r3, r2
 800da06:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
}  
 800da0c:	4618      	mov	r0, r3
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	685a      	ldr	r2, [r3, #4]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800da44:	431a      	orrs	r2, r3
                       Data->DPSM);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800da4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	4313      	orrs	r3, r2
 800da50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	431a      	orrs	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da62:	2300      	movs	r3, #0

}
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da7e:	2310      	movs	r3, #16
 800da80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da82:	2340      	movs	r3, #64	; 0x40
 800da84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da86:	2300      	movs	r3, #0
 800da88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da90:	f107 0308 	add.w	r3, r7, #8
 800da94:	4619      	mov	r1, r3
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff ff74 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800da9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800daa0:	2110      	movs	r1, #16
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fa46 	bl	800df34 <SDMMC_GetCmdResp1>
 800daa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daaa:	69fb      	ldr	r3, [r7, #28]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3720      	adds	r7, #32
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b088      	sub	sp, #32
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dac2:	2311      	movs	r3, #17
 800dac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dac6:	2340      	movs	r3, #64	; 0x40
 800dac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daca:	2300      	movs	r3, #0
 800dacc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dad4:	f107 0308 	add.w	r3, r7, #8
 800dad8:	4619      	mov	r1, r3
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff ff52 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae4:	2111      	movs	r1, #17
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 fa24 	bl	800df34 <SDMMC_GetCmdResp1>
 800daec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daee:	69fb      	ldr	r3, [r7, #28]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3720      	adds	r7, #32
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b088      	sub	sp, #32
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800db06:	2312      	movs	r3, #18
 800db08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db0a:	2340      	movs	r3, #64	; 0x40
 800db0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db0e:	2300      	movs	r3, #0
 800db10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db18:	f107 0308 	add.w	r3, r7, #8
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7ff ff30 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db24:	f241 3288 	movw	r2, #5000	; 0x1388
 800db28:	2112      	movs	r1, #18
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fa02 	bl	800df34 <SDMMC_GetCmdResp1>
 800db30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db32:	69fb      	ldr	r3, [r7, #28]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3720      	adds	r7, #32
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800db4a:	2318      	movs	r3, #24
 800db4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db4e:	2340      	movs	r3, #64	; 0x40
 800db50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db52:	2300      	movs	r3, #0
 800db54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db5c:	f107 0308 	add.w	r3, r7, #8
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7ff ff0e 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800db68:	f241 3288 	movw	r2, #5000	; 0x1388
 800db6c:	2118      	movs	r1, #24
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f9e0 	bl	800df34 <SDMMC_GetCmdResp1>
 800db74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db76:	69fb      	ldr	r3, [r7, #28]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3720      	adds	r7, #32
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b088      	sub	sp, #32
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db8e:	2319      	movs	r3, #25
 800db90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db92:	2340      	movs	r3, #64	; 0x40
 800db94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db96:	2300      	movs	r3, #0
 800db98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dba0:	f107 0308 	add.w	r3, r7, #8
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7ff feec 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dbac:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbb0:	2119      	movs	r1, #25
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 f9be 	bl	800df34 <SDMMC_GetCmdResp1>
 800dbb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbba:	69fb      	ldr	r3, [r7, #28]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3720      	adds	r7, #32
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dbd0:	230c      	movs	r3, #12
 800dbd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbd4:	2340      	movs	r3, #64	; 0x40
 800dbd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbe2:	f107 0308 	add.w	r3, r7, #8
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff fecb 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dbee:	4a05      	ldr	r2, [pc, #20]	; (800dc04 <SDMMC_CmdStopTransfer+0x40>)
 800dbf0:	210c      	movs	r1, #12
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f99e 	bl	800df34 <SDMMC_GetCmdResp1>
 800dbf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbfa:	69fb      	ldr	r3, [r7, #28]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3720      	adds	r7, #32
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	05f5e100 	.word	0x05f5e100

0800dc08 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08a      	sub	sp, #40	; 0x28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dc18:	2307      	movs	r3, #7
 800dc1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc1c:	2340      	movs	r3, #64	; 0x40
 800dc1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc20:	2300      	movs	r3, #0
 800dc22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc28:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc2a:	f107 0310 	add.w	r3, r7, #16
 800dc2e:	4619      	mov	r1, r3
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f7ff fea7 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dc36:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc3a:	2107      	movs	r1, #7
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f000 f979 	bl	800df34 <SDMMC_GetCmdResp1>
 800dc42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3728      	adds	r7, #40	; 0x28
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b088      	sub	sp, #32
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc62:	2300      	movs	r3, #0
 800dc64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc6c:	f107 0308 	add.w	r3, r7, #8
 800dc70:	4619      	mov	r1, r3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7ff fe86 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f92f 	bl	800dedc <SDMMC_GetCmdError>
 800dc7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc80:	69fb      	ldr	r3, [r7, #28]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b088      	sub	sp, #32
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc98:	2308      	movs	r3, #8
 800dc9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc9c:	2340      	movs	r3, #64	; 0x40
 800dc9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dca0:	2300      	movs	r3, #0
 800dca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcaa:	f107 0308 	add.w	r3, r7, #8
 800dcae:	4619      	mov	r1, r3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff fe67 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fb26 	bl	800e308 <SDMMC_GetCmdResp7>
 800dcbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcbe:	69fb      	ldr	r3, [r7, #28]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3720      	adds	r7, #32
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dcd6:	2337      	movs	r3, #55	; 0x37
 800dcd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcda:	2340      	movs	r3, #64	; 0x40
 800dcdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcde:	2300      	movs	r3, #0
 800dce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dce8:	f107 0308 	add.w	r3, r7, #8
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff fe48 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dcf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcf8:	2137      	movs	r1, #55	; 0x37
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f91a 	bl	800df34 <SDMMC_GetCmdResp1>
 800dd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd02:	69fb      	ldr	r3, [r7, #28]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3720      	adds	r7, #32
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	4b0d      	ldr	r3, [pc, #52]	; (800dd50 <SDMMC_CmdAppOperCommand+0x44>)
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dd1e:	2329      	movs	r3, #41	; 0x29
 800dd20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd22:	2340      	movs	r3, #64	; 0x40
 800dd24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd26:	2300      	movs	r3, #0
 800dd28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd30:	f107 0308 	add.w	r3, r7, #8
 800dd34:	4619      	mov	r1, r3
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7ff fe24 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 fa2f 	bl	800e1a0 <SDMMC_GetCmdResp3>
 800dd42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd44:	69fb      	ldr	r3, [r7, #28]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3720      	adds	r7, #32
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	80100000 	.word	0x80100000

0800dd54 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b088      	sub	sp, #32
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd62:	2306      	movs	r3, #6
 800dd64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd66:	2340      	movs	r3, #64	; 0x40
 800dd68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd74:	f107 0308 	add.w	r3, r7, #8
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff fe02 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dd80:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd84:	2106      	movs	r1, #6
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f8d4 	bl	800df34 <SDMMC_GetCmdResp1>
 800dd8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3720      	adds	r7, #32
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dda0:	2300      	movs	r3, #0
 800dda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dda4:	2333      	movs	r3, #51	; 0x33
 800dda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dda8:	2340      	movs	r3, #64	; 0x40
 800ddaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddac:	2300      	movs	r3, #0
 800ddae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddb6:	f107 0308 	add.w	r3, r7, #8
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fde1 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ddc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddc6:	2133      	movs	r1, #51	; 0x33
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f8b3 	bl	800df34 <SDMMC_GetCmdResp1>
 800ddce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddd0:	69fb      	ldr	r3, [r7, #28]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3720      	adds	r7, #32
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b088      	sub	sp, #32
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dde6:	2302      	movs	r3, #2
 800dde8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ddea:	23c0      	movs	r3, #192	; 0xc0
 800ddec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddf8:	f107 0308 	add.w	r3, r7, #8
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7ff fdc0 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 f983 	bl	800e110 <SDMMC_GetCmdResp2>
 800de0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de0c:	69fb      	ldr	r3, [r7, #28]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3720      	adds	r7, #32
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b088      	sub	sp, #32
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800de24:	2309      	movs	r3, #9
 800de26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800de28:	23c0      	movs	r3, #192	; 0xc0
 800de2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de2c:	2300      	movs	r3, #0
 800de2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de36:	f107 0308 	add.w	r3, r7, #8
 800de3a:	4619      	mov	r1, r3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff fda1 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 f964 	bl	800e110 <SDMMC_GetCmdResp2>
 800de48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de4a:	69fb      	ldr	r3, [r7, #28]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3720      	adds	r7, #32
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b088      	sub	sp, #32
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de5e:	2300      	movs	r3, #0
 800de60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de62:	2303      	movs	r3, #3
 800de64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de66:	2340      	movs	r3, #64	; 0x40
 800de68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de74:	f107 0308 	add.w	r3, r7, #8
 800de78:	4619      	mov	r1, r3
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f7ff fd82 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	2103      	movs	r1, #3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 f9c9 	bl	800e21c <SDMMC_GetCmdResp6>
 800de8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de8c:	69fb      	ldr	r3, [r7, #28]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3720      	adds	r7, #32
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b088      	sub	sp, #32
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
 800de9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dea4:	230d      	movs	r3, #13
 800dea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dea8:	2340      	movs	r3, #64	; 0x40
 800deaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deac:	2300      	movs	r3, #0
 800deae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800deb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800deb6:	f107 0308 	add.w	r3, r7, #8
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7ff fd61 	bl	800d984 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dec2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dec6:	210d      	movs	r1, #13
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f833 	bl	800df34 <SDMMC_GetCmdResp1>
 800dece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ded0:	69fb      	ldr	r3, [r7, #28]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3720      	adds	r7, #32
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dee4:	4b11      	ldr	r3, [pc, #68]	; (800df2c <SDMMC_GetCmdError+0x50>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a11      	ldr	r2, [pc, #68]	; (800df30 <SDMMC_GetCmdError+0x54>)
 800deea:	fba2 2303 	umull	r2, r3, r2, r3
 800deee:	0a5b      	lsrs	r3, r3, #9
 800def0:	f241 3288 	movw	r2, #5000	; 0x1388
 800def4:	fb02 f303 	mul.w	r3, r2, r3
 800def8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	1e5a      	subs	r2, r3, #1
 800defe:	60fa      	str	r2, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d102      	bne.n	800df0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df08:	e009      	b.n	800df1e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df12:	2b00      	cmp	r3, #0
 800df14:	d0f1      	beq.n	800defa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	22c5      	movs	r2, #197	; 0xc5
 800df1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3714      	adds	r7, #20
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	20000078 	.word	0x20000078
 800df30:	10624dd3 	.word	0x10624dd3

0800df34 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	460b      	mov	r3, r1
 800df3e:	607a      	str	r2, [r7, #4]
 800df40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df42:	4b70      	ldr	r3, [pc, #448]	; (800e104 <SDMMC_GetCmdResp1+0x1d0>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a70      	ldr	r2, [pc, #448]	; (800e108 <SDMMC_GetCmdResp1+0x1d4>)
 800df48:	fba2 2303 	umull	r2, r3, r2, r3
 800df4c:	0a5a      	lsrs	r2, r3, #9
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	fb02 f303 	mul.w	r3, r2, r3
 800df54:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	1e5a      	subs	r2, r3, #1
 800df5a:	61fa      	str	r2, [r7, #28]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d102      	bne.n	800df66 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df64:	e0c9      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0ef      	beq.n	800df56 <SDMMC_GetCmdResp1+0x22>
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1ea      	bne.n	800df56 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d004      	beq.n	800df96 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2204      	movs	r2, #4
 800df90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df92:	2304      	movs	r3, #4
 800df94:	e0b1      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d004      	beq.n	800dfac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e0a6      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	22c5      	movs	r2, #197	; 0xc5
 800dfb0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f7ff fd10 	bl	800d9d8 <SDMMC_GetCommandResponse>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	461a      	mov	r2, r3
 800dfbc:	7afb      	ldrb	r3, [r7, #11]
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d001      	beq.n	800dfc6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e099      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f7ff fd12 	bl	800d9f2 <SDMMC_GetResponse>
 800dfce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dfd0:	697a      	ldr	r2, [r7, #20]
 800dfd2:	4b4e      	ldr	r3, [pc, #312]	; (800e10c <SDMMC_GetCmdResp1+0x1d8>)
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	e08d      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	da02      	bge.n	800dfea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dfe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dfe8:	e087      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dff4:	2340      	movs	r3, #64	; 0x40
 800dff6:	e080      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e002:	2380      	movs	r3, #128	; 0x80
 800e004:	e079      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e014:	e071      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e020:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e024:	e069      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e034:	e061      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e044:	e059      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e054:	e051      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e064:	e049      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e074:	e041      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e084:	e039      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e094:	e031      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e0a4:	e029      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e0b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e0b4:	e021      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e0c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e0c4:	e019      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e0d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e0d4:	e011      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e0e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e0e4:	e009      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f003 0308 	and.w	r3, r3, #8
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e0f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e0f4:	e001      	b.n	800e0fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3720      	adds	r7, #32
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	20000078 	.word	0x20000078
 800e108:	10624dd3 	.word	0x10624dd3
 800e10c:	fdffe008 	.word	0xfdffe008

0800e110 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e118:	4b1f      	ldr	r3, [pc, #124]	; (800e198 <SDMMC_GetCmdResp2+0x88>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a1f      	ldr	r2, [pc, #124]	; (800e19c <SDMMC_GetCmdResp2+0x8c>)
 800e11e:	fba2 2303 	umull	r2, r3, r2, r3
 800e122:	0a5b      	lsrs	r3, r3, #9
 800e124:	f241 3288 	movw	r2, #5000	; 0x1388
 800e128:	fb02 f303 	mul.w	r3, r2, r3
 800e12c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	1e5a      	subs	r2, r3, #1
 800e132:	60fa      	str	r2, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d102      	bne.n	800e13e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e13c:	e026      	b.n	800e18c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e142:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d0ef      	beq.n	800e12e <SDMMC_GetCmdResp2+0x1e>
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1ea      	bne.n	800e12e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15c:	f003 0304 	and.w	r3, r3, #4
 800e160:	2b00      	cmp	r3, #0
 800e162:	d004      	beq.n	800e16e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2204      	movs	r2, #4
 800e168:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e16a:	2304      	movs	r3, #4
 800e16c:	e00e      	b.n	800e18c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	2b00      	cmp	r3, #0
 800e178:	d004      	beq.n	800e184 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2201      	movs	r2, #1
 800e17e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e180:	2301      	movs	r3, #1
 800e182:	e003      	b.n	800e18c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	22c5      	movs	r2, #197	; 0xc5
 800e188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3714      	adds	r7, #20
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	20000078 	.word	0x20000078
 800e19c:	10624dd3 	.word	0x10624dd3

0800e1a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1a8:	4b1a      	ldr	r3, [pc, #104]	; (800e214 <SDMMC_GetCmdResp3+0x74>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4a1a      	ldr	r2, [pc, #104]	; (800e218 <SDMMC_GetCmdResp3+0x78>)
 800e1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e1b2:	0a5b      	lsrs	r3, r3, #9
 800e1b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1b8:	fb02 f303 	mul.w	r3, r2, r3
 800e1bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	1e5a      	subs	r2, r3, #1
 800e1c2:	60fa      	str	r2, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d102      	bne.n	800e1ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1cc:	e01b      	b.n	800e206 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d0ef      	beq.n	800e1be <SDMMC_GetCmdResp3+0x1e>
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1ea      	bne.n	800e1be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ec:	f003 0304 	and.w	r3, r3, #4
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d004      	beq.n	800e1fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2204      	movs	r2, #4
 800e1f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1fa:	2304      	movs	r3, #4
 800e1fc:	e003      	b.n	800e206 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	22c5      	movs	r2, #197	; 0xc5
 800e202:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	20000078 	.word	0x20000078
 800e218:	10624dd3 	.word	0x10624dd3

0800e21c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	460b      	mov	r3, r1
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e22a:	4b35      	ldr	r3, [pc, #212]	; (800e300 <SDMMC_GetCmdResp6+0xe4>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a35      	ldr	r2, [pc, #212]	; (800e304 <SDMMC_GetCmdResp6+0xe8>)
 800e230:	fba2 2303 	umull	r2, r3, r2, r3
 800e234:	0a5b      	lsrs	r3, r3, #9
 800e236:	f241 3288 	movw	r2, #5000	; 0x1388
 800e23a:	fb02 f303 	mul.w	r3, r2, r3
 800e23e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	1e5a      	subs	r2, r3, #1
 800e244:	61fa      	str	r2, [r7, #28]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d102      	bne.n	800e250 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e24a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e24e:	e052      	b.n	800e2f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e254:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d0ef      	beq.n	800e240 <SDMMC_GetCmdResp6+0x24>
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1ea      	bne.n	800e240 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e26e:	f003 0304 	and.w	r3, r3, #4
 800e272:	2b00      	cmp	r3, #0
 800e274:	d004      	beq.n	800e280 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2204      	movs	r2, #4
 800e27a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e27c:	2304      	movs	r3, #4
 800e27e:	e03a      	b.n	800e2f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e284:	f003 0301 	and.w	r3, r3, #1
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d004      	beq.n	800e296 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2201      	movs	r2, #1
 800e290:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e292:	2301      	movs	r3, #1
 800e294:	e02f      	b.n	800e2f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7ff fb9e 	bl	800d9d8 <SDMMC_GetCommandResponse>
 800e29c:	4603      	mov	r3, r0
 800e29e:	461a      	mov	r2, r3
 800e2a0:	7afb      	ldrb	r3, [r7, #11]
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d001      	beq.n	800e2aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e025      	b.n	800e2f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	22c5      	movs	r2, #197	; 0xc5
 800e2ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	68f8      	ldr	r0, [r7, #12]
 800e2b4:	f7ff fb9d 	bl	800d9f2 <SDMMC_GetResponse>
 800e2b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d106      	bne.n	800e2d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	0c1b      	lsrs	r3, r3, #16
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e011      	b.n	800e2f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2e0:	e009      	b.n	800e2f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e2ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2f0:	e001      	b.n	800e2f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3720      	adds	r7, #32
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20000078 	.word	0x20000078
 800e304:	10624dd3 	.word	0x10624dd3

0800e308 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e310:	4b22      	ldr	r3, [pc, #136]	; (800e39c <SDMMC_GetCmdResp7+0x94>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a22      	ldr	r2, [pc, #136]	; (800e3a0 <SDMMC_GetCmdResp7+0x98>)
 800e316:	fba2 2303 	umull	r2, r3, r2, r3
 800e31a:	0a5b      	lsrs	r3, r3, #9
 800e31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e320:	fb02 f303 	mul.w	r3, r2, r3
 800e324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	1e5a      	subs	r2, r3, #1
 800e32a:	60fa      	str	r2, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d102      	bne.n	800e336 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e334:	e02c      	b.n	800e390 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e342:	2b00      	cmp	r3, #0
 800e344:	d0ef      	beq.n	800e326 <SDMMC_GetCmdResp7+0x1e>
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1ea      	bne.n	800e326 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e354:	f003 0304 	and.w	r3, r3, #4
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d004      	beq.n	800e366 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2204      	movs	r2, #4
 800e360:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e362:	2304      	movs	r3, #4
 800e364:	e014      	b.n	800e390 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d004      	beq.n	800e37c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e378:	2301      	movs	r3, #1
 800e37a:	e009      	b.n	800e390 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2240      	movs	r2, #64	; 0x40
 800e38c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e38e:	2300      	movs	r3, #0
  
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	20000078 	.word	0x20000078
 800e3a0:	10624dd3 	.word	0x10624dd3

0800e3a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e3a4:	b084      	sub	sp, #16
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	f107 001c 	add.w	r0, r7, #28
 800e3b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d120      	bne.n	800e3fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	68da      	ldr	r2, [r3, #12]
 800e3cc:	4b20      	ldr	r3, [pc, #128]	; (800e450 <USB_CoreInit+0xac>)
 800e3ce:	4013      	ands	r3, r2
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d105      	bne.n	800e3f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f001 fad6 	bl	800f9a4 <USB_CoreReset>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]
 800e3fc:	e010      	b.n	800e420 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f001 faca 	bl	800f9a4 <USB_CoreReset>
 800e410:	4603      	mov	r3, r0
 800e412:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e418:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	2b01      	cmp	r3, #1
 800e424:	d10b      	bne.n	800e43e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	f043 0206 	orr.w	r2, r3, #6
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	f043 0220 	orr.w	r2, r3, #32
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e44a:	b004      	add	sp, #16
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	ffbdffbf 	.word	0xffbdffbf

0800e454 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e454:	b480      	push	{r7}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	4613      	mov	r3, r2
 800e460:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	2b02      	cmp	r3, #2
 800e466:	d165      	bne.n	800e534 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	4a41      	ldr	r2, [pc, #260]	; (800e570 <USB_SetTurnaroundTime+0x11c>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d906      	bls.n	800e47e <USB_SetTurnaroundTime+0x2a>
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	4a40      	ldr	r2, [pc, #256]	; (800e574 <USB_SetTurnaroundTime+0x120>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d202      	bcs.n	800e47e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e478:	230f      	movs	r3, #15
 800e47a:	617b      	str	r3, [r7, #20]
 800e47c:	e062      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	4a3c      	ldr	r2, [pc, #240]	; (800e574 <USB_SetTurnaroundTime+0x120>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d306      	bcc.n	800e494 <USB_SetTurnaroundTime+0x40>
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	4a3b      	ldr	r2, [pc, #236]	; (800e578 <USB_SetTurnaroundTime+0x124>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d202      	bcs.n	800e494 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e48e:	230e      	movs	r3, #14
 800e490:	617b      	str	r3, [r7, #20]
 800e492:	e057      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	4a38      	ldr	r2, [pc, #224]	; (800e578 <USB_SetTurnaroundTime+0x124>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d306      	bcc.n	800e4aa <USB_SetTurnaroundTime+0x56>
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	4a37      	ldr	r2, [pc, #220]	; (800e57c <USB_SetTurnaroundTime+0x128>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d202      	bcs.n	800e4aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e4a4:	230d      	movs	r3, #13
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	e04c      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	4a33      	ldr	r2, [pc, #204]	; (800e57c <USB_SetTurnaroundTime+0x128>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d306      	bcc.n	800e4c0 <USB_SetTurnaroundTime+0x6c>
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	4a32      	ldr	r2, [pc, #200]	; (800e580 <USB_SetTurnaroundTime+0x12c>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d802      	bhi.n	800e4c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e4ba:	230c      	movs	r3, #12
 800e4bc:	617b      	str	r3, [r7, #20]
 800e4be:	e041      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	4a2f      	ldr	r2, [pc, #188]	; (800e580 <USB_SetTurnaroundTime+0x12c>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d906      	bls.n	800e4d6 <USB_SetTurnaroundTime+0x82>
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	4a2e      	ldr	r2, [pc, #184]	; (800e584 <USB_SetTurnaroundTime+0x130>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d802      	bhi.n	800e4d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e4d0:	230b      	movs	r3, #11
 800e4d2:	617b      	str	r3, [r7, #20]
 800e4d4:	e036      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	4a2a      	ldr	r2, [pc, #168]	; (800e584 <USB_SetTurnaroundTime+0x130>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d906      	bls.n	800e4ec <USB_SetTurnaroundTime+0x98>
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	4a29      	ldr	r2, [pc, #164]	; (800e588 <USB_SetTurnaroundTime+0x134>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d802      	bhi.n	800e4ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e4e6:	230a      	movs	r3, #10
 800e4e8:	617b      	str	r3, [r7, #20]
 800e4ea:	e02b      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	4a26      	ldr	r2, [pc, #152]	; (800e588 <USB_SetTurnaroundTime+0x134>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d906      	bls.n	800e502 <USB_SetTurnaroundTime+0xae>
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	4a25      	ldr	r2, [pc, #148]	; (800e58c <USB_SetTurnaroundTime+0x138>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d202      	bcs.n	800e502 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e4fc:	2309      	movs	r3, #9
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	e020      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	4a21      	ldr	r2, [pc, #132]	; (800e58c <USB_SetTurnaroundTime+0x138>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d306      	bcc.n	800e518 <USB_SetTurnaroundTime+0xc4>
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	4a20      	ldr	r2, [pc, #128]	; (800e590 <USB_SetTurnaroundTime+0x13c>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d802      	bhi.n	800e518 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e512:	2308      	movs	r3, #8
 800e514:	617b      	str	r3, [r7, #20]
 800e516:	e015      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	4a1d      	ldr	r2, [pc, #116]	; (800e590 <USB_SetTurnaroundTime+0x13c>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d906      	bls.n	800e52e <USB_SetTurnaroundTime+0xda>
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	4a1c      	ldr	r2, [pc, #112]	; (800e594 <USB_SetTurnaroundTime+0x140>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d202      	bcs.n	800e52e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e528:	2307      	movs	r3, #7
 800e52a:	617b      	str	r3, [r7, #20]
 800e52c:	e00a      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e52e:	2306      	movs	r3, #6
 800e530:	617b      	str	r3, [r7, #20]
 800e532:	e007      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e534:	79fb      	ldrb	r3, [r7, #7]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e53a:	2309      	movs	r3, #9
 800e53c:	617b      	str	r3, [r7, #20]
 800e53e:	e001      	b.n	800e544 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e540:	2309      	movs	r3, #9
 800e542:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	68da      	ldr	r2, [r3, #12]
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	029b      	lsls	r3, r3, #10
 800e558:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e55c:	431a      	orrs	r2, r3
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	371c      	adds	r7, #28
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	00d8acbf 	.word	0x00d8acbf
 800e574:	00e4e1c0 	.word	0x00e4e1c0
 800e578:	00f42400 	.word	0x00f42400
 800e57c:	01067380 	.word	0x01067380
 800e580:	011a499f 	.word	0x011a499f
 800e584:	01312cff 	.word	0x01312cff
 800e588:	014ca43f 	.word	0x014ca43f
 800e58c:	016e3600 	.word	0x016e3600
 800e590:	01a6ab1f 	.word	0x01a6ab1f
 800e594:	01e84800 	.word	0x01e84800

0800e598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	f043 0201 	orr.w	r2, r3, #1
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b083      	sub	sp, #12
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f023 0201 	bic.w	r2, r3, #1
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e5f4:	78fb      	ldrb	r3, [r7, #3]
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d106      	bne.n	800e608 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	60da      	str	r2, [r3, #12]
 800e606:	e00b      	b.n	800e620 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e608:	78fb      	ldrb	r3, [r7, #3]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d106      	bne.n	800e61c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	60da      	str	r2, [r3, #12]
 800e61a:	e001      	b.n	800e620 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e003      	b.n	800e628 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e620:	2032      	movs	r0, #50	; 0x32
 800e622:	f7f5 ffcd 	bl	80045c0 <HAL_Delay>

  return HAL_OK;
 800e626:	2300      	movs	r3, #0
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e630:	b084      	sub	sp, #16
 800e632:	b580      	push	{r7, lr}
 800e634:	b086      	sub	sp, #24
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e63e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e64a:	2300      	movs	r3, #0
 800e64c:	613b      	str	r3, [r7, #16]
 800e64e:	e009      	b.n	800e664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	3340      	adds	r3, #64	; 0x40
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	2200      	movs	r2, #0
 800e65c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	3301      	adds	r3, #1
 800e662:	613b      	str	r3, [r7, #16]
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	2b0e      	cmp	r3, #14
 800e668:	d9f2      	bls.n	800e650 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d11c      	bne.n	800e6aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e67e:	f043 0302 	orr.w	r3, r3, #2
 800e682:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e688:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	601a      	str	r2, [r3, #0]
 800e6a8:	e005      	b.n	800e6b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6bc:	461a      	mov	r2, r3
 800e6be:	2300      	movs	r3, #0
 800e6c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	680b      	ldr	r3, [r1, #0]
 800e6d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d10c      	bne.n	800e6f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d104      	bne.n	800e6ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f959 	bl	800e99c <USB_SetDevSpeed>
 800e6ea:	e018      	b.n	800e71e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 f954 	bl	800e99c <USB_SetDevSpeed>
 800e6f4:	e013      	b.n	800e71e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	2b03      	cmp	r3, #3
 800e6fa:	d10c      	bne.n	800e716 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d104      	bne.n	800e70c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e702:	2100      	movs	r1, #0
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 f949 	bl	800e99c <USB_SetDevSpeed>
 800e70a:	e008      	b.n	800e71e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e70c:	2101      	movs	r1, #1
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f944 	bl	800e99c <USB_SetDevSpeed>
 800e714:	e003      	b.n	800e71e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e716:	2103      	movs	r1, #3
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 f93f 	bl	800e99c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e71e:	2110      	movs	r1, #16
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f8f3 	bl	800e90c <USB_FlushTxFifo>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800e72c:	2301      	movs	r3, #1
 800e72e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 f911 	bl	800e958 <USB_FlushRxFifo>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d001      	beq.n	800e740 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800e73c:	2301      	movs	r3, #1
 800e73e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e746:	461a      	mov	r2, r3
 800e748:	2300      	movs	r3, #0
 800e74a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e752:	461a      	mov	r2, r3
 800e754:	2300      	movs	r3, #0
 800e756:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e75e:	461a      	mov	r2, r3
 800e760:	2300      	movs	r3, #0
 800e762:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e764:	2300      	movs	r3, #0
 800e766:	613b      	str	r3, [r7, #16]
 800e768:	e043      	b.n	800e7f2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	015a      	lsls	r2, r3, #5
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	4413      	add	r3, r2
 800e772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e77c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e780:	d118      	bne.n	800e7b4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10a      	bne.n	800e79e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	015a      	lsls	r2, r3, #5
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4413      	add	r3, r2
 800e790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e794:	461a      	mov	r2, r3
 800e796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e79a:	6013      	str	r3, [r2, #0]
 800e79c:	e013      	b.n	800e7c6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	015a      	lsls	r2, r3, #5
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e7b0:	6013      	str	r3, [r2, #0]
 800e7b2:	e008      	b.n	800e7c6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	015a      	lsls	r2, r3, #5
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	015a      	lsls	r2, r3, #5
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e7ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	613b      	str	r3, [r7, #16]
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d3b7      	bcc.n	800e76a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	613b      	str	r3, [r7, #16]
 800e7fe:	e043      	b.n	800e888 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	015a      	lsls	r2, r3, #5
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	4413      	add	r3, r2
 800e808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e816:	d118      	bne.n	800e84a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10a      	bne.n	800e834 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	4413      	add	r3, r2
 800e826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e82a:	461a      	mov	r2, r3
 800e82c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	e013      	b.n	800e85c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e840:	461a      	mov	r2, r3
 800e842:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	e008      	b.n	800e85c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	015a      	lsls	r2, r3, #5
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	4413      	add	r3, r2
 800e852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e856:	461a      	mov	r2, r3
 800e858:	2300      	movs	r3, #0
 800e85a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4413      	add	r3, r2
 800e864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e868:	461a      	mov	r2, r3
 800e86a:	2300      	movs	r3, #0
 800e86c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	015a      	lsls	r2, r3, #5
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	4413      	add	r3, r2
 800e876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e87a:	461a      	mov	r2, r3
 800e87c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e880:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	3301      	adds	r3, #1
 800e886:	613b      	str	r3, [r7, #16]
 800e888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88a:	693a      	ldr	r2, [r7, #16]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d3b7      	bcc.n	800e800 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e89e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e8b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d105      	bne.n	800e8c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	699b      	ldr	r3, [r3, #24]
 800e8bc:	f043 0210 	orr.w	r2, r3, #16
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	699a      	ldr	r2, [r3, #24]
 800e8c8:	4b0e      	ldr	r3, [pc, #56]	; (800e904 <USB_DevInit+0x2d4>)
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d005      	beq.n	800e8e2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	f043 0208 	orr.w	r2, r3, #8
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d105      	bne.n	800e8f4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	699a      	ldr	r2, [r3, #24]
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <USB_DevInit+0x2d8>)
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e900:	b004      	add	sp, #16
 800e902:	4770      	bx	lr
 800e904:	803c3800 	.word	0x803c3800
 800e908:	40000004 	.word	0x40000004

0800e90c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e916:	2300      	movs	r3, #0
 800e918:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	019b      	lsls	r3, r3, #6
 800e91e:	f043 0220 	orr.w	r2, r3, #32
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3301      	adds	r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	4a09      	ldr	r2, [pc, #36]	; (800e954 <USB_FlushTxFifo+0x48>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d901      	bls.n	800e938 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e934:	2303      	movs	r3, #3
 800e936:	e006      	b.n	800e946 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	f003 0320 	and.w	r3, r3, #32
 800e940:	2b20      	cmp	r3, #32
 800e942:	d0f0      	beq.n	800e926 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	00030d40 	.word	0x00030d40

0800e958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e960:	2300      	movs	r3, #0
 800e962:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2210      	movs	r2, #16
 800e968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3301      	adds	r3, #1
 800e96e:	60fb      	str	r3, [r7, #12]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4a09      	ldr	r2, [pc, #36]	; (800e998 <USB_FlushRxFifo+0x40>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d901      	bls.n	800e97c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e978:	2303      	movs	r3, #3
 800e97a:	e006      	b.n	800e98a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	f003 0310 	and.w	r3, r3, #16
 800e984:	2b10      	cmp	r3, #16
 800e986:	d0f0      	beq.n	800e96a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3714      	adds	r7, #20
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	00030d40 	.word	0x00030d40

0800e99c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	78fb      	ldrb	r3, [r7, #3]
 800e9b6:	68f9      	ldr	r1, [r7, #12]
 800e9b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3714      	adds	r7, #20
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr

0800e9ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	b087      	sub	sp, #28
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	f003 0306 	and.w	r3, r3, #6
 800e9e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	75fb      	strb	r3, [r7, #23]
 800e9f2:	e00a      	b.n	800ea0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d002      	beq.n	800ea00 <USB_GetDevSpeed+0x32>
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2b06      	cmp	r3, #6
 800e9fe:	d102      	bne.n	800ea06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ea00:	2302      	movs	r3, #2
 800ea02:	75fb      	strb	r3, [r7, #23]
 800ea04:	e001      	b.n	800ea0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ea06:	230f      	movs	r3, #15
 800ea08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ea0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	371c      	adds	r7, #28
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	785b      	ldrb	r3, [r3, #1]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d139      	bne.n	800eaa8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea3a:	69da      	ldr	r2, [r3, #28]
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	f003 030f 	and.w	r3, r3, #15
 800ea44:	2101      	movs	r1, #1
 800ea46:	fa01 f303 	lsl.w	r3, r1, r3
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	68f9      	ldr	r1, [r7, #12]
 800ea4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea52:	4313      	orrs	r3, r2
 800ea54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	015a      	lsls	r2, r3, #5
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d153      	bne.n	800eb14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	015a      	lsls	r2, r3, #5
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	4413      	add	r3, r2
 800ea74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	689b      	ldr	r3, [r3, #8]
 800ea7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	78db      	ldrb	r3, [r3, #3]
 800ea86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	059b      	lsls	r3, r3, #22
 800ea8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ea90:	431a      	orrs	r2, r3
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	0159      	lsls	r1, r3, #5
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	440b      	add	r3, r1
 800ea9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4b20      	ldr	r3, [pc, #128]	; (800eb24 <USB_ActivateEndpoint+0x10c>)
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	600b      	str	r3, [r1, #0]
 800eaa6:	e035      	b.n	800eb14 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaae:	69da      	ldr	r2, [r3, #28]
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	f003 030f 	and.w	r3, r3, #15
 800eab8:	2101      	movs	r1, #1
 800eaba:	fa01 f303 	lsl.w	r3, r1, r3
 800eabe:	041b      	lsls	r3, r3, #16
 800eac0:	68f9      	ldr	r1, [r7, #12]
 800eac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eac6:	4313      	orrs	r3, r2
 800eac8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	015a      	lsls	r2, r3, #5
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	4413      	add	r3, r2
 800ead2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d119      	bne.n	800eb14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	015a      	lsls	r2, r3, #5
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	4413      	add	r3, r2
 800eae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	78db      	ldrb	r3, [r3, #3]
 800eafa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eafc:	430b      	orrs	r3, r1
 800eafe:	431a      	orrs	r2, r3
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	0159      	lsls	r1, r3, #5
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	440b      	add	r3, r1
 800eb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <USB_ActivateEndpoint+0x10c>)
 800eb10:	4313      	orrs	r3, r2
 800eb12:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3714      	adds	r7, #20
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	10008000 	.word	0x10008000

0800eb28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	785b      	ldrb	r3, [r3, #1]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d161      	bne.n	800ec08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	015a      	lsls	r2, r3, #5
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb5a:	d11f      	bne.n	800eb9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	015a      	lsls	r2, r3, #5
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	4413      	add	r3, r2
 800eb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	0151      	lsls	r1, r2, #5
 800eb6e:	68fa      	ldr	r2, [r7, #12]
 800eb70:	440a      	add	r2, r1
 800eb72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eb7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	015a      	lsls	r2, r3, #5
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	4413      	add	r3, r2
 800eb84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	0151      	lsls	r1, r2, #5
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	440a      	add	r2, r1
 800eb92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	f003 030f 	and.w	r3, r3, #15
 800ebac:	2101      	movs	r1, #1
 800ebae:	fa01 f303 	lsl.w	r3, r1, r3
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	43db      	mvns	r3, r3
 800ebb6:	68f9      	ldr	r1, [r7, #12]
 800ebb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebbc:	4013      	ands	r3, r2
 800ebbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc6:	69da      	ldr	r2, [r3, #28]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	f003 030f 	and.w	r3, r3, #15
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	fa01 f303 	lsl.w	r3, r1, r3
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	43db      	mvns	r3, r3
 800ebda:	68f9      	ldr	r1, [r7, #12]
 800ebdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebe0:	4013      	ands	r3, r2
 800ebe2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	015a      	lsls	r2, r3, #5
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4413      	add	r3, r2
 800ebec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	0159      	lsls	r1, r3, #5
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	440b      	add	r3, r1
 800ebfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebfe:	4619      	mov	r1, r3
 800ec00:	4b35      	ldr	r3, [pc, #212]	; (800ecd8 <USB_DeactivateEndpoint+0x1b0>)
 800ec02:	4013      	ands	r3, r2
 800ec04:	600b      	str	r3, [r1, #0]
 800ec06:	e060      	b.n	800ecca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	015a      	lsls	r2, r3, #5
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec1e:	d11f      	bne.n	800ec60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	015a      	lsls	r2, r3, #5
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	4413      	add	r3, r2
 800ec28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	68ba      	ldr	r2, [r7, #8]
 800ec30:	0151      	lsls	r1, r2, #5
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	440a      	add	r2, r1
 800ec36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ec3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68ba      	ldr	r2, [r7, #8]
 800ec50:	0151      	lsls	r1, r2, #5
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	440a      	add	r2, r1
 800ec56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	f003 030f 	and.w	r3, r3, #15
 800ec70:	2101      	movs	r1, #1
 800ec72:	fa01 f303 	lsl.w	r3, r1, r3
 800ec76:	041b      	lsls	r3, r3, #16
 800ec78:	43db      	mvns	r3, r3
 800ec7a:	68f9      	ldr	r1, [r7, #12]
 800ec7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec80:	4013      	ands	r3, r2
 800ec82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec8a:	69da      	ldr	r2, [r3, #28]
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	f003 030f 	and.w	r3, r3, #15
 800ec94:	2101      	movs	r1, #1
 800ec96:	fa01 f303 	lsl.w	r3, r1, r3
 800ec9a:	041b      	lsls	r3, r3, #16
 800ec9c:	43db      	mvns	r3, r3
 800ec9e:	68f9      	ldr	r1, [r7, #12]
 800eca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eca4:	4013      	ands	r3, r2
 800eca6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	015a      	lsls	r2, r3, #5
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	4413      	add	r3, r2
 800ecb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	0159      	lsls	r1, r3, #5
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	440b      	add	r3, r1
 800ecbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <USB_DeactivateEndpoint+0x1b4>)
 800ecc6:	4013      	ands	r3, r2
 800ecc8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ecca:	2300      	movs	r3, #0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3714      	adds	r7, #20
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	ec337800 	.word	0xec337800
 800ecdc:	eff37800 	.word	0xeff37800

0800ece0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08a      	sub	sp, #40	; 0x28
 800ece4:	af02      	add	r7, sp, #8
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	4613      	mov	r3, r2
 800ecec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	785b      	ldrb	r3, [r3, #1]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	f040 8163 	bne.w	800efc8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	695b      	ldr	r3, [r3, #20]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d132      	bne.n	800ed70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	015a      	lsls	r2, r3, #5
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	4413      	add	r3, r2
 800ed12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed16:	691a      	ldr	r2, [r3, #16]
 800ed18:	69bb      	ldr	r3, [r7, #24]
 800ed1a:	0159      	lsls	r1, r3, #5
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	440b      	add	r3, r1
 800ed20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed24:	4619      	mov	r1, r3
 800ed26:	4ba5      	ldr	r3, [pc, #660]	; (800efbc <USB_EPStartXfer+0x2dc>)
 800ed28:	4013      	ands	r3, r2
 800ed2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	015a      	lsls	r2, r3, #5
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	4413      	add	r3, r2
 800ed34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	69ba      	ldr	r2, [r7, #24]
 800ed3c:	0151      	lsls	r1, r2, #5
 800ed3e:	69fa      	ldr	r2, [r7, #28]
 800ed40:	440a      	add	r2, r1
 800ed42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	015a      	lsls	r2, r3, #5
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	4413      	add	r3, r2
 800ed54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed58:	691a      	ldr	r2, [r3, #16]
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	0159      	lsls	r1, r3, #5
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	440b      	add	r3, r1
 800ed62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed66:	4619      	mov	r1, r3
 800ed68:	4b95      	ldr	r3, [pc, #596]	; (800efc0 <USB_EPStartXfer+0x2e0>)
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	610b      	str	r3, [r1, #16]
 800ed6e:	e074      	b.n	800ee5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	015a      	lsls	r2, r3, #5
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	4413      	add	r3, r2
 800ed78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed7c:	691a      	ldr	r2, [r3, #16]
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	0159      	lsls	r1, r3, #5
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	440b      	add	r3, r1
 800ed86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4b8c      	ldr	r3, [pc, #560]	; (800efc0 <USB_EPStartXfer+0x2e0>)
 800ed8e:	4013      	ands	r3, r2
 800ed90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	015a      	lsls	r2, r3, #5
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	4413      	add	r3, r2
 800ed9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed9e:	691a      	ldr	r2, [r3, #16]
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	0159      	lsls	r1, r3, #5
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	440b      	add	r3, r1
 800eda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edac:	4619      	mov	r1, r3
 800edae:	4b83      	ldr	r3, [pc, #524]	; (800efbc <USB_EPStartXfer+0x2dc>)
 800edb0:	4013      	ands	r3, r2
 800edb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	015a      	lsls	r2, r3, #5
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	4413      	add	r3, r2
 800edbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edc0:	691a      	ldr	r2, [r3, #16]
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	6959      	ldr	r1, [r3, #20]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	440b      	add	r3, r1
 800edcc:	1e59      	subs	r1, r3, #1
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	fbb1 f3f3 	udiv	r3, r1, r3
 800edd6:	04d9      	lsls	r1, r3, #19
 800edd8:	4b7a      	ldr	r3, [pc, #488]	; (800efc4 <USB_EPStartXfer+0x2e4>)
 800edda:	400b      	ands	r3, r1
 800eddc:	69b9      	ldr	r1, [r7, #24]
 800edde:	0148      	lsls	r0, r1, #5
 800ede0:	69f9      	ldr	r1, [r7, #28]
 800ede2:	4401      	add	r1, r0
 800ede4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ede8:	4313      	orrs	r3, r2
 800edea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	015a      	lsls	r2, r3, #5
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	4413      	add	r3, r2
 800edf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf8:	691a      	ldr	r2, [r3, #16]
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee02:	69b9      	ldr	r1, [r7, #24]
 800ee04:	0148      	lsls	r0, r1, #5
 800ee06:	69f9      	ldr	r1, [r7, #28]
 800ee08:	4401      	add	r1, r0
 800ee0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	78db      	ldrb	r3, [r3, #3]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d11f      	bne.n	800ee5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	015a      	lsls	r2, r3, #5
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	4413      	add	r3, r2
 800ee22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	69ba      	ldr	r2, [r7, #24]
 800ee2a:	0151      	lsls	r1, r2, #5
 800ee2c:	69fa      	ldr	r2, [r7, #28]
 800ee2e:	440a      	add	r2, r1
 800ee30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ee38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	015a      	lsls	r2, r3, #5
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	4413      	add	r3, r2
 800ee42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee46:	691b      	ldr	r3, [r3, #16]
 800ee48:	69ba      	ldr	r2, [r7, #24]
 800ee4a:	0151      	lsls	r1, r2, #5
 800ee4c:	69fa      	ldr	r2, [r7, #28]
 800ee4e:	440a      	add	r2, r1
 800ee50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ee5a:	79fb      	ldrb	r3, [r7, #7]
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d14b      	bne.n	800eef8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d009      	beq.n	800ee7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	015a      	lsls	r2, r3, #5
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	4413      	add	r3, r2
 800ee70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee74:	461a      	mov	r2, r3
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	78db      	ldrb	r3, [r3, #3]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d128      	bne.n	800eed6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d110      	bne.n	800eeb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	015a      	lsls	r2, r3, #5
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	69ba      	ldr	r2, [r7, #24]
 800eea4:	0151      	lsls	r1, r2, #5
 800eea6:	69fa      	ldr	r2, [r7, #28]
 800eea8:	440a      	add	r2, r1
 800eeaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eeae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eeb2:	6013      	str	r3, [r2, #0]
 800eeb4:	e00f      	b.n	800eed6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	015a      	lsls	r2, r3, #5
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	4413      	add	r3, r2
 800eebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	69ba      	ldr	r2, [r7, #24]
 800eec6:	0151      	lsls	r1, r2, #5
 800eec8:	69fa      	ldr	r2, [r7, #28]
 800eeca:	440a      	add	r2, r1
 800eecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eed4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	015a      	lsls	r2, r3, #5
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	4413      	add	r3, r2
 800eede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	69ba      	ldr	r2, [r7, #24]
 800eee6:	0151      	lsls	r1, r2, #5
 800eee8:	69fa      	ldr	r2, [r7, #28]
 800eeea:	440a      	add	r2, r1
 800eeec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eef4:	6013      	str	r3, [r2, #0]
 800eef6:	e133      	b.n	800f160 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	015a      	lsls	r2, r3, #5
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	4413      	add	r3, r2
 800ef00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	69ba      	ldr	r2, [r7, #24]
 800ef08:	0151      	lsls	r1, r2, #5
 800ef0a:	69fa      	ldr	r2, [r7, #28]
 800ef0c:	440a      	add	r2, r1
 800ef0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	78db      	ldrb	r3, [r3, #3]
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d015      	beq.n	800ef4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	695b      	ldr	r3, [r3, #20]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f000 811b 	beq.w	800f160 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	f003 030f 	and.w	r3, r3, #15
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ef40:	69f9      	ldr	r1, [r7, #28]
 800ef42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef46:	4313      	orrs	r3, r2
 800ef48:	634b      	str	r3, [r1, #52]	; 0x34
 800ef4a:	e109      	b.n	800f160 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d110      	bne.n	800ef7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	69ba      	ldr	r2, [r7, #24]
 800ef6c:	0151      	lsls	r1, r2, #5
 800ef6e:	69fa      	ldr	r2, [r7, #28]
 800ef70:	440a      	add	r2, r1
 800ef72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef7a:	6013      	str	r3, [r2, #0]
 800ef7c:	e00f      	b.n	800ef9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	015a      	lsls	r2, r3, #5
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	4413      	add	r3, r2
 800ef86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	0151      	lsls	r1, r2, #5
 800ef90:	69fa      	ldr	r2, [r7, #28]
 800ef92:	440a      	add	r2, r1
 800ef94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	68d9      	ldr	r1, [r3, #12]
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	781a      	ldrb	r2, [r3, #0]
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	695b      	ldr	r3, [r3, #20]
 800efaa:	b298      	uxth	r0, r3
 800efac:	79fb      	ldrb	r3, [r7, #7]
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	4603      	mov	r3, r0
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	f000 fa38 	bl	800f428 <USB_WritePacket>
 800efb8:	e0d2      	b.n	800f160 <USB_EPStartXfer+0x480>
 800efba:	bf00      	nop
 800efbc:	e007ffff 	.word	0xe007ffff
 800efc0:	fff80000 	.word	0xfff80000
 800efc4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd4:	691a      	ldr	r2, [r3, #16]
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	0159      	lsls	r1, r3, #5
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	440b      	add	r3, r1
 800efde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe2:	4619      	mov	r1, r3
 800efe4:	4b61      	ldr	r3, [pc, #388]	; (800f16c <USB_EPStartXfer+0x48c>)
 800efe6:	4013      	ands	r3, r2
 800efe8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	015a      	lsls	r2, r3, #5
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	4413      	add	r3, r2
 800eff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff6:	691a      	ldr	r2, [r3, #16]
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	0159      	lsls	r1, r3, #5
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	440b      	add	r3, r1
 800f000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f004:	4619      	mov	r1, r3
 800f006:	4b5a      	ldr	r3, [pc, #360]	; (800f170 <USB_EPStartXfer+0x490>)
 800f008:	4013      	ands	r3, r2
 800f00a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d123      	bne.n	800f05c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f020:	691a      	ldr	r2, [r3, #16]
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f02a:	69b9      	ldr	r1, [r7, #24]
 800f02c:	0148      	lsls	r0, r1, #5
 800f02e:	69f9      	ldr	r1, [r7, #28]
 800f030:	4401      	add	r1, r0
 800f032:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f036:	4313      	orrs	r3, r2
 800f038:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	015a      	lsls	r2, r3, #5
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	4413      	add	r3, r2
 800f042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f046:	691b      	ldr	r3, [r3, #16]
 800f048:	69ba      	ldr	r2, [r7, #24]
 800f04a:	0151      	lsls	r1, r2, #5
 800f04c:	69fa      	ldr	r2, [r7, #28]
 800f04e:	440a      	add	r2, r1
 800f050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f058:	6113      	str	r3, [r2, #16]
 800f05a:	e033      	b.n	800f0c4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	695a      	ldr	r2, [r3, #20]
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	4413      	add	r3, r2
 800f066:	1e5a      	subs	r2, r3, #1
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f070:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	015a      	lsls	r2, r3, #5
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	4413      	add	r3, r2
 800f07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f07e:	691a      	ldr	r2, [r3, #16]
 800f080:	8afb      	ldrh	r3, [r7, #22]
 800f082:	04d9      	lsls	r1, r3, #19
 800f084:	4b3b      	ldr	r3, [pc, #236]	; (800f174 <USB_EPStartXfer+0x494>)
 800f086:	400b      	ands	r3, r1
 800f088:	69b9      	ldr	r1, [r7, #24]
 800f08a:	0148      	lsls	r0, r1, #5
 800f08c:	69f9      	ldr	r1, [r7, #28]
 800f08e:	4401      	add	r1, r0
 800f090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f094:	4313      	orrs	r3, r2
 800f096:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	015a      	lsls	r2, r3, #5
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	4413      	add	r3, r2
 800f0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a4:	691a      	ldr	r2, [r3, #16]
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	8af9      	ldrh	r1, [r7, #22]
 800f0ac:	fb01 f303 	mul.w	r3, r1, r3
 800f0b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0b4:	69b9      	ldr	r1, [r7, #24]
 800f0b6:	0148      	lsls	r0, r1, #5
 800f0b8:	69f9      	ldr	r1, [r7, #28]
 800f0ba:	4401      	add	r1, r0
 800f0bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d10d      	bne.n	800f0e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d009      	beq.n	800f0e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	68d9      	ldr	r1, [r3, #12]
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	015a      	lsls	r2, r3, #5
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	4413      	add	r3, r2
 800f0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e2:	460a      	mov	r2, r1
 800f0e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	78db      	ldrb	r3, [r3, #3]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d128      	bne.n	800f140 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d110      	bne.n	800f120 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	015a      	lsls	r2, r3, #5
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	4413      	add	r3, r2
 800f106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	0151      	lsls	r1, r2, #5
 800f110:	69fa      	ldr	r2, [r7, #28]
 800f112:	440a      	add	r2, r1
 800f114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f11c:	6013      	str	r3, [r2, #0]
 800f11e:	e00f      	b.n	800f140 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	015a      	lsls	r2, r3, #5
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	4413      	add	r3, r2
 800f128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	69ba      	ldr	r2, [r7, #24]
 800f130:	0151      	lsls	r1, r2, #5
 800f132:	69fa      	ldr	r2, [r7, #28]
 800f134:	440a      	add	r2, r1
 800f136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f13a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f13e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	015a      	lsls	r2, r3, #5
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	4413      	add	r3, r2
 800f148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	69ba      	ldr	r2, [r7, #24]
 800f150:	0151      	lsls	r1, r2, #5
 800f152:	69fa      	ldr	r2, [r7, #28]
 800f154:	440a      	add	r2, r1
 800f156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f15a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f15e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3720      	adds	r7, #32
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	fff80000 	.word	0xfff80000
 800f170:	e007ffff 	.word	0xe007ffff
 800f174:	1ff80000 	.word	0x1ff80000

0800f178 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f178:	b480      	push	{r7}
 800f17a:	b087      	sub	sp, #28
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	4613      	mov	r3, r2
 800f184:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	785b      	ldrb	r3, [r3, #1]
 800f194:	2b01      	cmp	r3, #1
 800f196:	f040 80cd 	bne.w	800f334 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	695b      	ldr	r3, [r3, #20]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d132      	bne.n	800f208 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	015a      	lsls	r2, r3, #5
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1ae:	691a      	ldr	r2, [r3, #16]
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	0159      	lsls	r1, r3, #5
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	440b      	add	r3, r1
 800f1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1bc:	4619      	mov	r1, r3
 800f1be:	4b98      	ldr	r3, [pc, #608]	; (800f420 <USB_EP0StartXfer+0x2a8>)
 800f1c0:	4013      	ands	r3, r2
 800f1c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	015a      	lsls	r2, r3, #5
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	0151      	lsls	r1, r2, #5
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	440a      	add	r2, r1
 800f1da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	015a      	lsls	r2, r3, #5
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1f0:	691a      	ldr	r2, [r3, #16]
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	0159      	lsls	r1, r3, #5
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	440b      	add	r3, r1
 800f1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1fe:	4619      	mov	r1, r3
 800f200:	4b88      	ldr	r3, [pc, #544]	; (800f424 <USB_EP0StartXfer+0x2ac>)
 800f202:	4013      	ands	r3, r2
 800f204:	610b      	str	r3, [r1, #16]
 800f206:	e04e      	b.n	800f2a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	015a      	lsls	r2, r3, #5
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	4413      	add	r3, r2
 800f210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f214:	691a      	ldr	r2, [r3, #16]
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	0159      	lsls	r1, r3, #5
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	440b      	add	r3, r1
 800f21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f222:	4619      	mov	r1, r3
 800f224:	4b7f      	ldr	r3, [pc, #508]	; (800f424 <USB_EP0StartXfer+0x2ac>)
 800f226:	4013      	ands	r3, r2
 800f228:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	015a      	lsls	r2, r3, #5
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	4413      	add	r3, r2
 800f232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f236:	691a      	ldr	r2, [r3, #16]
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	0159      	lsls	r1, r3, #5
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	440b      	add	r3, r1
 800f240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f244:	4619      	mov	r1, r3
 800f246:	4b76      	ldr	r3, [pc, #472]	; (800f420 <USB_EP0StartXfer+0x2a8>)
 800f248:	4013      	ands	r3, r2
 800f24a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	695a      	ldr	r2, [r3, #20]
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	689b      	ldr	r3, [r3, #8]
 800f254:	429a      	cmp	r2, r3
 800f256:	d903      	bls.n	800f260 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	689a      	ldr	r2, [r3, #8]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	015a      	lsls	r2, r3, #5
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	4413      	add	r3, r2
 800f268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f26c:	691b      	ldr	r3, [r3, #16]
 800f26e:	693a      	ldr	r2, [r7, #16]
 800f270:	0151      	lsls	r1, r2, #5
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	440a      	add	r2, r1
 800f276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f27a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f27e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	015a      	lsls	r2, r3, #5
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	4413      	add	r3, r2
 800f288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f28c:	691a      	ldr	r2, [r3, #16]
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	695b      	ldr	r3, [r3, #20]
 800f292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f296:	6939      	ldr	r1, [r7, #16]
 800f298:	0148      	lsls	r0, r1, #5
 800f29a:	6979      	ldr	r1, [r7, #20]
 800f29c:	4401      	add	r1, r0
 800f29e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d11e      	bne.n	800f2ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d009      	beq.n	800f2c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	015a      	lsls	r2, r3, #5
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	015a      	lsls	r2, r3, #5
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	0151      	lsls	r1, r2, #5
 800f2da:	697a      	ldr	r2, [r7, #20]
 800f2dc:	440a      	add	r2, r1
 800f2de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f2e6:	6013      	str	r3, [r2, #0]
 800f2e8:	e092      	b.n	800f410 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	015a      	lsls	r2, r3, #5
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	0151      	lsls	r1, r2, #5
 800f2fc:	697a      	ldr	r2, [r7, #20]
 800f2fe:	440a      	add	r2, r1
 800f300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f304:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f308:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	695b      	ldr	r3, [r3, #20]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d07e      	beq.n	800f410 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	f003 030f 	and.w	r3, r3, #15
 800f322:	2101      	movs	r1, #1
 800f324:	fa01 f303 	lsl.w	r3, r1, r3
 800f328:	6979      	ldr	r1, [r7, #20]
 800f32a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f32e:	4313      	orrs	r3, r2
 800f330:	634b      	str	r3, [r1, #52]	; 0x34
 800f332:	e06d      	b.n	800f410 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	015a      	lsls	r2, r3, #5
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	4413      	add	r3, r2
 800f33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f340:	691a      	ldr	r2, [r3, #16]
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	0159      	lsls	r1, r3, #5
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	440b      	add	r3, r1
 800f34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f34e:	4619      	mov	r1, r3
 800f350:	4b34      	ldr	r3, [pc, #208]	; (800f424 <USB_EP0StartXfer+0x2ac>)
 800f352:	4013      	ands	r3, r2
 800f354:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	015a      	lsls	r2, r3, #5
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	4413      	add	r3, r2
 800f35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f362:	691a      	ldr	r2, [r3, #16]
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	0159      	lsls	r1, r3, #5
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	440b      	add	r3, r1
 800f36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f370:	4619      	mov	r1, r3
 800f372:	4b2b      	ldr	r3, [pc, #172]	; (800f420 <USB_EP0StartXfer+0x2a8>)
 800f374:	4013      	ands	r3, r2
 800f376:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	695b      	ldr	r3, [r3, #20]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d003      	beq.n	800f388 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	689a      	ldr	r2, [r3, #8]
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	015a      	lsls	r2, r3, #5
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	4413      	add	r3, r2
 800f390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f394:	691b      	ldr	r3, [r3, #16]
 800f396:	693a      	ldr	r2, [r7, #16]
 800f398:	0151      	lsls	r1, r2, #5
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	440a      	add	r2, r1
 800f39e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	015a      	lsls	r2, r3, #5
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b4:	691a      	ldr	r2, [r3, #16]
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f3be:	6939      	ldr	r1, [r7, #16]
 800f3c0:	0148      	lsls	r0, r1, #5
 800f3c2:	6979      	ldr	r1, [r7, #20]
 800f3c4:	4401      	add	r1, r0
 800f3c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d10d      	bne.n	800f3f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d009      	beq.n	800f3f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	68d9      	ldr	r1, [r3, #12]
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	015a      	lsls	r2, r3, #5
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ec:	460a      	mov	r2, r1
 800f3ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	693a      	ldr	r2, [r7, #16]
 800f400:	0151      	lsls	r1, r2, #5
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	440a      	add	r2, r1
 800f406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f40a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f40e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	371c      	adds	r7, #28
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	e007ffff 	.word	0xe007ffff
 800f424:	fff80000 	.word	0xfff80000

0800f428 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f428:	b480      	push	{r7}
 800f42a:	b089      	sub	sp, #36	; 0x24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	4611      	mov	r1, r2
 800f434:	461a      	mov	r2, r3
 800f436:	460b      	mov	r3, r1
 800f438:	71fb      	strb	r3, [r7, #7]
 800f43a:	4613      	mov	r3, r2
 800f43c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d11a      	bne.n	800f484 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f44e:	88bb      	ldrh	r3, [r7, #4]
 800f450:	3303      	adds	r3, #3
 800f452:	089b      	lsrs	r3, r3, #2
 800f454:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f456:	2300      	movs	r3, #0
 800f458:	61bb      	str	r3, [r7, #24]
 800f45a:	e00f      	b.n	800f47c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	031a      	lsls	r2, r3, #12
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	4413      	add	r3, r2
 800f464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f468:	461a      	mov	r2, r3
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	3304      	adds	r3, #4
 800f474:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	3301      	adds	r3, #1
 800f47a:	61bb      	str	r3, [r7, #24]
 800f47c:	69ba      	ldr	r2, [r7, #24]
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	429a      	cmp	r2, r3
 800f482:	d3eb      	bcc.n	800f45c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3724      	adds	r7, #36	; 0x24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr

0800f492 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f492:	b480      	push	{r7}
 800f494:	b089      	sub	sp, #36	; 0x24
 800f496:	af00      	add	r7, sp, #0
 800f498:	60f8      	str	r0, [r7, #12]
 800f49a:	60b9      	str	r1, [r7, #8]
 800f49c:	4613      	mov	r3, r2
 800f49e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f4a8:	88fb      	ldrh	r3, [r7, #6]
 800f4aa:	3303      	adds	r3, #3
 800f4ac:	089b      	lsrs	r3, r3, #2
 800f4ae:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	61bb      	str	r3, [r7, #24]
 800f4b4:	e00b      	b.n	800f4ce <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	601a      	str	r2, [r3, #0]
    pDest++;
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	3304      	adds	r3, #4
 800f4c6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	61bb      	str	r3, [r7, #24]
 800f4ce:	69ba      	ldr	r2, [r7, #24]
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d3ef      	bcc.n	800f4b6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f4d6:	69fb      	ldr	r3, [r7, #28]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3724      	adds	r7, #36	; 0x24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	785b      	ldrb	r3, [r3, #1]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d12c      	bne.n	800f55a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	015a      	lsls	r2, r3, #5
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	4413      	add	r3, r2
 800f508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	db12      	blt.n	800f538 <USB_EPSetStall+0x54>
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00f      	beq.n	800f538 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	0151      	lsls	r1, r2, #5
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	440a      	add	r2, r1
 800f52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f536:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	015a      	lsls	r2, r3, #5
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	4413      	add	r3, r2
 800f540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	0151      	lsls	r1, r2, #5
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	440a      	add	r2, r1
 800f54e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	e02b      	b.n	800f5b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	015a      	lsls	r2, r3, #5
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	4413      	add	r3, r2
 800f562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	db12      	blt.n	800f592 <USB_EPSetStall+0xae>
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00f      	beq.n	800f592 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	015a      	lsls	r2, r3, #5
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	4413      	add	r3, r2
 800f57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68ba      	ldr	r2, [r7, #8]
 800f582:	0151      	lsls	r1, r2, #5
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	440a      	add	r2, r1
 800f588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f58c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f590:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	015a      	lsls	r2, r3, #5
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	4413      	add	r3, r2
 800f59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	0151      	lsls	r1, r2, #5
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	440a      	add	r2, r1
 800f5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f5b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3714      	adds	r7, #20
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b085      	sub	sp, #20
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	785b      	ldrb	r3, [r3, #1]
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d128      	bne.n	800f62e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	015a      	lsls	r2, r3, #5
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	0151      	lsls	r1, r2, #5
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	440a      	add	r2, r1
 800f5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	78db      	ldrb	r3, [r3, #3]
 800f600:	2b03      	cmp	r3, #3
 800f602:	d003      	beq.n	800f60c <USB_EPClearStall+0x4c>
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	78db      	ldrb	r3, [r3, #3]
 800f608:	2b02      	cmp	r3, #2
 800f60a:	d138      	bne.n	800f67e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	015a      	lsls	r2, r3, #5
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	4413      	add	r3, r2
 800f614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68ba      	ldr	r2, [r7, #8]
 800f61c:	0151      	lsls	r1, r2, #5
 800f61e:	68fa      	ldr	r2, [r7, #12]
 800f620:	440a      	add	r2, r1
 800f622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f62a:	6013      	str	r3, [r2, #0]
 800f62c:	e027      	b.n	800f67e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	015a      	lsls	r2, r3, #5
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	4413      	add	r3, r2
 800f636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	0151      	lsls	r1, r2, #5
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	440a      	add	r2, r1
 800f644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f648:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f64c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	78db      	ldrb	r3, [r3, #3]
 800f652:	2b03      	cmp	r3, #3
 800f654:	d003      	beq.n	800f65e <USB_EPClearStall+0x9e>
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	78db      	ldrb	r3, [r3, #3]
 800f65a:	2b02      	cmp	r3, #2
 800f65c:	d10f      	bne.n	800f67e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	015a      	lsls	r2, r3, #5
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	4413      	add	r3, r2
 800f666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	0151      	lsls	r1, r2, #5
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	440a      	add	r2, r1
 800f674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f67c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3714      	adds	r7, #20
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr

0800f68c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b085      	sub	sp, #20
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	460b      	mov	r3, r1
 800f696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f6ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	78fb      	ldrb	r3, [r7, #3]
 800f6ba:	011b      	lsls	r3, r3, #4
 800f6bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f6c0:	68f9      	ldr	r1, [r7, #12]
 800f6c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3714      	adds	r7, #20
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f6f2:	f023 0303 	bic.w	r3, r3, #3
 800f6f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f706:	f023 0302 	bic.w	r3, r3, #2
 800f70a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f70c:	2300      	movs	r3, #0
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b085      	sub	sp, #20
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	68fa      	ldr	r2, [r7, #12]
 800f730:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f734:	f023 0303 	bic.w	r3, r3, #3
 800f738:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f748:	f043 0302 	orr.w	r3, r3, #2
 800f74c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	695b      	ldr	r3, [r3, #20]
 800f768:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	4013      	ands	r3, r2
 800f772:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f774:	68fb      	ldr	r3, [r7, #12]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3714      	adds	r7, #20
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f782:	b480      	push	{r7}
 800f784:	b085      	sub	sp, #20
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f794:	699b      	ldr	r3, [r3, #24]
 800f796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f79e:	69db      	ldr	r3, [r3, #28]
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	4013      	ands	r3, r2
 800f7a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	0c1b      	lsrs	r3, r3, #16
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3714      	adds	r7, #20
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b085      	sub	sp, #20
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7c8:	699b      	ldr	r3, [r3, #24]
 800f7ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7d2:	69db      	ldr	r3, [r3, #28]
 800f7d4:	68ba      	ldr	r2, [r7, #8]
 800f7d6:	4013      	ands	r3, r2
 800f7d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	b29b      	uxth	r3, r3
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	b085      	sub	sp, #20
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f7fa:	78fb      	ldrb	r3, [r7, #3]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	4413      	add	r3, r2
 800f802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	4013      	ands	r3, r2
 800f816:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f818:	68bb      	ldr	r3, [r7, #8]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f826:	b480      	push	{r7}
 800f828:	b087      	sub	sp, #28
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f848:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f84a:	78fb      	ldrb	r3, [r7, #3]
 800f84c:	f003 030f 	and.w	r3, r3, #15
 800f850:	68fa      	ldr	r2, [r7, #12]
 800f852:	fa22 f303 	lsr.w	r3, r2, r3
 800f856:	01db      	lsls	r3, r3, #7
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	4313      	orrs	r3, r2
 800f85e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f860:	78fb      	ldrb	r3, [r7, #3]
 800f862:	015a      	lsls	r2, r3, #5
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	4413      	add	r3, r2
 800f868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	693a      	ldr	r2, [r7, #16]
 800f870:	4013      	ands	r3, r2
 800f872:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f874:	68bb      	ldr	r3, [r7, #8]
}
 800f876:	4618      	mov	r0, r3
 800f878:	371c      	adds	r7, #28
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	695b      	ldr	r3, [r3, #20]
 800f88e:	f003 0301 	and.w	r3, r3, #1
}
 800f892:	4618      	mov	r0, r3
 800f894:	370c      	adds	r7, #12
 800f896:	46bd      	mov	sp, r7
 800f898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89c:	4770      	bx	lr
	...

0800f8a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	4b09      	ldr	r3, [pc, #36]	; (800f8e4 <USB_ActivateSetup+0x44>)
 800f8be:	4013      	ands	r3, r2
 800f8c0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	68fa      	ldr	r2, [r7, #12]
 800f8cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3714      	adds	r7, #20
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr
 800f8e4:	fffff800 	.word	0xfffff800

0800f8e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	333c      	adds	r3, #60	; 0x3c
 800f8fe:	3304      	adds	r3, #4
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	4a26      	ldr	r2, [pc, #152]	; (800f9a0 <USB_EP0_OutStart+0xb8>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d90a      	bls.n	800f922 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f91c:	d101      	bne.n	800f922 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f91e:	2300      	movs	r3, #0
 800f920:	e037      	b.n	800f992 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f928:	461a      	mov	r2, r3
 800f92a:	2300      	movs	r3, #0
 800f92c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f934:	691b      	ldr	r3, [r3, #16]
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f93c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f948:	691b      	ldr	r3, [r3, #16]
 800f94a:	697a      	ldr	r2, [r7, #20]
 800f94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f950:	f043 0318 	orr.w	r3, r3, #24
 800f954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f95c:	691b      	ldr	r3, [r3, #16]
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f964:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f968:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f96a:	7afb      	ldrb	r3, [r7, #11]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d10f      	bne.n	800f990 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f976:	461a      	mov	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	697a      	ldr	r2, [r7, #20]
 800f986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f98a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f98e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	371c      	adds	r7, #28
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	4f54300a 	.word	0x4f54300a

0800f9a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	60fb      	str	r3, [r7, #12]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	4a13      	ldr	r2, [pc, #76]	; (800fa08 <USB_CoreReset+0x64>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d901      	bls.n	800f9c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	e01b      	b.n	800f9fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	daf2      	bge.n	800f9b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	691b      	ldr	r3, [r3, #16]
 800f9d2:	f043 0201 	orr.w	r2, r3, #1
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	60fb      	str	r3, [r7, #12]
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	4a09      	ldr	r2, [pc, #36]	; (800fa08 <USB_CoreReset+0x64>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d901      	bls.n	800f9ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f9e8:	2303      	movs	r3, #3
 800f9ea:	e006      	b.n	800f9fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	691b      	ldr	r3, [r3, #16]
 800f9f0:	f003 0301 	and.w	r3, r3, #1
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d0f0      	beq.n	800f9da <USB_CoreReset+0x36>

  return HAL_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3714      	adds	r7, #20
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop
 800fa08:	00030d40 	.word	0x00030d40

0800fa0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b087      	sub	sp, #28
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	4613      	mov	r3, r2
 800fa18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fa22:	4b1f      	ldr	r3, [pc, #124]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa24:	7a5b      	ldrb	r3, [r3, #9]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d131      	bne.n	800fa90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa2c:	4b1c      	ldr	r3, [pc, #112]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa2e:	7a5b      	ldrb	r3, [r3, #9]
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	461a      	mov	r2, r3
 800fa34:	4b1a      	ldr	r3, [pc, #104]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa36:	2100      	movs	r1, #0
 800fa38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fa3a:	4b19      	ldr	r3, [pc, #100]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa3c:	7a5b      	ldrb	r3, [r3, #9]
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	4a17      	ldr	r2, [pc, #92]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fa4a:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa4c:	7a5b      	ldrb	r3, [r3, #9]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	461a      	mov	r2, r3
 800fa52:	4b13      	ldr	r3, [pc, #76]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa54:	4413      	add	r3, r2
 800fa56:	79fa      	ldrb	r2, [r7, #7]
 800fa58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fa5a:	4b11      	ldr	r3, [pc, #68]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa5c:	7a5b      	ldrb	r3, [r3, #9]
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	b2d1      	uxtb	r1, r2
 800fa64:	4a0e      	ldr	r2, [pc, #56]	; (800faa0 <FATFS_LinkDriverEx+0x94>)
 800fa66:	7251      	strb	r1, [r2, #9]
 800fa68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fa6a:	7dbb      	ldrb	r3, [r7, #22]
 800fa6c:	3330      	adds	r3, #48	; 0x30
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	3301      	adds	r3, #1
 800fa78:	223a      	movs	r2, #58	; 0x3a
 800fa7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	3302      	adds	r3, #2
 800fa80:	222f      	movs	r2, #47	; 0x2f
 800fa82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	3303      	adds	r3, #3
 800fa88:	2200      	movs	r2, #0
 800fa8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fa90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	371c      	adds	r7, #28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	20000240 	.word	0x20000240

0800faa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800faae:	2200      	movs	r2, #0
 800fab0:	6839      	ldr	r1, [r7, #0]
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7ff ffaa 	bl	800fa0c <FATFS_LinkDriverEx>
 800fab8:	4603      	mov	r3, r0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fac2:	b480      	push	{r7}
 800fac4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fac6:	bf00      	nop
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fad0:	b480      	push	{r7}
 800fad2:	b085      	sub	sp, #20
 800fad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fad6:	f3ef 8305 	mrs	r3, IPSR
 800fada:	60bb      	str	r3, [r7, #8]
  return(result);
 800fadc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d10f      	bne.n	800fb02 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fae2:	f3ef 8310 	mrs	r3, PRIMASK
 800fae6:	607b      	str	r3, [r7, #4]
  return(result);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d105      	bne.n	800fafa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800faee:	f3ef 8311 	mrs	r3, BASEPRI
 800faf2:	603b      	str	r3, [r7, #0]
  return(result);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d007      	beq.n	800fb0a <osKernelInitialize+0x3a>
 800fafa:	4b0e      	ldr	r3, [pc, #56]	; (800fb34 <osKernelInitialize+0x64>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	d103      	bne.n	800fb0a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fb02:	f06f 0305 	mvn.w	r3, #5
 800fb06:	60fb      	str	r3, [r7, #12]
 800fb08:	e00c      	b.n	800fb24 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fb0a:	4b0a      	ldr	r3, [pc, #40]	; (800fb34 <osKernelInitialize+0x64>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d105      	bne.n	800fb1e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fb12:	4b08      	ldr	r3, [pc, #32]	; (800fb34 <osKernelInitialize+0x64>)
 800fb14:	2201      	movs	r2, #1
 800fb16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	60fb      	str	r3, [r7, #12]
 800fb1c:	e002      	b.n	800fb24 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fb24:	68fb      	ldr	r3, [r7, #12]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3714      	adds	r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	2000024c 	.word	0x2000024c

0800fb38 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800fb3e:	f003 fa01 	bl	8012f44 <xTaskGetSchedulerState>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d004      	beq.n	800fb52 <osKernelGetState+0x1a>
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	d105      	bne.n	800fb58 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800fb4c:	2302      	movs	r3, #2
 800fb4e:	607b      	str	r3, [r7, #4]
      break;
 800fb50:	e00c      	b.n	800fb6c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800fb52:	2303      	movs	r3, #3
 800fb54:	607b      	str	r3, [r7, #4]
      break;
 800fb56:	e009      	b.n	800fb6c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800fb58:	4b07      	ldr	r3, [pc, #28]	; (800fb78 <osKernelGetState+0x40>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d102      	bne.n	800fb66 <osKernelGetState+0x2e>
        state = osKernelReady;
 800fb60:	2301      	movs	r3, #1
 800fb62:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800fb64:	e001      	b.n	800fb6a <osKernelGetState+0x32>
        state = osKernelInactive;
 800fb66:	2300      	movs	r3, #0
 800fb68:	607b      	str	r3, [r7, #4]
      break;
 800fb6a:	bf00      	nop
  }

  return (state);
 800fb6c:	687b      	ldr	r3, [r7, #4]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	2000024c 	.word	0x2000024c

0800fb7c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb82:	f3ef 8305 	mrs	r3, IPSR
 800fb86:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d10f      	bne.n	800fbae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb8e:	f3ef 8310 	mrs	r3, PRIMASK
 800fb92:	607b      	str	r3, [r7, #4]
  return(result);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d105      	bne.n	800fba6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb9a:	f3ef 8311 	mrs	r3, BASEPRI
 800fb9e:	603b      	str	r3, [r7, #0]
  return(result);
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d007      	beq.n	800fbb6 <osKernelStart+0x3a>
 800fba6:	4b0f      	ldr	r3, [pc, #60]	; (800fbe4 <osKernelStart+0x68>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d103      	bne.n	800fbb6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800fbae:	f06f 0305 	mvn.w	r3, #5
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	e010      	b.n	800fbd8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fbb6:	4b0b      	ldr	r3, [pc, #44]	; (800fbe4 <osKernelStart+0x68>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d109      	bne.n	800fbd2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fbbe:	f7ff ff80 	bl	800fac2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fbc2:	4b08      	ldr	r3, [pc, #32]	; (800fbe4 <osKernelStart+0x68>)
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fbc8:	f002 fd16 	bl	80125f8 <vTaskStartScheduler>
      stat = osOK;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	e002      	b.n	800fbd8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800fbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	2000024c 	.word	0x2000024c

0800fbe8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbee:	f3ef 8305 	mrs	r3, IPSR
 800fbf2:	60bb      	str	r3, [r7, #8]
  return(result);
 800fbf4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d10f      	bne.n	800fc1a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbfa:	f3ef 8310 	mrs	r3, PRIMASK
 800fbfe:	607b      	str	r3, [r7, #4]
  return(result);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d105      	bne.n	800fc12 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc06:	f3ef 8311 	mrs	r3, BASEPRI
 800fc0a:	603b      	str	r3, [r7, #0]
  return(result);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d007      	beq.n	800fc22 <osKernelGetTickCount+0x3a>
 800fc12:	4b08      	ldr	r3, [pc, #32]	; (800fc34 <osKernelGetTickCount+0x4c>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d103      	bne.n	800fc22 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800fc1a:	f002 fe15 	bl	8012848 <xTaskGetTickCountFromISR>
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	e002      	b.n	800fc28 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800fc22:	f002 fe01 	bl	8012828 <xTaskGetTickCount>
 800fc26:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800fc28:	68fb      	ldr	r3, [r7, #12]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	2000024c 	.word	0x2000024c

0800fc38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b090      	sub	sp, #64	; 0x40
 800fc3c:	af04      	add	r7, sp, #16
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fc44:	2300      	movs	r3, #0
 800fc46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc48:	f3ef 8305 	mrs	r3, IPSR
 800fc4c:	61fb      	str	r3, [r7, #28]
  return(result);
 800fc4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f040 808f 	bne.w	800fd74 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc56:	f3ef 8310 	mrs	r3, PRIMASK
 800fc5a:	61bb      	str	r3, [r7, #24]
  return(result);
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d105      	bne.n	800fc6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc62:	f3ef 8311 	mrs	r3, BASEPRI
 800fc66:	617b      	str	r3, [r7, #20]
  return(result);
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d003      	beq.n	800fc76 <osThreadNew+0x3e>
 800fc6e:	4b44      	ldr	r3, [pc, #272]	; (800fd80 <osThreadNew+0x148>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2b02      	cmp	r3, #2
 800fc74:	d07e      	beq.n	800fd74 <osThreadNew+0x13c>
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d07b      	beq.n	800fd74 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800fc7c:	2380      	movs	r3, #128	; 0x80
 800fc7e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800fc80:	2318      	movs	r3, #24
 800fc82:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800fc84:	2300      	movs	r3, #0
 800fc86:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fc88:	f04f 33ff 	mov.w	r3, #4294967295
 800fc8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d045      	beq.n	800fd20 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d002      	beq.n	800fca2 <osThreadNew+0x6a>
        name = attr->name;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	699b      	ldr	r3, [r3, #24]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d002      	beq.n	800fcb0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	699b      	ldr	r3, [r3, #24]
 800fcae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d008      	beq.n	800fcc8 <osThreadNew+0x90>
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	2b38      	cmp	r3, #56	; 0x38
 800fcba:	d805      	bhi.n	800fcc8 <osThreadNew+0x90>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	f003 0301 	and.w	r3, r3, #1
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d001      	beq.n	800fccc <osThreadNew+0x94>
        return (NULL);
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e054      	b.n	800fd76 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	695b      	ldr	r3, [r3, #20]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d003      	beq.n	800fcdc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	695b      	ldr	r3, [r3, #20]
 800fcd8:	089b      	lsrs	r3, r3, #2
 800fcda:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	689b      	ldr	r3, [r3, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00e      	beq.n	800fd02 <osThreadNew+0xca>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	2b5f      	cmp	r3, #95	; 0x5f
 800fcea:	d90a      	bls.n	800fd02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d006      	beq.n	800fd02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	695b      	ldr	r3, [r3, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <osThreadNew+0xca>
        mem = 1;
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	623b      	str	r3, [r7, #32]
 800fd00:	e010      	b.n	800fd24 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	689b      	ldr	r3, [r3, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10c      	bne.n	800fd24 <osThreadNew+0xec>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d108      	bne.n	800fd24 <osThreadNew+0xec>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d104      	bne.n	800fd24 <osThreadNew+0xec>
          mem = 0;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	623b      	str	r3, [r7, #32]
 800fd1e:	e001      	b.n	800fd24 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800fd20:	2300      	movs	r3, #0
 800fd22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fd24:	6a3b      	ldr	r3, [r7, #32]
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d110      	bne.n	800fd4c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd32:	9202      	str	r2, [sp, #8]
 800fd34:	9301      	str	r3, [sp, #4]
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f002 fa77 	bl	8012234 <xTaskCreateStatic>
 800fd46:	4603      	mov	r3, r0
 800fd48:	613b      	str	r3, [r7, #16]
 800fd4a:	e013      	b.n	800fd74 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800fd4c:	6a3b      	ldr	r3, [r7, #32]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d110      	bne.n	800fd74 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	f107 0310 	add.w	r3, r7, #16
 800fd5a:	9301      	str	r3, [sp, #4]
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f002 fac8 	bl	80122fa <xTaskCreate>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d001      	beq.n	800fd74 <osThreadNew+0x13c>
          hTask = NULL;
 800fd70:	2300      	movs	r3, #0
 800fd72:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fd74:	693b      	ldr	r3, [r7, #16]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3730      	adds	r7, #48	; 0x30
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	2000024c 	.word	0x2000024c

0800fd84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b086      	sub	sp, #24
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd8c:	f3ef 8305 	mrs	r3, IPSR
 800fd90:	613b      	str	r3, [r7, #16]
  return(result);
 800fd92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10f      	bne.n	800fdb8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd98:	f3ef 8310 	mrs	r3, PRIMASK
 800fd9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d105      	bne.n	800fdb0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fda4:	f3ef 8311 	mrs	r3, BASEPRI
 800fda8:	60bb      	str	r3, [r7, #8]
  return(result);
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d007      	beq.n	800fdc0 <osDelay+0x3c>
 800fdb0:	4b0a      	ldr	r3, [pc, #40]	; (800fddc <osDelay+0x58>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d103      	bne.n	800fdc0 <osDelay+0x3c>
    stat = osErrorISR;
 800fdb8:	f06f 0305 	mvn.w	r3, #5
 800fdbc:	617b      	str	r3, [r7, #20]
 800fdbe:	e007      	b.n	800fdd0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d002      	beq.n	800fdd0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f002 fbde 	bl	801258c <vTaskDelay>
    }
  }

  return (stat);
 800fdd0:	697b      	ldr	r3, [r7, #20]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3718      	adds	r7, #24
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	bf00      	nop
 800fddc:	2000024c 	.word	0x2000024c

0800fde0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b08a      	sub	sp, #40	; 0x28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800fde8:	2300      	movs	r3, #0
 800fdea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdec:	f3ef 8305 	mrs	r3, IPSR
 800fdf0:	613b      	str	r3, [r7, #16]
  return(result);
 800fdf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f040 8085 	bne.w	800ff04 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdfa:	f3ef 8310 	mrs	r3, PRIMASK
 800fdfe:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d105      	bne.n	800fe12 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe06:	f3ef 8311 	mrs	r3, BASEPRI
 800fe0a:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d003      	beq.n	800fe1a <osMutexNew+0x3a>
 800fe12:	4b3f      	ldr	r3, [pc, #252]	; (800ff10 <osMutexNew+0x130>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	d074      	beq.n	800ff04 <osMutexNew+0x124>
    if (attr != NULL) {
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d003      	beq.n	800fe28 <osMutexNew+0x48>
      type = attr->attr_bits;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	623b      	str	r3, [r7, #32]
 800fe26:	e001      	b.n	800fe2c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800fe2c:	6a3b      	ldr	r3, [r7, #32]
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d002      	beq.n	800fe3c <osMutexNew+0x5c>
      rmtx = 1U;
 800fe36:	2301      	movs	r3, #1
 800fe38:	61fb      	str	r3, [r7, #28]
 800fe3a:	e001      	b.n	800fe40 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800fe40:	6a3b      	ldr	r3, [r7, #32]
 800fe42:	f003 0308 	and.w	r3, r3, #8
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d15c      	bne.n	800ff04 <osMutexNew+0x124>
      mem = -1;
 800fe4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d015      	beq.n	800fe82 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d006      	beq.n	800fe6c <osMutexNew+0x8c>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	2b4f      	cmp	r3, #79	; 0x4f
 800fe64:	d902      	bls.n	800fe6c <osMutexNew+0x8c>
          mem = 1;
 800fe66:	2301      	movs	r3, #1
 800fe68:	61bb      	str	r3, [r7, #24]
 800fe6a:	e00c      	b.n	800fe86 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d108      	bne.n	800fe86 <osMutexNew+0xa6>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d104      	bne.n	800fe86 <osMutexNew+0xa6>
            mem = 0;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	61bb      	str	r3, [r7, #24]
 800fe80:	e001      	b.n	800fe86 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800fe82:	2300      	movs	r3, #0
 800fe84:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d112      	bne.n	800feb2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d007      	beq.n	800fea2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	689b      	ldr	r3, [r3, #8]
 800fe96:	4619      	mov	r1, r3
 800fe98:	2004      	movs	r0, #4
 800fe9a:	f001 fa3e 	bl	801131a <xQueueCreateMutexStatic>
 800fe9e:	6278      	str	r0, [r7, #36]	; 0x24
 800fea0:	e016      	b.n	800fed0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	4619      	mov	r1, r3
 800fea8:	2001      	movs	r0, #1
 800feaa:	f001 fa36 	bl	801131a <xQueueCreateMutexStatic>
 800feae:	6278      	str	r0, [r7, #36]	; 0x24
 800feb0:	e00e      	b.n	800fed0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d10b      	bne.n	800fed0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d004      	beq.n	800fec8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800febe:	2004      	movs	r0, #4
 800fec0:	f001 fa13 	bl	80112ea <xQueueCreateMutex>
 800fec4:	6278      	str	r0, [r7, #36]	; 0x24
 800fec6:	e003      	b.n	800fed0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800fec8:	2001      	movs	r0, #1
 800feca:	f001 fa0e 	bl	80112ea <xQueueCreateMutex>
 800fece:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d00c      	beq.n	800fef0 <osMutexNew+0x110>
        if (attr != NULL) {
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d003      	beq.n	800fee4 <osMutexNew+0x104>
          name = attr->name;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	617b      	str	r3, [r7, #20]
 800fee2:	e001      	b.n	800fee8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800fee4:	2300      	movs	r3, #0
 800fee6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800fee8:	6979      	ldr	r1, [r7, #20]
 800feea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800feec:	f002 f91a 	bl	8012124 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800fef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d006      	beq.n	800ff04 <osMutexNew+0x124>
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d003      	beq.n	800ff04 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800fefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefe:	f043 0301 	orr.w	r3, r3, #1
 800ff02:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ff04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3728      	adds	r7, #40	; 0x28
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	2000024c 	.word	0x2000024c

0800ff14 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b088      	sub	sp, #32
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f023 0301 	bic.w	r3, r3, #1
 800ff24:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff32:	f3ef 8305 	mrs	r3, IPSR
 800ff36:	613b      	str	r3, [r7, #16]
  return(result);
 800ff38:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d10f      	bne.n	800ff5e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff42:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d105      	bne.n	800ff56 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff4a:	f3ef 8311 	mrs	r3, BASEPRI
 800ff4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d007      	beq.n	800ff66 <osMutexAcquire+0x52>
 800ff56:	4b1d      	ldr	r3, [pc, #116]	; (800ffcc <osMutexAcquire+0xb8>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d103      	bne.n	800ff66 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ff5e:	f06f 0305 	mvn.w	r3, #5
 800ff62:	61fb      	str	r3, [r7, #28]
 800ff64:	e02c      	b.n	800ffc0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d103      	bne.n	800ff74 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ff6c:	f06f 0303 	mvn.w	r3, #3
 800ff70:	61fb      	str	r3, [r7, #28]
 800ff72:	e025      	b.n	800ffc0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d011      	beq.n	800ff9e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ff7a:	6839      	ldr	r1, [r7, #0]
 800ff7c:	69b8      	ldr	r0, [r7, #24]
 800ff7e:	f001 fa1d 	bl	80113bc <xQueueTakeMutexRecursive>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d01b      	beq.n	800ffc0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d003      	beq.n	800ff96 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ff8e:	f06f 0301 	mvn.w	r3, #1
 800ff92:	61fb      	str	r3, [r7, #28]
 800ff94:	e014      	b.n	800ffc0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ff96:	f06f 0302 	mvn.w	r3, #2
 800ff9a:	61fb      	str	r3, [r7, #28]
 800ff9c:	e010      	b.n	800ffc0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ff9e:	6839      	ldr	r1, [r7, #0]
 800ffa0:	69b8      	ldr	r0, [r7, #24]
 800ffa2:	f001 fdd7 	bl	8011b54 <xQueueSemaphoreTake>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d009      	beq.n	800ffc0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d003      	beq.n	800ffba <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ffb2:	f06f 0301 	mvn.w	r3, #1
 800ffb6:	61fb      	str	r3, [r7, #28]
 800ffb8:	e002      	b.n	800ffc0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ffba:	f06f 0302 	mvn.w	r3, #2
 800ffbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ffc0:	69fb      	ldr	r3, [r7, #28]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3720      	adds	r7, #32
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	2000024c 	.word	0x2000024c

0800ffd0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b088      	sub	sp, #32
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f023 0301 	bic.w	r3, r3, #1
 800ffde:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffec:	f3ef 8305 	mrs	r3, IPSR
 800fff0:	613b      	str	r3, [r7, #16]
  return(result);
 800fff2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d10f      	bne.n	8010018 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fff8:	f3ef 8310 	mrs	r3, PRIMASK
 800fffc:	60fb      	str	r3, [r7, #12]
  return(result);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d105      	bne.n	8010010 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010004:	f3ef 8311 	mrs	r3, BASEPRI
 8010008:	60bb      	str	r3, [r7, #8]
  return(result);
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d007      	beq.n	8010020 <osMutexRelease+0x50>
 8010010:	4b16      	ldr	r3, [pc, #88]	; (801006c <osMutexRelease+0x9c>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b02      	cmp	r3, #2
 8010016:	d103      	bne.n	8010020 <osMutexRelease+0x50>
    stat = osErrorISR;
 8010018:	f06f 0305 	mvn.w	r3, #5
 801001c:	61fb      	str	r3, [r7, #28]
 801001e:	e01f      	b.n	8010060 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d103      	bne.n	801002e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010026:	f06f 0303 	mvn.w	r3, #3
 801002a:	61fb      	str	r3, [r7, #28]
 801002c:	e018      	b.n	8010060 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d009      	beq.n	8010048 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010034:	69b8      	ldr	r0, [r7, #24]
 8010036:	f001 f98b 	bl	8011350 <xQueueGiveMutexRecursive>
 801003a:	4603      	mov	r3, r0
 801003c:	2b01      	cmp	r3, #1
 801003e:	d00f      	beq.n	8010060 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010040:	f06f 0302 	mvn.w	r3, #2
 8010044:	61fb      	str	r3, [r7, #28]
 8010046:	e00b      	b.n	8010060 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010048:	2300      	movs	r3, #0
 801004a:	2200      	movs	r2, #0
 801004c:	2100      	movs	r1, #0
 801004e:	69b8      	ldr	r0, [r7, #24]
 8010050:	f001 fa5e 	bl	8011510 <xQueueGenericSend>
 8010054:	4603      	mov	r3, r0
 8010056:	2b01      	cmp	r3, #1
 8010058:	d002      	beq.n	8010060 <osMutexRelease+0x90>
        stat = osErrorResource;
 801005a:	f06f 0302 	mvn.w	r3, #2
 801005e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010060:	69fb      	ldr	r3, [r7, #28]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3720      	adds	r7, #32
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	2000024c 	.word	0x2000024c

08010070 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010070:	b580      	push	{r7, lr}
 8010072:	b08c      	sub	sp, #48	; 0x30
 8010074:	af02      	add	r7, sp, #8
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801007c:	2300      	movs	r3, #0
 801007e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010080:	f3ef 8305 	mrs	r3, IPSR
 8010084:	61bb      	str	r3, [r7, #24]
  return(result);
 8010086:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010088:	2b00      	cmp	r3, #0
 801008a:	f040 8086 	bne.w	801019a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801008e:	f3ef 8310 	mrs	r3, PRIMASK
 8010092:	617b      	str	r3, [r7, #20]
  return(result);
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d105      	bne.n	80100a6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801009a:	f3ef 8311 	mrs	r3, BASEPRI
 801009e:	613b      	str	r3, [r7, #16]
  return(result);
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d003      	beq.n	80100ae <osSemaphoreNew+0x3e>
 80100a6:	4b3f      	ldr	r3, [pc, #252]	; (80101a4 <osSemaphoreNew+0x134>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d075      	beq.n	801019a <osSemaphoreNew+0x12a>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d072      	beq.n	801019a <osSemaphoreNew+0x12a>
 80100b4:	68ba      	ldr	r2, [r7, #8]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d86e      	bhi.n	801019a <osSemaphoreNew+0x12a>
    mem = -1;
 80100bc:	f04f 33ff 	mov.w	r3, #4294967295
 80100c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d015      	beq.n	80100f4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d006      	beq.n	80100de <osSemaphoreNew+0x6e>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	2b4f      	cmp	r3, #79	; 0x4f
 80100d6:	d902      	bls.n	80100de <osSemaphoreNew+0x6e>
        mem = 1;
 80100d8:	2301      	movs	r3, #1
 80100da:	623b      	str	r3, [r7, #32]
 80100dc:	e00c      	b.n	80100f8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d108      	bne.n	80100f8 <osSemaphoreNew+0x88>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d104      	bne.n	80100f8 <osSemaphoreNew+0x88>
          mem = 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	623b      	str	r3, [r7, #32]
 80100f2:	e001      	b.n	80100f8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80100f4:	2300      	movs	r3, #0
 80100f6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80100f8:	6a3b      	ldr	r3, [r7, #32]
 80100fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fe:	d04c      	beq.n	801019a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2b01      	cmp	r3, #1
 8010104:	d128      	bne.n	8010158 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8010106:	6a3b      	ldr	r3, [r7, #32]
 8010108:	2b01      	cmp	r3, #1
 801010a:	d10a      	bne.n	8010122 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	2203      	movs	r2, #3
 8010112:	9200      	str	r2, [sp, #0]
 8010114:	2200      	movs	r2, #0
 8010116:	2100      	movs	r1, #0
 8010118:	2001      	movs	r0, #1
 801011a:	f000 ffe5 	bl	80110e8 <xQueueGenericCreateStatic>
 801011e:	6278      	str	r0, [r7, #36]	; 0x24
 8010120:	e005      	b.n	801012e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010122:	2203      	movs	r2, #3
 8010124:	2100      	movs	r1, #0
 8010126:	2001      	movs	r0, #1
 8010128:	f001 f860 	bl	80111ec <xQueueGenericCreate>
 801012c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010130:	2b00      	cmp	r3, #0
 8010132:	d022      	beq.n	801017a <osSemaphoreNew+0x10a>
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d01f      	beq.n	801017a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801013a:	2300      	movs	r3, #0
 801013c:	2200      	movs	r2, #0
 801013e:	2100      	movs	r1, #0
 8010140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010142:	f001 f9e5 	bl	8011510 <xQueueGenericSend>
 8010146:	4603      	mov	r3, r0
 8010148:	2b01      	cmp	r3, #1
 801014a:	d016      	beq.n	801017a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 801014c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801014e:	f001 fe9b 	bl	8011e88 <vQueueDelete>
            hSemaphore = NULL;
 8010152:	2300      	movs	r3, #0
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
 8010156:	e010      	b.n	801017a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8010158:	6a3b      	ldr	r3, [r7, #32]
 801015a:	2b01      	cmp	r3, #1
 801015c:	d108      	bne.n	8010170 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	461a      	mov	r2, r3
 8010164:	68b9      	ldr	r1, [r7, #8]
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f001 f960 	bl	801142c <xQueueCreateCountingSemaphoreStatic>
 801016c:	6278      	str	r0, [r7, #36]	; 0x24
 801016e:	e004      	b.n	801017a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010170:	68b9      	ldr	r1, [r7, #8]
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f001 f995 	bl	80114a2 <xQueueCreateCountingSemaphore>
 8010178:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00c      	beq.n	801019a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d003      	beq.n	801018e <osSemaphoreNew+0x11e>
          name = attr->name;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	61fb      	str	r3, [r7, #28]
 801018c:	e001      	b.n	8010192 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010192:	69f9      	ldr	r1, [r7, #28]
 8010194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010196:	f001 ffc5 	bl	8012124 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801019c:	4618      	mov	r0, r3
 801019e:	3728      	adds	r7, #40	; 0x28
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	2000024c 	.word	0x2000024c

080101a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b088      	sub	sp, #32
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80101b6:	2300      	movs	r3, #0
 80101b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d103      	bne.n	80101c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80101c0:	f06f 0303 	mvn.w	r3, #3
 80101c4:	61fb      	str	r3, [r7, #28]
 80101c6:	e04b      	b.n	8010260 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101c8:	f3ef 8305 	mrs	r3, IPSR
 80101cc:	617b      	str	r3, [r7, #20]
  return(result);
 80101ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d10f      	bne.n	80101f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101d4:	f3ef 8310 	mrs	r3, PRIMASK
 80101d8:	613b      	str	r3, [r7, #16]
  return(result);
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d105      	bne.n	80101ec <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101e0:	f3ef 8311 	mrs	r3, BASEPRI
 80101e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d026      	beq.n	801023a <osSemaphoreAcquire+0x92>
 80101ec:	4b1f      	ldr	r3, [pc, #124]	; (801026c <osSemaphoreAcquire+0xc4>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2b02      	cmp	r3, #2
 80101f2:	d122      	bne.n	801023a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d003      	beq.n	8010202 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80101fa:	f06f 0303 	mvn.w	r3, #3
 80101fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010200:	e02d      	b.n	801025e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010202:	2300      	movs	r3, #0
 8010204:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010206:	f107 0308 	add.w	r3, r7, #8
 801020a:	461a      	mov	r2, r3
 801020c:	2100      	movs	r1, #0
 801020e:	69b8      	ldr	r0, [r7, #24]
 8010210:	f001 fdb4 	bl	8011d7c <xQueueReceiveFromISR>
 8010214:	4603      	mov	r3, r0
 8010216:	2b01      	cmp	r3, #1
 8010218:	d003      	beq.n	8010222 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801021a:	f06f 0302 	mvn.w	r3, #2
 801021e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010220:	e01d      	b.n	801025e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d01a      	beq.n	801025e <osSemaphoreAcquire+0xb6>
 8010228:	4b11      	ldr	r3, [pc, #68]	; (8010270 <osSemaphoreAcquire+0xc8>)
 801022a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801022e:	601a      	str	r2, [r3, #0]
 8010230:	f3bf 8f4f 	dsb	sy
 8010234:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010238:	e011      	b.n	801025e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801023a:	6839      	ldr	r1, [r7, #0]
 801023c:	69b8      	ldr	r0, [r7, #24]
 801023e:	f001 fc89 	bl	8011b54 <xQueueSemaphoreTake>
 8010242:	4603      	mov	r3, r0
 8010244:	2b01      	cmp	r3, #1
 8010246:	d00b      	beq.n	8010260 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801024e:	f06f 0301 	mvn.w	r3, #1
 8010252:	61fb      	str	r3, [r7, #28]
 8010254:	e004      	b.n	8010260 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010256:	f06f 0302 	mvn.w	r3, #2
 801025a:	61fb      	str	r3, [r7, #28]
 801025c:	e000      	b.n	8010260 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801025e:	bf00      	nop
      }
    }
  }

  return (stat);
 8010260:	69fb      	ldr	r3, [r7, #28]
}
 8010262:	4618      	mov	r0, r3
 8010264:	3720      	adds	r7, #32
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	2000024c 	.word	0x2000024c
 8010270:	e000ed04 	.word	0xe000ed04

08010274 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010274:	b580      	push	{r7, lr}
 8010276:	b088      	sub	sp, #32
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010280:	2300      	movs	r3, #0
 8010282:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d103      	bne.n	8010292 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801028a:	f06f 0303 	mvn.w	r3, #3
 801028e:	61fb      	str	r3, [r7, #28]
 8010290:	e03e      	b.n	8010310 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010292:	f3ef 8305 	mrs	r3, IPSR
 8010296:	617b      	str	r3, [r7, #20]
  return(result);
 8010298:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801029a:	2b00      	cmp	r3, #0
 801029c:	d10f      	bne.n	80102be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801029e:	f3ef 8310 	mrs	r3, PRIMASK
 80102a2:	613b      	str	r3, [r7, #16]
  return(result);
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d105      	bne.n	80102b6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102aa:	f3ef 8311 	mrs	r3, BASEPRI
 80102ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d01e      	beq.n	80102f4 <osSemaphoreRelease+0x80>
 80102b6:	4b19      	ldr	r3, [pc, #100]	; (801031c <osSemaphoreRelease+0xa8>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	d11a      	bne.n	80102f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80102be:	2300      	movs	r3, #0
 80102c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80102c2:	f107 0308 	add.w	r3, r7, #8
 80102c6:	4619      	mov	r1, r3
 80102c8:	69b8      	ldr	r0, [r7, #24]
 80102ca:	f001 fac7 	bl	801185c <xQueueGiveFromISR>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d003      	beq.n	80102dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80102d4:	f06f 0302 	mvn.w	r3, #2
 80102d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80102da:	e018      	b.n	801030e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d015      	beq.n	801030e <osSemaphoreRelease+0x9a>
 80102e2:	4b0f      	ldr	r3, [pc, #60]	; (8010320 <osSemaphoreRelease+0xac>)
 80102e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102e8:	601a      	str	r2, [r3, #0]
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80102f2:	e00c      	b.n	801030e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80102f4:	2300      	movs	r3, #0
 80102f6:	2200      	movs	r2, #0
 80102f8:	2100      	movs	r1, #0
 80102fa:	69b8      	ldr	r0, [r7, #24]
 80102fc:	f001 f908 	bl	8011510 <xQueueGenericSend>
 8010300:	4603      	mov	r3, r0
 8010302:	2b01      	cmp	r3, #1
 8010304:	d004      	beq.n	8010310 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010306:	f06f 0302 	mvn.w	r3, #2
 801030a:	61fb      	str	r3, [r7, #28]
 801030c:	e000      	b.n	8010310 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801030e:	bf00      	nop
    }
  }

  return (stat);
 8010310:	69fb      	ldr	r3, [r7, #28]
}
 8010312:	4618      	mov	r0, r3
 8010314:	3720      	adds	r7, #32
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	2000024c 	.word	0x2000024c
 8010320:	e000ed04 	.word	0xe000ed04

08010324 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010324:	b580      	push	{r7, lr}
 8010326:	b08c      	sub	sp, #48	; 0x30
 8010328:	af02      	add	r7, sp, #8
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010330:	2300      	movs	r3, #0
 8010332:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010334:	f3ef 8305 	mrs	r3, IPSR
 8010338:	61bb      	str	r3, [r7, #24]
  return(result);
 801033a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801033c:	2b00      	cmp	r3, #0
 801033e:	d16f      	bne.n	8010420 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010340:	f3ef 8310 	mrs	r3, PRIMASK
 8010344:	617b      	str	r3, [r7, #20]
  return(result);
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d105      	bne.n	8010358 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801034c:	f3ef 8311 	mrs	r3, BASEPRI
 8010350:	613b      	str	r3, [r7, #16]
  return(result);
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d003      	beq.n	8010360 <osMessageQueueNew+0x3c>
 8010358:	4b34      	ldr	r3, [pc, #208]	; (801042c <osMessageQueueNew+0x108>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b02      	cmp	r3, #2
 801035e:	d05f      	beq.n	8010420 <osMessageQueueNew+0xfc>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d05c      	beq.n	8010420 <osMessageQueueNew+0xfc>
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d059      	beq.n	8010420 <osMessageQueueNew+0xfc>
    mem = -1;
 801036c:	f04f 33ff 	mov.w	r3, #4294967295
 8010370:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d029      	beq.n	80103cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d012      	beq.n	80103a6 <osMessageQueueNew+0x82>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	2b4f      	cmp	r3, #79	; 0x4f
 8010386:	d90e      	bls.n	80103a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00a      	beq.n	80103a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	695a      	ldr	r2, [r3, #20]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	68b9      	ldr	r1, [r7, #8]
 8010398:	fb01 f303 	mul.w	r3, r1, r3
 801039c:	429a      	cmp	r2, r3
 801039e:	d302      	bcc.n	80103a6 <osMessageQueueNew+0x82>
        mem = 1;
 80103a0:	2301      	movs	r3, #1
 80103a2:	623b      	str	r3, [r7, #32]
 80103a4:	e014      	b.n	80103d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d110      	bne.n	80103d0 <osMessageQueueNew+0xac>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d10c      	bne.n	80103d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d108      	bne.n	80103d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	695b      	ldr	r3, [r3, #20]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d104      	bne.n	80103d0 <osMessageQueueNew+0xac>
          mem = 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	623b      	str	r3, [r7, #32]
 80103ca:	e001      	b.n	80103d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80103cc:	2300      	movs	r3, #0
 80103ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80103d0:	6a3b      	ldr	r3, [r7, #32]
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d10b      	bne.n	80103ee <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	691a      	ldr	r2, [r3, #16]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	2100      	movs	r1, #0
 80103e0:	9100      	str	r1, [sp, #0]
 80103e2:	68b9      	ldr	r1, [r7, #8]
 80103e4:	68f8      	ldr	r0, [r7, #12]
 80103e6:	f000 fe7f 	bl	80110e8 <xQueueGenericCreateStatic>
 80103ea:	6278      	str	r0, [r7, #36]	; 0x24
 80103ec:	e008      	b.n	8010400 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80103ee:	6a3b      	ldr	r3, [r7, #32]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d105      	bne.n	8010400 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80103f4:	2200      	movs	r2, #0
 80103f6:	68b9      	ldr	r1, [r7, #8]
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f000 fef7 	bl	80111ec <xQueueGenericCreate>
 80103fe:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00c      	beq.n	8010420 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <osMessageQueueNew+0xf0>
        name = attr->name;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	61fb      	str	r3, [r7, #28]
 8010412:	e001      	b.n	8010418 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8010414:	2300      	movs	r3, #0
 8010416:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010418:	69f9      	ldr	r1, [r7, #28]
 801041a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801041c:	f001 fe82 	bl	8012124 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010422:	4618      	mov	r0, r3
 8010424:	3728      	adds	r7, #40	; 0x28
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	2000024c 	.word	0x2000024c

08010430 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010430:	b580      	push	{r7, lr}
 8010432:	b08a      	sub	sp, #40	; 0x28
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	603b      	str	r3, [r7, #0]
 801043c:	4613      	mov	r3, r2
 801043e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010444:	2300      	movs	r3, #0
 8010446:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010448:	f3ef 8305 	mrs	r3, IPSR
 801044c:	61fb      	str	r3, [r7, #28]
  return(result);
 801044e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010450:	2b00      	cmp	r3, #0
 8010452:	d10f      	bne.n	8010474 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010454:	f3ef 8310 	mrs	r3, PRIMASK
 8010458:	61bb      	str	r3, [r7, #24]
  return(result);
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d105      	bne.n	801046c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010460:	f3ef 8311 	mrs	r3, BASEPRI
 8010464:	617b      	str	r3, [r7, #20]
  return(result);
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d02c      	beq.n	80104c6 <osMessageQueuePut+0x96>
 801046c:	4b28      	ldr	r3, [pc, #160]	; (8010510 <osMessageQueuePut+0xe0>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b02      	cmp	r3, #2
 8010472:	d128      	bne.n	80104c6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d005      	beq.n	8010486 <osMessageQueuePut+0x56>
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <osMessageQueuePut+0x56>
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d003      	beq.n	801048e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010486:	f06f 0303 	mvn.w	r3, #3
 801048a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801048c:	e039      	b.n	8010502 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801048e:	2300      	movs	r3, #0
 8010490:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010492:	f107 0210 	add.w	r2, r7, #16
 8010496:	2300      	movs	r3, #0
 8010498:	68b9      	ldr	r1, [r7, #8]
 801049a:	6a38      	ldr	r0, [r7, #32]
 801049c:	f001 f93e 	bl	801171c <xQueueGenericSendFromISR>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	d003      	beq.n	80104ae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80104a6:	f06f 0302 	mvn.w	r3, #2
 80104aa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80104ac:	e029      	b.n	8010502 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d026      	beq.n	8010502 <osMessageQueuePut+0xd2>
 80104b4:	4b17      	ldr	r3, [pc, #92]	; (8010514 <osMessageQueuePut+0xe4>)
 80104b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ba:	601a      	str	r2, [r3, #0]
 80104bc:	f3bf 8f4f 	dsb	sy
 80104c0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80104c4:	e01d      	b.n	8010502 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <osMessageQueuePut+0xa2>
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d103      	bne.n	80104da <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80104d2:	f06f 0303 	mvn.w	r3, #3
 80104d6:	627b      	str	r3, [r7, #36]	; 0x24
 80104d8:	e014      	b.n	8010504 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80104da:	2300      	movs	r3, #0
 80104dc:	683a      	ldr	r2, [r7, #0]
 80104de:	68b9      	ldr	r1, [r7, #8]
 80104e0:	6a38      	ldr	r0, [r7, #32]
 80104e2:	f001 f815 	bl	8011510 <xQueueGenericSend>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d00b      	beq.n	8010504 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d003      	beq.n	80104fa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80104f2:	f06f 0301 	mvn.w	r3, #1
 80104f6:	627b      	str	r3, [r7, #36]	; 0x24
 80104f8:	e004      	b.n	8010504 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80104fa:	f06f 0302 	mvn.w	r3, #2
 80104fe:	627b      	str	r3, [r7, #36]	; 0x24
 8010500:	e000      	b.n	8010504 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010502:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010506:	4618      	mov	r0, r3
 8010508:	3728      	adds	r7, #40	; 0x28
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	2000024c 	.word	0x2000024c
 8010514:	e000ed04 	.word	0xe000ed04

08010518 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010518:	b580      	push	{r7, lr}
 801051a:	b08a      	sub	sp, #40	; 0x28
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
 8010524:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801052a:	2300      	movs	r3, #0
 801052c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801052e:	f3ef 8305 	mrs	r3, IPSR
 8010532:	61fb      	str	r3, [r7, #28]
  return(result);
 8010534:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010536:	2b00      	cmp	r3, #0
 8010538:	d10f      	bne.n	801055a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801053a:	f3ef 8310 	mrs	r3, PRIMASK
 801053e:	61bb      	str	r3, [r7, #24]
  return(result);
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d105      	bne.n	8010552 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010546:	f3ef 8311 	mrs	r3, BASEPRI
 801054a:	617b      	str	r3, [r7, #20]
  return(result);
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d02c      	beq.n	80105ac <osMessageQueueGet+0x94>
 8010552:	4b28      	ldr	r3, [pc, #160]	; (80105f4 <osMessageQueueGet+0xdc>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b02      	cmp	r3, #2
 8010558:	d128      	bne.n	80105ac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801055a:	6a3b      	ldr	r3, [r7, #32]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d005      	beq.n	801056c <osMessageQueueGet+0x54>
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d002      	beq.n	801056c <osMessageQueueGet+0x54>
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d003      	beq.n	8010574 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801056c:	f06f 0303 	mvn.w	r3, #3
 8010570:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010572:	e038      	b.n	80105e6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010574:	2300      	movs	r3, #0
 8010576:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010578:	f107 0310 	add.w	r3, r7, #16
 801057c:	461a      	mov	r2, r3
 801057e:	68b9      	ldr	r1, [r7, #8]
 8010580:	6a38      	ldr	r0, [r7, #32]
 8010582:	f001 fbfb 	bl	8011d7c <xQueueReceiveFromISR>
 8010586:	4603      	mov	r3, r0
 8010588:	2b01      	cmp	r3, #1
 801058a:	d003      	beq.n	8010594 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801058c:	f06f 0302 	mvn.w	r3, #2
 8010590:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010592:	e028      	b.n	80105e6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d025      	beq.n	80105e6 <osMessageQueueGet+0xce>
 801059a:	4b17      	ldr	r3, [pc, #92]	; (80105f8 <osMessageQueueGet+0xe0>)
 801059c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	f3bf 8f4f 	dsb	sy
 80105a6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80105aa:	e01c      	b.n	80105e6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d002      	beq.n	80105b8 <osMessageQueueGet+0xa0>
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d103      	bne.n	80105c0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80105b8:	f06f 0303 	mvn.w	r3, #3
 80105bc:	627b      	str	r3, [r7, #36]	; 0x24
 80105be:	e013      	b.n	80105e8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80105c0:	683a      	ldr	r2, [r7, #0]
 80105c2:	68b9      	ldr	r1, [r7, #8]
 80105c4:	6a38      	ldr	r0, [r7, #32]
 80105c6:	f001 f9df 	bl	8011988 <xQueueReceive>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d00b      	beq.n	80105e8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d003      	beq.n	80105de <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80105d6:	f06f 0301 	mvn.w	r3, #1
 80105da:	627b      	str	r3, [r7, #36]	; 0x24
 80105dc:	e004      	b.n	80105e8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80105de:	f06f 0302 	mvn.w	r3, #2
 80105e2:	627b      	str	r3, [r7, #36]	; 0x24
 80105e4:	e000      	b.n	80105e8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80105e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3728      	adds	r7, #40	; 0x28
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	2000024c 	.word	0x2000024c
 80105f8:	e000ed04 	.word	0xe000ed04

080105fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	4a07      	ldr	r2, [pc, #28]	; (8010628 <vApplicationGetIdleTaskMemory+0x2c>)
 801060c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	4a06      	ldr	r2, [pc, #24]	; (801062c <vApplicationGetIdleTaskMemory+0x30>)
 8010612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2280      	movs	r2, #128	; 0x80
 8010618:	601a      	str	r2, [r3, #0]
}
 801061a:	bf00      	nop
 801061c:	3714      	adds	r7, #20
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	20000250 	.word	0x20000250
 801062c:	200002b0 	.word	0x200002b0

08010630 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010630:	b480      	push	{r7}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	4a07      	ldr	r2, [pc, #28]	; (801065c <vApplicationGetTimerTaskMemory+0x2c>)
 8010640:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	4a06      	ldr	r2, [pc, #24]	; (8010660 <vApplicationGetTimerTaskMemory+0x30>)
 8010646:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801064e:	601a      	str	r2, [r3, #0]
}
 8010650:	bf00      	nop
 8010652:	3714      	adds	r7, #20
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	200004b0 	.word	0x200004b0
 8010660:	20000510 	.word	0x20000510

08010664 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b08a      	sub	sp, #40	; 0x28
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801066c:	2300      	movs	r3, #0
 801066e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010670:	f002 f82c 	bl	80126cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010674:	4b5e      	ldr	r3, [pc, #376]	; (80107f0 <pvPortMalloc+0x18c>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d101      	bne.n	8010680 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801067c:	f000 f920 	bl	80108c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010680:	4b5c      	ldr	r3, [pc, #368]	; (80107f4 <pvPortMalloc+0x190>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	4013      	ands	r3, r2
 8010688:	2b00      	cmp	r3, #0
 801068a:	f040 8092 	bne.w	80107b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d01f      	beq.n	80106d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010694:	2208      	movs	r2, #8
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4413      	add	r3, r2
 801069a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f003 0307 	and.w	r3, r3, #7
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d016      	beq.n	80106d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f023 0307 	bic.w	r3, r3, #7
 80106ac:	3308      	adds	r3, #8
 80106ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f003 0307 	and.w	r3, r3, #7
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d00c      	beq.n	80106d4 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80106ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106be:	b672      	cpsid	i
 80106c0:	f383 8811 	msr	BASEPRI, r3
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	b662      	cpsie	i
 80106ce:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80106d0:	bf00      	nop
 80106d2:	e7fe      	b.n	80106d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d06b      	beq.n	80107b2 <pvPortMalloc+0x14e>
 80106da:	4b47      	ldr	r3, [pc, #284]	; (80107f8 <pvPortMalloc+0x194>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d866      	bhi.n	80107b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80106e4:	4b45      	ldr	r3, [pc, #276]	; (80107fc <pvPortMalloc+0x198>)
 80106e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80106e8:	4b44      	ldr	r3, [pc, #272]	; (80107fc <pvPortMalloc+0x198>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106ee:	e004      	b.n	80106fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80106f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80106f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	429a      	cmp	r2, r3
 8010702:	d903      	bls.n	801070c <pvPortMalloc+0xa8>
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d1f1      	bne.n	80106f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801070c:	4b38      	ldr	r3, [pc, #224]	; (80107f0 <pvPortMalloc+0x18c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010712:	429a      	cmp	r2, r3
 8010714:	d04d      	beq.n	80107b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2208      	movs	r2, #8
 801071c:	4413      	add	r3, r2
 801071e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	6a3b      	ldr	r3, [r7, #32]
 8010726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072a:	685a      	ldr	r2, [r3, #4]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	1ad2      	subs	r2, r2, r3
 8010730:	2308      	movs	r3, #8
 8010732:	005b      	lsls	r3, r3, #1
 8010734:	429a      	cmp	r2, r3
 8010736:	d921      	bls.n	801077c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4413      	add	r3, r2
 801073e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	f003 0307 	and.w	r3, r3, #7
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00c      	beq.n	8010764 <pvPortMalloc+0x100>
	__asm volatile
 801074a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074e:	b672      	cpsid	i
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	b662      	cpsie	i
 801075e:	613b      	str	r3, [r7, #16]
}
 8010760:	bf00      	nop
 8010762:	e7fe      	b.n	8010762 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010766:	685a      	ldr	r2, [r3, #4]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	1ad2      	subs	r2, r2, r3
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010776:	69b8      	ldr	r0, [r7, #24]
 8010778:	f000 f904 	bl	8010984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801077c:	4b1e      	ldr	r3, [pc, #120]	; (80107f8 <pvPortMalloc+0x194>)
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	4a1c      	ldr	r2, [pc, #112]	; (80107f8 <pvPortMalloc+0x194>)
 8010788:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801078a:	4b1b      	ldr	r3, [pc, #108]	; (80107f8 <pvPortMalloc+0x194>)
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	4b1c      	ldr	r3, [pc, #112]	; (8010800 <pvPortMalloc+0x19c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	429a      	cmp	r2, r3
 8010794:	d203      	bcs.n	801079e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010796:	4b18      	ldr	r3, [pc, #96]	; (80107f8 <pvPortMalloc+0x194>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4a19      	ldr	r2, [pc, #100]	; (8010800 <pvPortMalloc+0x19c>)
 801079c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	4b14      	ldr	r3, [pc, #80]	; (80107f4 <pvPortMalloc+0x190>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	431a      	orrs	r2, r3
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80107ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ae:	2200      	movs	r2, #0
 80107b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80107b2:	f001 ff99 	bl	80126e8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80107b6:	69fb      	ldr	r3, [r7, #28]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d101      	bne.n	80107c0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80107bc:	f7f0 fa28 	bl	8000c10 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	f003 0307 	and.w	r3, r3, #7
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00c      	beq.n	80107e4 <pvPortMalloc+0x180>
	__asm volatile
 80107ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ce:	b672      	cpsid	i
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	b662      	cpsie	i
 80107de:	60fb      	str	r3, [r7, #12]
}
 80107e0:	bf00      	nop
 80107e2:	e7fe      	b.n	80107e2 <pvPortMalloc+0x17e>
	return pvReturn;
 80107e4:	69fb      	ldr	r3, [r7, #28]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3728      	adds	r7, #40	; 0x28
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	20008918 	.word	0x20008918
 80107f4:	20008924 	.word	0x20008924
 80107f8:	2000891c 	.word	0x2000891c
 80107fc:	20008910 	.word	0x20008910
 8010800:	20008920 	.word	0x20008920

08010804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b086      	sub	sp, #24
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d04c      	beq.n	80108b0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010816:	2308      	movs	r3, #8
 8010818:	425b      	negs	r3, r3
 801081a:	697a      	ldr	r2, [r7, #20]
 801081c:	4413      	add	r3, r2
 801081e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	685a      	ldr	r2, [r3, #4]
 8010828:	4b23      	ldr	r3, [pc, #140]	; (80108b8 <vPortFree+0xb4>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4013      	ands	r3, r2
 801082e:	2b00      	cmp	r3, #0
 8010830:	d10c      	bne.n	801084c <vPortFree+0x48>
	__asm volatile
 8010832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010836:	b672      	cpsid	i
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	b662      	cpsie	i
 8010846:	60fb      	str	r3, [r7, #12]
}
 8010848:	bf00      	nop
 801084a:	e7fe      	b.n	801084a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00c      	beq.n	801086e <vPortFree+0x6a>
	__asm volatile
 8010854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010858:	b672      	cpsid	i
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	b662      	cpsie	i
 8010868:	60bb      	str	r3, [r7, #8]
}
 801086a:	bf00      	nop
 801086c:	e7fe      	b.n	801086c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	685a      	ldr	r2, [r3, #4]
 8010872:	4b11      	ldr	r3, [pc, #68]	; (80108b8 <vPortFree+0xb4>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4013      	ands	r3, r2
 8010878:	2b00      	cmp	r3, #0
 801087a:	d019      	beq.n	80108b0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d115      	bne.n	80108b0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	685a      	ldr	r2, [r3, #4]
 8010888:	4b0b      	ldr	r3, [pc, #44]	; (80108b8 <vPortFree+0xb4>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	43db      	mvns	r3, r3
 801088e:	401a      	ands	r2, r3
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010894:	f001 ff1a 	bl	80126cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	4b07      	ldr	r3, [pc, #28]	; (80108bc <vPortFree+0xb8>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4413      	add	r3, r2
 80108a2:	4a06      	ldr	r2, [pc, #24]	; (80108bc <vPortFree+0xb8>)
 80108a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108a6:	6938      	ldr	r0, [r7, #16]
 80108a8:	f000 f86c 	bl	8010984 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80108ac:	f001 ff1c 	bl	80126e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80108b0:	bf00      	nop
 80108b2:	3718      	adds	r7, #24
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	20008924 	.word	0x20008924
 80108bc:	2000891c 	.word	0x2000891c

080108c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80108c0:	b480      	push	{r7}
 80108c2:	b085      	sub	sp, #20
 80108c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80108c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80108cc:	4b27      	ldr	r3, [pc, #156]	; (801096c <prvHeapInit+0xac>)
 80108ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f003 0307 	and.w	r3, r3, #7
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00c      	beq.n	80108f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	3307      	adds	r3, #7
 80108de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f023 0307 	bic.w	r3, r3, #7
 80108e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80108e8:	68ba      	ldr	r2, [r7, #8]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	4a1f      	ldr	r2, [pc, #124]	; (801096c <prvHeapInit+0xac>)
 80108f0:	4413      	add	r3, r2
 80108f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80108f8:	4a1d      	ldr	r2, [pc, #116]	; (8010970 <prvHeapInit+0xb0>)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80108fe:	4b1c      	ldr	r3, [pc, #112]	; (8010970 <prvHeapInit+0xb0>)
 8010900:	2200      	movs	r2, #0
 8010902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	4413      	add	r3, r2
 801090a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801090c:	2208      	movs	r2, #8
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	1a9b      	subs	r3, r3, r2
 8010912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f023 0307 	bic.w	r3, r3, #7
 801091a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	4a15      	ldr	r2, [pc, #84]	; (8010974 <prvHeapInit+0xb4>)
 8010920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010922:	4b14      	ldr	r3, [pc, #80]	; (8010974 <prvHeapInit+0xb4>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2200      	movs	r2, #0
 8010928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801092a:	4b12      	ldr	r3, [pc, #72]	; (8010974 <prvHeapInit+0xb4>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2200      	movs	r2, #0
 8010930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	1ad2      	subs	r2, r2, r3
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010940:	4b0c      	ldr	r3, [pc, #48]	; (8010974 <prvHeapInit+0xb4>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	4a0a      	ldr	r2, [pc, #40]	; (8010978 <prvHeapInit+0xb8>)
 801094e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	4a09      	ldr	r2, [pc, #36]	; (801097c <prvHeapInit+0xbc>)
 8010956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010958:	4b09      	ldr	r3, [pc, #36]	; (8010980 <prvHeapInit+0xc0>)
 801095a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801095e:	601a      	str	r2, [r3, #0]
}
 8010960:	bf00      	nop
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr
 801096c:	20000910 	.word	0x20000910
 8010970:	20008910 	.word	0x20008910
 8010974:	20008918 	.word	0x20008918
 8010978:	20008920 	.word	0x20008920
 801097c:	2000891c 	.word	0x2000891c
 8010980:	20008924 	.word	0x20008924

08010984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801098c:	4b28      	ldr	r3, [pc, #160]	; (8010a30 <prvInsertBlockIntoFreeList+0xac>)
 801098e:	60fb      	str	r3, [r7, #12]
 8010990:	e002      	b.n	8010998 <prvInsertBlockIntoFreeList+0x14>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	60fb      	str	r3, [r7, #12]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d8f7      	bhi.n	8010992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	68ba      	ldr	r2, [r7, #8]
 80109ac:	4413      	add	r3, r2
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d108      	bne.n	80109c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	685a      	ldr	r2, [r3, #4]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	441a      	add	r2, r3
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	68ba      	ldr	r2, [r7, #8]
 80109d0:	441a      	add	r2, r3
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d118      	bne.n	8010a0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	4b15      	ldr	r3, [pc, #84]	; (8010a34 <prvInsertBlockIntoFreeList+0xb0>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d00d      	beq.n	8010a02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685a      	ldr	r2, [r3, #4]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	441a      	add	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	601a      	str	r2, [r3, #0]
 8010a00:	e008      	b.n	8010a14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a02:	4b0c      	ldr	r3, [pc, #48]	; (8010a34 <prvInsertBlockIntoFreeList+0xb0>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	e003      	b.n	8010a14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a14:	68fa      	ldr	r2, [r7, #12]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d002      	beq.n	8010a22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a22:	bf00      	nop
 8010a24:	3714      	adds	r7, #20
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	20008910 	.word	0x20008910
 8010a34:	20008918 	.word	0x20008918

08010a38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f103 0208 	add.w	r2, r3, #8
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f103 0208 	add.w	r2, r3, #8
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f103 0208 	add.w	r2, r3, #8
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a6c:	bf00      	nop
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a86:	bf00      	nop
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr

08010a92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a92:	b480      	push	{r7}
 8010a94:	b085      	sub	sp, #20
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	689a      	ldr	r2, [r3, #8]
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	683a      	ldr	r2, [r7, #0]
 8010ab6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	683a      	ldr	r2, [r7, #0]
 8010abc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	1c5a      	adds	r2, r3, #1
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	601a      	str	r2, [r3, #0]
}
 8010ace:	bf00      	nop
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ada:	b480      	push	{r7}
 8010adc:	b085      	sub	sp, #20
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af0:	d103      	bne.n	8010afa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	691b      	ldr	r3, [r3, #16]
 8010af6:	60fb      	str	r3, [r7, #12]
 8010af8:	e00c      	b.n	8010b14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	3308      	adds	r3, #8
 8010afe:	60fb      	str	r3, [r7, #12]
 8010b00:	e002      	b.n	8010b08 <vListInsert+0x2e>
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	60fb      	str	r3, [r7, #12]
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	68ba      	ldr	r2, [r7, #8]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d2f6      	bcs.n	8010b02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	685a      	ldr	r2, [r3, #4]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	683a      	ldr	r2, [r7, #0]
 8010b22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	1c5a      	adds	r2, r3, #1
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	601a      	str	r2, [r3, #0]
}
 8010b40:	bf00      	nop
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	691b      	ldr	r3, [r3, #16]
 8010b58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	6892      	ldr	r2, [r2, #8]
 8010b62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	689b      	ldr	r3, [r3, #8]
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	6852      	ldr	r2, [r2, #4]
 8010b6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d103      	bne.n	8010b80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	689a      	ldr	r2, [r3, #8]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	1e5a      	subs	r2, r3, #1
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b085      	sub	sp, #20
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	3b04      	subs	r3, #4
 8010bb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	3b04      	subs	r3, #4
 8010bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	f023 0201 	bic.w	r2, r3, #1
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	3b04      	subs	r3, #4
 8010bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010bd0:	4a0c      	ldr	r2, [pc, #48]	; (8010c04 <pxPortInitialiseStack+0x64>)
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	3b14      	subs	r3, #20
 8010bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	3b04      	subs	r3, #4
 8010be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f06f 0202 	mvn.w	r2, #2
 8010bee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	3b20      	subs	r3, #32
 8010bf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3714      	adds	r7, #20
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr
 8010c04:	08010c09 	.word	0x08010c09

08010c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b085      	sub	sp, #20
 8010c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c12:	4b14      	ldr	r3, [pc, #80]	; (8010c64 <prvTaskExitError+0x5c>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1a:	d00c      	beq.n	8010c36 <prvTaskExitError+0x2e>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c20:	b672      	cpsid	i
 8010c22:	f383 8811 	msr	BASEPRI, r3
 8010c26:	f3bf 8f6f 	isb	sy
 8010c2a:	f3bf 8f4f 	dsb	sy
 8010c2e:	b662      	cpsie	i
 8010c30:	60fb      	str	r3, [r7, #12]
}
 8010c32:	bf00      	nop
 8010c34:	e7fe      	b.n	8010c34 <prvTaskExitError+0x2c>
	__asm volatile
 8010c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3a:	b672      	cpsid	i
 8010c3c:	f383 8811 	msr	BASEPRI, r3
 8010c40:	f3bf 8f6f 	isb	sy
 8010c44:	f3bf 8f4f 	dsb	sy
 8010c48:	b662      	cpsie	i
 8010c4a:	60bb      	str	r3, [r7, #8]
}
 8010c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c4e:	bf00      	nop
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0fc      	beq.n	8010c50 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c56:	bf00      	nop
 8010c58:	bf00      	nop
 8010c5a:	3714      	adds	r7, #20
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr
 8010c64:	20000084 	.word	0x20000084
	...

08010c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c70:	4b07      	ldr	r3, [pc, #28]	; (8010c90 <pxCurrentTCBConst2>)
 8010c72:	6819      	ldr	r1, [r3, #0]
 8010c74:	6808      	ldr	r0, [r1, #0]
 8010c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7a:	f380 8809 	msr	PSP, r0
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f04f 0000 	mov.w	r0, #0
 8010c86:	f380 8811 	msr	BASEPRI, r0
 8010c8a:	4770      	bx	lr
 8010c8c:	f3af 8000 	nop.w

08010c90 <pxCurrentTCBConst2>:
 8010c90:	20008930 	.word	0x20008930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c94:	bf00      	nop
 8010c96:	bf00      	nop

08010c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c98:	4808      	ldr	r0, [pc, #32]	; (8010cbc <prvPortStartFirstTask+0x24>)
 8010c9a:	6800      	ldr	r0, [r0, #0]
 8010c9c:	6800      	ldr	r0, [r0, #0]
 8010c9e:	f380 8808 	msr	MSP, r0
 8010ca2:	f04f 0000 	mov.w	r0, #0
 8010ca6:	f380 8814 	msr	CONTROL, r0
 8010caa:	b662      	cpsie	i
 8010cac:	b661      	cpsie	f
 8010cae:	f3bf 8f4f 	dsb	sy
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	df00      	svc	0
 8010cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010cba:	bf00      	nop
 8010cbc:	e000ed08 	.word	0xe000ed08

08010cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cc6:	4b37      	ldr	r3, [pc, #220]	; (8010da4 <xPortStartScheduler+0xe4>)
 8010cc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	22ff      	movs	r2, #255	; 0xff
 8010cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ce0:	78fb      	ldrb	r3, [r7, #3]
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	4b2f      	ldr	r3, [pc, #188]	; (8010da8 <xPortStartScheduler+0xe8>)
 8010cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010cee:	4b2f      	ldr	r3, [pc, #188]	; (8010dac <xPortStartScheduler+0xec>)
 8010cf0:	2207      	movs	r2, #7
 8010cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cf4:	e009      	b.n	8010d0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010cf6:	4b2d      	ldr	r3, [pc, #180]	; (8010dac <xPortStartScheduler+0xec>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	4a2b      	ldr	r2, [pc, #172]	; (8010dac <xPortStartScheduler+0xec>)
 8010cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d00:	78fb      	ldrb	r3, [r7, #3]
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	005b      	lsls	r3, r3, #1
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d0a:	78fb      	ldrb	r3, [r7, #3]
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d12:	2b80      	cmp	r3, #128	; 0x80
 8010d14:	d0ef      	beq.n	8010cf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d16:	4b25      	ldr	r3, [pc, #148]	; (8010dac <xPortStartScheduler+0xec>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f1c3 0307 	rsb	r3, r3, #7
 8010d1e:	2b04      	cmp	r3, #4
 8010d20:	d00c      	beq.n	8010d3c <xPortStartScheduler+0x7c>
	__asm volatile
 8010d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d26:	b672      	cpsid	i
 8010d28:	f383 8811 	msr	BASEPRI, r3
 8010d2c:	f3bf 8f6f 	isb	sy
 8010d30:	f3bf 8f4f 	dsb	sy
 8010d34:	b662      	cpsie	i
 8010d36:	60bb      	str	r3, [r7, #8]
}
 8010d38:	bf00      	nop
 8010d3a:	e7fe      	b.n	8010d3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d3c:	4b1b      	ldr	r3, [pc, #108]	; (8010dac <xPortStartScheduler+0xec>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	021b      	lsls	r3, r3, #8
 8010d42:	4a1a      	ldr	r2, [pc, #104]	; (8010dac <xPortStartScheduler+0xec>)
 8010d44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d46:	4b19      	ldr	r3, [pc, #100]	; (8010dac <xPortStartScheduler+0xec>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d4e:	4a17      	ldr	r2, [pc, #92]	; (8010dac <xPortStartScheduler+0xec>)
 8010d50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d5a:	4b15      	ldr	r3, [pc, #84]	; (8010db0 <xPortStartScheduler+0xf0>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	4a14      	ldr	r2, [pc, #80]	; (8010db0 <xPortStartScheduler+0xf0>)
 8010d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d66:	4b12      	ldr	r3, [pc, #72]	; (8010db0 <xPortStartScheduler+0xf0>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a11      	ldr	r2, [pc, #68]	; (8010db0 <xPortStartScheduler+0xf0>)
 8010d6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d72:	f000 f8dd 	bl	8010f30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d76:	4b0f      	ldr	r3, [pc, #60]	; (8010db4 <xPortStartScheduler+0xf4>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d7c:	f000 f8fc 	bl	8010f78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d80:	4b0d      	ldr	r3, [pc, #52]	; (8010db8 <xPortStartScheduler+0xf8>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4a0c      	ldr	r2, [pc, #48]	; (8010db8 <xPortStartScheduler+0xf8>)
 8010d86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d8c:	f7ff ff84 	bl	8010c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d90:	f001 fe28 	bl	80129e4 <vTaskSwitchContext>
	prvTaskExitError();
 8010d94:	f7ff ff38 	bl	8010c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d98:	2300      	movs	r3, #0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	e000e400 	.word	0xe000e400
 8010da8:	20008928 	.word	0x20008928
 8010dac:	2000892c 	.word	0x2000892c
 8010db0:	e000ed20 	.word	0xe000ed20
 8010db4:	20000084 	.word	0x20000084
 8010db8:	e000ef34 	.word	0xe000ef34

08010dbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc6:	b672      	cpsid	i
 8010dc8:	f383 8811 	msr	BASEPRI, r3
 8010dcc:	f3bf 8f6f 	isb	sy
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	b662      	cpsie	i
 8010dd6:	607b      	str	r3, [r7, #4]
}
 8010dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010dda:	4b10      	ldr	r3, [pc, #64]	; (8010e1c <vPortEnterCritical+0x60>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	3301      	adds	r3, #1
 8010de0:	4a0e      	ldr	r2, [pc, #56]	; (8010e1c <vPortEnterCritical+0x60>)
 8010de2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010de4:	4b0d      	ldr	r3, [pc, #52]	; (8010e1c <vPortEnterCritical+0x60>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d111      	bne.n	8010e10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010dec:	4b0c      	ldr	r3, [pc, #48]	; (8010e20 <vPortEnterCritical+0x64>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00c      	beq.n	8010e10 <vPortEnterCritical+0x54>
	__asm volatile
 8010df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfa:	b672      	cpsid	i
 8010dfc:	f383 8811 	msr	BASEPRI, r3
 8010e00:	f3bf 8f6f 	isb	sy
 8010e04:	f3bf 8f4f 	dsb	sy
 8010e08:	b662      	cpsie	i
 8010e0a:	603b      	str	r3, [r7, #0]
}
 8010e0c:	bf00      	nop
 8010e0e:	e7fe      	b.n	8010e0e <vPortEnterCritical+0x52>
	}
}
 8010e10:	bf00      	nop
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr
 8010e1c:	20000084 	.word	0x20000084
 8010e20:	e000ed04 	.word	0xe000ed04

08010e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e2a:	4b13      	ldr	r3, [pc, #76]	; (8010e78 <vPortExitCritical+0x54>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d10c      	bne.n	8010e4c <vPortExitCritical+0x28>
	__asm volatile
 8010e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e36:	b672      	cpsid	i
 8010e38:	f383 8811 	msr	BASEPRI, r3
 8010e3c:	f3bf 8f6f 	isb	sy
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	b662      	cpsie	i
 8010e46:	607b      	str	r3, [r7, #4]
}
 8010e48:	bf00      	nop
 8010e4a:	e7fe      	b.n	8010e4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010e4c:	4b0a      	ldr	r3, [pc, #40]	; (8010e78 <vPortExitCritical+0x54>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	3b01      	subs	r3, #1
 8010e52:	4a09      	ldr	r2, [pc, #36]	; (8010e78 <vPortExitCritical+0x54>)
 8010e54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e56:	4b08      	ldr	r3, [pc, #32]	; (8010e78 <vPortExitCritical+0x54>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d105      	bne.n	8010e6a <vPortExitCritical+0x46>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010e68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e6a:	bf00      	nop
 8010e6c:	370c      	adds	r7, #12
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr
 8010e76:	bf00      	nop
 8010e78:	20000084 	.word	0x20000084
 8010e7c:	00000000 	.word	0x00000000

08010e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e80:	f3ef 8009 	mrs	r0, PSP
 8010e84:	f3bf 8f6f 	isb	sy
 8010e88:	4b15      	ldr	r3, [pc, #84]	; (8010ee0 <pxCurrentTCBConst>)
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	f01e 0f10 	tst.w	lr, #16
 8010e90:	bf08      	it	eq
 8010e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9a:	6010      	str	r0, [r2, #0]
 8010e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010ea4:	b672      	cpsid	i
 8010ea6:	f380 8811 	msr	BASEPRI, r0
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	b662      	cpsie	i
 8010eb4:	f001 fd96 	bl	80129e4 <vTaskSwitchContext>
 8010eb8:	f04f 0000 	mov.w	r0, #0
 8010ebc:	f380 8811 	msr	BASEPRI, r0
 8010ec0:	bc09      	pop	{r0, r3}
 8010ec2:	6819      	ldr	r1, [r3, #0]
 8010ec4:	6808      	ldr	r0, [r1, #0]
 8010ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eca:	f01e 0f10 	tst.w	lr, #16
 8010ece:	bf08      	it	eq
 8010ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ed4:	f380 8809 	msr	PSP, r0
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	4770      	bx	lr
 8010ede:	bf00      	nop

08010ee0 <pxCurrentTCBConst>:
 8010ee0:	20008930 	.word	0x20008930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ee4:	bf00      	nop
 8010ee6:	bf00      	nop

08010ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
	__asm volatile
 8010eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef2:	b672      	cpsid	i
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	b662      	cpsie	i
 8010f02:	607b      	str	r3, [r7, #4]
}
 8010f04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f06:	f001 fcb1 	bl	801286c <xTaskIncrementTick>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d003      	beq.n	8010f18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f10:	4b06      	ldr	r3, [pc, #24]	; (8010f2c <SysTick_Handler+0x44>)
 8010f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f16:	601a      	str	r2, [r3, #0]
 8010f18:	2300      	movs	r3, #0
 8010f1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	f383 8811 	msr	BASEPRI, r3
}
 8010f22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f24:	bf00      	nop
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	e000ed04 	.word	0xe000ed04

08010f30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f30:	b480      	push	{r7}
 8010f32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f34:	4b0b      	ldr	r3, [pc, #44]	; (8010f64 <vPortSetupTimerInterrupt+0x34>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f3a:	4b0b      	ldr	r3, [pc, #44]	; (8010f68 <vPortSetupTimerInterrupt+0x38>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f40:	4b0a      	ldr	r3, [pc, #40]	; (8010f6c <vPortSetupTimerInterrupt+0x3c>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4a0a      	ldr	r2, [pc, #40]	; (8010f70 <vPortSetupTimerInterrupt+0x40>)
 8010f46:	fba2 2303 	umull	r2, r3, r2, r3
 8010f4a:	099b      	lsrs	r3, r3, #6
 8010f4c:	4a09      	ldr	r2, [pc, #36]	; (8010f74 <vPortSetupTimerInterrupt+0x44>)
 8010f4e:	3b01      	subs	r3, #1
 8010f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f52:	4b04      	ldr	r3, [pc, #16]	; (8010f64 <vPortSetupTimerInterrupt+0x34>)
 8010f54:	2207      	movs	r2, #7
 8010f56:	601a      	str	r2, [r3, #0]
}
 8010f58:	bf00      	nop
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	e000e010 	.word	0xe000e010
 8010f68:	e000e018 	.word	0xe000e018
 8010f6c:	20000078 	.word	0x20000078
 8010f70:	10624dd3 	.word	0x10624dd3
 8010f74:	e000e014 	.word	0xe000e014

08010f78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010f88 <vPortEnableVFP+0x10>
 8010f7c:	6801      	ldr	r1, [r0, #0]
 8010f7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f82:	6001      	str	r1, [r0, #0]
 8010f84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f86:	bf00      	nop
 8010f88:	e000ed88 	.word	0xe000ed88

08010f8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b085      	sub	sp, #20
 8010f90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f92:	f3ef 8305 	mrs	r3, IPSR
 8010f96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	2b0f      	cmp	r3, #15
 8010f9c:	d916      	bls.n	8010fcc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f9e:	4a19      	ldr	r2, [pc, #100]	; (8011004 <vPortValidateInterruptPriority+0x78>)
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010fa8:	4b17      	ldr	r3, [pc, #92]	; (8011008 <vPortValidateInterruptPriority+0x7c>)
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	7afa      	ldrb	r2, [r7, #11]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d20c      	bcs.n	8010fcc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb6:	b672      	cpsid	i
 8010fb8:	f383 8811 	msr	BASEPRI, r3
 8010fbc:	f3bf 8f6f 	isb	sy
 8010fc0:	f3bf 8f4f 	dsb	sy
 8010fc4:	b662      	cpsie	i
 8010fc6:	607b      	str	r3, [r7, #4]
}
 8010fc8:	bf00      	nop
 8010fca:	e7fe      	b.n	8010fca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010fcc:	4b0f      	ldr	r3, [pc, #60]	; (801100c <vPortValidateInterruptPriority+0x80>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010fd4:	4b0e      	ldr	r3, [pc, #56]	; (8011010 <vPortValidateInterruptPriority+0x84>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d90c      	bls.n	8010ff6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe0:	b672      	cpsid	i
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	b662      	cpsie	i
 8010ff0:	603b      	str	r3, [r7, #0]
}
 8010ff2:	bf00      	nop
 8010ff4:	e7fe      	b.n	8010ff4 <vPortValidateInterruptPriority+0x68>
	}
 8010ff6:	bf00      	nop
 8010ff8:	3714      	adds	r7, #20
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr
 8011002:	bf00      	nop
 8011004:	e000e3f0 	.word	0xe000e3f0
 8011008:	20008928 	.word	0x20008928
 801100c:	e000ed0c 	.word	0xe000ed0c
 8011010:	2000892c 	.word	0x2000892c

08011014 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d10c      	bne.n	8011042 <xQueueGenericReset+0x2e>
	__asm volatile
 8011028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102c:	b672      	cpsid	i
 801102e:	f383 8811 	msr	BASEPRI, r3
 8011032:	f3bf 8f6f 	isb	sy
 8011036:	f3bf 8f4f 	dsb	sy
 801103a:	b662      	cpsie	i
 801103c:	60bb      	str	r3, [r7, #8]
}
 801103e:	bf00      	nop
 8011040:	e7fe      	b.n	8011040 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011042:	f7ff febb 	bl	8010dbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801104e:	68f9      	ldr	r1, [r7, #12]
 8011050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011052:	fb01 f303 	mul.w	r3, r1, r3
 8011056:	441a      	add	r2, r3
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2200      	movs	r2, #0
 8011060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011072:	3b01      	subs	r3, #1
 8011074:	68f9      	ldr	r1, [r7, #12]
 8011076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011078:	fb01 f303 	mul.w	r3, r1, r3
 801107c:	441a      	add	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	22ff      	movs	r2, #255	; 0xff
 8011086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	22ff      	movs	r2, #255	; 0xff
 801108e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d114      	bne.n	80110c2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	691b      	ldr	r3, [r3, #16]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d01a      	beq.n	80110d6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	3310      	adds	r3, #16
 80110a4:	4618      	mov	r0, r3
 80110a6:	f001 fd75 	bl	8012b94 <xTaskRemoveFromEventList>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d012      	beq.n	80110d6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80110b0:	4b0c      	ldr	r3, [pc, #48]	; (80110e4 <xQueueGenericReset+0xd0>)
 80110b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110b6:	601a      	str	r2, [r3, #0]
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	e009      	b.n	80110d6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	3310      	adds	r3, #16
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7ff fcb6 	bl	8010a38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	3324      	adds	r3, #36	; 0x24
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ff fcb1 	bl	8010a38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80110d6:	f7ff fea5 	bl	8010e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80110da:	2301      	movs	r3, #1
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3710      	adds	r7, #16
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	e000ed04 	.word	0xe000ed04

080110e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b08e      	sub	sp, #56	; 0x38
 80110ec:	af02      	add	r7, sp, #8
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d10c      	bne.n	8011116 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80110fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011100:	b672      	cpsid	i
 8011102:	f383 8811 	msr	BASEPRI, r3
 8011106:	f3bf 8f6f 	isb	sy
 801110a:	f3bf 8f4f 	dsb	sy
 801110e:	b662      	cpsie	i
 8011110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011112:	bf00      	nop
 8011114:	e7fe      	b.n	8011114 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d10c      	bne.n	8011136 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 801111c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011120:	b672      	cpsid	i
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	b662      	cpsie	i
 8011130:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011132:	bf00      	nop
 8011134:	e7fe      	b.n	8011134 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d002      	beq.n	8011142 <xQueueGenericCreateStatic+0x5a>
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d001      	beq.n	8011146 <xQueueGenericCreateStatic+0x5e>
 8011142:	2301      	movs	r3, #1
 8011144:	e000      	b.n	8011148 <xQueueGenericCreateStatic+0x60>
 8011146:	2300      	movs	r3, #0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10c      	bne.n	8011166 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	b672      	cpsid	i
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	b662      	cpsie	i
 8011160:	623b      	str	r3, [r7, #32]
}
 8011162:	bf00      	nop
 8011164:	e7fe      	b.n	8011164 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d102      	bne.n	8011172 <xQueueGenericCreateStatic+0x8a>
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <xQueueGenericCreateStatic+0x8e>
 8011172:	2301      	movs	r3, #1
 8011174:	e000      	b.n	8011178 <xQueueGenericCreateStatic+0x90>
 8011176:	2300      	movs	r3, #0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d10c      	bne.n	8011196 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011180:	b672      	cpsid	i
 8011182:	f383 8811 	msr	BASEPRI, r3
 8011186:	f3bf 8f6f 	isb	sy
 801118a:	f3bf 8f4f 	dsb	sy
 801118e:	b662      	cpsie	i
 8011190:	61fb      	str	r3, [r7, #28]
}
 8011192:	bf00      	nop
 8011194:	e7fe      	b.n	8011194 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011196:	2350      	movs	r3, #80	; 0x50
 8011198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	2b50      	cmp	r3, #80	; 0x50
 801119e:	d00c      	beq.n	80111ba <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80111a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a4:	b672      	cpsid	i
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	b662      	cpsie	i
 80111b4:	61bb      	str	r3, [r7, #24]
}
 80111b6:	bf00      	nop
 80111b8:	e7fe      	b.n	80111b8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80111ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d00d      	beq.n	80111e2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	2201      	movs	r2, #1
 80111ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80111ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80111d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d4:	9300      	str	r3, [sp, #0]
 80111d6:	4613      	mov	r3, r2
 80111d8:	687a      	ldr	r2, [r7, #4]
 80111da:	68b9      	ldr	r1, [r7, #8]
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 f847 	bl	8011270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3730      	adds	r7, #48	; 0x30
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b08a      	sub	sp, #40	; 0x28
 80111f0:	af02      	add	r7, sp, #8
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	4613      	mov	r3, r2
 80111f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d10c      	bne.n	801121a <xQueueGenericCreate+0x2e>
	__asm volatile
 8011200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011204:	b672      	cpsid	i
 8011206:	f383 8811 	msr	BASEPRI, r3
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	f3bf 8f4f 	dsb	sy
 8011212:	b662      	cpsie	i
 8011214:	613b      	str	r3, [r7, #16]
}
 8011216:	bf00      	nop
 8011218:	e7fe      	b.n	8011218 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d102      	bne.n	8011226 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011220:	2300      	movs	r3, #0
 8011222:	61fb      	str	r3, [r7, #28]
 8011224:	e004      	b.n	8011230 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	fb02 f303 	mul.w	r3, r2, r3
 801122e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	3350      	adds	r3, #80	; 0x50
 8011234:	4618      	mov	r0, r3
 8011236:	f7ff fa15 	bl	8010664 <pvPortMalloc>
 801123a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d011      	beq.n	8011266 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	3350      	adds	r3, #80	; 0x50
 801124a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	2200      	movs	r2, #0
 8011250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011254:	79fa      	ldrb	r2, [r7, #7]
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	9300      	str	r3, [sp, #0]
 801125a:	4613      	mov	r3, r2
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	68b9      	ldr	r1, [r7, #8]
 8011260:	68f8      	ldr	r0, [r7, #12]
 8011262:	f000 f805 	bl	8011270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011266:	69bb      	ldr	r3, [r7, #24]
	}
 8011268:	4618      	mov	r0, r3
 801126a:	3720      	adds	r7, #32
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	607a      	str	r2, [r7, #4]
 801127c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d103      	bne.n	801128c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	69ba      	ldr	r2, [r7, #24]
 8011288:	601a      	str	r2, [r3, #0]
 801128a:	e002      	b.n	8011292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801128c:	69bb      	ldr	r3, [r7, #24]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	68ba      	ldr	r2, [r7, #8]
 801129c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801129e:	2101      	movs	r1, #1
 80112a0:	69b8      	ldr	r0, [r7, #24]
 80112a2:	f7ff feb7 	bl	8011014 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	78fa      	ldrb	r2, [r7, #3]
 80112aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80112ae:	bf00      	nop
 80112b0:	3710      	adds	r7, #16
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b082      	sub	sp, #8
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00e      	beq.n	80112e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2200      	movs	r2, #0
 80112c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80112d6:	2300      	movs	r3, #0
 80112d8:	2200      	movs	r2, #0
 80112da:	2100      	movs	r1, #0
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 f917 	bl	8011510 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80112e2:	bf00      	nop
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}

080112ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b086      	sub	sp, #24
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	4603      	mov	r3, r0
 80112f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80112f4:	2301      	movs	r3, #1
 80112f6:	617b      	str	r3, [r7, #20]
 80112f8:	2300      	movs	r3, #0
 80112fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80112fc:	79fb      	ldrb	r3, [r7, #7]
 80112fe:	461a      	mov	r2, r3
 8011300:	6939      	ldr	r1, [r7, #16]
 8011302:	6978      	ldr	r0, [r7, #20]
 8011304:	f7ff ff72 	bl	80111ec <xQueueGenericCreate>
 8011308:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f7ff ffd3 	bl	80112b6 <prvInitialiseMutex>

		return xNewQueue;
 8011310:	68fb      	ldr	r3, [r7, #12]
	}
 8011312:	4618      	mov	r0, r3
 8011314:	3718      	adds	r7, #24
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}

0801131a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801131a:	b580      	push	{r7, lr}
 801131c:	b088      	sub	sp, #32
 801131e:	af02      	add	r7, sp, #8
 8011320:	4603      	mov	r3, r0
 8011322:	6039      	str	r1, [r7, #0]
 8011324:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011326:	2301      	movs	r3, #1
 8011328:	617b      	str	r3, [r7, #20]
 801132a:	2300      	movs	r3, #0
 801132c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801132e:	79fb      	ldrb	r3, [r7, #7]
 8011330:	9300      	str	r3, [sp, #0]
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	2200      	movs	r2, #0
 8011336:	6939      	ldr	r1, [r7, #16]
 8011338:	6978      	ldr	r0, [r7, #20]
 801133a:	f7ff fed5 	bl	80110e8 <xQueueGenericCreateStatic>
 801133e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011340:	68f8      	ldr	r0, [r7, #12]
 8011342:	f7ff ffb8 	bl	80112b6 <prvInitialiseMutex>

		return xNewQueue;
 8011346:	68fb      	ldr	r3, [r7, #12]
	}
 8011348:	4618      	mov	r0, r3
 801134a:	3718      	adds	r7, #24
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011350:	b590      	push	{r4, r7, lr}
 8011352:	b087      	sub	sp, #28
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d10c      	bne.n	801137c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	b672      	cpsid	i
 8011368:	f383 8811 	msr	BASEPRI, r3
 801136c:	f3bf 8f6f 	isb	sy
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	b662      	cpsie	i
 8011376:	60fb      	str	r3, [r7, #12]
}
 8011378:	bf00      	nop
 801137a:	e7fe      	b.n	801137a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	689c      	ldr	r4, [r3, #8]
 8011380:	f001 fdd0 	bl	8012f24 <xTaskGetCurrentTaskHandle>
 8011384:	4603      	mov	r3, r0
 8011386:	429c      	cmp	r4, r3
 8011388:	d111      	bne.n	80113ae <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	1e5a      	subs	r2, r3, #1
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d105      	bne.n	80113a8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801139c:	2300      	movs	r3, #0
 801139e:	2200      	movs	r2, #0
 80113a0:	2100      	movs	r1, #0
 80113a2:	6938      	ldr	r0, [r7, #16]
 80113a4:	f000 f8b4 	bl	8011510 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80113a8:	2301      	movs	r3, #1
 80113aa:	617b      	str	r3, [r7, #20]
 80113ac:	e001      	b.n	80113b2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80113ae:	2300      	movs	r3, #0
 80113b0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80113b2:	697b      	ldr	r3, [r7, #20]
	}
 80113b4:	4618      	mov	r0, r3
 80113b6:	371c      	adds	r7, #28
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd90      	pop	{r4, r7, pc}

080113bc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80113bc:	b590      	push	{r4, r7, lr}
 80113be:	b087      	sub	sp, #28
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d10c      	bne.n	80113ea <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80113d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d4:	b672      	cpsid	i
 80113d6:	f383 8811 	msr	BASEPRI, r3
 80113da:	f3bf 8f6f 	isb	sy
 80113de:	f3bf 8f4f 	dsb	sy
 80113e2:	b662      	cpsie	i
 80113e4:	60fb      	str	r3, [r7, #12]
}
 80113e6:	bf00      	nop
 80113e8:	e7fe      	b.n	80113e8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	689c      	ldr	r4, [r3, #8]
 80113ee:	f001 fd99 	bl	8012f24 <xTaskGetCurrentTaskHandle>
 80113f2:	4603      	mov	r3, r0
 80113f4:	429c      	cmp	r4, r3
 80113f6:	d107      	bne.n	8011408 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	1c5a      	adds	r2, r3, #1
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011402:	2301      	movs	r3, #1
 8011404:	617b      	str	r3, [r7, #20]
 8011406:	e00c      	b.n	8011422 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6938      	ldr	r0, [r7, #16]
 801140c:	f000 fba2 	bl	8011b54 <xQueueSemaphoreTake>
 8011410:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d004      	beq.n	8011422 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	1c5a      	adds	r2, r3, #1
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011422:	697b      	ldr	r3, [r7, #20]
	}
 8011424:	4618      	mov	r0, r3
 8011426:	371c      	adds	r7, #28
 8011428:	46bd      	mov	sp, r7
 801142a:	bd90      	pop	{r4, r7, pc}

0801142c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801142c:	b580      	push	{r7, lr}
 801142e:	b08a      	sub	sp, #40	; 0x28
 8011430:	af02      	add	r7, sp, #8
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d10c      	bne.n	8011458 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 801143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011442:	b672      	cpsid	i
 8011444:	f383 8811 	msr	BASEPRI, r3
 8011448:	f3bf 8f6f 	isb	sy
 801144c:	f3bf 8f4f 	dsb	sy
 8011450:	b662      	cpsie	i
 8011452:	61bb      	str	r3, [r7, #24]
}
 8011454:	bf00      	nop
 8011456:	e7fe      	b.n	8011456 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011458:	68ba      	ldr	r2, [r7, #8]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	429a      	cmp	r2, r3
 801145e:	d90c      	bls.n	801147a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8011460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011464:	b672      	cpsid	i
 8011466:	f383 8811 	msr	BASEPRI, r3
 801146a:	f3bf 8f6f 	isb	sy
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	b662      	cpsie	i
 8011474:	617b      	str	r3, [r7, #20]
}
 8011476:	bf00      	nop
 8011478:	e7fe      	b.n	8011478 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801147a:	2302      	movs	r3, #2
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2200      	movs	r2, #0
 8011482:	2100      	movs	r1, #0
 8011484:	68f8      	ldr	r0, [r7, #12]
 8011486:	f7ff fe2f 	bl	80110e8 <xQueueGenericCreateStatic>
 801148a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d002      	beq.n	8011498 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	68ba      	ldr	r2, [r7, #8]
 8011496:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011498:	69fb      	ldr	r3, [r7, #28]
	}
 801149a:	4618      	mov	r0, r3
 801149c:	3720      	adds	r7, #32
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b086      	sub	sp, #24
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d10c      	bne.n	80114cc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80114b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b6:	b672      	cpsid	i
 80114b8:	f383 8811 	msr	BASEPRI, r3
 80114bc:	f3bf 8f6f 	isb	sy
 80114c0:	f3bf 8f4f 	dsb	sy
 80114c4:	b662      	cpsie	i
 80114c6:	613b      	str	r3, [r7, #16]
}
 80114c8:	bf00      	nop
 80114ca:	e7fe      	b.n	80114ca <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80114cc:	683a      	ldr	r2, [r7, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d90c      	bls.n	80114ee <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80114d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d8:	b672      	cpsid	i
 80114da:	f383 8811 	msr	BASEPRI, r3
 80114de:	f3bf 8f6f 	isb	sy
 80114e2:	f3bf 8f4f 	dsb	sy
 80114e6:	b662      	cpsie	i
 80114e8:	60fb      	str	r3, [r7, #12]
}
 80114ea:	bf00      	nop
 80114ec:	e7fe      	b.n	80114ec <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80114ee:	2202      	movs	r2, #2
 80114f0:	2100      	movs	r1, #0
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f7ff fe7a 	bl	80111ec <xQueueGenericCreate>
 80114f8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d002      	beq.n	8011506 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	683a      	ldr	r2, [r7, #0]
 8011504:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011506:	697b      	ldr	r3, [r7, #20]
	}
 8011508:	4618      	mov	r0, r3
 801150a:	3718      	adds	r7, #24
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b08e      	sub	sp, #56	; 0x38
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
 801151c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801151e:	2300      	movs	r3, #0
 8011520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10c      	bne.n	8011546 <xQueueGenericSend+0x36>
	__asm volatile
 801152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011530:	b672      	cpsid	i
 8011532:	f383 8811 	msr	BASEPRI, r3
 8011536:	f3bf 8f6f 	isb	sy
 801153a:	f3bf 8f4f 	dsb	sy
 801153e:	b662      	cpsie	i
 8011540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011542:	bf00      	nop
 8011544:	e7fe      	b.n	8011544 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d103      	bne.n	8011554 <xQueueGenericSend+0x44>
 801154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011550:	2b00      	cmp	r3, #0
 8011552:	d101      	bne.n	8011558 <xQueueGenericSend+0x48>
 8011554:	2301      	movs	r3, #1
 8011556:	e000      	b.n	801155a <xQueueGenericSend+0x4a>
 8011558:	2300      	movs	r3, #0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10c      	bne.n	8011578 <xQueueGenericSend+0x68>
	__asm volatile
 801155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011562:	b672      	cpsid	i
 8011564:	f383 8811 	msr	BASEPRI, r3
 8011568:	f3bf 8f6f 	isb	sy
 801156c:	f3bf 8f4f 	dsb	sy
 8011570:	b662      	cpsie	i
 8011572:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011574:	bf00      	nop
 8011576:	e7fe      	b.n	8011576 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	2b02      	cmp	r3, #2
 801157c:	d103      	bne.n	8011586 <xQueueGenericSend+0x76>
 801157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011582:	2b01      	cmp	r3, #1
 8011584:	d101      	bne.n	801158a <xQueueGenericSend+0x7a>
 8011586:	2301      	movs	r3, #1
 8011588:	e000      	b.n	801158c <xQueueGenericSend+0x7c>
 801158a:	2300      	movs	r3, #0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d10c      	bne.n	80115aa <xQueueGenericSend+0x9a>
	__asm volatile
 8011590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011594:	b672      	cpsid	i
 8011596:	f383 8811 	msr	BASEPRI, r3
 801159a:	f3bf 8f6f 	isb	sy
 801159e:	f3bf 8f4f 	dsb	sy
 80115a2:	b662      	cpsie	i
 80115a4:	623b      	str	r3, [r7, #32]
}
 80115a6:	bf00      	nop
 80115a8:	e7fe      	b.n	80115a8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115aa:	f001 fccb 	bl	8012f44 <xTaskGetSchedulerState>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d102      	bne.n	80115ba <xQueueGenericSend+0xaa>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d101      	bne.n	80115be <xQueueGenericSend+0xae>
 80115ba:	2301      	movs	r3, #1
 80115bc:	e000      	b.n	80115c0 <xQueueGenericSend+0xb0>
 80115be:	2300      	movs	r3, #0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10c      	bne.n	80115de <xQueueGenericSend+0xce>
	__asm volatile
 80115c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c8:	b672      	cpsid	i
 80115ca:	f383 8811 	msr	BASEPRI, r3
 80115ce:	f3bf 8f6f 	isb	sy
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	b662      	cpsie	i
 80115d8:	61fb      	str	r3, [r7, #28]
}
 80115da:	bf00      	nop
 80115dc:	e7fe      	b.n	80115dc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115de:	f7ff fbed 	bl	8010dbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80115e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d302      	bcc.n	80115f4 <xQueueGenericSend+0xe4>
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	2b02      	cmp	r3, #2
 80115f2:	d129      	bne.n	8011648 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	68b9      	ldr	r1, [r7, #8]
 80115f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115fa:	f000 fc82 	bl	8011f02 <prvCopyDataToQueue>
 80115fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011604:	2b00      	cmp	r3, #0
 8011606:	d010      	beq.n	801162a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160a:	3324      	adds	r3, #36	; 0x24
 801160c:	4618      	mov	r0, r3
 801160e:	f001 fac1 	bl	8012b94 <xTaskRemoveFromEventList>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d013      	beq.n	8011640 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011618:	4b3f      	ldr	r3, [pc, #252]	; (8011718 <xQueueGenericSend+0x208>)
 801161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801161e:	601a      	str	r2, [r3, #0]
 8011620:	f3bf 8f4f 	dsb	sy
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	e00a      	b.n	8011640 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	2b00      	cmp	r3, #0
 801162e:	d007      	beq.n	8011640 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011630:	4b39      	ldr	r3, [pc, #228]	; (8011718 <xQueueGenericSend+0x208>)
 8011632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011636:	601a      	str	r2, [r3, #0]
 8011638:	f3bf 8f4f 	dsb	sy
 801163c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011640:	f7ff fbf0 	bl	8010e24 <vPortExitCritical>
				return pdPASS;
 8011644:	2301      	movs	r3, #1
 8011646:	e063      	b.n	8011710 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d103      	bne.n	8011656 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801164e:	f7ff fbe9 	bl	8010e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011652:	2300      	movs	r3, #0
 8011654:	e05c      	b.n	8011710 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011658:	2b00      	cmp	r3, #0
 801165a:	d106      	bne.n	801166a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801165c:	f107 0314 	add.w	r3, r7, #20
 8011660:	4618      	mov	r0, r3
 8011662:	f001 fafd 	bl	8012c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011666:	2301      	movs	r3, #1
 8011668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801166a:	f7ff fbdb 	bl	8010e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801166e:	f001 f82d 	bl	80126cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011672:	f7ff fba3 	bl	8010dbc <vPortEnterCritical>
 8011676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801167c:	b25b      	sxtb	r3, r3
 801167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011682:	d103      	bne.n	801168c <xQueueGenericSend+0x17c>
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	2200      	movs	r2, #0
 8011688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011692:	b25b      	sxtb	r3, r3
 8011694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011698:	d103      	bne.n	80116a2 <xQueueGenericSend+0x192>
 801169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169c:	2200      	movs	r2, #0
 801169e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116a2:	f7ff fbbf 	bl	8010e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116a6:	1d3a      	adds	r2, r7, #4
 80116a8:	f107 0314 	add.w	r3, r7, #20
 80116ac:	4611      	mov	r1, r2
 80116ae:	4618      	mov	r0, r3
 80116b0:	f001 faec 	bl	8012c8c <xTaskCheckForTimeOut>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d124      	bne.n	8011704 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80116ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116bc:	f000 fd19 	bl	80120f2 <prvIsQueueFull>
 80116c0:	4603      	mov	r3, r0
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d018      	beq.n	80116f8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	3310      	adds	r3, #16
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	4611      	mov	r1, r2
 80116ce:	4618      	mov	r0, r3
 80116d0:	f001 fa0c 	bl	8012aec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80116d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116d6:	f000 fca4 	bl	8012022 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80116da:	f001 f805 	bl	80126e8 <xTaskResumeAll>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f47f af7c 	bne.w	80115de <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80116e6:	4b0c      	ldr	r3, [pc, #48]	; (8011718 <xQueueGenericSend+0x208>)
 80116e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	f3bf 8f4f 	dsb	sy
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	e772      	b.n	80115de <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80116f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116fa:	f000 fc92 	bl	8012022 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116fe:	f000 fff3 	bl	80126e8 <xTaskResumeAll>
 8011702:	e76c      	b.n	80115de <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011706:	f000 fc8c 	bl	8012022 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801170a:	f000 ffed 	bl	80126e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801170e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011710:	4618      	mov	r0, r3
 8011712:	3738      	adds	r7, #56	; 0x38
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	e000ed04 	.word	0xe000ed04

0801171c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b08e      	sub	sp, #56	; 0x38
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801172e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011730:	2b00      	cmp	r3, #0
 8011732:	d10c      	bne.n	801174e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8011734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011738:	b672      	cpsid	i
 801173a:	f383 8811 	msr	BASEPRI, r3
 801173e:	f3bf 8f6f 	isb	sy
 8011742:	f3bf 8f4f 	dsb	sy
 8011746:	b662      	cpsie	i
 8011748:	627b      	str	r3, [r7, #36]	; 0x24
}
 801174a:	bf00      	nop
 801174c:	e7fe      	b.n	801174c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d103      	bne.n	801175c <xQueueGenericSendFromISR+0x40>
 8011754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011758:	2b00      	cmp	r3, #0
 801175a:	d101      	bne.n	8011760 <xQueueGenericSendFromISR+0x44>
 801175c:	2301      	movs	r3, #1
 801175e:	e000      	b.n	8011762 <xQueueGenericSendFromISR+0x46>
 8011760:	2300      	movs	r3, #0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d10c      	bne.n	8011780 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8011766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176a:	b672      	cpsid	i
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	b662      	cpsie	i
 801177a:	623b      	str	r3, [r7, #32]
}
 801177c:	bf00      	nop
 801177e:	e7fe      	b.n	801177e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	2b02      	cmp	r3, #2
 8011784:	d103      	bne.n	801178e <xQueueGenericSendFromISR+0x72>
 8011786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801178a:	2b01      	cmp	r3, #1
 801178c:	d101      	bne.n	8011792 <xQueueGenericSendFromISR+0x76>
 801178e:	2301      	movs	r3, #1
 8011790:	e000      	b.n	8011794 <xQueueGenericSendFromISR+0x78>
 8011792:	2300      	movs	r3, #0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d10c      	bne.n	80117b2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	b672      	cpsid	i
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	b662      	cpsie	i
 80117ac:	61fb      	str	r3, [r7, #28]
}
 80117ae:	bf00      	nop
 80117b0:	e7fe      	b.n	80117b0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117b2:	f7ff fbeb 	bl	8010f8c <vPortValidateInterruptPriority>
	__asm volatile
 80117b6:	f3ef 8211 	mrs	r2, BASEPRI
 80117ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117be:	b672      	cpsid	i
 80117c0:	f383 8811 	msr	BASEPRI, r3
 80117c4:	f3bf 8f6f 	isb	sy
 80117c8:	f3bf 8f4f 	dsb	sy
 80117cc:	b662      	cpsie	i
 80117ce:	61ba      	str	r2, [r7, #24]
 80117d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80117d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117de:	429a      	cmp	r2, r3
 80117e0:	d302      	bcc.n	80117e8 <xQueueGenericSendFromISR+0xcc>
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d12c      	bne.n	8011842 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117f2:	683a      	ldr	r2, [r7, #0]
 80117f4:	68b9      	ldr	r1, [r7, #8]
 80117f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117f8:	f000 fb83 	bl	8011f02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011804:	d112      	bne.n	801182c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801180a:	2b00      	cmp	r3, #0
 801180c:	d016      	beq.n	801183c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	3324      	adds	r3, #36	; 0x24
 8011812:	4618      	mov	r0, r3
 8011814:	f001 f9be 	bl	8012b94 <xTaskRemoveFromEventList>
 8011818:	4603      	mov	r3, r0
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00e      	beq.n	801183c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00b      	beq.n	801183c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2201      	movs	r2, #1
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	e007      	b.n	801183c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801182c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011830:	3301      	adds	r3, #1
 8011832:	b2db      	uxtb	r3, r3
 8011834:	b25a      	sxtb	r2, r3
 8011836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801183c:	2301      	movs	r3, #1
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011840:	e001      	b.n	8011846 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011842:	2300      	movs	r3, #0
 8011844:	637b      	str	r3, [r7, #52]	; 0x34
 8011846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011848:	613b      	str	r3, [r7, #16]
	__asm volatile
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	f383 8811 	msr	BASEPRI, r3
}
 8011850:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011854:	4618      	mov	r0, r3
 8011856:	3738      	adds	r7, #56	; 0x38
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b08e      	sub	sp, #56	; 0x38
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186c:	2b00      	cmp	r3, #0
 801186e:	d10c      	bne.n	801188a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011874:	b672      	cpsid	i
 8011876:	f383 8811 	msr	BASEPRI, r3
 801187a:	f3bf 8f6f 	isb	sy
 801187e:	f3bf 8f4f 	dsb	sy
 8011882:	b662      	cpsie	i
 8011884:	623b      	str	r3, [r7, #32]
}
 8011886:	bf00      	nop
 8011888:	e7fe      	b.n	8011888 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00c      	beq.n	80118ac <xQueueGiveFromISR+0x50>
	__asm volatile
 8011892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011896:	b672      	cpsid	i
 8011898:	f383 8811 	msr	BASEPRI, r3
 801189c:	f3bf 8f6f 	isb	sy
 80118a0:	f3bf 8f4f 	dsb	sy
 80118a4:	b662      	cpsie	i
 80118a6:	61fb      	str	r3, [r7, #28]
}
 80118a8:	bf00      	nop
 80118aa:	e7fe      	b.n	80118aa <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80118ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d103      	bne.n	80118bc <xQueueGiveFromISR+0x60>
 80118b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b6:	689b      	ldr	r3, [r3, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d101      	bne.n	80118c0 <xQueueGiveFromISR+0x64>
 80118bc:	2301      	movs	r3, #1
 80118be:	e000      	b.n	80118c2 <xQueueGiveFromISR+0x66>
 80118c0:	2300      	movs	r3, #0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d10c      	bne.n	80118e0 <xQueueGiveFromISR+0x84>
	__asm volatile
 80118c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ca:	b672      	cpsid	i
 80118cc:	f383 8811 	msr	BASEPRI, r3
 80118d0:	f3bf 8f6f 	isb	sy
 80118d4:	f3bf 8f4f 	dsb	sy
 80118d8:	b662      	cpsie	i
 80118da:	61bb      	str	r3, [r7, #24]
}
 80118dc:	bf00      	nop
 80118de:	e7fe      	b.n	80118de <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118e0:	f7ff fb54 	bl	8010f8c <vPortValidateInterruptPriority>
	__asm volatile
 80118e4:	f3ef 8211 	mrs	r2, BASEPRI
 80118e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ec:	b672      	cpsid	i
 80118ee:	f383 8811 	msr	BASEPRI, r3
 80118f2:	f3bf 8f6f 	isb	sy
 80118f6:	f3bf 8f4f 	dsb	sy
 80118fa:	b662      	cpsie	i
 80118fc:	617a      	str	r2, [r7, #20]
 80118fe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011900:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011902:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011908:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801190e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011910:	429a      	cmp	r2, r3
 8011912:	d22b      	bcs.n	801196c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801191a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011920:	1c5a      	adds	r2, r3, #1
 8011922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011924:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801192a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801192e:	d112      	bne.n	8011956 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011934:	2b00      	cmp	r3, #0
 8011936:	d016      	beq.n	8011966 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193a:	3324      	adds	r3, #36	; 0x24
 801193c:	4618      	mov	r0, r3
 801193e:	f001 f929 	bl	8012b94 <xTaskRemoveFromEventList>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d00e      	beq.n	8011966 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00b      	beq.n	8011966 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	2201      	movs	r2, #1
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	e007      	b.n	8011966 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801195a:	3301      	adds	r3, #1
 801195c:	b2db      	uxtb	r3, r3
 801195e:	b25a      	sxtb	r2, r3
 8011960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011966:	2301      	movs	r3, #1
 8011968:	637b      	str	r3, [r7, #52]	; 0x34
 801196a:	e001      	b.n	8011970 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801196c:	2300      	movs	r3, #0
 801196e:	637b      	str	r3, [r7, #52]	; 0x34
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f383 8811 	msr	BASEPRI, r3
}
 801197a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801197c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801197e:	4618      	mov	r0, r3
 8011980:	3738      	adds	r7, #56	; 0x38
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
	...

08011988 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b08c      	sub	sp, #48	; 0x30
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011994:	2300      	movs	r3, #0
 8011996:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d10c      	bne.n	80119bc <xQueueReceive+0x34>
	__asm volatile
 80119a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a6:	b672      	cpsid	i
 80119a8:	f383 8811 	msr	BASEPRI, r3
 80119ac:	f3bf 8f6f 	isb	sy
 80119b0:	f3bf 8f4f 	dsb	sy
 80119b4:	b662      	cpsie	i
 80119b6:	623b      	str	r3, [r7, #32]
}
 80119b8:	bf00      	nop
 80119ba:	e7fe      	b.n	80119ba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d103      	bne.n	80119ca <xQueueReceive+0x42>
 80119c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d101      	bne.n	80119ce <xQueueReceive+0x46>
 80119ca:	2301      	movs	r3, #1
 80119cc:	e000      	b.n	80119d0 <xQueueReceive+0x48>
 80119ce:	2300      	movs	r3, #0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d10c      	bne.n	80119ee <xQueueReceive+0x66>
	__asm volatile
 80119d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d8:	b672      	cpsid	i
 80119da:	f383 8811 	msr	BASEPRI, r3
 80119de:	f3bf 8f6f 	isb	sy
 80119e2:	f3bf 8f4f 	dsb	sy
 80119e6:	b662      	cpsie	i
 80119e8:	61fb      	str	r3, [r7, #28]
}
 80119ea:	bf00      	nop
 80119ec:	e7fe      	b.n	80119ec <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119ee:	f001 faa9 	bl	8012f44 <xTaskGetSchedulerState>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d102      	bne.n	80119fe <xQueueReceive+0x76>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d101      	bne.n	8011a02 <xQueueReceive+0x7a>
 80119fe:	2301      	movs	r3, #1
 8011a00:	e000      	b.n	8011a04 <xQueueReceive+0x7c>
 8011a02:	2300      	movs	r3, #0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10c      	bne.n	8011a22 <xQueueReceive+0x9a>
	__asm volatile
 8011a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0c:	b672      	cpsid	i
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	b662      	cpsie	i
 8011a1c:	61bb      	str	r3, [r7, #24]
}
 8011a1e:	bf00      	nop
 8011a20:	e7fe      	b.n	8011a20 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a22:	f7ff f9cb 	bl	8010dbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d01f      	beq.n	8011a72 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011a32:	68b9      	ldr	r1, [r7, #8]
 8011a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a36:	f000 face 	bl	8011fd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3c:	1e5a      	subs	r2, r3, #1
 8011a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a44:	691b      	ldr	r3, [r3, #16]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d00f      	beq.n	8011a6a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a4c:	3310      	adds	r3, #16
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f001 f8a0 	bl	8012b94 <xTaskRemoveFromEventList>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d007      	beq.n	8011a6a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a5a:	4b3d      	ldr	r3, [pc, #244]	; (8011b50 <xQueueReceive+0x1c8>)
 8011a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a60:	601a      	str	r2, [r3, #0]
 8011a62:	f3bf 8f4f 	dsb	sy
 8011a66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a6a:	f7ff f9db 	bl	8010e24 <vPortExitCritical>
				return pdPASS;
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e069      	b.n	8011b46 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d103      	bne.n	8011a80 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a78:	f7ff f9d4 	bl	8010e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	e062      	b.n	8011b46 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d106      	bne.n	8011a94 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a86:	f107 0310 	add.w	r3, r7, #16
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f001 f8e8 	bl	8012c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a90:	2301      	movs	r3, #1
 8011a92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a94:	f7ff f9c6 	bl	8010e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a98:	f000 fe18 	bl	80126cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a9c:	f7ff f98e 	bl	8010dbc <vPortEnterCritical>
 8011aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aa6:	b25b      	sxtb	r3, r3
 8011aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aac:	d103      	bne.n	8011ab6 <xQueueReceive+0x12e>
 8011aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011abc:	b25b      	sxtb	r3, r3
 8011abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac2:	d103      	bne.n	8011acc <xQueueReceive+0x144>
 8011ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011acc:	f7ff f9aa 	bl	8010e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ad0:	1d3a      	adds	r2, r7, #4
 8011ad2:	f107 0310 	add.w	r3, r7, #16
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f001 f8d7 	bl	8012c8c <xTaskCheckForTimeOut>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d123      	bne.n	8011b2c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ae6:	f000 faee 	bl	80120c6 <prvIsQueueEmpty>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d017      	beq.n	8011b20 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af2:	3324      	adds	r3, #36	; 0x24
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	4611      	mov	r1, r2
 8011af8:	4618      	mov	r0, r3
 8011afa:	f000 fff7 	bl	8012aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b00:	f000 fa8f 	bl	8012022 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011b04:	f000 fdf0 	bl	80126e8 <xTaskResumeAll>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d189      	bne.n	8011a22 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8011b0e:	4b10      	ldr	r3, [pc, #64]	; (8011b50 <xQueueReceive+0x1c8>)
 8011b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b14:	601a      	str	r2, [r3, #0]
 8011b16:	f3bf 8f4f 	dsb	sy
 8011b1a:	f3bf 8f6f 	isb	sy
 8011b1e:	e780      	b.n	8011a22 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b22:	f000 fa7e 	bl	8012022 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b26:	f000 fddf 	bl	80126e8 <xTaskResumeAll>
 8011b2a:	e77a      	b.n	8011a22 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b2e:	f000 fa78 	bl	8012022 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b32:	f000 fdd9 	bl	80126e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b38:	f000 fac5 	bl	80120c6 <prvIsQueueEmpty>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	f43f af6f 	beq.w	8011a22 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3730      	adds	r7, #48	; 0x30
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	e000ed04 	.word	0xe000ed04

08011b54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b08e      	sub	sp, #56	; 0x38
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b66:	2300      	movs	r3, #0
 8011b68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d10c      	bne.n	8011b8a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b74:	b672      	cpsid	i
 8011b76:	f383 8811 	msr	BASEPRI, r3
 8011b7a:	f3bf 8f6f 	isb	sy
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	b662      	cpsie	i
 8011b84:	623b      	str	r3, [r7, #32]
}
 8011b86:	bf00      	nop
 8011b88:	e7fe      	b.n	8011b88 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d00c      	beq.n	8011bac <xQueueSemaphoreTake+0x58>
	__asm volatile
 8011b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b96:	b672      	cpsid	i
 8011b98:	f383 8811 	msr	BASEPRI, r3
 8011b9c:	f3bf 8f6f 	isb	sy
 8011ba0:	f3bf 8f4f 	dsb	sy
 8011ba4:	b662      	cpsie	i
 8011ba6:	61fb      	str	r3, [r7, #28]
}
 8011ba8:	bf00      	nop
 8011baa:	e7fe      	b.n	8011baa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011bac:	f001 f9ca 	bl	8012f44 <xTaskGetSchedulerState>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d102      	bne.n	8011bbc <xQueueSemaphoreTake+0x68>
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <xQueueSemaphoreTake+0x6c>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e000      	b.n	8011bc2 <xQueueSemaphoreTake+0x6e>
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d10c      	bne.n	8011be0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8011bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bca:	b672      	cpsid	i
 8011bcc:	f383 8811 	msr	BASEPRI, r3
 8011bd0:	f3bf 8f6f 	isb	sy
 8011bd4:	f3bf 8f4f 	dsb	sy
 8011bd8:	b662      	cpsie	i
 8011bda:	61bb      	str	r3, [r7, #24]
}
 8011bdc:	bf00      	nop
 8011bde:	e7fe      	b.n	8011bde <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011be0:	f7ff f8ec 	bl	8010dbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011be8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d024      	beq.n	8011c3a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf2:	1e5a      	subs	r2, r3, #1
 8011bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d104      	bne.n	8011c0a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011c00:	f001 fb1e 	bl	8013240 <pvTaskIncrementMutexHeldCount>
 8011c04:	4602      	mov	r2, r0
 8011c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00f      	beq.n	8011c32 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c14:	3310      	adds	r3, #16
 8011c16:	4618      	mov	r0, r3
 8011c18:	f000 ffbc 	bl	8012b94 <xTaskRemoveFromEventList>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d007      	beq.n	8011c32 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011c22:	4b55      	ldr	r3, [pc, #340]	; (8011d78 <xQueueSemaphoreTake+0x224>)
 8011c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	f3bf 8f4f 	dsb	sy
 8011c2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011c32:	f7ff f8f7 	bl	8010e24 <vPortExitCritical>
				return pdPASS;
 8011c36:	2301      	movs	r3, #1
 8011c38:	e099      	b.n	8011d6e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d113      	bne.n	8011c68 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d00c      	beq.n	8011c60 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8011c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4a:	b672      	cpsid	i
 8011c4c:	f383 8811 	msr	BASEPRI, r3
 8011c50:	f3bf 8f6f 	isb	sy
 8011c54:	f3bf 8f4f 	dsb	sy
 8011c58:	b662      	cpsie	i
 8011c5a:	617b      	str	r3, [r7, #20]
}
 8011c5c:	bf00      	nop
 8011c5e:	e7fe      	b.n	8011c5e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011c60:	f7ff f8e0 	bl	8010e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011c64:	2300      	movs	r3, #0
 8011c66:	e082      	b.n	8011d6e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d106      	bne.n	8011c7c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c6e:	f107 030c 	add.w	r3, r7, #12
 8011c72:	4618      	mov	r0, r3
 8011c74:	f000 fff4 	bl	8012c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c78:	2301      	movs	r3, #1
 8011c7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c7c:	f7ff f8d2 	bl	8010e24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c80:	f000 fd24 	bl	80126cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c84:	f7ff f89a 	bl	8010dbc <vPortEnterCritical>
 8011c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c8e:	b25b      	sxtb	r3, r3
 8011c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c94:	d103      	bne.n	8011c9e <xQueueSemaphoreTake+0x14a>
 8011c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c98:	2200      	movs	r2, #0
 8011c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ca4:	b25b      	sxtb	r3, r3
 8011ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011caa:	d103      	bne.n	8011cb4 <xQueueSemaphoreTake+0x160>
 8011cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011cb4:	f7ff f8b6 	bl	8010e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011cb8:	463a      	mov	r2, r7
 8011cba:	f107 030c 	add.w	r3, r7, #12
 8011cbe:	4611      	mov	r1, r2
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f000 ffe3 	bl	8012c8c <xTaskCheckForTimeOut>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d132      	bne.n	8011d32 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cce:	f000 f9fa 	bl	80120c6 <prvIsQueueEmpty>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d026      	beq.n	8011d26 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d109      	bne.n	8011cf4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8011ce0:	f7ff f86c 	bl	8010dbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f001 f949 	bl	8012f80 <xTaskPriorityInherit>
 8011cee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011cf0:	f7ff f898 	bl	8010e24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf6:	3324      	adds	r3, #36	; 0x24
 8011cf8:	683a      	ldr	r2, [r7, #0]
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f000 fef5 	bl	8012aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d04:	f000 f98d 	bl	8012022 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011d08:	f000 fcee 	bl	80126e8 <xTaskResumeAll>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	f47f af66 	bne.w	8011be0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8011d14:	4b18      	ldr	r3, [pc, #96]	; (8011d78 <xQueueSemaphoreTake+0x224>)
 8011d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d1a:	601a      	str	r2, [r3, #0]
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	e75c      	b.n	8011be0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d28:	f000 f97b 	bl	8012022 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011d2c:	f000 fcdc 	bl	80126e8 <xTaskResumeAll>
 8011d30:	e756      	b.n	8011be0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d34:	f000 f975 	bl	8012022 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011d38:	f000 fcd6 	bl	80126e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d3e:	f000 f9c2 	bl	80120c6 <prvIsQueueEmpty>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	f43f af4b 	beq.w	8011be0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d00d      	beq.n	8011d6c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8011d50:	f7ff f834 	bl	8010dbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d56:	f000 f8bc 	bl	8011ed2 <prvGetDisinheritPriorityAfterTimeout>
 8011d5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d62:	4618      	mov	r0, r3
 8011d64:	f001 f9e6 	bl	8013134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011d68:	f7ff f85c 	bl	8010e24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3738      	adds	r7, #56	; 0x38
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	e000ed04 	.word	0xe000ed04

08011d7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b08e      	sub	sp, #56	; 0x38
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d10c      	bne.n	8011dac <xQueueReceiveFromISR+0x30>
	__asm volatile
 8011d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d96:	b672      	cpsid	i
 8011d98:	f383 8811 	msr	BASEPRI, r3
 8011d9c:	f3bf 8f6f 	isb	sy
 8011da0:	f3bf 8f4f 	dsb	sy
 8011da4:	b662      	cpsie	i
 8011da6:	623b      	str	r3, [r7, #32]
}
 8011da8:	bf00      	nop
 8011daa:	e7fe      	b.n	8011daa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d103      	bne.n	8011dba <xQueueReceiveFromISR+0x3e>
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d101      	bne.n	8011dbe <xQueueReceiveFromISR+0x42>
 8011dba:	2301      	movs	r3, #1
 8011dbc:	e000      	b.n	8011dc0 <xQueueReceiveFromISR+0x44>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d10c      	bne.n	8011dde <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc8:	b672      	cpsid	i
 8011dca:	f383 8811 	msr	BASEPRI, r3
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f3bf 8f4f 	dsb	sy
 8011dd6:	b662      	cpsie	i
 8011dd8:	61fb      	str	r3, [r7, #28]
}
 8011dda:	bf00      	nop
 8011ddc:	e7fe      	b.n	8011ddc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dde:	f7ff f8d5 	bl	8010f8c <vPortValidateInterruptPriority>
	__asm volatile
 8011de2:	f3ef 8211 	mrs	r2, BASEPRI
 8011de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dea:	b672      	cpsid	i
 8011dec:	f383 8811 	msr	BASEPRI, r3
 8011df0:	f3bf 8f6f 	isb	sy
 8011df4:	f3bf 8f4f 	dsb	sy
 8011df8:	b662      	cpsie	i
 8011dfa:	61ba      	str	r2, [r7, #24]
 8011dfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011dfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d02f      	beq.n	8011e6e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e18:	68b9      	ldr	r1, [r7, #8]
 8011e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e1c:	f000 f8db 	bl	8011fd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e22:	1e5a      	subs	r2, r3, #1
 8011e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011e28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e30:	d112      	bne.n	8011e58 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	691b      	ldr	r3, [r3, #16]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d016      	beq.n	8011e68 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3c:	3310      	adds	r3, #16
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f000 fea8 	bl	8012b94 <xTaskRemoveFromEventList>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00e      	beq.n	8011e68 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00b      	beq.n	8011e68 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2201      	movs	r2, #1
 8011e54:	601a      	str	r2, [r3, #0]
 8011e56:	e007      	b.n	8011e68 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	b25a      	sxtb	r2, r3
 8011e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8011e6c:	e001      	b.n	8011e72 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	637b      	str	r3, [r7, #52]	; 0x34
 8011e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	f383 8811 	msr	BASEPRI, r3
}
 8011e7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3738      	adds	r7, #56	; 0x38
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b084      	sub	sp, #16
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d10c      	bne.n	8011eb4 <vQueueDelete+0x2c>
	__asm volatile
 8011e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9e:	b672      	cpsid	i
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	b662      	cpsie	i
 8011eae:	60bb      	str	r3, [r7, #8]
}
 8011eb0:	bf00      	nop
 8011eb2:	e7fe      	b.n	8011eb2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	f000 f95f 	bl	8012178 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d102      	bne.n	8011eca <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f7fe fc9d 	bl	8010804 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011eca:	bf00      	nop
 8011ecc:	3710      	adds	r7, #16
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}

08011ed2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011ed2:	b480      	push	{r7}
 8011ed4:	b085      	sub	sp, #20
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d006      	beq.n	8011ef0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011eec:	60fb      	str	r3, [r7, #12]
 8011eee:	e001      	b.n	8011ef4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
	}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3714      	adds	r7, #20
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr

08011f02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b086      	sub	sp, #24
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	60f8      	str	r0, [r7, #12]
 8011f0a:	60b9      	str	r1, [r7, #8]
 8011f0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d10d      	bne.n	8011f3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d14d      	bne.n	8011fc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	689b      	ldr	r3, [r3, #8]
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f001 f88f 	bl	8013050 <xTaskPriorityDisinherit>
 8011f32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2200      	movs	r2, #0
 8011f38:	609a      	str	r2, [r3, #8]
 8011f3a:	e043      	b.n	8011fc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d119      	bne.n	8011f76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6858      	ldr	r0, [r3, #4]
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	68b9      	ldr	r1, [r7, #8]
 8011f4e:	f00f fba5 	bl	802169c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	685a      	ldr	r2, [r3, #4]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f5a:	441a      	add	r2, r3
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	685a      	ldr	r2, [r3, #4]
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	689b      	ldr	r3, [r3, #8]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d32b      	bcc.n	8011fc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	605a      	str	r2, [r3, #4]
 8011f74:	e026      	b.n	8011fc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	68d8      	ldr	r0, [r3, #12]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f7e:	461a      	mov	r2, r3
 8011f80:	68b9      	ldr	r1, [r7, #8]
 8011f82:	f00f fb8b 	bl	802169c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	68da      	ldr	r2, [r3, #12]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f8e:	425b      	negs	r3, r3
 8011f90:	441a      	add	r2, r3
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	68da      	ldr	r2, [r3, #12]
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d207      	bcs.n	8011fb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	689a      	ldr	r2, [r3, #8]
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011faa:	425b      	negs	r3, r3
 8011fac:	441a      	add	r2, r3
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d105      	bne.n	8011fc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d002      	beq.n	8011fc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	1c5a      	adds	r2, r3, #1
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011fcc:	697b      	ldr	r3, [r7, #20]
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3718      	adds	r7, #24
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}

08011fd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011fd6:	b580      	push	{r7, lr}
 8011fd8:	b082      	sub	sp, #8
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d018      	beq.n	801201a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	68da      	ldr	r2, [r3, #12]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff0:	441a      	add	r2, r3
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	68da      	ldr	r2, [r3, #12]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	689b      	ldr	r3, [r3, #8]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d303      	bcc.n	801200a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	68d9      	ldr	r1, [r3, #12]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012012:	461a      	mov	r2, r3
 8012014:	6838      	ldr	r0, [r7, #0]
 8012016:	f00f fb41 	bl	802169c <memcpy>
	}
}
 801201a:	bf00      	nop
 801201c:	3708      	adds	r7, #8
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}

08012022 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012022:	b580      	push	{r7, lr}
 8012024:	b084      	sub	sp, #16
 8012026:	af00      	add	r7, sp, #0
 8012028:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801202a:	f7fe fec7 	bl	8010dbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012034:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012036:	e011      	b.n	801205c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203c:	2b00      	cmp	r3, #0
 801203e:	d012      	beq.n	8012066 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	3324      	adds	r3, #36	; 0x24
 8012044:	4618      	mov	r0, r3
 8012046:	f000 fda5 	bl	8012b94 <xTaskRemoveFromEventList>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	d001      	beq.n	8012054 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012050:	f000 fe82 	bl	8012d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012054:	7bfb      	ldrb	r3, [r7, #15]
 8012056:	3b01      	subs	r3, #1
 8012058:	b2db      	uxtb	r3, r3
 801205a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012060:	2b00      	cmp	r3, #0
 8012062:	dce9      	bgt.n	8012038 <prvUnlockQueue+0x16>
 8012064:	e000      	b.n	8012068 <prvUnlockQueue+0x46>
					break;
 8012066:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	22ff      	movs	r2, #255	; 0xff
 801206c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012070:	f7fe fed8 	bl	8010e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012074:	f7fe fea2 	bl	8010dbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801207e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012080:	e011      	b.n	80120a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	691b      	ldr	r3, [r3, #16]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d012      	beq.n	80120b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	3310      	adds	r3, #16
 801208e:	4618      	mov	r0, r3
 8012090:	f000 fd80 	bl	8012b94 <xTaskRemoveFromEventList>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d001      	beq.n	801209e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801209a:	f000 fe5d 	bl	8012d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801209e:	7bbb      	ldrb	r3, [r7, #14]
 80120a0:	3b01      	subs	r3, #1
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80120a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	dce9      	bgt.n	8012082 <prvUnlockQueue+0x60>
 80120ae:	e000      	b.n	80120b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80120b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	22ff      	movs	r2, #255	; 0xff
 80120b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80120ba:	f7fe feb3 	bl	8010e24 <vPortExitCritical>
}
 80120be:	bf00      	nop
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b084      	sub	sp, #16
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80120ce:	f7fe fe75 	bl	8010dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d102      	bne.n	80120e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80120da:	2301      	movs	r3, #1
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	e001      	b.n	80120e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80120e0:	2300      	movs	r3, #0
 80120e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80120e4:	f7fe fe9e 	bl	8010e24 <vPortExitCritical>

	return xReturn;
 80120e8:	68fb      	ldr	r3, [r7, #12]
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b084      	sub	sp, #16
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80120fa:	f7fe fe5f 	bl	8010dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012106:	429a      	cmp	r2, r3
 8012108:	d102      	bne.n	8012110 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801210a:	2301      	movs	r3, #1
 801210c:	60fb      	str	r3, [r7, #12]
 801210e:	e001      	b.n	8012114 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012110:	2300      	movs	r3, #0
 8012112:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012114:	f7fe fe86 	bl	8010e24 <vPortExitCritical>

	return xReturn;
 8012118:	68fb      	ldr	r3, [r7, #12]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
	...

08012124 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012124:	b480      	push	{r7}
 8012126:	b085      	sub	sp, #20
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801212e:	2300      	movs	r3, #0
 8012130:	60fb      	str	r3, [r7, #12]
 8012132:	e014      	b.n	801215e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012134:	4a0f      	ldr	r2, [pc, #60]	; (8012174 <vQueueAddToRegistry+0x50>)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10b      	bne.n	8012158 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012140:	490c      	ldr	r1, [pc, #48]	; (8012174 <vQueueAddToRegistry+0x50>)
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	683a      	ldr	r2, [r7, #0]
 8012146:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801214a:	4a0a      	ldr	r2, [pc, #40]	; (8012174 <vQueueAddToRegistry+0x50>)
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	00db      	lsls	r3, r3, #3
 8012150:	4413      	add	r3, r2
 8012152:	687a      	ldr	r2, [r7, #4]
 8012154:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012156:	e006      	b.n	8012166 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	3301      	adds	r3, #1
 801215c:	60fb      	str	r3, [r7, #12]
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2b07      	cmp	r3, #7
 8012162:	d9e7      	bls.n	8012134 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012164:	bf00      	nop
 8012166:	bf00      	nop
 8012168:	3714      	adds	r7, #20
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	2000e7d8 	.word	0x2000e7d8

08012178 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012180:	2300      	movs	r3, #0
 8012182:	60fb      	str	r3, [r7, #12]
 8012184:	e016      	b.n	80121b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012186:	4a10      	ldr	r2, [pc, #64]	; (80121c8 <vQueueUnregisterQueue+0x50>)
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	00db      	lsls	r3, r3, #3
 801218c:	4413      	add	r3, r2
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	429a      	cmp	r2, r3
 8012194:	d10b      	bne.n	80121ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012196:	4a0c      	ldr	r2, [pc, #48]	; (80121c8 <vQueueUnregisterQueue+0x50>)
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	2100      	movs	r1, #0
 801219c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80121a0:	4a09      	ldr	r2, [pc, #36]	; (80121c8 <vQueueUnregisterQueue+0x50>)
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	00db      	lsls	r3, r3, #3
 80121a6:	4413      	add	r3, r2
 80121a8:	2200      	movs	r2, #0
 80121aa:	605a      	str	r2, [r3, #4]
				break;
 80121ac:	e006      	b.n	80121bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	3301      	adds	r3, #1
 80121b2:	60fb      	str	r3, [r7, #12]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2b07      	cmp	r3, #7
 80121b8:	d9e5      	bls.n	8012186 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80121ba:	bf00      	nop
 80121bc:	bf00      	nop
 80121be:	3714      	adds	r7, #20
 80121c0:	46bd      	mov	sp, r7
 80121c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c6:	4770      	bx	lr
 80121c8:	2000e7d8 	.word	0x2000e7d8

080121cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b086      	sub	sp, #24
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	60f8      	str	r0, [r7, #12]
 80121d4:	60b9      	str	r1, [r7, #8]
 80121d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80121dc:	f7fe fdee 	bl	8010dbc <vPortEnterCritical>
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121e6:	b25b      	sxtb	r3, r3
 80121e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ec:	d103      	bne.n	80121f6 <vQueueWaitForMessageRestricted+0x2a>
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	2200      	movs	r2, #0
 80121f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80121fc:	b25b      	sxtb	r3, r3
 80121fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012202:	d103      	bne.n	801220c <vQueueWaitForMessageRestricted+0x40>
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2200      	movs	r2, #0
 8012208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801220c:	f7fe fe0a 	bl	8010e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012214:	2b00      	cmp	r3, #0
 8012216:	d106      	bne.n	8012226 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	3324      	adds	r3, #36	; 0x24
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	68b9      	ldr	r1, [r7, #8]
 8012220:	4618      	mov	r0, r3
 8012222:	f000 fc89 	bl	8012b38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012226:	6978      	ldr	r0, [r7, #20]
 8012228:	f7ff fefb 	bl	8012022 <prvUnlockQueue>
	}
 801222c:	bf00      	nop
 801222e:	3718      	adds	r7, #24
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012234:	b580      	push	{r7, lr}
 8012236:	b08e      	sub	sp, #56	; 0x38
 8012238:	af04      	add	r7, sp, #16
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
 8012240:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012244:	2b00      	cmp	r3, #0
 8012246:	d10c      	bne.n	8012262 <xTaskCreateStatic+0x2e>
	__asm volatile
 8012248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224c:	b672      	cpsid	i
 801224e:	f383 8811 	msr	BASEPRI, r3
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	f3bf 8f4f 	dsb	sy
 801225a:	b662      	cpsie	i
 801225c:	623b      	str	r3, [r7, #32]
}
 801225e:	bf00      	nop
 8012260:	e7fe      	b.n	8012260 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012264:	2b00      	cmp	r3, #0
 8012266:	d10c      	bne.n	8012282 <xTaskCreateStatic+0x4e>
	__asm volatile
 8012268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226c:	b672      	cpsid	i
 801226e:	f383 8811 	msr	BASEPRI, r3
 8012272:	f3bf 8f6f 	isb	sy
 8012276:	f3bf 8f4f 	dsb	sy
 801227a:	b662      	cpsie	i
 801227c:	61fb      	str	r3, [r7, #28]
}
 801227e:	bf00      	nop
 8012280:	e7fe      	b.n	8012280 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012282:	2360      	movs	r3, #96	; 0x60
 8012284:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	2b60      	cmp	r3, #96	; 0x60
 801228a:	d00c      	beq.n	80122a6 <xTaskCreateStatic+0x72>
	__asm volatile
 801228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012290:	b672      	cpsid	i
 8012292:	f383 8811 	msr	BASEPRI, r3
 8012296:	f3bf 8f6f 	isb	sy
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	b662      	cpsie	i
 80122a0:	61bb      	str	r3, [r7, #24]
}
 80122a2:	bf00      	nop
 80122a4:	e7fe      	b.n	80122a4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80122a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80122a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d01e      	beq.n	80122ec <xTaskCreateStatic+0xb8>
 80122ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d01b      	beq.n	80122ec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80122b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	2202      	movs	r2, #2
 80122c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80122c6:	2300      	movs	r3, #0
 80122c8:	9303      	str	r3, [sp, #12]
 80122ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122cc:	9302      	str	r3, [sp, #8]
 80122ce:	f107 0314 	add.w	r3, r7, #20
 80122d2:	9301      	str	r3, [sp, #4]
 80122d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	68b9      	ldr	r1, [r7, #8]
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f000 f850 	bl	8012384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122e6:	f000 f8e1 	bl	80124ac <prvAddNewTaskToReadyList>
 80122ea:	e001      	b.n	80122f0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80122ec:	2300      	movs	r3, #0
 80122ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80122f0:	697b      	ldr	r3, [r7, #20]
	}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3728      	adds	r7, #40	; 0x28
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80122fa:	b580      	push	{r7, lr}
 80122fc:	b08c      	sub	sp, #48	; 0x30
 80122fe:	af04      	add	r7, sp, #16
 8012300:	60f8      	str	r0, [r7, #12]
 8012302:	60b9      	str	r1, [r7, #8]
 8012304:	603b      	str	r3, [r7, #0]
 8012306:	4613      	mov	r3, r2
 8012308:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801230a:	88fb      	ldrh	r3, [r7, #6]
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	4618      	mov	r0, r3
 8012310:	f7fe f9a8 	bl	8010664 <pvPortMalloc>
 8012314:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d00e      	beq.n	801233a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801231c:	2060      	movs	r0, #96	; 0x60
 801231e:	f7fe f9a1 	bl	8010664 <pvPortMalloc>
 8012322:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d003      	beq.n	8012332 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801232a:	69fb      	ldr	r3, [r7, #28]
 801232c:	697a      	ldr	r2, [r7, #20]
 801232e:	631a      	str	r2, [r3, #48]	; 0x30
 8012330:	e005      	b.n	801233e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012332:	6978      	ldr	r0, [r7, #20]
 8012334:	f7fe fa66 	bl	8010804 <vPortFree>
 8012338:	e001      	b.n	801233e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801233a:	2300      	movs	r3, #0
 801233c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801233e:	69fb      	ldr	r3, [r7, #28]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d017      	beq.n	8012374 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	2200      	movs	r2, #0
 8012348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801234c:	88fa      	ldrh	r2, [r7, #6]
 801234e:	2300      	movs	r3, #0
 8012350:	9303      	str	r3, [sp, #12]
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	9302      	str	r3, [sp, #8]
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	9301      	str	r3, [sp, #4]
 801235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235c:	9300      	str	r3, [sp, #0]
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	68b9      	ldr	r1, [r7, #8]
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f000 f80e 	bl	8012384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012368:	69f8      	ldr	r0, [r7, #28]
 801236a:	f000 f89f 	bl	80124ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801236e:	2301      	movs	r3, #1
 8012370:	61bb      	str	r3, [r7, #24]
 8012372:	e002      	b.n	801237a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012374:	f04f 33ff 	mov.w	r3, #4294967295
 8012378:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801237a:	69bb      	ldr	r3, [r7, #24]
	}
 801237c:	4618      	mov	r0, r3
 801237e:	3720      	adds	r7, #32
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b088      	sub	sp, #32
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
 8012390:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012394:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	461a      	mov	r2, r3
 801239c:	21a5      	movs	r1, #165	; 0xa5
 801239e:	f00f f98b 	bl	80216b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80123a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80123a6:	6879      	ldr	r1, [r7, #4]
 80123a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80123ac:	440b      	add	r3, r1
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4413      	add	r3, r2
 80123b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80123b4:	69bb      	ldr	r3, [r7, #24]
 80123b6:	f023 0307 	bic.w	r3, r3, #7
 80123ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80123bc:	69bb      	ldr	r3, [r7, #24]
 80123be:	f003 0307 	and.w	r3, r3, #7
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d00c      	beq.n	80123e0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80123c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ca:	b672      	cpsid	i
 80123cc:	f383 8811 	msr	BASEPRI, r3
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	f3bf 8f4f 	dsb	sy
 80123d8:	b662      	cpsie	i
 80123da:	617b      	str	r3, [r7, #20]
}
 80123dc:	bf00      	nop
 80123de:	e7fe      	b.n	80123de <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d01f      	beq.n	8012426 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80123e6:	2300      	movs	r3, #0
 80123e8:	61fb      	str	r3, [r7, #28]
 80123ea:	e012      	b.n	8012412 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80123ec:	68ba      	ldr	r2, [r7, #8]
 80123ee:	69fb      	ldr	r3, [r7, #28]
 80123f0:	4413      	add	r3, r2
 80123f2:	7819      	ldrb	r1, [r3, #0]
 80123f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	4413      	add	r3, r2
 80123fa:	3334      	adds	r3, #52	; 0x34
 80123fc:	460a      	mov	r2, r1
 80123fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	4413      	add	r3, r2
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d006      	beq.n	801241a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	3301      	adds	r3, #1
 8012410:	61fb      	str	r3, [r7, #28]
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	2b0f      	cmp	r3, #15
 8012416:	d9e9      	bls.n	80123ec <prvInitialiseNewTask+0x68>
 8012418:	e000      	b.n	801241c <prvInitialiseNewTask+0x98>
			{
				break;
 801241a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241e:	2200      	movs	r2, #0
 8012420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012424:	e003      	b.n	801242e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012428:	2200      	movs	r2, #0
 801242a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	2b37      	cmp	r3, #55	; 0x37
 8012432:	d901      	bls.n	8012438 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012434:	2337      	movs	r3, #55	; 0x37
 8012436:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801243c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012442:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012446:	2200      	movs	r2, #0
 8012448:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244c:	3304      	adds	r3, #4
 801244e:	4618      	mov	r0, r3
 8012450:	f7fe fb12 	bl	8010a78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012456:	3318      	adds	r3, #24
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe fb0d 	bl	8010a78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012462:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012472:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012476:	2200      	movs	r2, #0
 8012478:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247c:	2200      	movs	r2, #0
 801247e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	2200      	movs	r2, #0
 8012484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012488:	683a      	ldr	r2, [r7, #0]
 801248a:	68f9      	ldr	r1, [r7, #12]
 801248c:	69b8      	ldr	r0, [r7, #24]
 801248e:	f7fe fb87 	bl	8010ba0 <pxPortInitialiseStack>
 8012492:	4602      	mov	r2, r0
 8012494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012496:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249a:	2b00      	cmp	r3, #0
 801249c:	d002      	beq.n	80124a4 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124a4:	bf00      	nop
 80124a6:	3720      	adds	r7, #32
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80124b4:	f7fe fc82 	bl	8010dbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80124b8:	4b2d      	ldr	r3, [pc, #180]	; (8012570 <prvAddNewTaskToReadyList+0xc4>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	3301      	adds	r3, #1
 80124be:	4a2c      	ldr	r2, [pc, #176]	; (8012570 <prvAddNewTaskToReadyList+0xc4>)
 80124c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80124c2:	4b2c      	ldr	r3, [pc, #176]	; (8012574 <prvAddNewTaskToReadyList+0xc8>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d109      	bne.n	80124de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80124ca:	4a2a      	ldr	r2, [pc, #168]	; (8012574 <prvAddNewTaskToReadyList+0xc8>)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80124d0:	4b27      	ldr	r3, [pc, #156]	; (8012570 <prvAddNewTaskToReadyList+0xc4>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	d110      	bne.n	80124fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80124d8:	f000 fc64 	bl	8012da4 <prvInitialiseTaskLists>
 80124dc:	e00d      	b.n	80124fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80124de:	4b26      	ldr	r3, [pc, #152]	; (8012578 <prvAddNewTaskToReadyList+0xcc>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d109      	bne.n	80124fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80124e6:	4b23      	ldr	r3, [pc, #140]	; (8012574 <prvAddNewTaskToReadyList+0xc8>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d802      	bhi.n	80124fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80124f4:	4a1f      	ldr	r2, [pc, #124]	; (8012574 <prvAddNewTaskToReadyList+0xc8>)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80124fa:	4b20      	ldr	r3, [pc, #128]	; (801257c <prvAddNewTaskToReadyList+0xd0>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	3301      	adds	r3, #1
 8012500:	4a1e      	ldr	r2, [pc, #120]	; (801257c <prvAddNewTaskToReadyList+0xd0>)
 8012502:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012504:	4b1d      	ldr	r3, [pc, #116]	; (801257c <prvAddNewTaskToReadyList+0xd0>)
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012510:	4b1b      	ldr	r3, [pc, #108]	; (8012580 <prvAddNewTaskToReadyList+0xd4>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	429a      	cmp	r2, r3
 8012516:	d903      	bls.n	8012520 <prvAddNewTaskToReadyList+0x74>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801251c:	4a18      	ldr	r2, [pc, #96]	; (8012580 <prvAddNewTaskToReadyList+0xd4>)
 801251e:	6013      	str	r3, [r2, #0]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012524:	4613      	mov	r3, r2
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	4413      	add	r3, r2
 801252a:	009b      	lsls	r3, r3, #2
 801252c:	4a15      	ldr	r2, [pc, #84]	; (8012584 <prvAddNewTaskToReadyList+0xd8>)
 801252e:	441a      	add	r2, r3
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	3304      	adds	r3, #4
 8012534:	4619      	mov	r1, r3
 8012536:	4610      	mov	r0, r2
 8012538:	f7fe faab 	bl	8010a92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801253c:	f7fe fc72 	bl	8010e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012540:	4b0d      	ldr	r3, [pc, #52]	; (8012578 <prvAddNewTaskToReadyList+0xcc>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d00e      	beq.n	8012566 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012548:	4b0a      	ldr	r3, [pc, #40]	; (8012574 <prvAddNewTaskToReadyList+0xc8>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012552:	429a      	cmp	r2, r3
 8012554:	d207      	bcs.n	8012566 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012556:	4b0c      	ldr	r3, [pc, #48]	; (8012588 <prvAddNewTaskToReadyList+0xdc>)
 8012558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801255c:	601a      	str	r2, [r3, #0]
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012566:	bf00      	nop
 8012568:	3708      	adds	r7, #8
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
 801256e:	bf00      	nop
 8012570:	20008e04 	.word	0x20008e04
 8012574:	20008930 	.word	0x20008930
 8012578:	20008e10 	.word	0x20008e10
 801257c:	20008e20 	.word	0x20008e20
 8012580:	20008e0c 	.word	0x20008e0c
 8012584:	20008934 	.word	0x20008934
 8012588:	e000ed04 	.word	0xe000ed04

0801258c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012594:	2300      	movs	r3, #0
 8012596:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d019      	beq.n	80125d2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801259e:	4b14      	ldr	r3, [pc, #80]	; (80125f0 <vTaskDelay+0x64>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00c      	beq.n	80125c0 <vTaskDelay+0x34>
	__asm volatile
 80125a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125aa:	b672      	cpsid	i
 80125ac:	f383 8811 	msr	BASEPRI, r3
 80125b0:	f3bf 8f6f 	isb	sy
 80125b4:	f3bf 8f4f 	dsb	sy
 80125b8:	b662      	cpsie	i
 80125ba:	60bb      	str	r3, [r7, #8]
}
 80125bc:	bf00      	nop
 80125be:	e7fe      	b.n	80125be <vTaskDelay+0x32>
			vTaskSuspendAll();
 80125c0:	f000 f884 	bl	80126cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80125c4:	2100      	movs	r1, #0
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f000 fe4e 	bl	8013268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80125cc:	f000 f88c 	bl	80126e8 <xTaskResumeAll>
 80125d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d107      	bne.n	80125e8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80125d8:	4b06      	ldr	r3, [pc, #24]	; (80125f4 <vTaskDelay+0x68>)
 80125da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125de:	601a      	str	r2, [r3, #0]
 80125e0:	f3bf 8f4f 	dsb	sy
 80125e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125e8:	bf00      	nop
 80125ea:	3710      	adds	r7, #16
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}
 80125f0:	20008e2c 	.word	0x20008e2c
 80125f4:	e000ed04 	.word	0xe000ed04

080125f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b08a      	sub	sp, #40	; 0x28
 80125fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80125fe:	2300      	movs	r3, #0
 8012600:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012602:	2300      	movs	r3, #0
 8012604:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012606:	463a      	mov	r2, r7
 8012608:	1d39      	adds	r1, r7, #4
 801260a:	f107 0308 	add.w	r3, r7, #8
 801260e:	4618      	mov	r0, r3
 8012610:	f7fd fff4 	bl	80105fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012614:	6839      	ldr	r1, [r7, #0]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	68ba      	ldr	r2, [r7, #8]
 801261a:	9202      	str	r2, [sp, #8]
 801261c:	9301      	str	r3, [sp, #4]
 801261e:	2300      	movs	r3, #0
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	2300      	movs	r3, #0
 8012624:	460a      	mov	r2, r1
 8012626:	4923      	ldr	r1, [pc, #140]	; (80126b4 <vTaskStartScheduler+0xbc>)
 8012628:	4823      	ldr	r0, [pc, #140]	; (80126b8 <vTaskStartScheduler+0xc0>)
 801262a:	f7ff fe03 	bl	8012234 <xTaskCreateStatic>
 801262e:	4603      	mov	r3, r0
 8012630:	4a22      	ldr	r2, [pc, #136]	; (80126bc <vTaskStartScheduler+0xc4>)
 8012632:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012634:	4b21      	ldr	r3, [pc, #132]	; (80126bc <vTaskStartScheduler+0xc4>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801263c:	2301      	movs	r3, #1
 801263e:	617b      	str	r3, [r7, #20]
 8012640:	e001      	b.n	8012646 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012642:	2300      	movs	r3, #0
 8012644:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	2b01      	cmp	r3, #1
 801264a:	d102      	bne.n	8012652 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801264c:	f000 fe60 	bl	8013310 <xTimerCreateTimerTask>
 8012650:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d118      	bne.n	801268a <vTaskStartScheduler+0x92>
	__asm volatile
 8012658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265c:	b672      	cpsid	i
 801265e:	f383 8811 	msr	BASEPRI, r3
 8012662:	f3bf 8f6f 	isb	sy
 8012666:	f3bf 8f4f 	dsb	sy
 801266a:	b662      	cpsie	i
 801266c:	613b      	str	r3, [r7, #16]
}
 801266e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012670:	4b13      	ldr	r3, [pc, #76]	; (80126c0 <vTaskStartScheduler+0xc8>)
 8012672:	f04f 32ff 	mov.w	r2, #4294967295
 8012676:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012678:	4b12      	ldr	r3, [pc, #72]	; (80126c4 <vTaskStartScheduler+0xcc>)
 801267a:	2201      	movs	r2, #1
 801267c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801267e:	4b12      	ldr	r3, [pc, #72]	; (80126c8 <vTaskStartScheduler+0xd0>)
 8012680:	2200      	movs	r2, #0
 8012682:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012684:	f7fe fb1c 	bl	8010cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012688:	e010      	b.n	80126ac <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012690:	d10c      	bne.n	80126ac <vTaskStartScheduler+0xb4>
	__asm volatile
 8012692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012696:	b672      	cpsid	i
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	b662      	cpsie	i
 80126a6:	60fb      	str	r3, [r7, #12]
}
 80126a8:	bf00      	nop
 80126aa:	e7fe      	b.n	80126aa <vTaskStartScheduler+0xb2>
}
 80126ac:	bf00      	nop
 80126ae:	3718      	adds	r7, #24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	080228b0 	.word	0x080228b0
 80126b8:	08012d71 	.word	0x08012d71
 80126bc:	20008e28 	.word	0x20008e28
 80126c0:	20008e24 	.word	0x20008e24
 80126c4:	20008e10 	.word	0x20008e10
 80126c8:	20008e08 	.word	0x20008e08

080126cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80126cc:	b480      	push	{r7}
 80126ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80126d0:	4b04      	ldr	r3, [pc, #16]	; (80126e4 <vTaskSuspendAll+0x18>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	3301      	adds	r3, #1
 80126d6:	4a03      	ldr	r2, [pc, #12]	; (80126e4 <vTaskSuspendAll+0x18>)
 80126d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80126da:	bf00      	nop
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr
 80126e4:	20008e2c 	.word	0x20008e2c

080126e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80126ee:	2300      	movs	r3, #0
 80126f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80126f2:	2300      	movs	r3, #0
 80126f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80126f6:	4b43      	ldr	r3, [pc, #268]	; (8012804 <xTaskResumeAll+0x11c>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d10c      	bne.n	8012718 <xTaskResumeAll+0x30>
	__asm volatile
 80126fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012702:	b672      	cpsid	i
 8012704:	f383 8811 	msr	BASEPRI, r3
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	b662      	cpsie	i
 8012712:	603b      	str	r3, [r7, #0]
}
 8012714:	bf00      	nop
 8012716:	e7fe      	b.n	8012716 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012718:	f7fe fb50 	bl	8010dbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801271c:	4b39      	ldr	r3, [pc, #228]	; (8012804 <xTaskResumeAll+0x11c>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	3b01      	subs	r3, #1
 8012722:	4a38      	ldr	r2, [pc, #224]	; (8012804 <xTaskResumeAll+0x11c>)
 8012724:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012726:	4b37      	ldr	r3, [pc, #220]	; (8012804 <xTaskResumeAll+0x11c>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d162      	bne.n	80127f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801272e:	4b36      	ldr	r3, [pc, #216]	; (8012808 <xTaskResumeAll+0x120>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d05e      	beq.n	80127f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012736:	e02f      	b.n	8012798 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012738:	4b34      	ldr	r3, [pc, #208]	; (801280c <xTaskResumeAll+0x124>)
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	68db      	ldr	r3, [r3, #12]
 801273e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	3318      	adds	r3, #24
 8012744:	4618      	mov	r0, r3
 8012746:	f7fe fa01 	bl	8010b4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	3304      	adds	r3, #4
 801274e:	4618      	mov	r0, r3
 8012750:	f7fe f9fc 	bl	8010b4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012758:	4b2d      	ldr	r3, [pc, #180]	; (8012810 <xTaskResumeAll+0x128>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	429a      	cmp	r2, r3
 801275e:	d903      	bls.n	8012768 <xTaskResumeAll+0x80>
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012764:	4a2a      	ldr	r2, [pc, #168]	; (8012810 <xTaskResumeAll+0x128>)
 8012766:	6013      	str	r3, [r2, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801276c:	4613      	mov	r3, r2
 801276e:	009b      	lsls	r3, r3, #2
 8012770:	4413      	add	r3, r2
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	4a27      	ldr	r2, [pc, #156]	; (8012814 <xTaskResumeAll+0x12c>)
 8012776:	441a      	add	r2, r3
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	3304      	adds	r3, #4
 801277c:	4619      	mov	r1, r3
 801277e:	4610      	mov	r0, r2
 8012780:	f7fe f987 	bl	8010a92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012788:	4b23      	ldr	r3, [pc, #140]	; (8012818 <xTaskResumeAll+0x130>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801278e:	429a      	cmp	r2, r3
 8012790:	d302      	bcc.n	8012798 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012792:	4b22      	ldr	r3, [pc, #136]	; (801281c <xTaskResumeAll+0x134>)
 8012794:	2201      	movs	r2, #1
 8012796:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012798:	4b1c      	ldr	r3, [pc, #112]	; (801280c <xTaskResumeAll+0x124>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d1cb      	bne.n	8012738 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d001      	beq.n	80127aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80127a6:	f000 fb9d 	bl	8012ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80127aa:	4b1d      	ldr	r3, [pc, #116]	; (8012820 <xTaskResumeAll+0x138>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d010      	beq.n	80127d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80127b6:	f000 f859 	bl	801286c <xTaskIncrementTick>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d002      	beq.n	80127c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80127c0:	4b16      	ldr	r3, [pc, #88]	; (801281c <xTaskResumeAll+0x134>)
 80127c2:	2201      	movs	r2, #1
 80127c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	3b01      	subs	r3, #1
 80127ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1f1      	bne.n	80127b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80127d2:	4b13      	ldr	r3, [pc, #76]	; (8012820 <xTaskResumeAll+0x138>)
 80127d4:	2200      	movs	r2, #0
 80127d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80127d8:	4b10      	ldr	r3, [pc, #64]	; (801281c <xTaskResumeAll+0x134>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d009      	beq.n	80127f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80127e0:	2301      	movs	r3, #1
 80127e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80127e4:	4b0f      	ldr	r3, [pc, #60]	; (8012824 <xTaskResumeAll+0x13c>)
 80127e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ea:	601a      	str	r2, [r3, #0]
 80127ec:	f3bf 8f4f 	dsb	sy
 80127f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127f4:	f7fe fb16 	bl	8010e24 <vPortExitCritical>

	return xAlreadyYielded;
 80127f8:	68bb      	ldr	r3, [r7, #8]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	20008e2c 	.word	0x20008e2c
 8012808:	20008e04 	.word	0x20008e04
 801280c:	20008dc4 	.word	0x20008dc4
 8012810:	20008e0c 	.word	0x20008e0c
 8012814:	20008934 	.word	0x20008934
 8012818:	20008930 	.word	0x20008930
 801281c:	20008e18 	.word	0x20008e18
 8012820:	20008e14 	.word	0x20008e14
 8012824:	e000ed04 	.word	0xe000ed04

08012828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801282e:	4b05      	ldr	r3, [pc, #20]	; (8012844 <xTaskGetTickCount+0x1c>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012834:	687b      	ldr	r3, [r7, #4]
}
 8012836:	4618      	mov	r0, r3
 8012838:	370c      	adds	r7, #12
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr
 8012842:	bf00      	nop
 8012844:	20008e08 	.word	0x20008e08

08012848 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801284e:	f7fe fb9d 	bl	8010f8c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012852:	2300      	movs	r3, #0
 8012854:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012856:	4b04      	ldr	r3, [pc, #16]	; (8012868 <xTaskGetTickCountFromISR+0x20>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801285c:	683b      	ldr	r3, [r7, #0]
}
 801285e:	4618      	mov	r0, r3
 8012860:	3708      	adds	r7, #8
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	20008e08 	.word	0x20008e08

0801286c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012872:	2300      	movs	r3, #0
 8012874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012876:	4b50      	ldr	r3, [pc, #320]	; (80129b8 <xTaskIncrementTick+0x14c>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	f040 808b 	bne.w	8012996 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012880:	4b4e      	ldr	r3, [pc, #312]	; (80129bc <xTaskIncrementTick+0x150>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	3301      	adds	r3, #1
 8012886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012888:	4a4c      	ldr	r2, [pc, #304]	; (80129bc <xTaskIncrementTick+0x150>)
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d122      	bne.n	80128da <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8012894:	4b4a      	ldr	r3, [pc, #296]	; (80129c0 <xTaskIncrementTick+0x154>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d00c      	beq.n	80128b8 <xTaskIncrementTick+0x4c>
	__asm volatile
 801289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a2:	b672      	cpsid	i
 80128a4:	f383 8811 	msr	BASEPRI, r3
 80128a8:	f3bf 8f6f 	isb	sy
 80128ac:	f3bf 8f4f 	dsb	sy
 80128b0:	b662      	cpsie	i
 80128b2:	603b      	str	r3, [r7, #0]
}
 80128b4:	bf00      	nop
 80128b6:	e7fe      	b.n	80128b6 <xTaskIncrementTick+0x4a>
 80128b8:	4b41      	ldr	r3, [pc, #260]	; (80129c0 <xTaskIncrementTick+0x154>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	60fb      	str	r3, [r7, #12]
 80128be:	4b41      	ldr	r3, [pc, #260]	; (80129c4 <xTaskIncrementTick+0x158>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4a3f      	ldr	r2, [pc, #252]	; (80129c0 <xTaskIncrementTick+0x154>)
 80128c4:	6013      	str	r3, [r2, #0]
 80128c6:	4a3f      	ldr	r2, [pc, #252]	; (80129c4 <xTaskIncrementTick+0x158>)
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	4b3e      	ldr	r3, [pc, #248]	; (80129c8 <xTaskIncrementTick+0x15c>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	3301      	adds	r3, #1
 80128d2:	4a3d      	ldr	r2, [pc, #244]	; (80129c8 <xTaskIncrementTick+0x15c>)
 80128d4:	6013      	str	r3, [r2, #0]
 80128d6:	f000 fb05 	bl	8012ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80128da:	4b3c      	ldr	r3, [pc, #240]	; (80129cc <xTaskIncrementTick+0x160>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	693a      	ldr	r2, [r7, #16]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d349      	bcc.n	8012978 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128e4:	4b36      	ldr	r3, [pc, #216]	; (80129c0 <xTaskIncrementTick+0x154>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d104      	bne.n	80128f8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128ee:	4b37      	ldr	r3, [pc, #220]	; (80129cc <xTaskIncrementTick+0x160>)
 80128f0:	f04f 32ff 	mov.w	r2, #4294967295
 80128f4:	601a      	str	r2, [r3, #0]
					break;
 80128f6:	e03f      	b.n	8012978 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128f8:	4b31      	ldr	r3, [pc, #196]	; (80129c0 <xTaskIncrementTick+0x154>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012908:	693a      	ldr	r2, [r7, #16]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	429a      	cmp	r2, r3
 801290e:	d203      	bcs.n	8012918 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012910:	4a2e      	ldr	r2, [pc, #184]	; (80129cc <xTaskIncrementTick+0x160>)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012916:	e02f      	b.n	8012978 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	3304      	adds	r3, #4
 801291c:	4618      	mov	r0, r3
 801291e:	f7fe f915 	bl	8010b4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012926:	2b00      	cmp	r3, #0
 8012928:	d004      	beq.n	8012934 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	3318      	adds	r3, #24
 801292e:	4618      	mov	r0, r3
 8012930:	f7fe f90c 	bl	8010b4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012938:	4b25      	ldr	r3, [pc, #148]	; (80129d0 <xTaskIncrementTick+0x164>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	429a      	cmp	r2, r3
 801293e:	d903      	bls.n	8012948 <xTaskIncrementTick+0xdc>
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012944:	4a22      	ldr	r2, [pc, #136]	; (80129d0 <xTaskIncrementTick+0x164>)
 8012946:	6013      	str	r3, [r2, #0]
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801294c:	4613      	mov	r3, r2
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	4413      	add	r3, r2
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4a1f      	ldr	r2, [pc, #124]	; (80129d4 <xTaskIncrementTick+0x168>)
 8012956:	441a      	add	r2, r3
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	3304      	adds	r3, #4
 801295c:	4619      	mov	r1, r3
 801295e:	4610      	mov	r0, r2
 8012960:	f7fe f897 	bl	8010a92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012968:	4b1b      	ldr	r3, [pc, #108]	; (80129d8 <xTaskIncrementTick+0x16c>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296e:	429a      	cmp	r2, r3
 8012970:	d3b8      	bcc.n	80128e4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012972:	2301      	movs	r3, #1
 8012974:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012976:	e7b5      	b.n	80128e4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012978:	4b17      	ldr	r3, [pc, #92]	; (80129d8 <xTaskIncrementTick+0x16c>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801297e:	4915      	ldr	r1, [pc, #84]	; (80129d4 <xTaskIncrementTick+0x168>)
 8012980:	4613      	mov	r3, r2
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	4413      	add	r3, r2
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	440b      	add	r3, r1
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2b01      	cmp	r3, #1
 801298e:	d907      	bls.n	80129a0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8012990:	2301      	movs	r3, #1
 8012992:	617b      	str	r3, [r7, #20]
 8012994:	e004      	b.n	80129a0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012996:	4b11      	ldr	r3, [pc, #68]	; (80129dc <xTaskIncrementTick+0x170>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	3301      	adds	r3, #1
 801299c:	4a0f      	ldr	r2, [pc, #60]	; (80129dc <xTaskIncrementTick+0x170>)
 801299e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80129a0:	4b0f      	ldr	r3, [pc, #60]	; (80129e0 <xTaskIncrementTick+0x174>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d001      	beq.n	80129ac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80129a8:	2301      	movs	r3, #1
 80129aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80129ac:	697b      	ldr	r3, [r7, #20]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3718      	adds	r7, #24
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	20008e2c 	.word	0x20008e2c
 80129bc:	20008e08 	.word	0x20008e08
 80129c0:	20008dbc 	.word	0x20008dbc
 80129c4:	20008dc0 	.word	0x20008dc0
 80129c8:	20008e1c 	.word	0x20008e1c
 80129cc:	20008e24 	.word	0x20008e24
 80129d0:	20008e0c 	.word	0x20008e0c
 80129d4:	20008934 	.word	0x20008934
 80129d8:	20008930 	.word	0x20008930
 80129dc:	20008e14 	.word	0x20008e14
 80129e0:	20008e18 	.word	0x20008e18

080129e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b086      	sub	sp, #24
 80129e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80129ea:	4b3b      	ldr	r3, [pc, #236]	; (8012ad8 <vTaskSwitchContext+0xf4>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d003      	beq.n	80129fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80129f2:	4b3a      	ldr	r3, [pc, #232]	; (8012adc <vTaskSwitchContext+0xf8>)
 80129f4:	2201      	movs	r2, #1
 80129f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80129f8:	e06a      	b.n	8012ad0 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 80129fa:	4b38      	ldr	r3, [pc, #224]	; (8012adc <vTaskSwitchContext+0xf8>)
 80129fc:	2200      	movs	r2, #0
 80129fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012a00:	4b37      	ldr	r3, [pc, #220]	; (8012ae0 <vTaskSwitchContext+0xfc>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a06:	613b      	str	r3, [r7, #16]
 8012a08:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012a0c:	60fb      	str	r3, [r7, #12]
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	68fa      	ldr	r2, [r7, #12]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d111      	bne.n	8012a3c <vTaskSwitchContext+0x58>
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	68fa      	ldr	r2, [r7, #12]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d10b      	bne.n	8012a3c <vTaskSwitchContext+0x58>
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	3308      	adds	r3, #8
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d105      	bne.n	8012a3c <vTaskSwitchContext+0x58>
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	330c      	adds	r3, #12
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d008      	beq.n	8012a4e <vTaskSwitchContext+0x6a>
 8012a3c:	4b28      	ldr	r3, [pc, #160]	; (8012ae0 <vTaskSwitchContext+0xfc>)
 8012a3e:	681a      	ldr	r2, [r3, #0]
 8012a40:	4b27      	ldr	r3, [pc, #156]	; (8012ae0 <vTaskSwitchContext+0xfc>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	3334      	adds	r3, #52	; 0x34
 8012a46:	4619      	mov	r1, r3
 8012a48:	4610      	mov	r0, r2
 8012a4a:	f7ee f8d6 	bl	8000bfa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a4e:	4b25      	ldr	r3, [pc, #148]	; (8012ae4 <vTaskSwitchContext+0x100>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	617b      	str	r3, [r7, #20]
 8012a54:	e012      	b.n	8012a7c <vTaskSwitchContext+0x98>
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d10c      	bne.n	8012a76 <vTaskSwitchContext+0x92>
	__asm volatile
 8012a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a60:	b672      	cpsid	i
 8012a62:	f383 8811 	msr	BASEPRI, r3
 8012a66:	f3bf 8f6f 	isb	sy
 8012a6a:	f3bf 8f4f 	dsb	sy
 8012a6e:	b662      	cpsie	i
 8012a70:	607b      	str	r3, [r7, #4]
}
 8012a72:	bf00      	nop
 8012a74:	e7fe      	b.n	8012a74 <vTaskSwitchContext+0x90>
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	3b01      	subs	r3, #1
 8012a7a:	617b      	str	r3, [r7, #20]
 8012a7c:	491a      	ldr	r1, [pc, #104]	; (8012ae8 <vTaskSwitchContext+0x104>)
 8012a7e:	697a      	ldr	r2, [r7, #20]
 8012a80:	4613      	mov	r3, r2
 8012a82:	009b      	lsls	r3, r3, #2
 8012a84:	4413      	add	r3, r2
 8012a86:	009b      	lsls	r3, r3, #2
 8012a88:	440b      	add	r3, r1
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d0e2      	beq.n	8012a56 <vTaskSwitchContext+0x72>
 8012a90:	697a      	ldr	r2, [r7, #20]
 8012a92:	4613      	mov	r3, r2
 8012a94:	009b      	lsls	r3, r3, #2
 8012a96:	4413      	add	r3, r2
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	4a13      	ldr	r2, [pc, #76]	; (8012ae8 <vTaskSwitchContext+0x104>)
 8012a9c:	4413      	add	r3, r2
 8012a9e:	60bb      	str	r3, [r7, #8]
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	685a      	ldr	r2, [r3, #4]
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	605a      	str	r2, [r3, #4]
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	685a      	ldr	r2, [r3, #4]
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	3308      	adds	r3, #8
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d104      	bne.n	8012ac0 <vTaskSwitchContext+0xdc>
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	685a      	ldr	r2, [r3, #4]
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	605a      	str	r2, [r3, #4]
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	4a06      	ldr	r2, [pc, #24]	; (8012ae0 <vTaskSwitchContext+0xfc>)
 8012ac8:	6013      	str	r3, [r2, #0]
 8012aca:	4a06      	ldr	r2, [pc, #24]	; (8012ae4 <vTaskSwitchContext+0x100>)
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	6013      	str	r3, [r2, #0]
}
 8012ad0:	bf00      	nop
 8012ad2:	3718      	adds	r7, #24
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	20008e2c 	.word	0x20008e2c
 8012adc:	20008e18 	.word	0x20008e18
 8012ae0:	20008930 	.word	0x20008930
 8012ae4:	20008e0c 	.word	0x20008e0c
 8012ae8:	20008934 	.word	0x20008934

08012aec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d10c      	bne.n	8012b16 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b00:	b672      	cpsid	i
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	b662      	cpsie	i
 8012b10:	60fb      	str	r3, [r7, #12]
}
 8012b12:	bf00      	nop
 8012b14:	e7fe      	b.n	8012b14 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b16:	4b07      	ldr	r3, [pc, #28]	; (8012b34 <vTaskPlaceOnEventList+0x48>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	3318      	adds	r3, #24
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f7fd ffdb 	bl	8010ada <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012b24:	2101      	movs	r1, #1
 8012b26:	6838      	ldr	r0, [r7, #0]
 8012b28:	f000 fb9e 	bl	8013268 <prvAddCurrentTaskToDelayedList>
}
 8012b2c:	bf00      	nop
 8012b2e:	3710      	adds	r7, #16
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	20008930 	.word	0x20008930

08012b38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b086      	sub	sp, #24
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d10c      	bne.n	8012b64 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8012b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b4e:	b672      	cpsid	i
 8012b50:	f383 8811 	msr	BASEPRI, r3
 8012b54:	f3bf 8f6f 	isb	sy
 8012b58:	f3bf 8f4f 	dsb	sy
 8012b5c:	b662      	cpsie	i
 8012b5e:	617b      	str	r3, [r7, #20]
}
 8012b60:	bf00      	nop
 8012b62:	e7fe      	b.n	8012b62 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b64:	4b0a      	ldr	r3, [pc, #40]	; (8012b90 <vTaskPlaceOnEventListRestricted+0x58>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	3318      	adds	r3, #24
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f7fd ff90 	bl	8010a92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8012b78:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012b7e:	6879      	ldr	r1, [r7, #4]
 8012b80:	68b8      	ldr	r0, [r7, #8]
 8012b82:	f000 fb71 	bl	8013268 <prvAddCurrentTaskToDelayedList>
	}
 8012b86:	bf00      	nop
 8012b88:	3718      	adds	r7, #24
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	20008930 	.word	0x20008930

08012b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b086      	sub	sp, #24
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d10c      	bne.n	8012bc4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8012baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bae:	b672      	cpsid	i
 8012bb0:	f383 8811 	msr	BASEPRI, r3
 8012bb4:	f3bf 8f6f 	isb	sy
 8012bb8:	f3bf 8f4f 	dsb	sy
 8012bbc:	b662      	cpsie	i
 8012bbe:	60fb      	str	r3, [r7, #12]
}
 8012bc0:	bf00      	nop
 8012bc2:	e7fe      	b.n	8012bc2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	3318      	adds	r3, #24
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fd ffbf 	bl	8010b4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bce:	4b1e      	ldr	r3, [pc, #120]	; (8012c48 <xTaskRemoveFromEventList+0xb4>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d11d      	bne.n	8012c12 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	3304      	adds	r3, #4
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fd ffb6 	bl	8010b4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be4:	4b19      	ldr	r3, [pc, #100]	; (8012c4c <xTaskRemoveFromEventList+0xb8>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d903      	bls.n	8012bf4 <xTaskRemoveFromEventList+0x60>
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf0:	4a16      	ldr	r2, [pc, #88]	; (8012c4c <xTaskRemoveFromEventList+0xb8>)
 8012bf2:	6013      	str	r3, [r2, #0]
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	4413      	add	r3, r2
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4a13      	ldr	r2, [pc, #76]	; (8012c50 <xTaskRemoveFromEventList+0xbc>)
 8012c02:	441a      	add	r2, r3
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	3304      	adds	r3, #4
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	f7fd ff41 	bl	8010a92 <vListInsertEnd>
 8012c10:	e005      	b.n	8012c1e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	3318      	adds	r3, #24
 8012c16:	4619      	mov	r1, r3
 8012c18:	480e      	ldr	r0, [pc, #56]	; (8012c54 <xTaskRemoveFromEventList+0xc0>)
 8012c1a:	f7fd ff3a 	bl	8010a92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c22:	4b0d      	ldr	r3, [pc, #52]	; (8012c58 <xTaskRemoveFromEventList+0xc4>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d905      	bls.n	8012c38 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012c30:	4b0a      	ldr	r3, [pc, #40]	; (8012c5c <xTaskRemoveFromEventList+0xc8>)
 8012c32:	2201      	movs	r2, #1
 8012c34:	601a      	str	r2, [r3, #0]
 8012c36:	e001      	b.n	8012c3c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012c3c:	697b      	ldr	r3, [r7, #20]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3718      	adds	r7, #24
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	20008e2c 	.word	0x20008e2c
 8012c4c:	20008e0c 	.word	0x20008e0c
 8012c50:	20008934 	.word	0x20008934
 8012c54:	20008dc4 	.word	0x20008dc4
 8012c58:	20008930 	.word	0x20008930
 8012c5c:	20008e18 	.word	0x20008e18

08012c60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012c68:	4b06      	ldr	r3, [pc, #24]	; (8012c84 <vTaskInternalSetTimeOutState+0x24>)
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012c70:	4b05      	ldr	r3, [pc, #20]	; (8012c88 <vTaskInternalSetTimeOutState+0x28>)
 8012c72:	681a      	ldr	r2, [r3, #0]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	605a      	str	r2, [r3, #4]
}
 8012c78:	bf00      	nop
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr
 8012c84:	20008e1c 	.word	0x20008e1c
 8012c88:	20008e08 	.word	0x20008e08

08012c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b088      	sub	sp, #32
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d10c      	bne.n	8012cb6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca0:	b672      	cpsid	i
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	b662      	cpsie	i
 8012cb0:	613b      	str	r3, [r7, #16]
}
 8012cb2:	bf00      	nop
 8012cb4:	e7fe      	b.n	8012cb4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d10c      	bne.n	8012cd6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8012cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc0:	b672      	cpsid	i
 8012cc2:	f383 8811 	msr	BASEPRI, r3
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	b662      	cpsie	i
 8012cd0:	60fb      	str	r3, [r7, #12]
}
 8012cd2:	bf00      	nop
 8012cd4:	e7fe      	b.n	8012cd4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8012cd6:	f7fe f871 	bl	8010dbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012cda:	4b1d      	ldr	r3, [pc, #116]	; (8012d50 <xTaskCheckForTimeOut+0xc4>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	69ba      	ldr	r2, [r7, #24]
 8012ce6:	1ad3      	subs	r3, r2, r3
 8012ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cf2:	d102      	bne.n	8012cfa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	61fb      	str	r3, [r7, #28]
 8012cf8:	e023      	b.n	8012d42 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	4b15      	ldr	r3, [pc, #84]	; (8012d54 <xTaskCheckForTimeOut+0xc8>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d007      	beq.n	8012d16 <xTaskCheckForTimeOut+0x8a>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	69ba      	ldr	r2, [r7, #24]
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d302      	bcc.n	8012d16 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012d10:	2301      	movs	r3, #1
 8012d12:	61fb      	str	r3, [r7, #28]
 8012d14:	e015      	b.n	8012d42 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	697a      	ldr	r2, [r7, #20]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d20b      	bcs.n	8012d38 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	1ad2      	subs	r2, r2, r3
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f7ff ff97 	bl	8012c60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012d32:	2300      	movs	r3, #0
 8012d34:	61fb      	str	r3, [r7, #28]
 8012d36:	e004      	b.n	8012d42 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012d42:	f7fe f86f 	bl	8010e24 <vPortExitCritical>

	return xReturn;
 8012d46:	69fb      	ldr	r3, [r7, #28]
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3720      	adds	r7, #32
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	20008e08 	.word	0x20008e08
 8012d54:	20008e1c 	.word	0x20008e1c

08012d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012d58:	b480      	push	{r7}
 8012d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012d5c:	4b03      	ldr	r3, [pc, #12]	; (8012d6c <vTaskMissedYield+0x14>)
 8012d5e:	2201      	movs	r2, #1
 8012d60:	601a      	str	r2, [r3, #0]
}
 8012d62:	bf00      	nop
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr
 8012d6c:	20008e18 	.word	0x20008e18

08012d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012d78:	f000 f854 	bl	8012e24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012d7c:	4b07      	ldr	r3, [pc, #28]	; (8012d9c <prvIdleTask+0x2c>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d907      	bls.n	8012d94 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012d84:	4b06      	ldr	r3, [pc, #24]	; (8012da0 <prvIdleTask+0x30>)
 8012d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d8a:	601a      	str	r2, [r3, #0]
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012d94:	f7ed ff2a 	bl	8000bec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012d98:	e7ee      	b.n	8012d78 <prvIdleTask+0x8>
 8012d9a:	bf00      	nop
 8012d9c:	20008934 	.word	0x20008934
 8012da0:	e000ed04 	.word	0xe000ed04

08012da4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012daa:	2300      	movs	r3, #0
 8012dac:	607b      	str	r3, [r7, #4]
 8012dae:	e00c      	b.n	8012dca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	4613      	mov	r3, r2
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	4413      	add	r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	4a12      	ldr	r2, [pc, #72]	; (8012e04 <prvInitialiseTaskLists+0x60>)
 8012dbc:	4413      	add	r3, r2
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fd fe3a 	bl	8010a38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	607b      	str	r3, [r7, #4]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2b37      	cmp	r3, #55	; 0x37
 8012dce:	d9ef      	bls.n	8012db0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012dd0:	480d      	ldr	r0, [pc, #52]	; (8012e08 <prvInitialiseTaskLists+0x64>)
 8012dd2:	f7fd fe31 	bl	8010a38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012dd6:	480d      	ldr	r0, [pc, #52]	; (8012e0c <prvInitialiseTaskLists+0x68>)
 8012dd8:	f7fd fe2e 	bl	8010a38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012ddc:	480c      	ldr	r0, [pc, #48]	; (8012e10 <prvInitialiseTaskLists+0x6c>)
 8012dde:	f7fd fe2b 	bl	8010a38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012de2:	480c      	ldr	r0, [pc, #48]	; (8012e14 <prvInitialiseTaskLists+0x70>)
 8012de4:	f7fd fe28 	bl	8010a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012de8:	480b      	ldr	r0, [pc, #44]	; (8012e18 <prvInitialiseTaskLists+0x74>)
 8012dea:	f7fd fe25 	bl	8010a38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012dee:	4b0b      	ldr	r3, [pc, #44]	; (8012e1c <prvInitialiseTaskLists+0x78>)
 8012df0:	4a05      	ldr	r2, [pc, #20]	; (8012e08 <prvInitialiseTaskLists+0x64>)
 8012df2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012df4:	4b0a      	ldr	r3, [pc, #40]	; (8012e20 <prvInitialiseTaskLists+0x7c>)
 8012df6:	4a05      	ldr	r2, [pc, #20]	; (8012e0c <prvInitialiseTaskLists+0x68>)
 8012df8:	601a      	str	r2, [r3, #0]
}
 8012dfa:	bf00      	nop
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	20008934 	.word	0x20008934
 8012e08:	20008d94 	.word	0x20008d94
 8012e0c:	20008da8 	.word	0x20008da8
 8012e10:	20008dc4 	.word	0x20008dc4
 8012e14:	20008dd8 	.word	0x20008dd8
 8012e18:	20008df0 	.word	0x20008df0
 8012e1c:	20008dbc 	.word	0x20008dbc
 8012e20:	20008dc0 	.word	0x20008dc0

08012e24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e2a:	e019      	b.n	8012e60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012e2c:	f7fd ffc6 	bl	8010dbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e30:	4b10      	ldr	r3, [pc, #64]	; (8012e74 <prvCheckTasksWaitingTermination+0x50>)
 8012e32:	68db      	ldr	r3, [r3, #12]
 8012e34:	68db      	ldr	r3, [r3, #12]
 8012e36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	3304      	adds	r3, #4
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7fd fe85 	bl	8010b4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012e42:	4b0d      	ldr	r3, [pc, #52]	; (8012e78 <prvCheckTasksWaitingTermination+0x54>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	3b01      	subs	r3, #1
 8012e48:	4a0b      	ldr	r2, [pc, #44]	; (8012e78 <prvCheckTasksWaitingTermination+0x54>)
 8012e4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012e4c:	4b0b      	ldr	r3, [pc, #44]	; (8012e7c <prvCheckTasksWaitingTermination+0x58>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	3b01      	subs	r3, #1
 8012e52:	4a0a      	ldr	r2, [pc, #40]	; (8012e7c <prvCheckTasksWaitingTermination+0x58>)
 8012e54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012e56:	f7fd ffe5 	bl	8010e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 f810 	bl	8012e80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e60:	4b06      	ldr	r3, [pc, #24]	; (8012e7c <prvCheckTasksWaitingTermination+0x58>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d1e1      	bne.n	8012e2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012e68:	bf00      	nop
 8012e6a:	bf00      	nop
 8012e6c:	3708      	adds	r7, #8
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20008dd8 	.word	0x20008dd8
 8012e78:	20008e04 	.word	0x20008e04
 8012e7c:	20008dec 	.word	0x20008dec

08012e80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d108      	bne.n	8012ea4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fd fcb4 	bl	8010804 <vPortFree>
				vPortFree( pxTCB );
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7fd fcb1 	bl	8010804 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012ea2:	e01a      	b.n	8012eda <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d103      	bne.n	8012eb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f7fd fca8 	bl	8010804 <vPortFree>
	}
 8012eb4:	e011      	b.n	8012eda <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012ebc:	2b02      	cmp	r3, #2
 8012ebe:	d00c      	beq.n	8012eda <prvDeleteTCB+0x5a>
	__asm volatile
 8012ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec4:	b672      	cpsid	i
 8012ec6:	f383 8811 	msr	BASEPRI, r3
 8012eca:	f3bf 8f6f 	isb	sy
 8012ece:	f3bf 8f4f 	dsb	sy
 8012ed2:	b662      	cpsie	i
 8012ed4:	60fb      	str	r3, [r7, #12]
}
 8012ed6:	bf00      	nop
 8012ed8:	e7fe      	b.n	8012ed8 <prvDeleteTCB+0x58>
	}
 8012eda:	bf00      	nop
 8012edc:	3710      	adds	r7, #16
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
	...

08012ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012eea:	4b0c      	ldr	r3, [pc, #48]	; (8012f1c <prvResetNextTaskUnblockTime+0x38>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d104      	bne.n	8012efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012ef4:	4b0a      	ldr	r3, [pc, #40]	; (8012f20 <prvResetNextTaskUnblockTime+0x3c>)
 8012ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8012efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012efc:	e008      	b.n	8012f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012efe:	4b07      	ldr	r3, [pc, #28]	; (8012f1c <prvResetNextTaskUnblockTime+0x38>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	4a04      	ldr	r2, [pc, #16]	; (8012f20 <prvResetNextTaskUnblockTime+0x3c>)
 8012f0e:	6013      	str	r3, [r2, #0]
}
 8012f10:	bf00      	nop
 8012f12:	370c      	adds	r7, #12
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr
 8012f1c:	20008dbc 	.word	0x20008dbc
 8012f20:	20008e24 	.word	0x20008e24

08012f24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012f24:	b480      	push	{r7}
 8012f26:	b083      	sub	sp, #12
 8012f28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012f2a:	4b05      	ldr	r3, [pc, #20]	; (8012f40 <xTaskGetCurrentTaskHandle+0x1c>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012f30:	687b      	ldr	r3, [r7, #4]
	}
 8012f32:	4618      	mov	r0, r3
 8012f34:	370c      	adds	r7, #12
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr
 8012f3e:	bf00      	nop
 8012f40:	20008930 	.word	0x20008930

08012f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012f4a:	4b0b      	ldr	r3, [pc, #44]	; (8012f78 <xTaskGetSchedulerState+0x34>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d102      	bne.n	8012f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012f52:	2301      	movs	r3, #1
 8012f54:	607b      	str	r3, [r7, #4]
 8012f56:	e008      	b.n	8012f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f58:	4b08      	ldr	r3, [pc, #32]	; (8012f7c <xTaskGetSchedulerState+0x38>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d102      	bne.n	8012f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012f60:	2302      	movs	r3, #2
 8012f62:	607b      	str	r3, [r7, #4]
 8012f64:	e001      	b.n	8012f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012f66:	2300      	movs	r3, #0
 8012f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012f6a:	687b      	ldr	r3, [r7, #4]
	}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	370c      	adds	r7, #12
 8012f70:	46bd      	mov	sp, r7
 8012f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f76:	4770      	bx	lr
 8012f78:	20008e10 	.word	0x20008e10
 8012f7c:	20008e2c 	.word	0x20008e2c

08012f80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d051      	beq.n	801303a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f9a:	4b2a      	ldr	r3, [pc, #168]	; (8013044 <xTaskPriorityInherit+0xc4>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d241      	bcs.n	8013028 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	699b      	ldr	r3, [r3, #24]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	db06      	blt.n	8012fba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fac:	4b25      	ldr	r3, [pc, #148]	; (8013044 <xTaskPriorityInherit+0xc4>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	6959      	ldr	r1, [r3, #20]
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	4413      	add	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	4a1f      	ldr	r2, [pc, #124]	; (8013048 <xTaskPriorityInherit+0xc8>)
 8012fcc:	4413      	add	r3, r2
 8012fce:	4299      	cmp	r1, r3
 8012fd0:	d122      	bne.n	8013018 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	3304      	adds	r3, #4
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fd fdb8 	bl	8010b4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012fdc:	4b19      	ldr	r3, [pc, #100]	; (8013044 <xTaskPriorityInherit+0xc4>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fea:	4b18      	ldr	r3, [pc, #96]	; (801304c <xTaskPriorityInherit+0xcc>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	d903      	bls.n	8012ffa <xTaskPriorityInherit+0x7a>
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff6:	4a15      	ldr	r2, [pc, #84]	; (801304c <xTaskPriorityInherit+0xcc>)
 8012ff8:	6013      	str	r3, [r2, #0]
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ffe:	4613      	mov	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	4a10      	ldr	r2, [pc, #64]	; (8013048 <xTaskPriorityInherit+0xc8>)
 8013008:	441a      	add	r2, r3
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	3304      	adds	r3, #4
 801300e:	4619      	mov	r1, r3
 8013010:	4610      	mov	r0, r2
 8013012:	f7fd fd3e 	bl	8010a92 <vListInsertEnd>
 8013016:	e004      	b.n	8013022 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013018:	4b0a      	ldr	r3, [pc, #40]	; (8013044 <xTaskPriorityInherit+0xc4>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013022:	2301      	movs	r3, #1
 8013024:	60fb      	str	r3, [r7, #12]
 8013026:	e008      	b.n	801303a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801302c:	4b05      	ldr	r3, [pc, #20]	; (8013044 <xTaskPriorityInherit+0xc4>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013032:	429a      	cmp	r2, r3
 8013034:	d201      	bcs.n	801303a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013036:	2301      	movs	r3, #1
 8013038:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801303a:	68fb      	ldr	r3, [r7, #12]
	}
 801303c:	4618      	mov	r0, r3
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	20008930 	.word	0x20008930
 8013048:	20008934 	.word	0x20008934
 801304c:	20008e0c 	.word	0x20008e0c

08013050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801305c:	2300      	movs	r3, #0
 801305e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d05a      	beq.n	801311c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013066:	4b30      	ldr	r3, [pc, #192]	; (8013128 <xTaskPriorityDisinherit+0xd8>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	693a      	ldr	r2, [r7, #16]
 801306c:	429a      	cmp	r2, r3
 801306e:	d00c      	beq.n	801308a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013074:	b672      	cpsid	i
 8013076:	f383 8811 	msr	BASEPRI, r3
 801307a:	f3bf 8f6f 	isb	sy
 801307e:	f3bf 8f4f 	dsb	sy
 8013082:	b662      	cpsie	i
 8013084:	60fb      	str	r3, [r7, #12]
}
 8013086:	bf00      	nop
 8013088:	e7fe      	b.n	8013088 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801308e:	2b00      	cmp	r3, #0
 8013090:	d10c      	bne.n	80130ac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8013092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013096:	b672      	cpsid	i
 8013098:	f383 8811 	msr	BASEPRI, r3
 801309c:	f3bf 8f6f 	isb	sy
 80130a0:	f3bf 8f4f 	dsb	sy
 80130a4:	b662      	cpsie	i
 80130a6:	60bb      	str	r3, [r7, #8]
}
 80130a8:	bf00      	nop
 80130aa:	e7fe      	b.n	80130aa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130b0:	1e5a      	subs	r2, r3, #1
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130be:	429a      	cmp	r2, r3
 80130c0:	d02c      	beq.n	801311c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d128      	bne.n	801311c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	3304      	adds	r3, #4
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fd fd3c 	bl	8010b4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ec:	4b0f      	ldr	r3, [pc, #60]	; (801312c <xTaskPriorityDisinherit+0xdc>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d903      	bls.n	80130fc <xTaskPriorityDisinherit+0xac>
 80130f4:	693b      	ldr	r3, [r7, #16]
 80130f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130f8:	4a0c      	ldr	r2, [pc, #48]	; (801312c <xTaskPriorityDisinherit+0xdc>)
 80130fa:	6013      	str	r3, [r2, #0]
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013100:	4613      	mov	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	4413      	add	r3, r2
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	4a09      	ldr	r2, [pc, #36]	; (8013130 <xTaskPriorityDisinherit+0xe0>)
 801310a:	441a      	add	r2, r3
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	3304      	adds	r3, #4
 8013110:	4619      	mov	r1, r3
 8013112:	4610      	mov	r0, r2
 8013114:	f7fd fcbd 	bl	8010a92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013118:	2301      	movs	r3, #1
 801311a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801311c:	697b      	ldr	r3, [r7, #20]
	}
 801311e:	4618      	mov	r0, r3
 8013120:	3718      	adds	r7, #24
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	20008930 	.word	0x20008930
 801312c:	20008e0c 	.word	0x20008e0c
 8013130:	20008934 	.word	0x20008934

08013134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013134:	b580      	push	{r7, lr}
 8013136:	b088      	sub	sp, #32
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013142:	2301      	movs	r3, #1
 8013144:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d06e      	beq.n	801322a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801314c:	69bb      	ldr	r3, [r7, #24]
 801314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013150:	2b00      	cmp	r3, #0
 8013152:	d10c      	bne.n	801316e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8013154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013158:	b672      	cpsid	i
 801315a:	f383 8811 	msr	BASEPRI, r3
 801315e:	f3bf 8f6f 	isb	sy
 8013162:	f3bf 8f4f 	dsb	sy
 8013166:	b662      	cpsie	i
 8013168:	60fb      	str	r3, [r7, #12]
}
 801316a:	bf00      	nop
 801316c:	e7fe      	b.n	801316c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013172:	683a      	ldr	r2, [r7, #0]
 8013174:	429a      	cmp	r2, r3
 8013176:	d902      	bls.n	801317e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	61fb      	str	r3, [r7, #28]
 801317c:	e002      	b.n	8013184 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013182:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013188:	69fa      	ldr	r2, [r7, #28]
 801318a:	429a      	cmp	r2, r3
 801318c:	d04d      	beq.n	801322a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013192:	697a      	ldr	r2, [r7, #20]
 8013194:	429a      	cmp	r2, r3
 8013196:	d148      	bne.n	801322a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013198:	4b26      	ldr	r3, [pc, #152]	; (8013234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	69ba      	ldr	r2, [r7, #24]
 801319e:	429a      	cmp	r2, r3
 80131a0:	d10c      	bne.n	80131bc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80131a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a6:	b672      	cpsid	i
 80131a8:	f383 8811 	msr	BASEPRI, r3
 80131ac:	f3bf 8f6f 	isb	sy
 80131b0:	f3bf 8f4f 	dsb	sy
 80131b4:	b662      	cpsie	i
 80131b6:	60bb      	str	r3, [r7, #8]
}
 80131b8:	bf00      	nop
 80131ba:	e7fe      	b.n	80131ba <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	69fa      	ldr	r2, [r7, #28]
 80131c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80131c8:	69bb      	ldr	r3, [r7, #24]
 80131ca:	699b      	ldr	r3, [r3, #24]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	db04      	blt.n	80131da <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80131da:	69bb      	ldr	r3, [r7, #24]
 80131dc:	6959      	ldr	r1, [r3, #20]
 80131de:	693a      	ldr	r2, [r7, #16]
 80131e0:	4613      	mov	r3, r2
 80131e2:	009b      	lsls	r3, r3, #2
 80131e4:	4413      	add	r3, r2
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	4a13      	ldr	r2, [pc, #76]	; (8013238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80131ea:	4413      	add	r3, r2
 80131ec:	4299      	cmp	r1, r3
 80131ee:	d11c      	bne.n	801322a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	3304      	adds	r3, #4
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fd fca9 	bl	8010b4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131fe:	4b0f      	ldr	r3, [pc, #60]	; (801323c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	429a      	cmp	r2, r3
 8013204:	d903      	bls.n	801320e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801320a:	4a0c      	ldr	r2, [pc, #48]	; (801323c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801320c:	6013      	str	r3, [r2, #0]
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013212:	4613      	mov	r3, r2
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	4413      	add	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	4a07      	ldr	r2, [pc, #28]	; (8013238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801321c:	441a      	add	r2, r3
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	3304      	adds	r3, #4
 8013222:	4619      	mov	r1, r3
 8013224:	4610      	mov	r0, r2
 8013226:	f7fd fc34 	bl	8010a92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801322a:	bf00      	nop
 801322c:	3720      	adds	r7, #32
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	20008930 	.word	0x20008930
 8013238:	20008934 	.word	0x20008934
 801323c:	20008e0c 	.word	0x20008e0c

08013240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013240:	b480      	push	{r7}
 8013242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013244:	4b07      	ldr	r3, [pc, #28]	; (8013264 <pvTaskIncrementMutexHeldCount+0x24>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d004      	beq.n	8013256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801324c:	4b05      	ldr	r3, [pc, #20]	; (8013264 <pvTaskIncrementMutexHeldCount+0x24>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013252:	3201      	adds	r2, #1
 8013254:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013256:	4b03      	ldr	r3, [pc, #12]	; (8013264 <pvTaskIncrementMutexHeldCount+0x24>)
 8013258:	681b      	ldr	r3, [r3, #0]
	}
 801325a:	4618      	mov	r0, r3
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr
 8013264:	20008930 	.word	0x20008930

08013268 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013272:	4b21      	ldr	r3, [pc, #132]	; (80132f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013278:	4b20      	ldr	r3, [pc, #128]	; (80132fc <prvAddCurrentTaskToDelayedList+0x94>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	3304      	adds	r3, #4
 801327e:	4618      	mov	r0, r3
 8013280:	f7fd fc64 	bl	8010b4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801328a:	d10a      	bne.n	80132a2 <prvAddCurrentTaskToDelayedList+0x3a>
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d007      	beq.n	80132a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013292:	4b1a      	ldr	r3, [pc, #104]	; (80132fc <prvAddCurrentTaskToDelayedList+0x94>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	3304      	adds	r3, #4
 8013298:	4619      	mov	r1, r3
 801329a:	4819      	ldr	r0, [pc, #100]	; (8013300 <prvAddCurrentTaskToDelayedList+0x98>)
 801329c:	f7fd fbf9 	bl	8010a92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80132a0:	e026      	b.n	80132f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80132a2:	68fa      	ldr	r2, [r7, #12]
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4413      	add	r3, r2
 80132a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80132aa:	4b14      	ldr	r3, [pc, #80]	; (80132fc <prvAddCurrentTaskToDelayedList+0x94>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80132b2:	68ba      	ldr	r2, [r7, #8]
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d209      	bcs.n	80132ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132ba:	4b12      	ldr	r3, [pc, #72]	; (8013304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	4b0f      	ldr	r3, [pc, #60]	; (80132fc <prvAddCurrentTaskToDelayedList+0x94>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	3304      	adds	r3, #4
 80132c4:	4619      	mov	r1, r3
 80132c6:	4610      	mov	r0, r2
 80132c8:	f7fd fc07 	bl	8010ada <vListInsert>
}
 80132cc:	e010      	b.n	80132f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132ce:	4b0e      	ldr	r3, [pc, #56]	; (8013308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80132d0:	681a      	ldr	r2, [r3, #0]
 80132d2:	4b0a      	ldr	r3, [pc, #40]	; (80132fc <prvAddCurrentTaskToDelayedList+0x94>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	3304      	adds	r3, #4
 80132d8:	4619      	mov	r1, r3
 80132da:	4610      	mov	r0, r2
 80132dc:	f7fd fbfd 	bl	8010ada <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80132e0:	4b0a      	ldr	r3, [pc, #40]	; (801330c <prvAddCurrentTaskToDelayedList+0xa4>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	68ba      	ldr	r2, [r7, #8]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d202      	bcs.n	80132f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80132ea:	4a08      	ldr	r2, [pc, #32]	; (801330c <prvAddCurrentTaskToDelayedList+0xa4>)
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	6013      	str	r3, [r2, #0]
}
 80132f0:	bf00      	nop
 80132f2:	3710      	adds	r7, #16
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	20008e08 	.word	0x20008e08
 80132fc:	20008930 	.word	0x20008930
 8013300:	20008df0 	.word	0x20008df0
 8013304:	20008dc0 	.word	0x20008dc0
 8013308:	20008dbc 	.word	0x20008dbc
 801330c:	20008e24 	.word	0x20008e24

08013310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b08a      	sub	sp, #40	; 0x28
 8013314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013316:	2300      	movs	r3, #0
 8013318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801331a:	f000 fb15 	bl	8013948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801331e:	4b1d      	ldr	r3, [pc, #116]	; (8013394 <xTimerCreateTimerTask+0x84>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d021      	beq.n	801336a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013326:	2300      	movs	r3, #0
 8013328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801332a:	2300      	movs	r3, #0
 801332c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801332e:	1d3a      	adds	r2, r7, #4
 8013330:	f107 0108 	add.w	r1, r7, #8
 8013334:	f107 030c 	add.w	r3, r7, #12
 8013338:	4618      	mov	r0, r3
 801333a:	f7fd f979 	bl	8010630 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801333e:	6879      	ldr	r1, [r7, #4]
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	9202      	str	r2, [sp, #8]
 8013346:	9301      	str	r3, [sp, #4]
 8013348:	2302      	movs	r3, #2
 801334a:	9300      	str	r3, [sp, #0]
 801334c:	2300      	movs	r3, #0
 801334e:	460a      	mov	r2, r1
 8013350:	4911      	ldr	r1, [pc, #68]	; (8013398 <xTimerCreateTimerTask+0x88>)
 8013352:	4812      	ldr	r0, [pc, #72]	; (801339c <xTimerCreateTimerTask+0x8c>)
 8013354:	f7fe ff6e 	bl	8012234 <xTaskCreateStatic>
 8013358:	4603      	mov	r3, r0
 801335a:	4a11      	ldr	r2, [pc, #68]	; (80133a0 <xTimerCreateTimerTask+0x90>)
 801335c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801335e:	4b10      	ldr	r3, [pc, #64]	; (80133a0 <xTimerCreateTimerTask+0x90>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013366:	2301      	movs	r3, #1
 8013368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d10c      	bne.n	801338a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8013370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013374:	b672      	cpsid	i
 8013376:	f383 8811 	msr	BASEPRI, r3
 801337a:	f3bf 8f6f 	isb	sy
 801337e:	f3bf 8f4f 	dsb	sy
 8013382:	b662      	cpsie	i
 8013384:	613b      	str	r3, [r7, #16]
}
 8013386:	bf00      	nop
 8013388:	e7fe      	b.n	8013388 <xTimerCreateTimerTask+0x78>
	return xReturn;
 801338a:	697b      	ldr	r3, [r7, #20]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3718      	adds	r7, #24
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	20008e60 	.word	0x20008e60
 8013398:	080228b8 	.word	0x080228b8
 801339c:	080134e1 	.word	0x080134e1
 80133a0:	20008e64 	.word	0x20008e64

080133a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b08a      	sub	sp, #40	; 0x28
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
 80133b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80133b2:	2300      	movs	r3, #0
 80133b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d10c      	bne.n	80133d6 <xTimerGenericCommand+0x32>
	__asm volatile
 80133bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c0:	b672      	cpsid	i
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	b662      	cpsie	i
 80133d0:	623b      	str	r3, [r7, #32]
}
 80133d2:	bf00      	nop
 80133d4:	e7fe      	b.n	80133d4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80133d6:	4b1a      	ldr	r3, [pc, #104]	; (8013440 <xTimerGenericCommand+0x9c>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d02a      	beq.n	8013434 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	2b05      	cmp	r3, #5
 80133ee:	dc18      	bgt.n	8013422 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80133f0:	f7ff fda8 	bl	8012f44 <xTaskGetSchedulerState>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b02      	cmp	r3, #2
 80133f8:	d109      	bne.n	801340e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80133fa:	4b11      	ldr	r3, [pc, #68]	; (8013440 <xTimerGenericCommand+0x9c>)
 80133fc:	6818      	ldr	r0, [r3, #0]
 80133fe:	f107 0110 	add.w	r1, r7, #16
 8013402:	2300      	movs	r3, #0
 8013404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013406:	f7fe f883 	bl	8011510 <xQueueGenericSend>
 801340a:	6278      	str	r0, [r7, #36]	; 0x24
 801340c:	e012      	b.n	8013434 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801340e:	4b0c      	ldr	r3, [pc, #48]	; (8013440 <xTimerGenericCommand+0x9c>)
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	f107 0110 	add.w	r1, r7, #16
 8013416:	2300      	movs	r3, #0
 8013418:	2200      	movs	r2, #0
 801341a:	f7fe f879 	bl	8011510 <xQueueGenericSend>
 801341e:	6278      	str	r0, [r7, #36]	; 0x24
 8013420:	e008      	b.n	8013434 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013422:	4b07      	ldr	r3, [pc, #28]	; (8013440 <xTimerGenericCommand+0x9c>)
 8013424:	6818      	ldr	r0, [r3, #0]
 8013426:	f107 0110 	add.w	r1, r7, #16
 801342a:	2300      	movs	r3, #0
 801342c:	683a      	ldr	r2, [r7, #0]
 801342e:	f7fe f975 	bl	801171c <xQueueGenericSendFromISR>
 8013432:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013436:	4618      	mov	r0, r3
 8013438:	3728      	adds	r7, #40	; 0x28
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	20008e60 	.word	0x20008e60

08013444 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b088      	sub	sp, #32
 8013448:	af02      	add	r7, sp, #8
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801344e:	4b23      	ldr	r3, [pc, #140]	; (80134dc <prvProcessExpiredTimer+0x98>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	3304      	adds	r3, #4
 801345c:	4618      	mov	r0, r3
 801345e:	f7fd fb75 	bl	8010b4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013468:	f003 0304 	and.w	r3, r3, #4
 801346c:	2b00      	cmp	r3, #0
 801346e:	d024      	beq.n	80134ba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	699a      	ldr	r2, [r3, #24]
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	18d1      	adds	r1, r2, r3
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	683a      	ldr	r2, [r7, #0]
 801347c:	6978      	ldr	r0, [r7, #20]
 801347e:	f000 f8d3 	bl	8013628 <prvInsertTimerInActiveList>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d021      	beq.n	80134cc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013488:	2300      	movs	r3, #0
 801348a:	9300      	str	r3, [sp, #0]
 801348c:	2300      	movs	r3, #0
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	2100      	movs	r1, #0
 8013492:	6978      	ldr	r0, [r7, #20]
 8013494:	f7ff ff86 	bl	80133a4 <xTimerGenericCommand>
 8013498:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d115      	bne.n	80134cc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80134a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a4:	b672      	cpsid	i
 80134a6:	f383 8811 	msr	BASEPRI, r3
 80134aa:	f3bf 8f6f 	isb	sy
 80134ae:	f3bf 8f4f 	dsb	sy
 80134b2:	b662      	cpsie	i
 80134b4:	60fb      	str	r3, [r7, #12]
}
 80134b6:	bf00      	nop
 80134b8:	e7fe      	b.n	80134b8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134c0:	f023 0301 	bic.w	r3, r3, #1
 80134c4:	b2da      	uxtb	r2, r3
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	6a1b      	ldr	r3, [r3, #32]
 80134d0:	6978      	ldr	r0, [r7, #20]
 80134d2:	4798      	blx	r3
}
 80134d4:	bf00      	nop
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	20008e58 	.word	0x20008e58

080134e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80134e8:	f107 0308 	add.w	r3, r7, #8
 80134ec:	4618      	mov	r0, r3
 80134ee:	f000 f857 	bl	80135a0 <prvGetNextExpireTime>
 80134f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	4619      	mov	r1, r3
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f000 f803 	bl	8013504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80134fe:	f000 f8d5 	bl	80136ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013502:	e7f1      	b.n	80134e8 <prvTimerTask+0x8>

08013504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b084      	sub	sp, #16
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801350e:	f7ff f8dd 	bl	80126cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013512:	f107 0308 	add.w	r3, r7, #8
 8013516:	4618      	mov	r0, r3
 8013518:	f000 f866 	bl	80135e8 <prvSampleTimeNow>
 801351c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801351e:	68bb      	ldr	r3, [r7, #8]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d130      	bne.n	8013586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d10a      	bne.n	8013540 <prvProcessTimerOrBlockTask+0x3c>
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	429a      	cmp	r2, r3
 8013530:	d806      	bhi.n	8013540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013532:	f7ff f8d9 	bl	80126e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013536:	68f9      	ldr	r1, [r7, #12]
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f7ff ff83 	bl	8013444 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801353e:	e024      	b.n	801358a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d008      	beq.n	8013558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013546:	4b13      	ldr	r3, [pc, #76]	; (8013594 <prvProcessTimerOrBlockTask+0x90>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d101      	bne.n	8013554 <prvProcessTimerOrBlockTask+0x50>
 8013550:	2301      	movs	r3, #1
 8013552:	e000      	b.n	8013556 <prvProcessTimerOrBlockTask+0x52>
 8013554:	2300      	movs	r3, #0
 8013556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013558:	4b0f      	ldr	r3, [pc, #60]	; (8013598 <prvProcessTimerOrBlockTask+0x94>)
 801355a:	6818      	ldr	r0, [r3, #0]
 801355c:	687a      	ldr	r2, [r7, #4]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	1ad3      	subs	r3, r2, r3
 8013562:	683a      	ldr	r2, [r7, #0]
 8013564:	4619      	mov	r1, r3
 8013566:	f7fe fe31 	bl	80121cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801356a:	f7ff f8bd 	bl	80126e8 <xTaskResumeAll>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	d10a      	bne.n	801358a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013574:	4b09      	ldr	r3, [pc, #36]	; (801359c <prvProcessTimerOrBlockTask+0x98>)
 8013576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801357a:	601a      	str	r2, [r3, #0]
 801357c:	f3bf 8f4f 	dsb	sy
 8013580:	f3bf 8f6f 	isb	sy
}
 8013584:	e001      	b.n	801358a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013586:	f7ff f8af 	bl	80126e8 <xTaskResumeAll>
}
 801358a:	bf00      	nop
 801358c:	3710      	adds	r7, #16
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	20008e5c 	.word	0x20008e5c
 8013598:	20008e60 	.word	0x20008e60
 801359c:	e000ed04 	.word	0xe000ed04

080135a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80135a8:	4b0e      	ldr	r3, [pc, #56]	; (80135e4 <prvGetNextExpireTime+0x44>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d101      	bne.n	80135b6 <prvGetNextExpireTime+0x16>
 80135b2:	2201      	movs	r2, #1
 80135b4:	e000      	b.n	80135b8 <prvGetNextExpireTime+0x18>
 80135b6:	2200      	movs	r2, #0
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d105      	bne.n	80135d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80135c4:	4b07      	ldr	r3, [pc, #28]	; (80135e4 <prvGetNextExpireTime+0x44>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	60fb      	str	r3, [r7, #12]
 80135ce:	e001      	b.n	80135d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80135d0:	2300      	movs	r3, #0
 80135d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80135d4:	68fb      	ldr	r3, [r7, #12]
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3714      	adds	r7, #20
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop
 80135e4:	20008e58 	.word	0x20008e58

080135e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80135f0:	f7ff f91a 	bl	8012828 <xTaskGetTickCount>
 80135f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80135f6:	4b0b      	ldr	r3, [pc, #44]	; (8013624 <prvSampleTimeNow+0x3c>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d205      	bcs.n	801360c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013600:	f000 f93c 	bl	801387c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2201      	movs	r2, #1
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	e002      	b.n	8013612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2200      	movs	r2, #0
 8013610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013612:	4a04      	ldr	r2, [pc, #16]	; (8013624 <prvSampleTimeNow+0x3c>)
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013618:	68fb      	ldr	r3, [r7, #12]
}
 801361a:	4618      	mov	r0, r3
 801361c:	3710      	adds	r7, #16
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	20008e68 	.word	0x20008e68

08013628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b086      	sub	sp, #24
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
 8013634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013636:	2300      	movs	r3, #0
 8013638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	68fa      	ldr	r2, [r7, #12]
 8013644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013646:	68ba      	ldr	r2, [r7, #8]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	429a      	cmp	r2, r3
 801364c:	d812      	bhi.n	8013674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	1ad2      	subs	r2, r2, r3
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	699b      	ldr	r3, [r3, #24]
 8013658:	429a      	cmp	r2, r3
 801365a:	d302      	bcc.n	8013662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801365c:	2301      	movs	r3, #1
 801365e:	617b      	str	r3, [r7, #20]
 8013660:	e01b      	b.n	801369a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013662:	4b10      	ldr	r3, [pc, #64]	; (80136a4 <prvInsertTimerInActiveList+0x7c>)
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	3304      	adds	r3, #4
 801366a:	4619      	mov	r1, r3
 801366c:	4610      	mov	r0, r2
 801366e:	f7fd fa34 	bl	8010ada <vListInsert>
 8013672:	e012      	b.n	801369a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	429a      	cmp	r2, r3
 801367a:	d206      	bcs.n	801368a <prvInsertTimerInActiveList+0x62>
 801367c:	68ba      	ldr	r2, [r7, #8]
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	429a      	cmp	r2, r3
 8013682:	d302      	bcc.n	801368a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013684:	2301      	movs	r3, #1
 8013686:	617b      	str	r3, [r7, #20]
 8013688:	e007      	b.n	801369a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801368a:	4b07      	ldr	r3, [pc, #28]	; (80136a8 <prvInsertTimerInActiveList+0x80>)
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	3304      	adds	r3, #4
 8013692:	4619      	mov	r1, r3
 8013694:	4610      	mov	r0, r2
 8013696:	f7fd fa20 	bl	8010ada <vListInsert>
		}
	}

	return xProcessTimerNow;
 801369a:	697b      	ldr	r3, [r7, #20]
}
 801369c:	4618      	mov	r0, r3
 801369e:	3718      	adds	r7, #24
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	20008e5c 	.word	0x20008e5c
 80136a8:	20008e58 	.word	0x20008e58

080136ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b08e      	sub	sp, #56	; 0x38
 80136b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80136b2:	e0d0      	b.n	8013856 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	da1a      	bge.n	80136f0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80136ba:	1d3b      	adds	r3, r7, #4
 80136bc:	3304      	adds	r3, #4
 80136be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80136c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d10c      	bne.n	80136e0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80136c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ca:	b672      	cpsid	i
 80136cc:	f383 8811 	msr	BASEPRI, r3
 80136d0:	f3bf 8f6f 	isb	sy
 80136d4:	f3bf 8f4f 	dsb	sy
 80136d8:	b662      	cpsie	i
 80136da:	61fb      	str	r3, [r7, #28]
}
 80136dc:	bf00      	nop
 80136de:	e7fe      	b.n	80136de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136e6:	6850      	ldr	r0, [r2, #4]
 80136e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ea:	6892      	ldr	r2, [r2, #8]
 80136ec:	4611      	mov	r1, r2
 80136ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f2c0 80ae 	blt.w	8013854 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d004      	beq.n	801370e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013706:	3304      	adds	r3, #4
 8013708:	4618      	mov	r0, r3
 801370a:	f7fd fa1f 	bl	8010b4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801370e:	463b      	mov	r3, r7
 8013710:	4618      	mov	r0, r3
 8013712:	f7ff ff69 	bl	80135e8 <prvSampleTimeNow>
 8013716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b09      	cmp	r3, #9
 801371c:	f200 809b 	bhi.w	8013856 <prvProcessReceivedCommands+0x1aa>
 8013720:	a201      	add	r2, pc, #4	; (adr r2, 8013728 <prvProcessReceivedCommands+0x7c>)
 8013722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013726:	bf00      	nop
 8013728:	08013751 	.word	0x08013751
 801372c:	08013751 	.word	0x08013751
 8013730:	08013751 	.word	0x08013751
 8013734:	080137c9 	.word	0x080137c9
 8013738:	080137dd 	.word	0x080137dd
 801373c:	0801382b 	.word	0x0801382b
 8013740:	08013751 	.word	0x08013751
 8013744:	08013751 	.word	0x08013751
 8013748:	080137c9 	.word	0x080137c9
 801374c:	080137dd 	.word	0x080137dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013756:	f043 0301 	orr.w	r3, r3, #1
 801375a:	b2da      	uxtb	r2, r3
 801375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013762:	68ba      	ldr	r2, [r7, #8]
 8013764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013766:	699b      	ldr	r3, [r3, #24]
 8013768:	18d1      	adds	r1, r2, r3
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801376e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013770:	f7ff ff5a 	bl	8013628 <prvInsertTimerInActiveList>
 8013774:	4603      	mov	r3, r0
 8013776:	2b00      	cmp	r3, #0
 8013778:	d06d      	beq.n	8013856 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377c:	6a1b      	ldr	r3, [r3, #32]
 801377e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013788:	f003 0304 	and.w	r3, r3, #4
 801378c:	2b00      	cmp	r3, #0
 801378e:	d062      	beq.n	8013856 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013790:	68ba      	ldr	r2, [r7, #8]
 8013792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013794:	699b      	ldr	r3, [r3, #24]
 8013796:	441a      	add	r2, r3
 8013798:	2300      	movs	r3, #0
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	2300      	movs	r3, #0
 801379e:	2100      	movs	r1, #0
 80137a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137a2:	f7ff fdff 	bl	80133a4 <xTimerGenericCommand>
 80137a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80137a8:	6a3b      	ldr	r3, [r7, #32]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d153      	bne.n	8013856 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	b672      	cpsid	i
 80137b4:	f383 8811 	msr	BASEPRI, r3
 80137b8:	f3bf 8f6f 	isb	sy
 80137bc:	f3bf 8f4f 	dsb	sy
 80137c0:	b662      	cpsie	i
 80137c2:	61bb      	str	r3, [r7, #24]
}
 80137c4:	bf00      	nop
 80137c6:	e7fe      	b.n	80137c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80137c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137ce:	f023 0301 	bic.w	r3, r3, #1
 80137d2:	b2da      	uxtb	r2, r3
 80137d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80137da:	e03c      	b.n	8013856 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80137dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137e2:	f043 0301 	orr.w	r3, r3, #1
 80137e6:	b2da      	uxtb	r2, r3
 80137e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80137ee:	68ba      	ldr	r2, [r7, #8]
 80137f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80137f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f6:	699b      	ldr	r3, [r3, #24]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d10c      	bne.n	8013816 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80137fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013800:	b672      	cpsid	i
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	b662      	cpsie	i
 8013810:	617b      	str	r3, [r7, #20]
}
 8013812:	bf00      	nop
 8013814:	e7fe      	b.n	8013814 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013818:	699a      	ldr	r2, [r3, #24]
 801381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381c:	18d1      	adds	r1, r2, r3
 801381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013824:	f7ff ff00 	bl	8013628 <prvInsertTimerInActiveList>
					break;
 8013828:	e015      	b.n	8013856 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013830:	f003 0302 	and.w	r3, r3, #2
 8013834:	2b00      	cmp	r3, #0
 8013836:	d103      	bne.n	8013840 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8013838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801383a:	f7fc ffe3 	bl	8010804 <vPortFree>
 801383e:	e00a      	b.n	8013856 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013846:	f023 0301 	bic.w	r3, r3, #1
 801384a:	b2da      	uxtb	r2, r3
 801384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013852:	e000      	b.n	8013856 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013854:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013856:	4b08      	ldr	r3, [pc, #32]	; (8013878 <prvProcessReceivedCommands+0x1cc>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	1d39      	adds	r1, r7, #4
 801385c:	2200      	movs	r2, #0
 801385e:	4618      	mov	r0, r3
 8013860:	f7fe f892 	bl	8011988 <xQueueReceive>
 8013864:	4603      	mov	r3, r0
 8013866:	2b00      	cmp	r3, #0
 8013868:	f47f af24 	bne.w	80136b4 <prvProcessReceivedCommands+0x8>
	}
}
 801386c:	bf00      	nop
 801386e:	bf00      	nop
 8013870:	3730      	adds	r7, #48	; 0x30
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	20008e60 	.word	0x20008e60

0801387c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b088      	sub	sp, #32
 8013880:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013882:	e04a      	b.n	801391a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013884:	4b2e      	ldr	r3, [pc, #184]	; (8013940 <prvSwitchTimerLists+0xc4>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	68db      	ldr	r3, [r3, #12]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801388e:	4b2c      	ldr	r3, [pc, #176]	; (8013940 <prvSwitchTimerLists+0xc4>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	3304      	adds	r3, #4
 801389c:	4618      	mov	r0, r3
 801389e:	f7fd f955 	bl	8010b4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	6a1b      	ldr	r3, [r3, #32]
 80138a6:	68f8      	ldr	r0, [r7, #12]
 80138a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138b0:	f003 0304 	and.w	r3, r3, #4
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d030      	beq.n	801391a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	699b      	ldr	r3, [r3, #24]
 80138bc:	693a      	ldr	r2, [r7, #16]
 80138be:	4413      	add	r3, r2
 80138c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80138c2:	68ba      	ldr	r2, [r7, #8]
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d90e      	bls.n	80138e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	68ba      	ldr	r2, [r7, #8]
 80138ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80138d6:	4b1a      	ldr	r3, [pc, #104]	; (8013940 <prvSwitchTimerLists+0xc4>)
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	3304      	adds	r3, #4
 80138de:	4619      	mov	r1, r3
 80138e0:	4610      	mov	r0, r2
 80138e2:	f7fd f8fa 	bl	8010ada <vListInsert>
 80138e6:	e018      	b.n	801391a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80138e8:	2300      	movs	r3, #0
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	2300      	movs	r3, #0
 80138ee:	693a      	ldr	r2, [r7, #16]
 80138f0:	2100      	movs	r1, #0
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7ff fd56 	bl	80133a4 <xTimerGenericCommand>
 80138f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d10c      	bne.n	801391a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8013900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013904:	b672      	cpsid	i
 8013906:	f383 8811 	msr	BASEPRI, r3
 801390a:	f3bf 8f6f 	isb	sy
 801390e:	f3bf 8f4f 	dsb	sy
 8013912:	b662      	cpsie	i
 8013914:	603b      	str	r3, [r7, #0]
}
 8013916:	bf00      	nop
 8013918:	e7fe      	b.n	8013918 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801391a:	4b09      	ldr	r3, [pc, #36]	; (8013940 <prvSwitchTimerLists+0xc4>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d1af      	bne.n	8013884 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013924:	4b06      	ldr	r3, [pc, #24]	; (8013940 <prvSwitchTimerLists+0xc4>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801392a:	4b06      	ldr	r3, [pc, #24]	; (8013944 <prvSwitchTimerLists+0xc8>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4a04      	ldr	r2, [pc, #16]	; (8013940 <prvSwitchTimerLists+0xc4>)
 8013930:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013932:	4a04      	ldr	r2, [pc, #16]	; (8013944 <prvSwitchTimerLists+0xc8>)
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	6013      	str	r3, [r2, #0]
}
 8013938:	bf00      	nop
 801393a:	3718      	adds	r7, #24
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}
 8013940:	20008e58 	.word	0x20008e58
 8013944:	20008e5c 	.word	0x20008e5c

08013948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801394e:	f7fd fa35 	bl	8010dbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013952:	4b15      	ldr	r3, [pc, #84]	; (80139a8 <prvCheckForValidListAndQueue+0x60>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d120      	bne.n	801399c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801395a:	4814      	ldr	r0, [pc, #80]	; (80139ac <prvCheckForValidListAndQueue+0x64>)
 801395c:	f7fd f86c 	bl	8010a38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013960:	4813      	ldr	r0, [pc, #76]	; (80139b0 <prvCheckForValidListAndQueue+0x68>)
 8013962:	f7fd f869 	bl	8010a38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013966:	4b13      	ldr	r3, [pc, #76]	; (80139b4 <prvCheckForValidListAndQueue+0x6c>)
 8013968:	4a10      	ldr	r2, [pc, #64]	; (80139ac <prvCheckForValidListAndQueue+0x64>)
 801396a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801396c:	4b12      	ldr	r3, [pc, #72]	; (80139b8 <prvCheckForValidListAndQueue+0x70>)
 801396e:	4a10      	ldr	r2, [pc, #64]	; (80139b0 <prvCheckForValidListAndQueue+0x68>)
 8013970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013972:	2300      	movs	r3, #0
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	4b11      	ldr	r3, [pc, #68]	; (80139bc <prvCheckForValidListAndQueue+0x74>)
 8013978:	4a11      	ldr	r2, [pc, #68]	; (80139c0 <prvCheckForValidListAndQueue+0x78>)
 801397a:	2110      	movs	r1, #16
 801397c:	200a      	movs	r0, #10
 801397e:	f7fd fbb3 	bl	80110e8 <xQueueGenericCreateStatic>
 8013982:	4603      	mov	r3, r0
 8013984:	4a08      	ldr	r2, [pc, #32]	; (80139a8 <prvCheckForValidListAndQueue+0x60>)
 8013986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013988:	4b07      	ldr	r3, [pc, #28]	; (80139a8 <prvCheckForValidListAndQueue+0x60>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d005      	beq.n	801399c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013990:	4b05      	ldr	r3, [pc, #20]	; (80139a8 <prvCheckForValidListAndQueue+0x60>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	490b      	ldr	r1, [pc, #44]	; (80139c4 <prvCheckForValidListAndQueue+0x7c>)
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe fbc4 	bl	8012124 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801399c:	f7fd fa42 	bl	8010e24 <vPortExitCritical>
}
 80139a0:	bf00      	nop
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20008e60 	.word	0x20008e60
 80139ac:	20008e30 	.word	0x20008e30
 80139b0:	20008e44 	.word	0x20008e44
 80139b4:	20008e58 	.word	0x20008e58
 80139b8:	20008e5c 	.word	0x20008e5c
 80139bc:	20008f0c 	.word	0x20008f0c
 80139c0:	20008e6c 	.word	0x20008e6c
 80139c4:	080228c0 	.word	0x080228c0

080139c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	4603      	mov	r3, r0
 80139d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80139d2:	88fb      	ldrh	r3, [r7, #6]
 80139d4:	021b      	lsls	r3, r3, #8
 80139d6:	b21a      	sxth	r2, r3
 80139d8:	88fb      	ldrh	r3, [r7, #6]
 80139da:	0a1b      	lsrs	r3, r3, #8
 80139dc:	b29b      	uxth	r3, r3
 80139de:	b21b      	sxth	r3, r3
 80139e0:	4313      	orrs	r3, r2
 80139e2:	b21b      	sxth	r3, r3
 80139e4:	b29b      	uxth	r3, r3
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	370c      	adds	r7, #12
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr

080139f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80139f2:	b480      	push	{r7}
 80139f4:	b083      	sub	sp, #12
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	061a      	lsls	r2, r3, #24
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	021b      	lsls	r3, r3, #8
 8013a02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013a06:	431a      	orrs	r2, r3
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	0a1b      	lsrs	r3, r3, #8
 8013a0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013a10:	431a      	orrs	r2, r3
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	0e1b      	lsrs	r3, r3, #24
 8013a16:	4313      	orrs	r3, r2
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	370c      	adds	r7, #12
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a22:	4770      	bx	lr

08013a24 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013a28:	4b20      	ldr	r3, [pc, #128]	; (8013aac <dhcp_inc_pcb_refcount+0x88>)
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d133      	bne.n	8013a98 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013a30:	4b1f      	ldr	r3, [pc, #124]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d005      	beq.n	8013a44 <dhcp_inc_pcb_refcount+0x20>
 8013a38:	4b1e      	ldr	r3, [pc, #120]	; (8013ab4 <dhcp_inc_pcb_refcount+0x90>)
 8013a3a:	22e5      	movs	r2, #229	; 0xe5
 8013a3c:	491e      	ldr	r1, [pc, #120]	; (8013ab8 <dhcp_inc_pcb_refcount+0x94>)
 8013a3e:	481f      	ldr	r0, [pc, #124]	; (8013abc <dhcp_inc_pcb_refcount+0x98>)
 8013a40:	f00d feec 	bl	802181c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013a44:	f00c f972 	bl	801fd2c <udp_new>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	4a19      	ldr	r2, [pc, #100]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a4c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013a4e:	4b18      	ldr	r3, [pc, #96]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d102      	bne.n	8013a5c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013a56:	f04f 33ff 	mov.w	r3, #4294967295
 8013a5a:	e024      	b.n	8013aa6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013a5c:	4b14      	ldr	r3, [pc, #80]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	7a5a      	ldrb	r2, [r3, #9]
 8013a62:	4b13      	ldr	r3, [pc, #76]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f042 0220 	orr.w	r2, r2, #32
 8013a6a:	b2d2      	uxtb	r2, r2
 8013a6c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013a6e:	4b10      	ldr	r3, [pc, #64]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2244      	movs	r2, #68	; 0x44
 8013a74:	4912      	ldr	r1, [pc, #72]	; (8013ac0 <dhcp_inc_pcb_refcount+0x9c>)
 8013a76:	4618      	mov	r0, r3
 8013a78:	f00c f800 	bl	801fa7c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013a7c:	4b0c      	ldr	r3, [pc, #48]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2243      	movs	r2, #67	; 0x43
 8013a82:	490f      	ldr	r1, [pc, #60]	; (8013ac0 <dhcp_inc_pcb_refcount+0x9c>)
 8013a84:	4618      	mov	r0, r3
 8013a86:	f00c f881 	bl	801fb8c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013a8a:	4b09      	ldr	r3, [pc, #36]	; (8013ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	490c      	ldr	r1, [pc, #48]	; (8013ac4 <dhcp_inc_pcb_refcount+0xa0>)
 8013a92:	4618      	mov	r0, r3
 8013a94:	f00c f8e8 	bl	801fc68 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013a98:	4b04      	ldr	r3, [pc, #16]	; (8013aac <dhcp_inc_pcb_refcount+0x88>)
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	4b02      	ldr	r3, [pc, #8]	; (8013aac <dhcp_inc_pcb_refcount+0x88>)
 8013aa2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013aa4:	2300      	movs	r3, #0
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	bd80      	pop	{r7, pc}
 8013aaa:	bf00      	nop
 8013aac:	20008f60 	.word	0x20008f60
 8013ab0:	20008f5c 	.word	0x20008f5c
 8013ab4:	080228c8 	.word	0x080228c8
 8013ab8:	08022944 	.word	0x08022944
 8013abc:	0802296c 	.word	0x0802296c
 8013ac0:	08025bf0 	.word	0x08025bf0
 8013ac4:	0801535d 	.word	0x0801535d

08013ac8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013acc:	4b0e      	ldr	r3, [pc, #56]	; (8013b08 <dhcp_dec_pcb_refcount+0x40>)
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d105      	bne.n	8013ae0 <dhcp_dec_pcb_refcount+0x18>
 8013ad4:	4b0d      	ldr	r3, [pc, #52]	; (8013b0c <dhcp_dec_pcb_refcount+0x44>)
 8013ad6:	22ff      	movs	r2, #255	; 0xff
 8013ad8:	490d      	ldr	r1, [pc, #52]	; (8013b10 <dhcp_dec_pcb_refcount+0x48>)
 8013ada:	480e      	ldr	r0, [pc, #56]	; (8013b14 <dhcp_dec_pcb_refcount+0x4c>)
 8013adc:	f00d fe9e 	bl	802181c <iprintf>
  dhcp_pcb_refcount--;
 8013ae0:	4b09      	ldr	r3, [pc, #36]	; (8013b08 <dhcp_dec_pcb_refcount+0x40>)
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	b2da      	uxtb	r2, r3
 8013ae8:	4b07      	ldr	r3, [pc, #28]	; (8013b08 <dhcp_dec_pcb_refcount+0x40>)
 8013aea:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013aec:	4b06      	ldr	r3, [pc, #24]	; (8013b08 <dhcp_dec_pcb_refcount+0x40>)
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d107      	bne.n	8013b04 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013af4:	4b08      	ldr	r3, [pc, #32]	; (8013b18 <dhcp_dec_pcb_refcount+0x50>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f00c f8d5 	bl	801fca8 <udp_remove>
    dhcp_pcb = NULL;
 8013afe:	4b06      	ldr	r3, [pc, #24]	; (8013b18 <dhcp_dec_pcb_refcount+0x50>)
 8013b00:	2200      	movs	r2, #0
 8013b02:	601a      	str	r2, [r3, #0]
  }
}
 8013b04:	bf00      	nop
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	20008f60 	.word	0x20008f60
 8013b0c:	080228c8 	.word	0x080228c8
 8013b10:	08022994 	.word	0x08022994
 8013b14:	0802296c 	.word	0x0802296c
 8013b18:	20008f5c 	.word	0x20008f5c

08013b1c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b28:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013b2a:	210c      	movs	r1, #12
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f001 f857 	bl	8014be0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013b32:	4b06      	ldr	r3, [pc, #24]	; (8013b4c <dhcp_handle_nak+0x30>)
 8013b34:	4a05      	ldr	r2, [pc, #20]	; (8013b4c <dhcp_handle_nak+0x30>)
 8013b36:	4905      	ldr	r1, [pc, #20]	; (8013b4c <dhcp_handle_nak+0x30>)
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f004 ff65 	bl	8018a08 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f000 fc4a 	bl	80143d8 <dhcp_discover>
}
 8013b44:	bf00      	nop
 8013b46:	3710      	adds	r7, #16
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	08025bf0 	.word	0x08025bf0

08013b50 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b084      	sub	sp, #16
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b5c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013b5e:	2108      	movs	r1, #8
 8013b60:	68f8      	ldr	r0, [r7, #12]
 8013b62:	f001 f83d 	bl	8014be0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	331c      	adds	r3, #28
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f002 fb3e 	bl	80161f0 <etharp_query>
 8013b74:	4603      	mov	r3, r0
 8013b76:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	799b      	ldrb	r3, [r3, #6]
 8013b7c:	2bff      	cmp	r3, #255	; 0xff
 8013b7e:	d005      	beq.n	8013b8c <dhcp_check+0x3c>
    dhcp->tries++;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	799b      	ldrb	r3, [r3, #6]
 8013b84:	3301      	adds	r3, #1
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013b8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013b90:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013b92:	893b      	ldrh	r3, [r7, #8]
 8013b94:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013b98:	4a06      	ldr	r2, [pc, #24]	; (8013bb4 <dhcp_check+0x64>)
 8013b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8013b9e:	1152      	asrs	r2, r2, #5
 8013ba0:	17db      	asrs	r3, r3, #31
 8013ba2:	1ad3      	subs	r3, r2, r3
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013baa:	bf00      	nop
 8013bac:	3710      	adds	r7, #16
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	10624dd3 	.word	0x10624dd3

08013bb8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bc6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013bc8:	4b0c      	ldr	r3, [pc, #48]	; (8013bfc <dhcp_handle_offer+0x44>)
 8013bca:	789b      	ldrb	r3, [r3, #2]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d011      	beq.n	8013bf4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013bd6:	4b0a      	ldr	r3, [pc, #40]	; (8013c00 <dhcp_handle_offer+0x48>)
 8013bd8:	689b      	ldr	r3, [r3, #8]
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7ff ff09 	bl	80139f2 <lwip_htonl>
 8013be0:	4602      	mov	r2, r0
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	691a      	ldr	r2, [r3, #16]
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 f808 	bl	8013c04 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013bf4:	bf00      	nop
 8013bf6:	3710      	adds	r7, #16
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	2000e818 	.word	0x2000e818
 8013c00:	2000e820 	.word	0x2000e820

08013c04 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013c04:	b5b0      	push	{r4, r5, r7, lr}
 8013c06:	b08a      	sub	sp, #40	; 0x28
 8013c08:	af02      	add	r7, sp, #8
 8013c0a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d109      	bne.n	8013c26 <dhcp_select+0x22>
 8013c12:	4b71      	ldr	r3, [pc, #452]	; (8013dd8 <dhcp_select+0x1d4>)
 8013c14:	f240 1277 	movw	r2, #375	; 0x177
 8013c18:	4970      	ldr	r1, [pc, #448]	; (8013ddc <dhcp_select+0x1d8>)
 8013c1a:	4871      	ldr	r0, [pc, #452]	; (8013de0 <dhcp_select+0x1dc>)
 8013c1c:	f00d fdfe 	bl	802181c <iprintf>
 8013c20:	f06f 030f 	mvn.w	r3, #15
 8013c24:	e0d3      	b.n	8013dce <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c2a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d109      	bne.n	8013c46 <dhcp_select+0x42>
 8013c32:	4b69      	ldr	r3, [pc, #420]	; (8013dd8 <dhcp_select+0x1d4>)
 8013c34:	f240 1279 	movw	r2, #377	; 0x179
 8013c38:	496a      	ldr	r1, [pc, #424]	; (8013de4 <dhcp_select+0x1e0>)
 8013c3a:	4869      	ldr	r0, [pc, #420]	; (8013de0 <dhcp_select+0x1dc>)
 8013c3c:	f00d fdee 	bl	802181c <iprintf>
 8013c40:	f06f 0305 	mvn.w	r3, #5
 8013c44:	e0c3      	b.n	8013dce <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013c46:	2101      	movs	r1, #1
 8013c48:	69b8      	ldr	r0, [r7, #24]
 8013c4a:	f000 ffc9 	bl	8014be0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013c4e:	f107 030c 	add.w	r3, r7, #12
 8013c52:	2203      	movs	r2, #3
 8013c54:	69b9      	ldr	r1, [r7, #24]
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f001 fc4e 	bl	80154f8 <dhcp_create_msg>
 8013c5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f000 8085 	beq.w	8013d70 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013c6c:	89b8      	ldrh	r0, [r7, #12]
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c74:	2302      	movs	r3, #2
 8013c76:	2239      	movs	r2, #57	; 0x39
 8013c78:	f000 ffcc 	bl	8014c14 <dhcp_option>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013c80:	89b8      	ldrh	r0, [r7, #12]
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	f001 f81b 	bl	8014cc8 <dhcp_option_short>
 8013c92:	4603      	mov	r3, r0
 8013c94:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013c96:	89b8      	ldrh	r0, [r7, #12]
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c9e:	2304      	movs	r3, #4
 8013ca0:	2232      	movs	r2, #50	; 0x32
 8013ca2:	f000 ffb7 	bl	8014c14 <dhcp_option>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013caa:	89bc      	ldrh	r4, [r7, #12]
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	69db      	ldr	r3, [r3, #28]
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7ff fe9b 	bl	80139f2 <lwip_htonl>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	4629      	mov	r1, r5
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	f001 f832 	bl	8014d2c <dhcp_option_long>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013ccc:	89b8      	ldrh	r0, [r7, #12]
 8013cce:	693b      	ldr	r3, [r7, #16]
 8013cd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013cd4:	2304      	movs	r3, #4
 8013cd6:	2236      	movs	r2, #54	; 0x36
 8013cd8:	f000 ff9c 	bl	8014c14 <dhcp_option>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013ce0:	89bc      	ldrh	r4, [r7, #12]
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013ce8:	69bb      	ldr	r3, [r7, #24]
 8013cea:	699b      	ldr	r3, [r3, #24]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fe80 	bl	80139f2 <lwip_htonl>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	4629      	mov	r1, r5
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f001 f817 	bl	8014d2c <dhcp_option_long>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013d02:	89b8      	ldrh	r0, [r7, #12]
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d0a:	2303      	movs	r3, #3
 8013d0c:	2237      	movs	r2, #55	; 0x37
 8013d0e:	f000 ff81 	bl	8014c14 <dhcp_option>
 8013d12:	4603      	mov	r3, r0
 8013d14:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d16:	2300      	movs	r3, #0
 8013d18:	77bb      	strb	r3, [r7, #30]
 8013d1a:	e00e      	b.n	8013d3a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013d1c:	89b8      	ldrh	r0, [r7, #12]
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d24:	7fbb      	ldrb	r3, [r7, #30]
 8013d26:	4a30      	ldr	r2, [pc, #192]	; (8013de8 <dhcp_select+0x1e4>)
 8013d28:	5cd3      	ldrb	r3, [r2, r3]
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	f000 ffa6 	bl	8014c7c <dhcp_option_byte>
 8013d30:	4603      	mov	r3, r0
 8013d32:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013d34:	7fbb      	ldrb	r3, [r7, #30]
 8013d36:	3301      	adds	r3, #1
 8013d38:	77bb      	strb	r3, [r7, #30]
 8013d3a:	7fbb      	ldrb	r3, [r7, #30]
 8013d3c:	2b02      	cmp	r3, #2
 8013d3e:	d9ed      	bls.n	8013d1c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013d40:	89b8      	ldrh	r0, [r7, #12]
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	33f0      	adds	r3, #240	; 0xf0
 8013d46:	697a      	ldr	r2, [r7, #20]
 8013d48:	4619      	mov	r1, r3
 8013d4a:	f001 fcab 	bl	80156a4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013d4e:	4b27      	ldr	r3, [pc, #156]	; (8013dec <dhcp_select+0x1e8>)
 8013d50:	6818      	ldr	r0, [r3, #0]
 8013d52:	4b27      	ldr	r3, [pc, #156]	; (8013df0 <dhcp_select+0x1ec>)
 8013d54:	9301      	str	r3, [sp, #4]
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	9300      	str	r3, [sp, #0]
 8013d5a:	2343      	movs	r3, #67	; 0x43
 8013d5c:	4a25      	ldr	r2, [pc, #148]	; (8013df4 <dhcp_select+0x1f0>)
 8013d5e:	6979      	ldr	r1, [r7, #20]
 8013d60:	f00b fda6 	bl	801f8b0 <udp_sendto_if_src>
 8013d64:	4603      	mov	r3, r0
 8013d66:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013d68:	6978      	ldr	r0, [r7, #20]
 8013d6a:	f005 fb5b 	bl	8019424 <pbuf_free>
 8013d6e:	e001      	b.n	8013d74 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013d70:	23ff      	movs	r3, #255	; 0xff
 8013d72:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	799b      	ldrb	r3, [r3, #6]
 8013d78:	2bff      	cmp	r3, #255	; 0xff
 8013d7a:	d005      	beq.n	8013d88 <dhcp_select+0x184>
    dhcp->tries++;
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	799b      	ldrb	r3, [r3, #6]
 8013d80:	3301      	adds	r3, #1
 8013d82:	b2da      	uxtb	r2, r3
 8013d84:	69bb      	ldr	r3, [r7, #24]
 8013d86:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013d88:	69bb      	ldr	r3, [r7, #24]
 8013d8a:	799b      	ldrb	r3, [r3, #6]
 8013d8c:	2b05      	cmp	r3, #5
 8013d8e:	d80d      	bhi.n	8013dac <dhcp_select+0x1a8>
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	799b      	ldrb	r3, [r3, #6]
 8013d94:	461a      	mov	r2, r3
 8013d96:	2301      	movs	r3, #1
 8013d98:	4093      	lsls	r3, r2
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	0152      	lsls	r2, r2, #5
 8013da0:	1ad2      	subs	r2, r2, r3
 8013da2:	0092      	lsls	r2, r2, #2
 8013da4:	4413      	add	r3, r2
 8013da6:	00db      	lsls	r3, r3, #3
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	e001      	b.n	8013db0 <dhcp_select+0x1ac>
 8013dac:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013db0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013db2:	89fb      	ldrh	r3, [r7, #14]
 8013db4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013db8:	4a0f      	ldr	r2, [pc, #60]	; (8013df8 <dhcp_select+0x1f4>)
 8013dba:	fb82 1203 	smull	r1, r2, r2, r3
 8013dbe:	1152      	asrs	r2, r2, #5
 8013dc0:	17db      	asrs	r3, r3, #31
 8013dc2:	1ad3      	subs	r3, r2, r3
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013dca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3720      	adds	r7, #32
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	080228c8 	.word	0x080228c8
 8013ddc:	080229b8 	.word	0x080229b8
 8013de0:	0802296c 	.word	0x0802296c
 8013de4:	080229d4 	.word	0x080229d4
 8013de8:	20000088 	.word	0x20000088
 8013dec:	20008f5c 	.word	0x20008f5c
 8013df0:	08025bf0 	.word	0x08025bf0
 8013df4:	08025bf4 	.word	0x08025bf4
 8013df8:	10624dd3 	.word	0x10624dd3

08013dfc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013e02:	4b27      	ldr	r3, [pc, #156]	; (8013ea0 <dhcp_coarse_tmr+0xa4>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	607b      	str	r3, [r7, #4]
 8013e08:	e042      	b.n	8013e90 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d039      	beq.n	8013e8a <dhcp_coarse_tmr+0x8e>
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	795b      	ldrb	r3, [r3, #5]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d035      	beq.n	8013e8a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	8a9b      	ldrh	r3, [r3, #20]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d012      	beq.n	8013e4c <dhcp_coarse_tmr+0x50>
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	8a5b      	ldrh	r3, [r3, #18]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	b29a      	uxth	r2, r3
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	825a      	strh	r2, [r3, #18]
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	8a5a      	ldrh	r2, [r3, #18]
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	8a9b      	ldrh	r3, [r3, #20]
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d106      	bne.n	8013e4c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f000 fe34 	bl	8014aac <dhcp_release_and_stop>
        dhcp_start(netif);
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f000 f96b 	bl	8014120 <dhcp_start>
 8013e4a:	e01e      	b.n	8013e8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	8a1b      	ldrh	r3, [r3, #16]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d00b      	beq.n	8013e6c <dhcp_coarse_tmr+0x70>
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	8a1b      	ldrh	r3, [r3, #16]
 8013e58:	1e5a      	subs	r2, r3, #1
 8013e5a:	b291      	uxth	r1, r2
 8013e5c:	683a      	ldr	r2, [r7, #0]
 8013e5e:	8211      	strh	r1, [r2, #16]
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d103      	bne.n	8013e6c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 f8c7 	bl	8013ff8 <dhcp_t2_timeout>
 8013e6a:	e00e      	b.n	8013e8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	89db      	ldrh	r3, [r3, #14]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d00a      	beq.n	8013e8a <dhcp_coarse_tmr+0x8e>
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	89db      	ldrh	r3, [r3, #14]
 8013e78:	1e5a      	subs	r2, r3, #1
 8013e7a:	b291      	uxth	r1, r2
 8013e7c:	683a      	ldr	r2, [r7, #0]
 8013e7e:	81d1      	strh	r1, [r2, #14]
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	d102      	bne.n	8013e8a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f000 f888 	bl	8013f9a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	607b      	str	r3, [r7, #4]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d1b9      	bne.n	8013e0a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013e96:	bf00      	nop
 8013e98:	bf00      	nop
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20011f64 	.word	0x20011f64

08013ea4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013eaa:	4b16      	ldr	r3, [pc, #88]	; (8013f04 <dhcp_fine_tmr+0x60>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	607b      	str	r3, [r7, #4]
 8013eb0:	e020      	b.n	8013ef4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eb6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d017      	beq.n	8013eee <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	891b      	ldrh	r3, [r3, #8]
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d906      	bls.n	8013ed4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	891b      	ldrh	r3, [r3, #8]
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	b29a      	uxth	r2, r3
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	811a      	strh	r2, [r3, #8]
 8013ed2:	e00c      	b.n	8013eee <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	891b      	ldrh	r3, [r3, #8]
 8013ed8:	2b01      	cmp	r3, #1
 8013eda:	d108      	bne.n	8013eee <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	891b      	ldrh	r3, [r3, #8]
 8013ee0:	3b01      	subs	r3, #1
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f000 f80d 	bl	8013f08 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	607b      	str	r3, [r7, #4]
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d1db      	bne.n	8013eb2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013efa:	bf00      	nop
 8013efc:	bf00      	nop
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	20011f64 	.word	0x20011f64

08013f08 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f14:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	795b      	ldrb	r3, [r3, #5]
 8013f1a:	2b0c      	cmp	r3, #12
 8013f1c:	d003      	beq.n	8013f26 <dhcp_timeout+0x1e>
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	795b      	ldrb	r3, [r3, #5]
 8013f22:	2b06      	cmp	r3, #6
 8013f24:	d103      	bne.n	8013f2e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f000 fa56 	bl	80143d8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013f2c:	e031      	b.n	8013f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	795b      	ldrb	r3, [r3, #5]
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	d10e      	bne.n	8013f54 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	799b      	ldrb	r3, [r3, #6]
 8013f3a:	2b05      	cmp	r3, #5
 8013f3c:	d803      	bhi.n	8013f46 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ff fe60 	bl	8013c04 <dhcp_select>
}
 8013f44:	e025      	b.n	8013f92 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f000 fdb0 	bl	8014aac <dhcp_release_and_stop>
      dhcp_start(netif);
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f000 f8e7 	bl	8014120 <dhcp_start>
}
 8013f52:	e01e      	b.n	8013f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	795b      	ldrb	r3, [r3, #5]
 8013f58:	2b08      	cmp	r3, #8
 8013f5a:	d10b      	bne.n	8013f74 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	799b      	ldrb	r3, [r3, #6]
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d803      	bhi.n	8013f6c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f7ff fdf3 	bl	8013b50 <dhcp_check>
}
 8013f6a:	e012      	b.n	8013f92 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f000 fad5 	bl	801451c <dhcp_bind>
}
 8013f72:	e00e      	b.n	8013f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	795b      	ldrb	r3, [r3, #5]
 8013f78:	2b03      	cmp	r3, #3
 8013f7a:	d10a      	bne.n	8013f92 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	799b      	ldrb	r3, [r3, #6]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d803      	bhi.n	8013f8c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f000 fcdb 	bl	8014940 <dhcp_reboot>
}
 8013f8a:	e002      	b.n	8013f92 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f000 fa23 	bl	80143d8 <dhcp_discover>
}
 8013f92:	bf00      	nop
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}

08013f9a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b084      	sub	sp, #16
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	795b      	ldrb	r3, [r3, #5]
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d007      	beq.n	8013fc0 <dhcp_t1_timeout+0x26>
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	795b      	ldrb	r3, [r3, #5]
 8013fb4:	2b0a      	cmp	r3, #10
 8013fb6:	d003      	beq.n	8013fc0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013fbc:	2b05      	cmp	r3, #5
 8013fbe:	d117      	bne.n	8013ff0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f000 fb85 	bl	80146d0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	899b      	ldrh	r3, [r3, #12]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	8a5b      	ldrh	r3, [r3, #18]
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	2b01      	cmp	r3, #1
 8013fd4:	dd0c      	ble.n	8013ff0 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	899b      	ldrh	r3, [r3, #12]
 8013fda:	461a      	mov	r2, r3
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	8a5b      	ldrh	r3, [r3, #18]
 8013fe0:	1ad3      	subs	r3, r2, r3
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	da00      	bge.n	8013fe8 <dhcp_t1_timeout+0x4e>
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	105b      	asrs	r3, r3, #1
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013ff0:	bf00      	nop
 8013ff2:	3710      	adds	r7, #16
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}

08013ff8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b084      	sub	sp, #16
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014004:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	795b      	ldrb	r3, [r3, #5]
 801400a:	2b01      	cmp	r3, #1
 801400c:	d00b      	beq.n	8014026 <dhcp_t2_timeout+0x2e>
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	795b      	ldrb	r3, [r3, #5]
 8014012:	2b0a      	cmp	r3, #10
 8014014:	d007      	beq.n	8014026 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801401a:	2b05      	cmp	r3, #5
 801401c:	d003      	beq.n	8014026 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	795b      	ldrb	r3, [r3, #5]
 8014022:	2b04      	cmp	r3, #4
 8014024:	d117      	bne.n	8014056 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f000 fbee 	bl	8014808 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	8a9b      	ldrh	r3, [r3, #20]
 8014030:	461a      	mov	r2, r3
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	8a5b      	ldrh	r3, [r3, #18]
 8014036:	1ad3      	subs	r3, r2, r3
 8014038:	2b01      	cmp	r3, #1
 801403a:	dd0c      	ble.n	8014056 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	8a9b      	ldrh	r3, [r3, #20]
 8014040:	461a      	mov	r2, r3
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	8a5b      	ldrh	r3, [r3, #18]
 8014046:	1ad3      	subs	r3, r2, r3
 8014048:	2b00      	cmp	r3, #0
 801404a:	da00      	bge.n	801404e <dhcp_t2_timeout+0x56>
 801404c:	3301      	adds	r3, #1
 801404e:	105b      	asrs	r3, r3, #1
 8014050:	b29a      	uxth	r2, r3
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014056:	bf00      	nop
 8014058:	3710      	adds	r7, #16
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}
	...

08014060 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801406e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2200      	movs	r2, #0
 8014074:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2200      	movs	r2, #0
 801407a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801407c:	4b26      	ldr	r3, [pc, #152]	; (8014118 <dhcp_handle_ack+0xb8>)
 801407e:	78db      	ldrb	r3, [r3, #3]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d003      	beq.n	801408c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014084:	4b25      	ldr	r3, [pc, #148]	; (801411c <dhcp_handle_ack+0xbc>)
 8014086:	68da      	ldr	r2, [r3, #12]
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801408c:	4b22      	ldr	r3, [pc, #136]	; (8014118 <dhcp_handle_ack+0xb8>)
 801408e:	791b      	ldrb	r3, [r3, #4]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d004      	beq.n	801409e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014094:	4b21      	ldr	r3, [pc, #132]	; (801411c <dhcp_handle_ack+0xbc>)
 8014096:	691a      	ldr	r2, [r3, #16]
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	62da      	str	r2, [r3, #44]	; 0x2c
 801409c:	e004      	b.n	80140a8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a2:	085a      	lsrs	r2, r3, #1
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80140a8:	4b1b      	ldr	r3, [pc, #108]	; (8014118 <dhcp_handle_ack+0xb8>)
 80140aa:	795b      	ldrb	r3, [r3, #5]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d004      	beq.n	80140ba <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80140b0:	4b1a      	ldr	r3, [pc, #104]	; (801411c <dhcp_handle_ack+0xbc>)
 80140b2:	695a      	ldr	r2, [r3, #20]
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	631a      	str	r2, [r3, #48]	; 0x30
 80140b8:	e007      	b.n	80140ca <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80140be:	4613      	mov	r3, r2
 80140c0:	00db      	lsls	r3, r3, #3
 80140c2:	1a9b      	subs	r3, r3, r2
 80140c4:	08da      	lsrs	r2, r3, #3
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	691a      	ldr	r2, [r3, #16]
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80140d2:	4b11      	ldr	r3, [pc, #68]	; (8014118 <dhcp_handle_ack+0xb8>)
 80140d4:	799b      	ldrb	r3, [r3, #6]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00b      	beq.n	80140f2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80140da:	4b10      	ldr	r3, [pc, #64]	; (801411c <dhcp_handle_ack+0xbc>)
 80140dc:	699b      	ldr	r3, [r3, #24]
 80140de:	4618      	mov	r0, r3
 80140e0:	f7ff fc87 	bl	80139f2 <lwip_htonl>
 80140e4:	4602      	mov	r2, r0
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	2201      	movs	r2, #1
 80140ee:	71da      	strb	r2, [r3, #7]
 80140f0:	e002      	b.n	80140f8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2200      	movs	r2, #0
 80140f6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80140f8:	4b07      	ldr	r3, [pc, #28]	; (8014118 <dhcp_handle_ack+0xb8>)
 80140fa:	79db      	ldrb	r3, [r3, #7]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d007      	beq.n	8014110 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014100:	4b06      	ldr	r3, [pc, #24]	; (801411c <dhcp_handle_ack+0xbc>)
 8014102:	69db      	ldr	r3, [r3, #28]
 8014104:	4618      	mov	r0, r3
 8014106:	f7ff fc74 	bl	80139f2 <lwip_htonl>
 801410a:	4602      	mov	r2, r0
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014110:	bf00      	nop
 8014112:	3710      	adds	r7, #16
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	2000e818 	.word	0x2000e818
 801411c:	2000e820 	.word	0x2000e820

08014120 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b084      	sub	sp, #16
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d109      	bne.n	8014142 <dhcp_start+0x22>
 801412e:	4b37      	ldr	r3, [pc, #220]	; (801420c <dhcp_start+0xec>)
 8014130:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014134:	4936      	ldr	r1, [pc, #216]	; (8014210 <dhcp_start+0xf0>)
 8014136:	4837      	ldr	r0, [pc, #220]	; (8014214 <dhcp_start+0xf4>)
 8014138:	f00d fb70 	bl	802181c <iprintf>
 801413c:	f06f 030f 	mvn.w	r3, #15
 8014140:	e060      	b.n	8014204 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014148:	f003 0301 	and.w	r3, r3, #1
 801414c:	2b00      	cmp	r3, #0
 801414e:	d109      	bne.n	8014164 <dhcp_start+0x44>
 8014150:	4b2e      	ldr	r3, [pc, #184]	; (801420c <dhcp_start+0xec>)
 8014152:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014156:	4930      	ldr	r1, [pc, #192]	; (8014218 <dhcp_start+0xf8>)
 8014158:	482e      	ldr	r0, [pc, #184]	; (8014214 <dhcp_start+0xf4>)
 801415a:	f00d fb5f 	bl	802181c <iprintf>
 801415e:	f06f 030f 	mvn.w	r3, #15
 8014162:	e04f      	b.n	8014204 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014168:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801416e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014172:	d202      	bcs.n	801417a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014174:	f04f 33ff 	mov.w	r3, #4294967295
 8014178:	e044      	b.n	8014204 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d10d      	bne.n	801419c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014180:	2034      	movs	r0, #52	; 0x34
 8014182:	f004 f8cb 	bl	801831c <mem_malloc>
 8014186:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d102      	bne.n	8014194 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801418e:	f04f 33ff 	mov.w	r3, #4294967295
 8014192:	e037      	b.n	8014204 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	68fa      	ldr	r2, [r7, #12]
 8014198:	625a      	str	r2, [r3, #36]	; 0x24
 801419a:	e005      	b.n	80141a8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	791b      	ldrb	r3, [r3, #4]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d001      	beq.n	80141a8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80141a4:	f7ff fc90 	bl	8013ac8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80141a8:	2234      	movs	r2, #52	; 0x34
 80141aa:	2100      	movs	r1, #0
 80141ac:	68f8      	ldr	r0, [r7, #12]
 80141ae:	f00d fa83 	bl	80216b8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80141b2:	f7ff fc37 	bl	8013a24 <dhcp_inc_pcb_refcount>
 80141b6:	4603      	mov	r3, r0
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d002      	beq.n	80141c2 <dhcp_start+0xa2>
    return ERR_MEM;
 80141bc:	f04f 33ff 	mov.w	r3, #4294967295
 80141c0:	e020      	b.n	8014204 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2201      	movs	r2, #1
 80141c6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141ce:	f003 0304 	and.w	r3, r3, #4
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d105      	bne.n	80141e2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80141d6:	2102      	movs	r1, #2
 80141d8:	68f8      	ldr	r0, [r7, #12]
 80141da:	f000 fd01 	bl	8014be0 <dhcp_set_state>
    return ERR_OK;
 80141de:	2300      	movs	r3, #0
 80141e0:	e010      	b.n	8014204 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f000 f8f8 	bl	80143d8 <dhcp_discover>
 80141e8:	4603      	mov	r3, r0
 80141ea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80141ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d005      	beq.n	8014200 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f000 fc59 	bl	8014aac <dhcp_release_and_stop>
    return ERR_MEM;
 80141fa:	f04f 33ff 	mov.w	r3, #4294967295
 80141fe:	e001      	b.n	8014204 <dhcp_start+0xe4>
  }
  return result;
 8014200:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014204:	4618      	mov	r0, r3
 8014206:	3710      	adds	r7, #16
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	080228c8 	.word	0x080228c8
 8014210:	080229f0 	.word	0x080229f0
 8014214:	0802296c 	.word	0x0802296c
 8014218:	08022a34 	.word	0x08022a34

0801421c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014228:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d025      	beq.n	801427c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	795b      	ldrb	r3, [r3, #5]
 8014234:	2b0a      	cmp	r3, #10
 8014236:	d008      	beq.n	801424a <dhcp_network_changed+0x2e>
 8014238:	2b0a      	cmp	r3, #10
 801423a:	dc0d      	bgt.n	8014258 <dhcp_network_changed+0x3c>
 801423c:	2b00      	cmp	r3, #0
 801423e:	d01f      	beq.n	8014280 <dhcp_network_changed+0x64>
 8014240:	2b00      	cmp	r3, #0
 8014242:	db09      	blt.n	8014258 <dhcp_network_changed+0x3c>
 8014244:	3b03      	subs	r3, #3
 8014246:	2b02      	cmp	r3, #2
 8014248:	d806      	bhi.n	8014258 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	2200      	movs	r2, #0
 801424e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 fb75 	bl	8014940 <dhcp_reboot>
      break;
 8014256:	e014      	b.n	8014282 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	795b      	ldrb	r3, [r3, #5]
 801425c:	2b0c      	cmp	r3, #12
 801425e:	d906      	bls.n	801426e <dhcp_network_changed+0x52>
 8014260:	4b09      	ldr	r3, [pc, #36]	; (8014288 <dhcp_network_changed+0x6c>)
 8014262:	f240 326d 	movw	r2, #877	; 0x36d
 8014266:	4909      	ldr	r1, [pc, #36]	; (801428c <dhcp_network_changed+0x70>)
 8014268:	4809      	ldr	r0, [pc, #36]	; (8014290 <dhcp_network_changed+0x74>)
 801426a:	f00d fad7 	bl	802181c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	2200      	movs	r2, #0
 8014272:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f000 f8af 	bl	80143d8 <dhcp_discover>
      break;
 801427a:	e002      	b.n	8014282 <dhcp_network_changed+0x66>
    return;
 801427c:	bf00      	nop
 801427e:	e000      	b.n	8014282 <dhcp_network_changed+0x66>
      break;
 8014280:	bf00      	nop
  }
}
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	080228c8 	.word	0x080228c8
 801428c:	08022a58 	.word	0x08022a58
 8014290:	0802296c 	.word	0x0802296c

08014294 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d107      	bne.n	80142b4 <dhcp_arp_reply+0x20>
 80142a4:	4b0e      	ldr	r3, [pc, #56]	; (80142e0 <dhcp_arp_reply+0x4c>)
 80142a6:	f240 328b 	movw	r2, #907	; 0x38b
 80142aa:	490e      	ldr	r1, [pc, #56]	; (80142e4 <dhcp_arp_reply+0x50>)
 80142ac:	480e      	ldr	r0, [pc, #56]	; (80142e8 <dhcp_arp_reply+0x54>)
 80142ae:	f00d fab5 	bl	802181c <iprintf>
 80142b2:	e012      	b.n	80142da <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142b8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d00c      	beq.n	80142da <dhcp_arp_reply+0x46>
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	795b      	ldrb	r3, [r3, #5]
 80142c4:	2b08      	cmp	r3, #8
 80142c6:	d108      	bne.n	80142da <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	69db      	ldr	r3, [r3, #28]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d102      	bne.n	80142da <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f000 f809 	bl	80142ec <dhcp_decline>
    }
  }
}
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	080228c8 	.word	0x080228c8
 80142e4:	080229f0 	.word	0x080229f0
 80142e8:	0802296c 	.word	0x0802296c

080142ec <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80142ec:	b5b0      	push	{r4, r5, r7, lr}
 80142ee:	b08a      	sub	sp, #40	; 0x28
 80142f0:	af02      	add	r7, sp, #8
 80142f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80142fa:	210c      	movs	r1, #12
 80142fc:	69b8      	ldr	r0, [r7, #24]
 80142fe:	f000 fc6f 	bl	8014be0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014302:	f107 030c 	add.w	r3, r7, #12
 8014306:	2204      	movs	r2, #4
 8014308:	69b9      	ldr	r1, [r7, #24]
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f001 f8f4 	bl	80154f8 <dhcp_create_msg>
 8014310:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d035      	beq.n	8014384 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014318:	697b      	ldr	r3, [r7, #20]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801431e:	89b8      	ldrh	r0, [r7, #12]
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014326:	2304      	movs	r3, #4
 8014328:	2232      	movs	r2, #50	; 0x32
 801432a:	f000 fc73 	bl	8014c14 <dhcp_option>
 801432e:	4603      	mov	r3, r0
 8014330:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014332:	89bc      	ldrh	r4, [r7, #12]
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801433a:	69bb      	ldr	r3, [r7, #24]
 801433c:	69db      	ldr	r3, [r3, #28]
 801433e:	4618      	mov	r0, r3
 8014340:	f7ff fb57 	bl	80139f2 <lwip_htonl>
 8014344:	4603      	mov	r3, r0
 8014346:	461a      	mov	r2, r3
 8014348:	4629      	mov	r1, r5
 801434a:	4620      	mov	r0, r4
 801434c:	f000 fcee 	bl	8014d2c <dhcp_option_long>
 8014350:	4603      	mov	r3, r0
 8014352:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014354:	89b8      	ldrh	r0, [r7, #12]
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	33f0      	adds	r3, #240	; 0xf0
 801435a:	697a      	ldr	r2, [r7, #20]
 801435c:	4619      	mov	r1, r3
 801435e:	f001 f9a1 	bl	80156a4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014362:	4b19      	ldr	r3, [pc, #100]	; (80143c8 <dhcp_decline+0xdc>)
 8014364:	6818      	ldr	r0, [r3, #0]
 8014366:	4b19      	ldr	r3, [pc, #100]	; (80143cc <dhcp_decline+0xe0>)
 8014368:	9301      	str	r3, [sp, #4]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	9300      	str	r3, [sp, #0]
 801436e:	2343      	movs	r3, #67	; 0x43
 8014370:	4a17      	ldr	r2, [pc, #92]	; (80143d0 <dhcp_decline+0xe4>)
 8014372:	6979      	ldr	r1, [r7, #20]
 8014374:	f00b fa9c 	bl	801f8b0 <udp_sendto_if_src>
 8014378:	4603      	mov	r3, r0
 801437a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801437c:	6978      	ldr	r0, [r7, #20]
 801437e:	f005 f851 	bl	8019424 <pbuf_free>
 8014382:	e001      	b.n	8014388 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014384:	23ff      	movs	r3, #255	; 0xff
 8014386:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014388:	69bb      	ldr	r3, [r7, #24]
 801438a:	799b      	ldrb	r3, [r3, #6]
 801438c:	2bff      	cmp	r3, #255	; 0xff
 801438e:	d005      	beq.n	801439c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014390:	69bb      	ldr	r3, [r7, #24]
 8014392:	799b      	ldrb	r3, [r3, #6]
 8014394:	3301      	adds	r3, #1
 8014396:	b2da      	uxtb	r2, r3
 8014398:	69bb      	ldr	r3, [r7, #24]
 801439a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801439c:	f242 7310 	movw	r3, #10000	; 0x2710
 80143a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80143a2:	89fb      	ldrh	r3, [r7, #14]
 80143a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80143a8:	4a0a      	ldr	r2, [pc, #40]	; (80143d4 <dhcp_decline+0xe8>)
 80143aa:	fb82 1203 	smull	r1, r2, r2, r3
 80143ae:	1152      	asrs	r2, r2, #5
 80143b0:	17db      	asrs	r3, r3, #31
 80143b2:	1ad3      	subs	r3, r2, r3
 80143b4:	b29a      	uxth	r2, r3
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80143ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3720      	adds	r7, #32
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bdb0      	pop	{r4, r5, r7, pc}
 80143c6:	bf00      	nop
 80143c8:	20008f5c 	.word	0x20008f5c
 80143cc:	08025bf0 	.word	0x08025bf0
 80143d0:	08025bf4 	.word	0x08025bf4
 80143d4:	10624dd3 	.word	0x10624dd3

080143d8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b08a      	sub	sp, #40	; 0x28
 80143dc:	af02      	add	r7, sp, #8
 80143de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80143e6:	2300      	movs	r3, #0
 80143e8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80143ea:	69bb      	ldr	r3, [r7, #24]
 80143ec:	2200      	movs	r2, #0
 80143ee:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80143f0:	2106      	movs	r1, #6
 80143f2:	69b8      	ldr	r0, [r7, #24]
 80143f4:	f000 fbf4 	bl	8014be0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80143f8:	f107 0308 	add.w	r3, r7, #8
 80143fc:	2201      	movs	r2, #1
 80143fe:	69b9      	ldr	r1, [r7, #24]
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f001 f879 	bl	80154f8 <dhcp_create_msg>
 8014406:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d04b      	beq.n	80144a6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014414:	8938      	ldrh	r0, [r7, #8]
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801441c:	2302      	movs	r3, #2
 801441e:	2239      	movs	r2, #57	; 0x39
 8014420:	f000 fbf8 	bl	8014c14 <dhcp_option>
 8014424:	4603      	mov	r3, r0
 8014426:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014428:	8938      	ldrh	r0, [r7, #8]
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014434:	461a      	mov	r2, r3
 8014436:	f000 fc47 	bl	8014cc8 <dhcp_option_short>
 801443a:	4603      	mov	r3, r0
 801443c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801443e:	8938      	ldrh	r0, [r7, #8]
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014446:	2303      	movs	r3, #3
 8014448:	2237      	movs	r2, #55	; 0x37
 801444a:	f000 fbe3 	bl	8014c14 <dhcp_option>
 801444e:	4603      	mov	r3, r0
 8014450:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014452:	2300      	movs	r3, #0
 8014454:	77fb      	strb	r3, [r7, #31]
 8014456:	e00e      	b.n	8014476 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014458:	8938      	ldrh	r0, [r7, #8]
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014460:	7ffb      	ldrb	r3, [r7, #31]
 8014462:	4a29      	ldr	r2, [pc, #164]	; (8014508 <dhcp_discover+0x130>)
 8014464:	5cd3      	ldrb	r3, [r2, r3]
 8014466:	461a      	mov	r2, r3
 8014468:	f000 fc08 	bl	8014c7c <dhcp_option_byte>
 801446c:	4603      	mov	r3, r0
 801446e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014470:	7ffb      	ldrb	r3, [r7, #31]
 8014472:	3301      	adds	r3, #1
 8014474:	77fb      	strb	r3, [r7, #31]
 8014476:	7ffb      	ldrb	r3, [r7, #31]
 8014478:	2b02      	cmp	r3, #2
 801447a:	d9ed      	bls.n	8014458 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801447c:	8938      	ldrh	r0, [r7, #8]
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	33f0      	adds	r3, #240	; 0xf0
 8014482:	693a      	ldr	r2, [r7, #16]
 8014484:	4619      	mov	r1, r3
 8014486:	f001 f90d 	bl	80156a4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801448a:	4b20      	ldr	r3, [pc, #128]	; (801450c <dhcp_discover+0x134>)
 801448c:	6818      	ldr	r0, [r3, #0]
 801448e:	4b20      	ldr	r3, [pc, #128]	; (8014510 <dhcp_discover+0x138>)
 8014490:	9301      	str	r3, [sp, #4]
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	2343      	movs	r3, #67	; 0x43
 8014498:	4a1e      	ldr	r2, [pc, #120]	; (8014514 <dhcp_discover+0x13c>)
 801449a:	6939      	ldr	r1, [r7, #16]
 801449c:	f00b fa08 	bl	801f8b0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80144a0:	6938      	ldr	r0, [r7, #16]
 80144a2:	f004 ffbf 	bl	8019424 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80144a6:	69bb      	ldr	r3, [r7, #24]
 80144a8:	799b      	ldrb	r3, [r3, #6]
 80144aa:	2bff      	cmp	r3, #255	; 0xff
 80144ac:	d005      	beq.n	80144ba <dhcp_discover+0xe2>
    dhcp->tries++;
 80144ae:	69bb      	ldr	r3, [r7, #24]
 80144b0:	799b      	ldrb	r3, [r3, #6]
 80144b2:	3301      	adds	r3, #1
 80144b4:	b2da      	uxtb	r2, r3
 80144b6:	69bb      	ldr	r3, [r7, #24]
 80144b8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	799b      	ldrb	r3, [r3, #6]
 80144be:	2b05      	cmp	r3, #5
 80144c0:	d80d      	bhi.n	80144de <dhcp_discover+0x106>
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	799b      	ldrb	r3, [r3, #6]
 80144c6:	461a      	mov	r2, r3
 80144c8:	2301      	movs	r3, #1
 80144ca:	4093      	lsls	r3, r2
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	461a      	mov	r2, r3
 80144d0:	0152      	lsls	r2, r2, #5
 80144d2:	1ad2      	subs	r2, r2, r3
 80144d4:	0092      	lsls	r2, r2, #2
 80144d6:	4413      	add	r3, r2
 80144d8:	00db      	lsls	r3, r3, #3
 80144da:	b29b      	uxth	r3, r3
 80144dc:	e001      	b.n	80144e2 <dhcp_discover+0x10a>
 80144de:	f64e 2360 	movw	r3, #60000	; 0xea60
 80144e2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144e4:	897b      	ldrh	r3, [r7, #10]
 80144e6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144ea:	4a0b      	ldr	r2, [pc, #44]	; (8014518 <dhcp_discover+0x140>)
 80144ec:	fb82 1203 	smull	r1, r2, r2, r3
 80144f0:	1152      	asrs	r2, r2, #5
 80144f2:	17db      	asrs	r3, r3, #31
 80144f4:	1ad3      	subs	r3, r2, r3
 80144f6:	b29a      	uxth	r2, r3
 80144f8:	69bb      	ldr	r3, [r7, #24]
 80144fa:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80144fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014500:	4618      	mov	r0, r3
 8014502:	3720      	adds	r7, #32
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	20000088 	.word	0x20000088
 801450c:	20008f5c 	.word	0x20008f5c
 8014510:	08025bf0 	.word	0x08025bf0
 8014514:	08025bf4 	.word	0x08025bf4
 8014518:	10624dd3 	.word	0x10624dd3

0801451c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b088      	sub	sp, #32
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d107      	bne.n	801453a <dhcp_bind+0x1e>
 801452a:	4b64      	ldr	r3, [pc, #400]	; (80146bc <dhcp_bind+0x1a0>)
 801452c:	f240 4215 	movw	r2, #1045	; 0x415
 8014530:	4963      	ldr	r1, [pc, #396]	; (80146c0 <dhcp_bind+0x1a4>)
 8014532:	4864      	ldr	r0, [pc, #400]	; (80146c4 <dhcp_bind+0x1a8>)
 8014534:	f00d f972 	bl	802181c <iprintf>
 8014538:	e0bc      	b.n	80146b4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801453e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d107      	bne.n	8014556 <dhcp_bind+0x3a>
 8014546:	4b5d      	ldr	r3, [pc, #372]	; (80146bc <dhcp_bind+0x1a0>)
 8014548:	f240 4217 	movw	r2, #1047	; 0x417
 801454c:	495e      	ldr	r1, [pc, #376]	; (80146c8 <dhcp_bind+0x1ac>)
 801454e:	485d      	ldr	r0, [pc, #372]	; (80146c4 <dhcp_bind+0x1a8>)
 8014550:	f00d f964 	bl	802181c <iprintf>
 8014554:	e0ae      	b.n	80146b4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014556:	69bb      	ldr	r3, [r7, #24]
 8014558:	2200      	movs	r2, #0
 801455a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801455c:	69bb      	ldr	r3, [r7, #24]
 801455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014564:	d019      	beq.n	801459a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014566:	69bb      	ldr	r3, [r7, #24]
 8014568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801456a:	331e      	adds	r3, #30
 801456c:	4a57      	ldr	r2, [pc, #348]	; (80146cc <dhcp_bind+0x1b0>)
 801456e:	fba2 2303 	umull	r2, r3, r2, r3
 8014572:	095b      	lsrs	r3, r3, #5
 8014574:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014576:	69fb      	ldr	r3, [r7, #28]
 8014578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801457c:	d302      	bcc.n	8014584 <dhcp_bind+0x68>
      timeout = 0xffff;
 801457e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014582:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014584:	69fb      	ldr	r3, [r7, #28]
 8014586:	b29a      	uxth	r2, r3
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	8a9b      	ldrh	r3, [r3, #20]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d102      	bne.n	801459a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014594:	69bb      	ldr	r3, [r7, #24]
 8014596:	2201      	movs	r2, #1
 8014598:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a2:	d01d      	beq.n	80145e0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a8:	331e      	adds	r3, #30
 80145aa:	4a48      	ldr	r2, [pc, #288]	; (80146cc <dhcp_bind+0x1b0>)
 80145ac:	fba2 2303 	umull	r2, r3, r2, r3
 80145b0:	095b      	lsrs	r3, r3, #5
 80145b2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80145b4:	69fb      	ldr	r3, [r7, #28]
 80145b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145ba:	d302      	bcc.n	80145c2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80145bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145c0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80145c2:	69fb      	ldr	r3, [r7, #28]
 80145c4:	b29a      	uxth	r2, r3
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	895b      	ldrh	r3, [r3, #10]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d102      	bne.n	80145d8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	2201      	movs	r2, #1
 80145d6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	895a      	ldrh	r2, [r3, #10]
 80145dc:	69bb      	ldr	r3, [r7, #24]
 80145de:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80145e0:	69bb      	ldr	r3, [r7, #24]
 80145e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145e8:	d01d      	beq.n	8014626 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ee:	331e      	adds	r3, #30
 80145f0:	4a36      	ldr	r2, [pc, #216]	; (80146cc <dhcp_bind+0x1b0>)
 80145f2:	fba2 2303 	umull	r2, r3, r2, r3
 80145f6:	095b      	lsrs	r3, r3, #5
 80145f8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014600:	d302      	bcc.n	8014608 <dhcp_bind+0xec>
      timeout = 0xffff;
 8014602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014606:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014608:	69fb      	ldr	r3, [r7, #28]
 801460a:	b29a      	uxth	r2, r3
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	899b      	ldrh	r3, [r3, #12]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d102      	bne.n	801461e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014618:	69bb      	ldr	r3, [r7, #24]
 801461a:	2201      	movs	r2, #1
 801461c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	899a      	ldrh	r2, [r3, #12]
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	895a      	ldrh	r2, [r3, #10]
 801462a:	69bb      	ldr	r3, [r7, #24]
 801462c:	899b      	ldrh	r3, [r3, #12]
 801462e:	429a      	cmp	r2, r3
 8014630:	d306      	bcc.n	8014640 <dhcp_bind+0x124>
 8014632:	69bb      	ldr	r3, [r7, #24]
 8014634:	899b      	ldrh	r3, [r3, #12]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d002      	beq.n	8014640 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	2200      	movs	r2, #0
 801463e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	79db      	ldrb	r3, [r3, #7]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d003      	beq.n	8014650 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014648:	69bb      	ldr	r3, [r7, #24]
 801464a:	6a1b      	ldr	r3, [r3, #32]
 801464c:	613b      	str	r3, [r7, #16]
 801464e:	e014      	b.n	801467a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	331c      	adds	r3, #28
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014658:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801465c:	2b00      	cmp	r3, #0
 801465e:	db02      	blt.n	8014666 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014660:	23ff      	movs	r3, #255	; 0xff
 8014662:	613b      	str	r3, [r7, #16]
 8014664:	e009      	b.n	801467a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014666:	7dfb      	ldrb	r3, [r7, #23]
 8014668:	2bbf      	cmp	r3, #191	; 0xbf
 801466a:	d903      	bls.n	8014674 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801466c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014670:	613b      	str	r3, [r7, #16]
 8014672:	e002      	b.n	801467a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014678:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801467a:	69bb      	ldr	r3, [r7, #24]
 801467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801467e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d108      	bne.n	8014698 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014686:	69bb      	ldr	r3, [r7, #24]
 8014688:	69da      	ldr	r2, [r3, #28]
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	4013      	ands	r3, r2
 801468e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014696:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014698:	210a      	movs	r1, #10
 801469a:	69b8      	ldr	r0, [r7, #24]
 801469c:	f000 faa0 	bl	8014be0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	f103 011c 	add.w	r1, r3, #28
 80146a6:	f107 030c 	add.w	r3, r7, #12
 80146aa:	f107 0210 	add.w	r2, r7, #16
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f004 f9aa 	bl	8018a08 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80146b4:	3720      	adds	r7, #32
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	080228c8 	.word	0x080228c8
 80146c0:	08022a6c 	.word	0x08022a6c
 80146c4:	0802296c 	.word	0x0802296c
 80146c8:	08022a88 	.word	0x08022a88
 80146cc:	88888889 	.word	0x88888889

080146d0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b08a      	sub	sp, #40	; 0x28
 80146d4:	af02      	add	r7, sp, #8
 80146d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146dc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80146de:	2105      	movs	r1, #5
 80146e0:	69b8      	ldr	r0, [r7, #24]
 80146e2:	f000 fa7d 	bl	8014be0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80146e6:	f107 030c 	add.w	r3, r7, #12
 80146ea:	2203      	movs	r2, #3
 80146ec:	69b9      	ldr	r1, [r7, #24]
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 ff02 	bl	80154f8 <dhcp_create_msg>
 80146f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d04e      	beq.n	801479a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014702:	89b8      	ldrh	r0, [r7, #12]
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801470a:	2302      	movs	r3, #2
 801470c:	2239      	movs	r2, #57	; 0x39
 801470e:	f000 fa81 	bl	8014c14 <dhcp_option>
 8014712:	4603      	mov	r3, r0
 8014714:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014716:	89b8      	ldrh	r0, [r7, #12]
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014722:	461a      	mov	r2, r3
 8014724:	f000 fad0 	bl	8014cc8 <dhcp_option_short>
 8014728:	4603      	mov	r3, r0
 801472a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801472c:	89b8      	ldrh	r0, [r7, #12]
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014734:	2303      	movs	r3, #3
 8014736:	2237      	movs	r2, #55	; 0x37
 8014738:	f000 fa6c 	bl	8014c14 <dhcp_option>
 801473c:	4603      	mov	r3, r0
 801473e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014740:	2300      	movs	r3, #0
 8014742:	77bb      	strb	r3, [r7, #30]
 8014744:	e00e      	b.n	8014764 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014746:	89b8      	ldrh	r0, [r7, #12]
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801474e:	7fbb      	ldrb	r3, [r7, #30]
 8014750:	4a2a      	ldr	r2, [pc, #168]	; (80147fc <dhcp_renew+0x12c>)
 8014752:	5cd3      	ldrb	r3, [r2, r3]
 8014754:	461a      	mov	r2, r3
 8014756:	f000 fa91 	bl	8014c7c <dhcp_option_byte>
 801475a:	4603      	mov	r3, r0
 801475c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801475e:	7fbb      	ldrb	r3, [r7, #30]
 8014760:	3301      	adds	r3, #1
 8014762:	77bb      	strb	r3, [r7, #30]
 8014764:	7fbb      	ldrb	r3, [r7, #30]
 8014766:	2b02      	cmp	r3, #2
 8014768:	d9ed      	bls.n	8014746 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801476a:	89b8      	ldrh	r0, [r7, #12]
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	33f0      	adds	r3, #240	; 0xf0
 8014770:	697a      	ldr	r2, [r7, #20]
 8014772:	4619      	mov	r1, r3
 8014774:	f000 ff96 	bl	80156a4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014778:	4b21      	ldr	r3, [pc, #132]	; (8014800 <dhcp_renew+0x130>)
 801477a:	6818      	ldr	r0, [r3, #0]
 801477c:	69bb      	ldr	r3, [r7, #24]
 801477e:	f103 0218 	add.w	r2, r3, #24
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	9300      	str	r3, [sp, #0]
 8014786:	2343      	movs	r3, #67	; 0x43
 8014788:	6979      	ldr	r1, [r7, #20]
 801478a:	f00b f81d 	bl	801f7c8 <udp_sendto_if>
 801478e:	4603      	mov	r3, r0
 8014790:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014792:	6978      	ldr	r0, [r7, #20]
 8014794:	f004 fe46 	bl	8019424 <pbuf_free>
 8014798:	e001      	b.n	801479e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801479a:	23ff      	movs	r3, #255	; 0xff
 801479c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801479e:	69bb      	ldr	r3, [r7, #24]
 80147a0:	799b      	ldrb	r3, [r3, #6]
 80147a2:	2bff      	cmp	r3, #255	; 0xff
 80147a4:	d005      	beq.n	80147b2 <dhcp_renew+0xe2>
    dhcp->tries++;
 80147a6:	69bb      	ldr	r3, [r7, #24]
 80147a8:	799b      	ldrb	r3, [r3, #6]
 80147aa:	3301      	adds	r3, #1
 80147ac:	b2da      	uxtb	r2, r3
 80147ae:	69bb      	ldr	r3, [r7, #24]
 80147b0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	799b      	ldrb	r3, [r3, #6]
 80147b6:	2b09      	cmp	r3, #9
 80147b8:	d80a      	bhi.n	80147d0 <dhcp_renew+0x100>
 80147ba:	69bb      	ldr	r3, [r7, #24]
 80147bc:	799b      	ldrb	r3, [r3, #6]
 80147be:	b29b      	uxth	r3, r3
 80147c0:	461a      	mov	r2, r3
 80147c2:	0152      	lsls	r2, r2, #5
 80147c4:	1ad2      	subs	r2, r2, r3
 80147c6:	0092      	lsls	r2, r2, #2
 80147c8:	4413      	add	r3, r2
 80147ca:	011b      	lsls	r3, r3, #4
 80147cc:	b29b      	uxth	r3, r3
 80147ce:	e001      	b.n	80147d4 <dhcp_renew+0x104>
 80147d0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80147d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80147d6:	89fb      	ldrh	r3, [r7, #14]
 80147d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80147dc:	4a09      	ldr	r2, [pc, #36]	; (8014804 <dhcp_renew+0x134>)
 80147de:	fb82 1203 	smull	r1, r2, r2, r3
 80147e2:	1152      	asrs	r2, r2, #5
 80147e4:	17db      	asrs	r3, r3, #31
 80147e6:	1ad3      	subs	r3, r2, r3
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80147ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3720      	adds	r7, #32
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	20000088 	.word	0x20000088
 8014800:	20008f5c 	.word	0x20008f5c
 8014804:	10624dd3 	.word	0x10624dd3

08014808 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b08a      	sub	sp, #40	; 0x28
 801480c:	af02      	add	r7, sp, #8
 801480e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014814:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014816:	2104      	movs	r1, #4
 8014818:	69b8      	ldr	r0, [r7, #24]
 801481a:	f000 f9e1 	bl	8014be0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801481e:	f107 030c 	add.w	r3, r7, #12
 8014822:	2203      	movs	r2, #3
 8014824:	69b9      	ldr	r1, [r7, #24]
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 fe66 	bl	80154f8 <dhcp_create_msg>
 801482c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d04c      	beq.n	80148ce <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801483a:	89b8      	ldrh	r0, [r7, #12]
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014842:	2302      	movs	r3, #2
 8014844:	2239      	movs	r2, #57	; 0x39
 8014846:	f000 f9e5 	bl	8014c14 <dhcp_option>
 801484a:	4603      	mov	r3, r0
 801484c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801484e:	89b8      	ldrh	r0, [r7, #12]
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801485a:	461a      	mov	r2, r3
 801485c:	f000 fa34 	bl	8014cc8 <dhcp_option_short>
 8014860:	4603      	mov	r3, r0
 8014862:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014864:	89b8      	ldrh	r0, [r7, #12]
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801486c:	2303      	movs	r3, #3
 801486e:	2237      	movs	r2, #55	; 0x37
 8014870:	f000 f9d0 	bl	8014c14 <dhcp_option>
 8014874:	4603      	mov	r3, r0
 8014876:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014878:	2300      	movs	r3, #0
 801487a:	77bb      	strb	r3, [r7, #30]
 801487c:	e00e      	b.n	801489c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801487e:	89b8      	ldrh	r0, [r7, #12]
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014886:	7fbb      	ldrb	r3, [r7, #30]
 8014888:	4a29      	ldr	r2, [pc, #164]	; (8014930 <dhcp_rebind+0x128>)
 801488a:	5cd3      	ldrb	r3, [r2, r3]
 801488c:	461a      	mov	r2, r3
 801488e:	f000 f9f5 	bl	8014c7c <dhcp_option_byte>
 8014892:	4603      	mov	r3, r0
 8014894:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014896:	7fbb      	ldrb	r3, [r7, #30]
 8014898:	3301      	adds	r3, #1
 801489a:	77bb      	strb	r3, [r7, #30]
 801489c:	7fbb      	ldrb	r3, [r7, #30]
 801489e:	2b02      	cmp	r3, #2
 80148a0:	d9ed      	bls.n	801487e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80148a2:	89b8      	ldrh	r0, [r7, #12]
 80148a4:	693b      	ldr	r3, [r7, #16]
 80148a6:	33f0      	adds	r3, #240	; 0xf0
 80148a8:	697a      	ldr	r2, [r7, #20]
 80148aa:	4619      	mov	r1, r3
 80148ac:	f000 fefa 	bl	80156a4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80148b0:	4b20      	ldr	r3, [pc, #128]	; (8014934 <dhcp_rebind+0x12c>)
 80148b2:	6818      	ldr	r0, [r3, #0]
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	2343      	movs	r3, #67	; 0x43
 80148ba:	4a1f      	ldr	r2, [pc, #124]	; (8014938 <dhcp_rebind+0x130>)
 80148bc:	6979      	ldr	r1, [r7, #20]
 80148be:	f00a ff83 	bl	801f7c8 <udp_sendto_if>
 80148c2:	4603      	mov	r3, r0
 80148c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80148c6:	6978      	ldr	r0, [r7, #20]
 80148c8:	f004 fdac 	bl	8019424 <pbuf_free>
 80148cc:	e001      	b.n	80148d2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80148ce:	23ff      	movs	r3, #255	; 0xff
 80148d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	799b      	ldrb	r3, [r3, #6]
 80148d6:	2bff      	cmp	r3, #255	; 0xff
 80148d8:	d005      	beq.n	80148e6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	799b      	ldrb	r3, [r3, #6]
 80148de:	3301      	adds	r3, #1
 80148e0:	b2da      	uxtb	r2, r3
 80148e2:	69bb      	ldr	r3, [r7, #24]
 80148e4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	799b      	ldrb	r3, [r3, #6]
 80148ea:	2b09      	cmp	r3, #9
 80148ec:	d80a      	bhi.n	8014904 <dhcp_rebind+0xfc>
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	799b      	ldrb	r3, [r3, #6]
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	461a      	mov	r2, r3
 80148f6:	0152      	lsls	r2, r2, #5
 80148f8:	1ad2      	subs	r2, r2, r3
 80148fa:	0092      	lsls	r2, r2, #2
 80148fc:	4413      	add	r3, r2
 80148fe:	00db      	lsls	r3, r3, #3
 8014900:	b29b      	uxth	r3, r3
 8014902:	e001      	b.n	8014908 <dhcp_rebind+0x100>
 8014904:	f242 7310 	movw	r3, #10000	; 0x2710
 8014908:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801490a:	89fb      	ldrh	r3, [r7, #14]
 801490c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014910:	4a0a      	ldr	r2, [pc, #40]	; (801493c <dhcp_rebind+0x134>)
 8014912:	fb82 1203 	smull	r1, r2, r2, r3
 8014916:	1152      	asrs	r2, r2, #5
 8014918:	17db      	asrs	r3, r3, #31
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	b29a      	uxth	r2, r3
 801491e:	69bb      	ldr	r3, [r7, #24]
 8014920:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014922:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014926:	4618      	mov	r0, r3
 8014928:	3720      	adds	r7, #32
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	20000088 	.word	0x20000088
 8014934:	20008f5c 	.word	0x20008f5c
 8014938:	08025bf4 	.word	0x08025bf4
 801493c:	10624dd3 	.word	0x10624dd3

08014940 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014940:	b5b0      	push	{r4, r5, r7, lr}
 8014942:	b08a      	sub	sp, #40	; 0x28
 8014944:	af02      	add	r7, sp, #8
 8014946:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801494c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801494e:	2103      	movs	r1, #3
 8014950:	69b8      	ldr	r0, [r7, #24]
 8014952:	f000 f945 	bl	8014be0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014956:	f107 030c 	add.w	r3, r7, #12
 801495a:	2203      	movs	r2, #3
 801495c:	69b9      	ldr	r1, [r7, #24]
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f000 fdca 	bl	80154f8 <dhcp_create_msg>
 8014964:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d066      	beq.n	8014a3a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014972:	89b8      	ldrh	r0, [r7, #12]
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801497a:	2302      	movs	r3, #2
 801497c:	2239      	movs	r2, #57	; 0x39
 801497e:	f000 f949 	bl	8014c14 <dhcp_option>
 8014982:	4603      	mov	r3, r0
 8014984:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014986:	89b8      	ldrh	r0, [r7, #12]
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	33f0      	adds	r3, #240	; 0xf0
 801498c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014990:	4619      	mov	r1, r3
 8014992:	f000 f999 	bl	8014cc8 <dhcp_option_short>
 8014996:	4603      	mov	r3, r0
 8014998:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801499a:	89b8      	ldrh	r0, [r7, #12]
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149a2:	2304      	movs	r3, #4
 80149a4:	2232      	movs	r2, #50	; 0x32
 80149a6:	f000 f935 	bl	8014c14 <dhcp_option>
 80149aa:	4603      	mov	r3, r0
 80149ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80149ae:	89bc      	ldrh	r4, [r7, #12]
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80149b6:	69bb      	ldr	r3, [r7, #24]
 80149b8:	69db      	ldr	r3, [r3, #28]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7ff f819 	bl	80139f2 <lwip_htonl>
 80149c0:	4603      	mov	r3, r0
 80149c2:	461a      	mov	r2, r3
 80149c4:	4629      	mov	r1, r5
 80149c6:	4620      	mov	r0, r4
 80149c8:	f000 f9b0 	bl	8014d2c <dhcp_option_long>
 80149cc:	4603      	mov	r3, r0
 80149ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80149d0:	89b8      	ldrh	r0, [r7, #12]
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149d8:	2303      	movs	r3, #3
 80149da:	2237      	movs	r2, #55	; 0x37
 80149dc:	f000 f91a 	bl	8014c14 <dhcp_option>
 80149e0:	4603      	mov	r3, r0
 80149e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149e4:	2300      	movs	r3, #0
 80149e6:	77bb      	strb	r3, [r7, #30]
 80149e8:	e00e      	b.n	8014a08 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80149ea:	89b8      	ldrh	r0, [r7, #12]
 80149ec:	693b      	ldr	r3, [r7, #16]
 80149ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149f2:	7fbb      	ldrb	r3, [r7, #30]
 80149f4:	4a29      	ldr	r2, [pc, #164]	; (8014a9c <dhcp_reboot+0x15c>)
 80149f6:	5cd3      	ldrb	r3, [r2, r3]
 80149f8:	461a      	mov	r2, r3
 80149fa:	f000 f93f 	bl	8014c7c <dhcp_option_byte>
 80149fe:	4603      	mov	r3, r0
 8014a00:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a02:	7fbb      	ldrb	r3, [r7, #30]
 8014a04:	3301      	adds	r3, #1
 8014a06:	77bb      	strb	r3, [r7, #30]
 8014a08:	7fbb      	ldrb	r3, [r7, #30]
 8014a0a:	2b02      	cmp	r3, #2
 8014a0c:	d9ed      	bls.n	80149ea <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014a0e:	89b8      	ldrh	r0, [r7, #12]
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	33f0      	adds	r3, #240	; 0xf0
 8014a14:	697a      	ldr	r2, [r7, #20]
 8014a16:	4619      	mov	r1, r3
 8014a18:	f000 fe44 	bl	80156a4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014a1c:	4b20      	ldr	r3, [pc, #128]	; (8014aa0 <dhcp_reboot+0x160>)
 8014a1e:	6818      	ldr	r0, [r3, #0]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	2343      	movs	r3, #67	; 0x43
 8014a26:	4a1f      	ldr	r2, [pc, #124]	; (8014aa4 <dhcp_reboot+0x164>)
 8014a28:	6979      	ldr	r1, [r7, #20]
 8014a2a:	f00a fecd 	bl	801f7c8 <udp_sendto_if>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014a32:	6978      	ldr	r0, [r7, #20]
 8014a34:	f004 fcf6 	bl	8019424 <pbuf_free>
 8014a38:	e001      	b.n	8014a3e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014a3a:	23ff      	movs	r3, #255	; 0xff
 8014a3c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	799b      	ldrb	r3, [r3, #6]
 8014a42:	2bff      	cmp	r3, #255	; 0xff
 8014a44:	d005      	beq.n	8014a52 <dhcp_reboot+0x112>
    dhcp->tries++;
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	799b      	ldrb	r3, [r3, #6]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	b2da      	uxtb	r2, r3
 8014a4e:	69bb      	ldr	r3, [r7, #24]
 8014a50:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	799b      	ldrb	r3, [r3, #6]
 8014a56:	2b09      	cmp	r3, #9
 8014a58:	d80a      	bhi.n	8014a70 <dhcp_reboot+0x130>
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	799b      	ldrb	r3, [r3, #6]
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	461a      	mov	r2, r3
 8014a62:	0152      	lsls	r2, r2, #5
 8014a64:	1ad2      	subs	r2, r2, r3
 8014a66:	0092      	lsls	r2, r2, #2
 8014a68:	4413      	add	r3, r2
 8014a6a:	00db      	lsls	r3, r3, #3
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	e001      	b.n	8014a74 <dhcp_reboot+0x134>
 8014a70:	f242 7310 	movw	r3, #10000	; 0x2710
 8014a74:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a76:	89fb      	ldrh	r3, [r7, #14]
 8014a78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a7c:	4a0a      	ldr	r2, [pc, #40]	; (8014aa8 <dhcp_reboot+0x168>)
 8014a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8014a82:	1152      	asrs	r2, r2, #5
 8014a84:	17db      	asrs	r3, r3, #31
 8014a86:	1ad3      	subs	r3, r2, r3
 8014a88:	b29a      	uxth	r2, r3
 8014a8a:	69bb      	ldr	r3, [r7, #24]
 8014a8c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3720      	adds	r7, #32
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bdb0      	pop	{r4, r5, r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	20000088 	.word	0x20000088
 8014aa0:	20008f5c 	.word	0x20008f5c
 8014aa4:	08025bf4 	.word	0x08025bf4
 8014aa8:	10624dd3 	.word	0x10624dd3

08014aac <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014aac:	b5b0      	push	{r4, r5, r7, lr}
 8014aae:	b08a      	sub	sp, #40	; 0x28
 8014ab0:	af02      	add	r7, sp, #8
 8014ab2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ab8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 8084 	beq.w	8014bca <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	795b      	ldrb	r3, [r3, #5]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f000 8081 	beq.w	8014bce <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	699b      	ldr	r3, [r3, #24]
 8014ad0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	2200      	movs	r2, #0
 8014adc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	2200      	movs	r2, #0
 8014aee:	631a      	str	r2, [r3, #48]	; 0x30
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	62da      	str	r2, [r3, #44]	; 0x2c
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	2200      	movs	r2, #0
 8014b04:	829a      	strh	r2, [r3, #20]
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	8a9a      	ldrh	r2, [r3, #20]
 8014b0a:	69fb      	ldr	r3, [r7, #28]
 8014b0c:	825a      	strh	r2, [r3, #18]
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	8a5a      	ldrh	r2, [r3, #18]
 8014b12:	69fb      	ldr	r3, [r7, #28]
 8014b14:	821a      	strh	r2, [r3, #16]
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	8a1a      	ldrh	r2, [r3, #16]
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f000 fdee 	bl	8015700 <dhcp_supplied_address>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d03b      	beq.n	8014ba2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014b2a:	f107 030e 	add.w	r3, r7, #14
 8014b2e:	2207      	movs	r2, #7
 8014b30:	69f9      	ldr	r1, [r7, #28]
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f000 fce0 	bl	80154f8 <dhcp_create_msg>
 8014b38:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d030      	beq.n	8014ba2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014b46:	89f8      	ldrh	r0, [r7, #14]
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b4e:	2304      	movs	r3, #4
 8014b50:	2236      	movs	r2, #54	; 0x36
 8014b52:	f000 f85f 	bl	8014c14 <dhcp_option>
 8014b56:	4603      	mov	r3, r0
 8014b58:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014b5a:	89fc      	ldrh	r4, [r7, #14]
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fe ff44 	bl	80139f2 <lwip_htonl>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	4629      	mov	r1, r5
 8014b70:	4620      	mov	r0, r4
 8014b72:	f000 f8db 	bl	8014d2c <dhcp_option_long>
 8014b76:	4603      	mov	r3, r0
 8014b78:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b7a:	89f8      	ldrh	r0, [r7, #14]
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	33f0      	adds	r3, #240	; 0xf0
 8014b80:	69ba      	ldr	r2, [r7, #24]
 8014b82:	4619      	mov	r1, r3
 8014b84:	f000 fd8e 	bl	80156a4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014b88:	4b13      	ldr	r3, [pc, #76]	; (8014bd8 <dhcp_release_and_stop+0x12c>)
 8014b8a:	6818      	ldr	r0, [r3, #0]
 8014b8c:	f107 0210 	add.w	r2, r7, #16
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	9300      	str	r3, [sp, #0]
 8014b94:	2343      	movs	r3, #67	; 0x43
 8014b96:	69b9      	ldr	r1, [r7, #24]
 8014b98:	f00a fe16 	bl	801f7c8 <udp_sendto_if>
      pbuf_free(p_out);
 8014b9c:	69b8      	ldr	r0, [r7, #24]
 8014b9e:	f004 fc41 	bl	8019424 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014ba2:	4b0e      	ldr	r3, [pc, #56]	; (8014bdc <dhcp_release_and_stop+0x130>)
 8014ba4:	4a0d      	ldr	r2, [pc, #52]	; (8014bdc <dhcp_release_and_stop+0x130>)
 8014ba6:	490d      	ldr	r1, [pc, #52]	; (8014bdc <dhcp_release_and_stop+0x130>)
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f003 ff2d 	bl	8018a08 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014bae:	2100      	movs	r1, #0
 8014bb0:	69f8      	ldr	r0, [r7, #28]
 8014bb2:	f000 f815 	bl	8014be0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014bb6:	69fb      	ldr	r3, [r7, #28]
 8014bb8:	791b      	ldrb	r3, [r3, #4]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d008      	beq.n	8014bd0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014bbe:	f7fe ff83 	bl	8013ac8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014bc2:	69fb      	ldr	r3, [r7, #28]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	711a      	strb	r2, [r3, #4]
 8014bc8:	e002      	b.n	8014bd0 <dhcp_release_and_stop+0x124>
    return;
 8014bca:	bf00      	nop
 8014bcc:	e000      	b.n	8014bd0 <dhcp_release_and_stop+0x124>
    return;
 8014bce:	bf00      	nop
  }
}
 8014bd0:	3720      	adds	r7, #32
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	20008f5c 	.word	0x20008f5c
 8014bdc:	08025bf0 	.word	0x08025bf0

08014be0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	460b      	mov	r3, r1
 8014bea:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	795b      	ldrb	r3, [r3, #5]
 8014bf0:	78fa      	ldrb	r2, [r7, #3]
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d008      	beq.n	8014c08 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	78fa      	ldrb	r2, [r7, #3]
 8014bfa:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2200      	movs	r2, #0
 8014c06:	811a      	strh	r2, [r3, #8]
  }
}
 8014c08:	bf00      	nop
 8014c0a:	370c      	adds	r7, #12
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c12:	4770      	bx	lr

08014c14 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6039      	str	r1, [r7, #0]
 8014c1c:	4611      	mov	r1, r2
 8014c1e:	461a      	mov	r2, r3
 8014c20:	4603      	mov	r3, r0
 8014c22:	80fb      	strh	r3, [r7, #6]
 8014c24:	460b      	mov	r3, r1
 8014c26:	717b      	strb	r3, [r7, #5]
 8014c28:	4613      	mov	r3, r2
 8014c2a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014c2c:	88fa      	ldrh	r2, [r7, #6]
 8014c2e:	793b      	ldrb	r3, [r7, #4]
 8014c30:	4413      	add	r3, r2
 8014c32:	3302      	adds	r3, #2
 8014c34:	2b44      	cmp	r3, #68	; 0x44
 8014c36:	d906      	bls.n	8014c46 <dhcp_option+0x32>
 8014c38:	4b0d      	ldr	r3, [pc, #52]	; (8014c70 <dhcp_option+0x5c>)
 8014c3a:	f240 529a 	movw	r2, #1434	; 0x59a
 8014c3e:	490d      	ldr	r1, [pc, #52]	; (8014c74 <dhcp_option+0x60>)
 8014c40:	480d      	ldr	r0, [pc, #52]	; (8014c78 <dhcp_option+0x64>)
 8014c42:	f00c fdeb 	bl	802181c <iprintf>
  options[options_out_len++] = option_type;
 8014c46:	88fb      	ldrh	r3, [r7, #6]
 8014c48:	1c5a      	adds	r2, r3, #1
 8014c4a:	80fa      	strh	r2, [r7, #6]
 8014c4c:	461a      	mov	r2, r3
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	4413      	add	r3, r2
 8014c52:	797a      	ldrb	r2, [r7, #5]
 8014c54:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014c56:	88fb      	ldrh	r3, [r7, #6]
 8014c58:	1c5a      	adds	r2, r3, #1
 8014c5a:	80fa      	strh	r2, [r7, #6]
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	4413      	add	r3, r2
 8014c62:	793a      	ldrb	r2, [r7, #4]
 8014c64:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c66:	88fb      	ldrh	r3, [r7, #6]
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3708      	adds	r7, #8
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}
 8014c70:	080228c8 	.word	0x080228c8
 8014c74:	08022aa0 	.word	0x08022aa0
 8014c78:	0802296c 	.word	0x0802296c

08014c7c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	4603      	mov	r3, r0
 8014c84:	6039      	str	r1, [r7, #0]
 8014c86:	80fb      	strh	r3, [r7, #6]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014c8c:	88fb      	ldrh	r3, [r7, #6]
 8014c8e:	2b43      	cmp	r3, #67	; 0x43
 8014c90:	d906      	bls.n	8014ca0 <dhcp_option_byte+0x24>
 8014c92:	4b0a      	ldr	r3, [pc, #40]	; (8014cbc <dhcp_option_byte+0x40>)
 8014c94:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014c98:	4909      	ldr	r1, [pc, #36]	; (8014cc0 <dhcp_option_byte+0x44>)
 8014c9a:	480a      	ldr	r0, [pc, #40]	; (8014cc4 <dhcp_option_byte+0x48>)
 8014c9c:	f00c fdbe 	bl	802181c <iprintf>
  options[options_out_len++] = value;
 8014ca0:	88fb      	ldrh	r3, [r7, #6]
 8014ca2:	1c5a      	adds	r2, r3, #1
 8014ca4:	80fa      	strh	r2, [r7, #6]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	4413      	add	r3, r2
 8014cac:	797a      	ldrb	r2, [r7, #5]
 8014cae:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014cb0:	88fb      	ldrh	r3, [r7, #6]
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3708      	adds	r7, #8
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	080228c8 	.word	0x080228c8
 8014cc0:	08022ae4 	.word	0x08022ae4
 8014cc4:	0802296c 	.word	0x0802296c

08014cc8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	4603      	mov	r3, r0
 8014cd0:	6039      	str	r1, [r7, #0]
 8014cd2:	80fb      	strh	r3, [r7, #6]
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014cd8:	88fb      	ldrh	r3, [r7, #6]
 8014cda:	3302      	adds	r3, #2
 8014cdc:	2b44      	cmp	r3, #68	; 0x44
 8014cde:	d906      	bls.n	8014cee <dhcp_option_short+0x26>
 8014ce0:	4b0f      	ldr	r3, [pc, #60]	; (8014d20 <dhcp_option_short+0x58>)
 8014ce2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014ce6:	490f      	ldr	r1, [pc, #60]	; (8014d24 <dhcp_option_short+0x5c>)
 8014ce8:	480f      	ldr	r0, [pc, #60]	; (8014d28 <dhcp_option_short+0x60>)
 8014cea:	f00c fd97 	bl	802181c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014cee:	88bb      	ldrh	r3, [r7, #4]
 8014cf0:	0a1b      	lsrs	r3, r3, #8
 8014cf2:	b29a      	uxth	r2, r3
 8014cf4:	88fb      	ldrh	r3, [r7, #6]
 8014cf6:	1c59      	adds	r1, r3, #1
 8014cf8:	80f9      	strh	r1, [r7, #6]
 8014cfa:	4619      	mov	r1, r3
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	440b      	add	r3, r1
 8014d00:	b2d2      	uxtb	r2, r2
 8014d02:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014d04:	88fb      	ldrh	r3, [r7, #6]
 8014d06:	1c5a      	adds	r2, r3, #1
 8014d08:	80fa      	strh	r2, [r7, #6]
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	4413      	add	r3, r2
 8014d10:	88ba      	ldrh	r2, [r7, #4]
 8014d12:	b2d2      	uxtb	r2, r2
 8014d14:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d16:	88fb      	ldrh	r3, [r7, #6]
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	080228c8 	.word	0x080228c8
 8014d24:	08022b1c 	.word	0x08022b1c
 8014d28:	0802296c 	.word	0x0802296c

08014d2c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b084      	sub	sp, #16
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	4603      	mov	r3, r0
 8014d34:	60b9      	str	r1, [r7, #8]
 8014d36:	607a      	str	r2, [r7, #4]
 8014d38:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014d3a:	89fb      	ldrh	r3, [r7, #14]
 8014d3c:	3304      	adds	r3, #4
 8014d3e:	2b44      	cmp	r3, #68	; 0x44
 8014d40:	d906      	bls.n	8014d50 <dhcp_option_long+0x24>
 8014d42:	4b19      	ldr	r3, [pc, #100]	; (8014da8 <dhcp_option_long+0x7c>)
 8014d44:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014d48:	4918      	ldr	r1, [pc, #96]	; (8014dac <dhcp_option_long+0x80>)
 8014d4a:	4819      	ldr	r0, [pc, #100]	; (8014db0 <dhcp_option_long+0x84>)
 8014d4c:	f00c fd66 	bl	802181c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	0e1a      	lsrs	r2, r3, #24
 8014d54:	89fb      	ldrh	r3, [r7, #14]
 8014d56:	1c59      	adds	r1, r3, #1
 8014d58:	81f9      	strh	r1, [r7, #14]
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	440b      	add	r3, r1
 8014d60:	b2d2      	uxtb	r2, r2
 8014d62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	0c1a      	lsrs	r2, r3, #16
 8014d68:	89fb      	ldrh	r3, [r7, #14]
 8014d6a:	1c59      	adds	r1, r3, #1
 8014d6c:	81f9      	strh	r1, [r7, #14]
 8014d6e:	4619      	mov	r1, r3
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	440b      	add	r3, r1
 8014d74:	b2d2      	uxtb	r2, r2
 8014d76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	0a1a      	lsrs	r2, r3, #8
 8014d7c:	89fb      	ldrh	r3, [r7, #14]
 8014d7e:	1c59      	adds	r1, r3, #1
 8014d80:	81f9      	strh	r1, [r7, #14]
 8014d82:	4619      	mov	r1, r3
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	440b      	add	r3, r1
 8014d88:	b2d2      	uxtb	r2, r2
 8014d8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014d8c:	89fb      	ldrh	r3, [r7, #14]
 8014d8e:	1c5a      	adds	r2, r3, #1
 8014d90:	81fa      	strh	r2, [r7, #14]
 8014d92:	461a      	mov	r2, r3
 8014d94:	68bb      	ldr	r3, [r7, #8]
 8014d96:	4413      	add	r3, r2
 8014d98:	687a      	ldr	r2, [r7, #4]
 8014d9a:	b2d2      	uxtb	r2, r2
 8014d9c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3710      	adds	r7, #16
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	080228c8 	.word	0x080228c8
 8014dac:	08022b58 	.word	0x08022b58
 8014db0:	0802296c 	.word	0x0802296c

08014db4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b090      	sub	sp, #64	; 0x40
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014dc6:	2208      	movs	r2, #8
 8014dc8:	2100      	movs	r1, #0
 8014dca:	48be      	ldr	r0, [pc, #760]	; (80150c4 <dhcp_parse_reply+0x310>)
 8014dcc:	f00c fc74 	bl	80216b8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	895b      	ldrh	r3, [r3, #10]
 8014dd4:	2b2b      	cmp	r3, #43	; 0x2b
 8014dd6:	d802      	bhi.n	8014dde <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014dd8:	f06f 0301 	mvn.w	r3, #1
 8014ddc:	e2a8      	b.n	8015330 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014de4:	23f0      	movs	r3, #240	; 0xf0
 8014de6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	891b      	ldrh	r3, [r3, #8]
 8014dec:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014df2:	e00c      	b.n	8014e0e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df6:	895b      	ldrh	r3, [r3, #10]
 8014df8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014dfa:	1ad3      	subs	r3, r2, r3
 8014dfc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e00:	895b      	ldrh	r3, [r3, #10]
 8014e02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014e04:	1ad3      	subs	r3, r2, r3
 8014e06:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d004      	beq.n	8014e1e <dhcp_parse_reply+0x6a>
 8014e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e16:	895b      	ldrh	r3, [r3, #10]
 8014e18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d2ea      	bcs.n	8014df4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d102      	bne.n	8014e2a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014e24:	f06f 0301 	mvn.w	r3, #1
 8014e28:	e282      	b.n	8015330 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014e2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014e2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014e2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e30:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014e38:	e23a      	b.n	80152b0 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014e3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e3e:	4413      	add	r3, r2
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014e44:	2300      	movs	r3, #0
 8014e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e4e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014e50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e52:	3302      	adds	r3, #2
 8014e54:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014e56:	8bfa      	ldrh	r2, [r7, #30]
 8014e58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d202      	bcs.n	8014e64 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014e5e:	f06f 0301 	mvn.w	r3, #1
 8014e62:	e265      	b.n	8015330 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014e64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e66:	3301      	adds	r3, #1
 8014e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e6a:	8952      	ldrh	r2, [r2, #10]
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	da07      	bge.n	8014e80 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014e70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e72:	3301      	adds	r3, #1
 8014e74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e76:	4413      	add	r3, r2
 8014e78:	781b      	ldrb	r3, [r3, #0]
 8014e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e7e:	e00b      	b.n	8014e98 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d004      	beq.n	8014e92 <dhcp_parse_reply+0xde>
 8014e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	e000      	b.n	8014e94 <dhcp_parse_reply+0xe0>
 8014e92:	2300      	movs	r3, #0
 8014e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014ea0:	7dfb      	ldrb	r3, [r7, #23]
 8014ea2:	2b3b      	cmp	r3, #59	; 0x3b
 8014ea4:	f200 812d 	bhi.w	8015102 <dhcp_parse_reply+0x34e>
 8014ea8:	a201      	add	r2, pc, #4	; (adr r2, 8014eb0 <dhcp_parse_reply+0xfc>)
 8014eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014eae:	bf00      	nop
 8014eb0:	08014fa1 	.word	0x08014fa1
 8014eb4:	08014fb1 	.word	0x08014fb1
 8014eb8:	08015103 	.word	0x08015103
 8014ebc:	08014fd3 	.word	0x08014fd3
 8014ec0:	08015103 	.word	0x08015103
 8014ec4:	08015103 	.word	0x08015103
 8014ec8:	08015103 	.word	0x08015103
 8014ecc:	08015103 	.word	0x08015103
 8014ed0:	08015103 	.word	0x08015103
 8014ed4:	08015103 	.word	0x08015103
 8014ed8:	08015103 	.word	0x08015103
 8014edc:	08015103 	.word	0x08015103
 8014ee0:	08015103 	.word	0x08015103
 8014ee4:	08015103 	.word	0x08015103
 8014ee8:	08015103 	.word	0x08015103
 8014eec:	08015103 	.word	0x08015103
 8014ef0:	08015103 	.word	0x08015103
 8014ef4:	08015103 	.word	0x08015103
 8014ef8:	08015103 	.word	0x08015103
 8014efc:	08015103 	.word	0x08015103
 8014f00:	08015103 	.word	0x08015103
 8014f04:	08015103 	.word	0x08015103
 8014f08:	08015103 	.word	0x08015103
 8014f0c:	08015103 	.word	0x08015103
 8014f10:	08015103 	.word	0x08015103
 8014f14:	08015103 	.word	0x08015103
 8014f18:	08015103 	.word	0x08015103
 8014f1c:	08015103 	.word	0x08015103
 8014f20:	08015103 	.word	0x08015103
 8014f24:	08015103 	.word	0x08015103
 8014f28:	08015103 	.word	0x08015103
 8014f2c:	08015103 	.word	0x08015103
 8014f30:	08015103 	.word	0x08015103
 8014f34:	08015103 	.word	0x08015103
 8014f38:	08015103 	.word	0x08015103
 8014f3c:	08015103 	.word	0x08015103
 8014f40:	08015103 	.word	0x08015103
 8014f44:	08015103 	.word	0x08015103
 8014f48:	08015103 	.word	0x08015103
 8014f4c:	08015103 	.word	0x08015103
 8014f50:	08015103 	.word	0x08015103
 8014f54:	08015103 	.word	0x08015103
 8014f58:	08015103 	.word	0x08015103
 8014f5c:	08015103 	.word	0x08015103
 8014f60:	08015103 	.word	0x08015103
 8014f64:	08015103 	.word	0x08015103
 8014f68:	08015103 	.word	0x08015103
 8014f6c:	08015103 	.word	0x08015103
 8014f70:	08015103 	.word	0x08015103
 8014f74:	08015103 	.word	0x08015103
 8014f78:	08015103 	.word	0x08015103
 8014f7c:	08014fff 	.word	0x08014fff
 8014f80:	08015021 	.word	0x08015021
 8014f84:	0801505d 	.word	0x0801505d
 8014f88:	0801507f 	.word	0x0801507f
 8014f8c:	08015103 	.word	0x08015103
 8014f90:	08015103 	.word	0x08015103
 8014f94:	08015103 	.word	0x08015103
 8014f98:	080150a1 	.word	0x080150a1
 8014f9c:	080150e1 	.word	0x080150e1
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014faa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014fae:	e0ac      	b.n	801510a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fb4:	2b04      	cmp	r3, #4
 8014fb6:	d009      	beq.n	8014fcc <dhcp_parse_reply+0x218>
 8014fb8:	4b43      	ldr	r3, [pc, #268]	; (80150c8 <dhcp_parse_reply+0x314>)
 8014fba:	f240 622e 	movw	r2, #1582	; 0x62e
 8014fbe:	4943      	ldr	r1, [pc, #268]	; (80150cc <dhcp_parse_reply+0x318>)
 8014fc0:	4843      	ldr	r0, [pc, #268]	; (80150d0 <dhcp_parse_reply+0x31c>)
 8014fc2:	f00c fc2b 	bl	802181c <iprintf>
 8014fc6:	f06f 0305 	mvn.w	r3, #5
 8014fca:	e1b1      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014fcc:	2306      	movs	r3, #6
 8014fce:	623b      	str	r3, [r7, #32]
        break;
 8014fd0:	e09b      	b.n	801510a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014fd2:	2304      	movs	r3, #4
 8014fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014fd8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d209      	bcs.n	8014ff8 <dhcp_parse_reply+0x244>
 8014fe4:	4b38      	ldr	r3, [pc, #224]	; (80150c8 <dhcp_parse_reply+0x314>)
 8014fe6:	f240 6233 	movw	r2, #1587	; 0x633
 8014fea:	493a      	ldr	r1, [pc, #232]	; (80150d4 <dhcp_parse_reply+0x320>)
 8014fec:	4838      	ldr	r0, [pc, #224]	; (80150d0 <dhcp_parse_reply+0x31c>)
 8014fee:	f00c fc15 	bl	802181c <iprintf>
 8014ff2:	f06f 0305 	mvn.w	r3, #5
 8014ff6:	e19b      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014ff8:	2307      	movs	r3, #7
 8014ffa:	623b      	str	r3, [r7, #32]
        break;
 8014ffc:	e085      	b.n	801510a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015002:	2b04      	cmp	r3, #4
 8015004:	d009      	beq.n	801501a <dhcp_parse_reply+0x266>
 8015006:	4b30      	ldr	r3, [pc, #192]	; (80150c8 <dhcp_parse_reply+0x314>)
 8015008:	f240 6241 	movw	r2, #1601	; 0x641
 801500c:	492f      	ldr	r1, [pc, #188]	; (80150cc <dhcp_parse_reply+0x318>)
 801500e:	4830      	ldr	r0, [pc, #192]	; (80150d0 <dhcp_parse_reply+0x31c>)
 8015010:	f00c fc04 	bl	802181c <iprintf>
 8015014:	f06f 0305 	mvn.w	r3, #5
 8015018:	e18a      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801501a:	2303      	movs	r3, #3
 801501c:	623b      	str	r3, [r7, #32]
        break;
 801501e:	e074      	b.n	801510a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015024:	2b01      	cmp	r3, #1
 8015026:	d009      	beq.n	801503c <dhcp_parse_reply+0x288>
 8015028:	4b27      	ldr	r3, [pc, #156]	; (80150c8 <dhcp_parse_reply+0x314>)
 801502a:	f240 624f 	movw	r2, #1615	; 0x64f
 801502e:	492a      	ldr	r1, [pc, #168]	; (80150d8 <dhcp_parse_reply+0x324>)
 8015030:	4827      	ldr	r0, [pc, #156]	; (80150d0 <dhcp_parse_reply+0x31c>)
 8015032:	f00c fbf3 	bl	802181c <iprintf>
 8015036:	f06f 0305 	mvn.w	r3, #5
 801503a:	e179      	b.n	8015330 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801503c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801503e:	2bf0      	cmp	r3, #240	; 0xf0
 8015040:	d009      	beq.n	8015056 <dhcp_parse_reply+0x2a2>
 8015042:	4b21      	ldr	r3, [pc, #132]	; (80150c8 <dhcp_parse_reply+0x314>)
 8015044:	f240 6251 	movw	r2, #1617	; 0x651
 8015048:	4924      	ldr	r1, [pc, #144]	; (80150dc <dhcp_parse_reply+0x328>)
 801504a:	4821      	ldr	r0, [pc, #132]	; (80150d0 <dhcp_parse_reply+0x31c>)
 801504c:	f00c fbe6 	bl	802181c <iprintf>
 8015050:	f06f 0305 	mvn.w	r3, #5
 8015054:	e16c      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015056:	2300      	movs	r3, #0
 8015058:	623b      	str	r3, [r7, #32]
        break;
 801505a:	e056      	b.n	801510a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801505c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015060:	2b01      	cmp	r3, #1
 8015062:	d009      	beq.n	8015078 <dhcp_parse_reply+0x2c4>
 8015064:	4b18      	ldr	r3, [pc, #96]	; (80150c8 <dhcp_parse_reply+0x314>)
 8015066:	f240 6255 	movw	r2, #1621	; 0x655
 801506a:	491b      	ldr	r1, [pc, #108]	; (80150d8 <dhcp_parse_reply+0x324>)
 801506c:	4818      	ldr	r0, [pc, #96]	; (80150d0 <dhcp_parse_reply+0x31c>)
 801506e:	f00c fbd5 	bl	802181c <iprintf>
 8015072:	f06f 0305 	mvn.w	r3, #5
 8015076:	e15b      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015078:	2301      	movs	r3, #1
 801507a:	623b      	str	r3, [r7, #32]
        break;
 801507c:	e045      	b.n	801510a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801507e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015082:	2b04      	cmp	r3, #4
 8015084:	d009      	beq.n	801509a <dhcp_parse_reply+0x2e6>
 8015086:	4b10      	ldr	r3, [pc, #64]	; (80150c8 <dhcp_parse_reply+0x314>)
 8015088:	f240 6259 	movw	r2, #1625	; 0x659
 801508c:	490f      	ldr	r1, [pc, #60]	; (80150cc <dhcp_parse_reply+0x318>)
 801508e:	4810      	ldr	r0, [pc, #64]	; (80150d0 <dhcp_parse_reply+0x31c>)
 8015090:	f00c fbc4 	bl	802181c <iprintf>
 8015094:	f06f 0305 	mvn.w	r3, #5
 8015098:	e14a      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801509a:	2302      	movs	r3, #2
 801509c:	623b      	str	r3, [r7, #32]
        break;
 801509e:	e034      	b.n	801510a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150a4:	2b04      	cmp	r3, #4
 80150a6:	d009      	beq.n	80150bc <dhcp_parse_reply+0x308>
 80150a8:	4b07      	ldr	r3, [pc, #28]	; (80150c8 <dhcp_parse_reply+0x314>)
 80150aa:	f240 625d 	movw	r2, #1629	; 0x65d
 80150ae:	4907      	ldr	r1, [pc, #28]	; (80150cc <dhcp_parse_reply+0x318>)
 80150b0:	4807      	ldr	r0, [pc, #28]	; (80150d0 <dhcp_parse_reply+0x31c>)
 80150b2:	f00c fbb3 	bl	802181c <iprintf>
 80150b6:	f06f 0305 	mvn.w	r3, #5
 80150ba:	e139      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80150bc:	2304      	movs	r3, #4
 80150be:	623b      	str	r3, [r7, #32]
        break;
 80150c0:	e023      	b.n	801510a <dhcp_parse_reply+0x356>
 80150c2:	bf00      	nop
 80150c4:	2000e818 	.word	0x2000e818
 80150c8:	080228c8 	.word	0x080228c8
 80150cc:	08022b94 	.word	0x08022b94
 80150d0:	0802296c 	.word	0x0802296c
 80150d4:	08022ba0 	.word	0x08022ba0
 80150d8:	08022bb4 	.word	0x08022bb4
 80150dc:	08022bc0 	.word	0x08022bc0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150e4:	2b04      	cmp	r3, #4
 80150e6:	d009      	beq.n	80150fc <dhcp_parse_reply+0x348>
 80150e8:	4b93      	ldr	r3, [pc, #588]	; (8015338 <dhcp_parse_reply+0x584>)
 80150ea:	f240 6261 	movw	r2, #1633	; 0x661
 80150ee:	4993      	ldr	r1, [pc, #588]	; (801533c <dhcp_parse_reply+0x588>)
 80150f0:	4893      	ldr	r0, [pc, #588]	; (8015340 <dhcp_parse_reply+0x58c>)
 80150f2:	f00c fb93 	bl	802181c <iprintf>
 80150f6:	f06f 0305 	mvn.w	r3, #5
 80150fa:	e119      	b.n	8015330 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80150fc:	2305      	movs	r3, #5
 80150fe:	623b      	str	r3, [r7, #32]
        break;
 8015100:	e003      	b.n	801510a <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8015102:	2300      	movs	r3, #0
 8015104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015108:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801510a:	7dfb      	ldrb	r3, [r7, #23]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d103      	bne.n	8015118 <dhcp_parse_reply+0x364>
      offset++;
 8015110:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015112:	3301      	adds	r3, #1
 8015114:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015116:	e0a1      	b.n	801525c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015118:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801511a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801511e:	4413      	add	r3, r2
 8015120:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015124:	4293      	cmp	r3, r2
 8015126:	dd02      	ble.n	801512e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8015128:	f06f 0301 	mvn.w	r3, #1
 801512c:	e100      	b.n	8015330 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801512e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015132:	b29a      	uxth	r2, r3
 8015134:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015136:	4413      	add	r3, r2
 8015138:	b29b      	uxth	r3, r3
 801513a:	3302      	adds	r3, #2
 801513c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801513e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015142:	2b00      	cmp	r3, #0
 8015144:	f000 808a 	beq.w	801525c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8015148:	2300      	movs	r3, #0
 801514a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801514c:	6a3b      	ldr	r3, [r7, #32]
 801514e:	2b00      	cmp	r3, #0
 8015150:	db02      	blt.n	8015158 <dhcp_parse_reply+0x3a4>
 8015152:	6a3b      	ldr	r3, [r7, #32]
 8015154:	2b07      	cmp	r3, #7
 8015156:	dd06      	ble.n	8015166 <dhcp_parse_reply+0x3b2>
 8015158:	4b77      	ldr	r3, [pc, #476]	; (8015338 <dhcp_parse_reply+0x584>)
 801515a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801515e:	4979      	ldr	r1, [pc, #484]	; (8015344 <dhcp_parse_reply+0x590>)
 8015160:	4877      	ldr	r0, [pc, #476]	; (8015340 <dhcp_parse_reply+0x58c>)
 8015162:	f00c fb5b 	bl	802181c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015166:	4a78      	ldr	r2, [pc, #480]	; (8015348 <dhcp_parse_reply+0x594>)
 8015168:	6a3b      	ldr	r3, [r7, #32]
 801516a:	4413      	add	r3, r2
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d174      	bne.n	801525c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8015172:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015176:	2b04      	cmp	r3, #4
 8015178:	bf28      	it	cs
 801517a:	2304      	movcs	r3, #4
 801517c:	b2db      	uxtb	r3, r3
 801517e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015180:	8bfb      	ldrh	r3, [r7, #30]
 8015182:	8aba      	ldrh	r2, [r7, #20]
 8015184:	f107 0108 	add.w	r1, r7, #8
 8015188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801518a:	f004 fb51 	bl	8019830 <pbuf_copy_partial>
 801518e:	4603      	mov	r3, r0
 8015190:	461a      	mov	r2, r3
 8015192:	8abb      	ldrh	r3, [r7, #20]
 8015194:	4293      	cmp	r3, r2
 8015196:	d002      	beq.n	801519e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8015198:	f06f 0301 	mvn.w	r3, #1
 801519c:	e0c8      	b.n	8015330 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801519e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151a2:	2b04      	cmp	r3, #4
 80151a4:	d933      	bls.n	801520e <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80151a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151aa:	f003 0303 	and.w	r3, r3, #3
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d009      	beq.n	80151c8 <dhcp_parse_reply+0x414>
 80151b4:	4b60      	ldr	r3, [pc, #384]	; (8015338 <dhcp_parse_reply+0x584>)
 80151b6:	f240 6281 	movw	r2, #1665	; 0x681
 80151ba:	4964      	ldr	r1, [pc, #400]	; (801534c <dhcp_parse_reply+0x598>)
 80151bc:	4860      	ldr	r0, [pc, #384]	; (8015340 <dhcp_parse_reply+0x58c>)
 80151be:	f00c fb2d 	bl	802181c <iprintf>
 80151c2:	f06f 0305 	mvn.w	r3, #5
 80151c6:	e0b3      	b.n	8015330 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80151c8:	4a5f      	ldr	r2, [pc, #380]	; (8015348 <dhcp_parse_reply+0x594>)
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	4413      	add	r3, r2
 80151ce:	2201      	movs	r2, #1
 80151d0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7fe fc0c 	bl	80139f2 <lwip_htonl>
 80151da:	4602      	mov	r2, r0
 80151dc:	495c      	ldr	r1, [pc, #368]	; (8015350 <dhcp_parse_reply+0x59c>)
 80151de:	6a3b      	ldr	r3, [r7, #32]
 80151e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80151e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80151e8:	3b04      	subs	r3, #4
 80151ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80151ee:	8bfb      	ldrh	r3, [r7, #30]
 80151f0:	3304      	adds	r3, #4
 80151f2:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80151f4:	8a7a      	ldrh	r2, [r7, #18]
 80151f6:	8bfb      	ldrh	r3, [r7, #30]
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d202      	bcs.n	8015202 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80151fc:	f06f 0301 	mvn.w	r3, #1
 8015200:	e096      	b.n	8015330 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8015202:	8a7b      	ldrh	r3, [r7, #18]
 8015204:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015206:	6a3b      	ldr	r3, [r7, #32]
 8015208:	3301      	adds	r3, #1
 801520a:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801520c:	e79e      	b.n	801514c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801520e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015212:	2b04      	cmp	r3, #4
 8015214:	d106      	bne.n	8015224 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	4618      	mov	r0, r3
 801521a:	f7fe fbea 	bl	80139f2 <lwip_htonl>
 801521e:	4603      	mov	r3, r0
 8015220:	60bb      	str	r3, [r7, #8]
 8015222:	e011      	b.n	8015248 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015228:	2b01      	cmp	r3, #1
 801522a:	d009      	beq.n	8015240 <dhcp_parse_reply+0x48c>
 801522c:	4b42      	ldr	r3, [pc, #264]	; (8015338 <dhcp_parse_reply+0x584>)
 801522e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015232:	4948      	ldr	r1, [pc, #288]	; (8015354 <dhcp_parse_reply+0x5a0>)
 8015234:	4842      	ldr	r0, [pc, #264]	; (8015340 <dhcp_parse_reply+0x58c>)
 8015236:	f00c faf1 	bl	802181c <iprintf>
 801523a:	f06f 0305 	mvn.w	r3, #5
 801523e:	e077      	b.n	8015330 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8015240:	f107 0308 	add.w	r3, r7, #8
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015248:	4a3f      	ldr	r2, [pc, #252]	; (8015348 <dhcp_parse_reply+0x594>)
 801524a:	6a3b      	ldr	r3, [r7, #32]
 801524c:	4413      	add	r3, r2
 801524e:	2201      	movs	r2, #1
 8015250:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015252:	68ba      	ldr	r2, [r7, #8]
 8015254:	493e      	ldr	r1, [pc, #248]	; (8015350 <dhcp_parse_reply+0x59c>)
 8015256:	6a3b      	ldr	r3, [r7, #32]
 8015258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525e:	895b      	ldrh	r3, [r3, #10]
 8015260:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015262:	429a      	cmp	r2, r3
 8015264:	d324      	bcc.n	80152b0 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8015266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015268:	895b      	ldrh	r3, [r3, #10]
 801526a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801526c:	1ad3      	subs	r3, r2, r3
 801526e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015272:	895b      	ldrh	r3, [r3, #10]
 8015274:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015276:	1ad3      	subs	r3, r2, r3
 8015278:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801527a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801527c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801527e:	429a      	cmp	r2, r3
 8015280:	d213      	bcs.n	80152aa <dhcp_parse_reply+0x4f6>
        q = q->next;
 8015282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801528a:	2b00      	cmp	r3, #0
 801528c:	d109      	bne.n	80152a2 <dhcp_parse_reply+0x4ee>
 801528e:	4b2a      	ldr	r3, [pc, #168]	; (8015338 <dhcp_parse_reply+0x584>)
 8015290:	f240 629d 	movw	r2, #1693	; 0x69d
 8015294:	4930      	ldr	r1, [pc, #192]	; (8015358 <dhcp_parse_reply+0x5a4>)
 8015296:	482a      	ldr	r0, [pc, #168]	; (8015340 <dhcp_parse_reply+0x58c>)
 8015298:	f00c fac0 	bl	802181c <iprintf>
 801529c:	f06f 0305 	mvn.w	r3, #5
 80152a0:	e046      	b.n	8015330 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80152a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a4:	685b      	ldr	r3, [r3, #4]
 80152a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80152a8:	e002      	b.n	80152b0 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80152aa:	f06f 0301 	mvn.w	r3, #1
 80152ae:	e03f      	b.n	8015330 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80152b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d00a      	beq.n	80152cc <dhcp_parse_reply+0x518>
 80152b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d206      	bcs.n	80152cc <dhcp_parse_reply+0x518>
 80152be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80152c2:	4413      	add	r3, r2
 80152c4:	781b      	ldrb	r3, [r3, #0]
 80152c6:	2bff      	cmp	r3, #255	; 0xff
 80152c8:	f47f adb7 	bne.w	8014e3a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80152cc:	4b1e      	ldr	r3, [pc, #120]	; (8015348 <dhcp_parse_reply+0x594>)
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d018      	beq.n	8015306 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80152d4:	4b1e      	ldr	r3, [pc, #120]	; (8015350 <dhcp_parse_reply+0x59c>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80152da:	4b1b      	ldr	r3, [pc, #108]	; (8015348 <dhcp_parse_reply+0x594>)
 80152dc:	2200      	movs	r2, #0
 80152de:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	2b01      	cmp	r3, #1
 80152e4:	d102      	bne.n	80152ec <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80152e6:	2301      	movs	r3, #1
 80152e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152ea:	e00c      	b.n	8015306 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	2b02      	cmp	r3, #2
 80152f0:	d102      	bne.n	80152f8 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80152f2:	2301      	movs	r3, #1
 80152f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80152f6:	e006      	b.n	8015306 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2b03      	cmp	r3, #3
 80152fc:	d103      	bne.n	8015306 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80152fe:	2301      	movs	r3, #1
 8015300:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015302:	2301      	movs	r3, #1
 8015304:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015308:	2b00      	cmp	r3, #0
 801530a:	d006      	beq.n	801531a <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801530c:	2300      	movs	r3, #0
 801530e:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015310:	236c      	movs	r3, #108	; 0x6c
 8015312:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015314:	23ec      	movs	r3, #236	; 0xec
 8015316:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015318:	e569      	b.n	8014dee <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801531c:	2b00      	cmp	r3, #0
 801531e:	d006      	beq.n	801532e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8015320:	2300      	movs	r3, #0
 8015322:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015324:	232c      	movs	r3, #44	; 0x2c
 8015326:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015328:	236c      	movs	r3, #108	; 0x6c
 801532a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801532c:	e55f      	b.n	8014dee <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	3740      	adds	r7, #64	; 0x40
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}
 8015338:	080228c8 	.word	0x080228c8
 801533c:	08022b94 	.word	0x08022b94
 8015340:	0802296c 	.word	0x0802296c
 8015344:	08022bd8 	.word	0x08022bd8
 8015348:	2000e818 	.word	0x2000e818
 801534c:	08022bec 	.word	0x08022bec
 8015350:	2000e820 	.word	0x2000e820
 8015354:	08022c04 	.word	0x08022c04
 8015358:	08022c18 	.word	0x08022c18

0801535c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b08a      	sub	sp, #40	; 0x28
 8015360:	af00      	add	r7, sp, #0
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	60b9      	str	r1, [r7, #8]
 8015366:	607a      	str	r2, [r7, #4]
 8015368:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801536a:	4b60      	ldr	r3, [pc, #384]	; (80154ec <dhcp_recv+0x190>)
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015370:	6a3b      	ldr	r3, [r7, #32]
 8015372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015374:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	2b00      	cmp	r3, #0
 8015380:	f000 809d 	beq.w	80154be <dhcp_recv+0x162>
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	791b      	ldrb	r3, [r3, #4]
 8015388:	2b00      	cmp	r3, #0
 801538a:	f000 8098 	beq.w	80154be <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	895b      	ldrh	r3, [r3, #10]
 8015392:	2b2b      	cmp	r3, #43	; 0x2b
 8015394:	f240 8095 	bls.w	80154c2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015398:	69bb      	ldr	r3, [r7, #24]
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	2b02      	cmp	r3, #2
 801539e:	f040 8092 	bne.w	80154c6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80153a2:	2300      	movs	r3, #0
 80153a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153a8:	e012      	b.n	80153d0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80153aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ae:	6a3a      	ldr	r2, [r7, #32]
 80153b0:	4413      	add	r3, r2
 80153b2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80153b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ba:	69b9      	ldr	r1, [r7, #24]
 80153bc:	440b      	add	r3, r1
 80153be:	7f1b      	ldrb	r3, [r3, #28]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	f040 8082 	bne.w	80154ca <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80153c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ca:	3301      	adds	r3, #1
 80153cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153d0:	6a3b      	ldr	r3, [r7, #32]
 80153d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80153d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80153da:	429a      	cmp	r2, r3
 80153dc:	d203      	bcs.n	80153e6 <dhcp_recv+0x8a>
 80153de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153e2:	2b05      	cmp	r3, #5
 80153e4:	d9e1      	bls.n	80153aa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7fe fb01 	bl	80139f2 <lwip_htonl>
 80153f0:	4602      	mov	r2, r0
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d169      	bne.n	80154ce <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80153fa:	69f9      	ldr	r1, [r7, #28]
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f7ff fcd9 	bl	8014db4 <dhcp_parse_reply>
 8015402:	4603      	mov	r3, r0
 8015404:	2b00      	cmp	r3, #0
 8015406:	d164      	bne.n	80154d2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015408:	4b39      	ldr	r3, [pc, #228]	; (80154f0 <dhcp_recv+0x194>)
 801540a:	785b      	ldrb	r3, [r3, #1]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d062      	beq.n	80154d6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015416:	4b37      	ldr	r3, [pc, #220]	; (80154f4 <dhcp_recv+0x198>)
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801541c:	7cfb      	ldrb	r3, [r7, #19]
 801541e:	2b05      	cmp	r3, #5
 8015420:	d12a      	bne.n	8015478 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	795b      	ldrb	r3, [r3, #5]
 8015426:	2b01      	cmp	r3, #1
 8015428:	d112      	bne.n	8015450 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801542a:	6979      	ldr	r1, [r7, #20]
 801542c:	6a38      	ldr	r0, [r7, #32]
 801542e:	f7fe fe17 	bl	8014060 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015432:	6a3b      	ldr	r3, [r7, #32]
 8015434:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015438:	f003 0308 	and.w	r3, r3, #8
 801543c:	2b00      	cmp	r3, #0
 801543e:	d003      	beq.n	8015448 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015440:	6a38      	ldr	r0, [r7, #32]
 8015442:	f7fe fb85 	bl	8013b50 <dhcp_check>
 8015446:	e049      	b.n	80154dc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015448:	6a38      	ldr	r0, [r7, #32]
 801544a:	f7ff f867 	bl	801451c <dhcp_bind>
 801544e:	e045      	b.n	80154dc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015450:	69fb      	ldr	r3, [r7, #28]
 8015452:	795b      	ldrb	r3, [r3, #5]
 8015454:	2b03      	cmp	r3, #3
 8015456:	d007      	beq.n	8015468 <dhcp_recv+0x10c>
 8015458:	69fb      	ldr	r3, [r7, #28]
 801545a:	795b      	ldrb	r3, [r3, #5]
 801545c:	2b04      	cmp	r3, #4
 801545e:	d003      	beq.n	8015468 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015460:	69fb      	ldr	r3, [r7, #28]
 8015462:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015464:	2b05      	cmp	r3, #5
 8015466:	d139      	bne.n	80154dc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015468:	6979      	ldr	r1, [r7, #20]
 801546a:	6a38      	ldr	r0, [r7, #32]
 801546c:	f7fe fdf8 	bl	8014060 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015470:	6a38      	ldr	r0, [r7, #32]
 8015472:	f7ff f853 	bl	801451c <dhcp_bind>
 8015476:	e031      	b.n	80154dc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015478:	7cfb      	ldrb	r3, [r7, #19]
 801547a:	2b06      	cmp	r3, #6
 801547c:	d113      	bne.n	80154a6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801547e:	69fb      	ldr	r3, [r7, #28]
 8015480:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015482:	2b03      	cmp	r3, #3
 8015484:	d00b      	beq.n	801549e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	795b      	ldrb	r3, [r3, #5]
 801548a:	2b01      	cmp	r3, #1
 801548c:	d007      	beq.n	801549e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015492:	2b04      	cmp	r3, #4
 8015494:	d003      	beq.n	801549e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	795b      	ldrb	r3, [r3, #5]
 801549a:	2b05      	cmp	r3, #5
 801549c:	d103      	bne.n	80154a6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801549e:	6a38      	ldr	r0, [r7, #32]
 80154a0:	f7fe fb3c 	bl	8013b1c <dhcp_handle_nak>
 80154a4:	e01a      	b.n	80154dc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80154a6:	7cfb      	ldrb	r3, [r7, #19]
 80154a8:	2b02      	cmp	r3, #2
 80154aa:	d116      	bne.n	80154da <dhcp_recv+0x17e>
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	795b      	ldrb	r3, [r3, #5]
 80154b0:	2b06      	cmp	r3, #6
 80154b2:	d112      	bne.n	80154da <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80154b4:	6979      	ldr	r1, [r7, #20]
 80154b6:	6a38      	ldr	r0, [r7, #32]
 80154b8:	f7fe fb7e 	bl	8013bb8 <dhcp_handle_offer>
 80154bc:	e00e      	b.n	80154dc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154be:	bf00      	nop
 80154c0:	e00c      	b.n	80154dc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154c2:	bf00      	nop
 80154c4:	e00a      	b.n	80154dc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154c6:	bf00      	nop
 80154c8:	e008      	b.n	80154dc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80154ca:	bf00      	nop
 80154cc:	e006      	b.n	80154dc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154ce:	bf00      	nop
 80154d0:	e004      	b.n	80154dc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154d2:	bf00      	nop
 80154d4:	e002      	b.n	80154dc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80154d6:	bf00      	nop
 80154d8:	e000      	b.n	80154dc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80154da:	bf00      	nop
  pbuf_free(p);
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f003 ffa1 	bl	8019424 <pbuf_free>
}
 80154e2:	bf00      	nop
 80154e4:	3728      	adds	r7, #40	; 0x28
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	2000e840 	.word	0x2000e840
 80154f0:	2000e818 	.word	0x2000e818
 80154f4:	2000e820 	.word	0x2000e820

080154f8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b088      	sub	sp, #32
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	603b      	str	r3, [r7, #0]
 8015504:	4613      	mov	r3, r2
 8015506:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d108      	bne.n	8015520 <dhcp_create_msg+0x28>
 801550e:	4b5f      	ldr	r3, [pc, #380]	; (801568c <dhcp_create_msg+0x194>)
 8015510:	f240 7269 	movw	r2, #1897	; 0x769
 8015514:	495e      	ldr	r1, [pc, #376]	; (8015690 <dhcp_create_msg+0x198>)
 8015516:	485f      	ldr	r0, [pc, #380]	; (8015694 <dhcp_create_msg+0x19c>)
 8015518:	f00c f980 	bl	802181c <iprintf>
 801551c:	2300      	movs	r3, #0
 801551e:	e0b1      	b.n	8015684 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d108      	bne.n	8015538 <dhcp_create_msg+0x40>
 8015526:	4b59      	ldr	r3, [pc, #356]	; (801568c <dhcp_create_msg+0x194>)
 8015528:	f240 726a 	movw	r2, #1898	; 0x76a
 801552c:	495a      	ldr	r1, [pc, #360]	; (8015698 <dhcp_create_msg+0x1a0>)
 801552e:	4859      	ldr	r0, [pc, #356]	; (8015694 <dhcp_create_msg+0x19c>)
 8015530:	f00c f974 	bl	802181c <iprintf>
 8015534:	2300      	movs	r3, #0
 8015536:	e0a5      	b.n	8015684 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015538:	f44f 7220 	mov.w	r2, #640	; 0x280
 801553c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015540:	2036      	movs	r0, #54	; 0x36
 8015542:	f003 fc8b 	bl	8018e5c <pbuf_alloc>
 8015546:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015548:	69bb      	ldr	r3, [r7, #24]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d101      	bne.n	8015552 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801554e:	2300      	movs	r3, #0
 8015550:	e098      	b.n	8015684 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015552:	69bb      	ldr	r3, [r7, #24]
 8015554:	895b      	ldrh	r3, [r3, #10]
 8015556:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801555a:	d206      	bcs.n	801556a <dhcp_create_msg+0x72>
 801555c:	4b4b      	ldr	r3, [pc, #300]	; (801568c <dhcp_create_msg+0x194>)
 801555e:	f240 7271 	movw	r2, #1905	; 0x771
 8015562:	494e      	ldr	r1, [pc, #312]	; (801569c <dhcp_create_msg+0x1a4>)
 8015564:	484b      	ldr	r0, [pc, #300]	; (8015694 <dhcp_create_msg+0x19c>)
 8015566:	f00c f959 	bl	802181c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801556a:	79fb      	ldrb	r3, [r7, #7]
 801556c:	2b03      	cmp	r3, #3
 801556e:	d103      	bne.n	8015578 <dhcp_create_msg+0x80>
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	795b      	ldrb	r3, [r3, #5]
 8015574:	2b03      	cmp	r3, #3
 8015576:	d10d      	bne.n	8015594 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	799b      	ldrb	r3, [r3, #6]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d105      	bne.n	801558c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015580:	f00c f97a 	bl	8021878 <rand>
 8015584:	4603      	mov	r3, r0
 8015586:	461a      	mov	r2, r3
 8015588:	4b45      	ldr	r3, [pc, #276]	; (80156a0 <dhcp_create_msg+0x1a8>)
 801558a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801558c:	4b44      	ldr	r3, [pc, #272]	; (80156a0 <dhcp_create_msg+0x1a8>)
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015594:	69bb      	ldr	r3, [r7, #24]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801559a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801559e:	2100      	movs	r1, #0
 80155a0:	6978      	ldr	r0, [r7, #20]
 80155a2:	f00c f889 	bl	80216b8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	2201      	movs	r2, #1
 80155aa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	2201      	movs	r2, #1
 80155b0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7fe fa16 	bl	80139f2 <lwip_htonl>
 80155c6:	4602      	mov	r2, r0
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80155cc:	79fb      	ldrb	r3, [r7, #7]
 80155ce:	2b08      	cmp	r3, #8
 80155d0:	d010      	beq.n	80155f4 <dhcp_create_msg+0xfc>
 80155d2:	79fb      	ldrb	r3, [r7, #7]
 80155d4:	2b04      	cmp	r3, #4
 80155d6:	d00d      	beq.n	80155f4 <dhcp_create_msg+0xfc>
 80155d8:	79fb      	ldrb	r3, [r7, #7]
 80155da:	2b07      	cmp	r3, #7
 80155dc:	d00a      	beq.n	80155f4 <dhcp_create_msg+0xfc>
 80155de:	79fb      	ldrb	r3, [r7, #7]
 80155e0:	2b03      	cmp	r3, #3
 80155e2:	d10c      	bne.n	80155fe <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80155e8:	2b05      	cmp	r3, #5
 80155ea:	d003      	beq.n	80155f4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	795b      	ldrb	r3, [r3, #5]
 80155f0:	2b04      	cmp	r3, #4
 80155f2:	d104      	bne.n	80155fe <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	3304      	adds	r3, #4
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80155fe:	2300      	movs	r3, #0
 8015600:	83fb      	strh	r3, [r7, #30]
 8015602:	e00c      	b.n	801561e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015604:	8bfa      	ldrh	r2, [r7, #30]
 8015606:	8bfb      	ldrh	r3, [r7, #30]
 8015608:	68f9      	ldr	r1, [r7, #12]
 801560a:	440a      	add	r2, r1
 801560c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015610:	697a      	ldr	r2, [r7, #20]
 8015612:	4413      	add	r3, r2
 8015614:	460a      	mov	r2, r1
 8015616:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015618:	8bfb      	ldrh	r3, [r7, #30]
 801561a:	3301      	adds	r3, #1
 801561c:	83fb      	strh	r3, [r7, #30]
 801561e:	8bfb      	ldrh	r3, [r7, #30]
 8015620:	2b05      	cmp	r3, #5
 8015622:	d9ef      	bls.n	8015604 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	2200      	movs	r2, #0
 8015628:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801562c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015630:	2200      	movs	r2, #0
 8015632:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015636:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801563a:	2200      	movs	r2, #0
 801563c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015640:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015644:	2200      	movs	r2, #0
 8015646:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801564a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015654:	2301      	movs	r3, #1
 8015656:	2235      	movs	r2, #53	; 0x35
 8015658:	2000      	movs	r0, #0
 801565a:	f7ff fadb 	bl	8014c14 <dhcp_option>
 801565e:	4603      	mov	r3, r0
 8015660:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015668:	79fa      	ldrb	r2, [r7, #7]
 801566a:	8a7b      	ldrh	r3, [r7, #18]
 801566c:	4618      	mov	r0, r3
 801566e:	f7ff fb05 	bl	8014c7c <dhcp_option_byte>
 8015672:	4603      	mov	r3, r0
 8015674:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d002      	beq.n	8015682 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	8a7a      	ldrh	r2, [r7, #18]
 8015680:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015682:	69bb      	ldr	r3, [r7, #24]
}
 8015684:	4618      	mov	r0, r3
 8015686:	3720      	adds	r7, #32
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	080228c8 	.word	0x080228c8
 8015690:	08022c2c 	.word	0x08022c2c
 8015694:	0802296c 	.word	0x0802296c
 8015698:	08022c4c 	.word	0x08022c4c
 801569c:	08022c6c 	.word	0x08022c6c
 80156a0:	20008f64 	.word	0x20008f64

080156a4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	4603      	mov	r3, r0
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	607a      	str	r2, [r7, #4]
 80156b0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80156b2:	89fb      	ldrh	r3, [r7, #14]
 80156b4:	1c5a      	adds	r2, r3, #1
 80156b6:	81fa      	strh	r2, [r7, #14]
 80156b8:	461a      	mov	r2, r3
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	4413      	add	r3, r2
 80156be:	22ff      	movs	r2, #255	; 0xff
 80156c0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80156c2:	e007      	b.n	80156d4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80156c4:	89fb      	ldrh	r3, [r7, #14]
 80156c6:	1c5a      	adds	r2, r3, #1
 80156c8:	81fa      	strh	r2, [r7, #14]
 80156ca:	461a      	mov	r2, r3
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	4413      	add	r3, r2
 80156d0:	2200      	movs	r2, #0
 80156d2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80156d4:	89fb      	ldrh	r3, [r7, #14]
 80156d6:	2b43      	cmp	r3, #67	; 0x43
 80156d8:	d904      	bls.n	80156e4 <dhcp_option_trailer+0x40>
 80156da:	89fb      	ldrh	r3, [r7, #14]
 80156dc:	f003 0303 	and.w	r3, r3, #3
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d002      	beq.n	80156ea <dhcp_option_trailer+0x46>
 80156e4:	89fb      	ldrh	r3, [r7, #14]
 80156e6:	2b43      	cmp	r3, #67	; 0x43
 80156e8:	d9ec      	bls.n	80156c4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80156ea:	89fb      	ldrh	r3, [r7, #14]
 80156ec:	33f0      	adds	r3, #240	; 0xf0
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	4619      	mov	r1, r3
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f003 fd10 	bl	8019118 <pbuf_realloc>
}
 80156f8:	bf00      	nop
 80156fa:	3710      	adds	r7, #16
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015700:	b480      	push	{r7}
 8015702:	b085      	sub	sp, #20
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d017      	beq.n	801573e <dhcp_supplied_address+0x3e>
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015712:	2b00      	cmp	r3, #0
 8015714:	d013      	beq.n	801573e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801571a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	795b      	ldrb	r3, [r3, #5]
 8015720:	2b0a      	cmp	r3, #10
 8015722:	d007      	beq.n	8015734 <dhcp_supplied_address+0x34>
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	795b      	ldrb	r3, [r3, #5]
 8015728:	2b05      	cmp	r3, #5
 801572a:	d003      	beq.n	8015734 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015730:	2b04      	cmp	r3, #4
 8015732:	d101      	bne.n	8015738 <dhcp_supplied_address+0x38>
 8015734:	2301      	movs	r3, #1
 8015736:	e000      	b.n	801573a <dhcp_supplied_address+0x3a>
 8015738:	2300      	movs	r3, #0
 801573a:	b2db      	uxtb	r3, r3
 801573c:	e000      	b.n	8015740 <dhcp_supplied_address+0x40>
  }
  return 0;
 801573e:	2300      	movs	r3, #0
}
 8015740:	4618      	mov	r0, r3
 8015742:	3714      	adds	r7, #20
 8015744:	46bd      	mov	sp, r7
 8015746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574a:	4770      	bx	lr

0801574c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015754:	4915      	ldr	r1, [pc, #84]	; (80157ac <etharp_free_entry+0x60>)
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	4613      	mov	r3, r2
 801575a:	005b      	lsls	r3, r3, #1
 801575c:	4413      	add	r3, r2
 801575e:	00db      	lsls	r3, r3, #3
 8015760:	440b      	add	r3, r1
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d013      	beq.n	8015790 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015768:	4910      	ldr	r1, [pc, #64]	; (80157ac <etharp_free_entry+0x60>)
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	4613      	mov	r3, r2
 801576e:	005b      	lsls	r3, r3, #1
 8015770:	4413      	add	r3, r2
 8015772:	00db      	lsls	r3, r3, #3
 8015774:	440b      	add	r3, r1
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	4618      	mov	r0, r3
 801577a:	f003 fe53 	bl	8019424 <pbuf_free>
    arp_table[i].q = NULL;
 801577e:	490b      	ldr	r1, [pc, #44]	; (80157ac <etharp_free_entry+0x60>)
 8015780:	687a      	ldr	r2, [r7, #4]
 8015782:	4613      	mov	r3, r2
 8015784:	005b      	lsls	r3, r3, #1
 8015786:	4413      	add	r3, r2
 8015788:	00db      	lsls	r3, r3, #3
 801578a:	440b      	add	r3, r1
 801578c:	2200      	movs	r2, #0
 801578e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015790:	4906      	ldr	r1, [pc, #24]	; (80157ac <etharp_free_entry+0x60>)
 8015792:	687a      	ldr	r2, [r7, #4]
 8015794:	4613      	mov	r3, r2
 8015796:	005b      	lsls	r3, r3, #1
 8015798:	4413      	add	r3, r2
 801579a:	00db      	lsls	r3, r3, #3
 801579c:	440b      	add	r3, r1
 801579e:	3314      	adds	r3, #20
 80157a0:	2200      	movs	r2, #0
 80157a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80157a4:	bf00      	nop
 80157a6:	3708      	adds	r7, #8
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20008f68 	.word	0x20008f68

080157b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157b6:	2300      	movs	r3, #0
 80157b8:	607b      	str	r3, [r7, #4]
 80157ba:	e096      	b.n	80158ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80157bc:	494f      	ldr	r1, [pc, #316]	; (80158fc <etharp_tmr+0x14c>)
 80157be:	687a      	ldr	r2, [r7, #4]
 80157c0:	4613      	mov	r3, r2
 80157c2:	005b      	lsls	r3, r3, #1
 80157c4:	4413      	add	r3, r2
 80157c6:	00db      	lsls	r3, r3, #3
 80157c8:	440b      	add	r3, r1
 80157ca:	3314      	adds	r3, #20
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80157d0:	78fb      	ldrb	r3, [r7, #3]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	f000 8086 	beq.w	80158e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80157d8:	4948      	ldr	r1, [pc, #288]	; (80158fc <etharp_tmr+0x14c>)
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	4613      	mov	r3, r2
 80157de:	005b      	lsls	r3, r3, #1
 80157e0:	4413      	add	r3, r2
 80157e2:	00db      	lsls	r3, r3, #3
 80157e4:	440b      	add	r3, r1
 80157e6:	3312      	adds	r3, #18
 80157e8:	881b      	ldrh	r3, [r3, #0]
 80157ea:	3301      	adds	r3, #1
 80157ec:	b298      	uxth	r0, r3
 80157ee:	4943      	ldr	r1, [pc, #268]	; (80158fc <etharp_tmr+0x14c>)
 80157f0:	687a      	ldr	r2, [r7, #4]
 80157f2:	4613      	mov	r3, r2
 80157f4:	005b      	lsls	r3, r3, #1
 80157f6:	4413      	add	r3, r2
 80157f8:	00db      	lsls	r3, r3, #3
 80157fa:	440b      	add	r3, r1
 80157fc:	3312      	adds	r3, #18
 80157fe:	4602      	mov	r2, r0
 8015800:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015802:	493e      	ldr	r1, [pc, #248]	; (80158fc <etharp_tmr+0x14c>)
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	4613      	mov	r3, r2
 8015808:	005b      	lsls	r3, r3, #1
 801580a:	4413      	add	r3, r2
 801580c:	00db      	lsls	r3, r3, #3
 801580e:	440b      	add	r3, r1
 8015810:	3312      	adds	r3, #18
 8015812:	881b      	ldrh	r3, [r3, #0]
 8015814:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015818:	d215      	bcs.n	8015846 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801581a:	4938      	ldr	r1, [pc, #224]	; (80158fc <etharp_tmr+0x14c>)
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	4613      	mov	r3, r2
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	4413      	add	r3, r2
 8015824:	00db      	lsls	r3, r3, #3
 8015826:	440b      	add	r3, r1
 8015828:	3314      	adds	r3, #20
 801582a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801582c:	2b01      	cmp	r3, #1
 801582e:	d10e      	bne.n	801584e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015830:	4932      	ldr	r1, [pc, #200]	; (80158fc <etharp_tmr+0x14c>)
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	4613      	mov	r3, r2
 8015836:	005b      	lsls	r3, r3, #1
 8015838:	4413      	add	r3, r2
 801583a:	00db      	lsls	r3, r3, #3
 801583c:	440b      	add	r3, r1
 801583e:	3312      	adds	r3, #18
 8015840:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015842:	2b04      	cmp	r3, #4
 8015844:	d903      	bls.n	801584e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f7ff ff80 	bl	801574c <etharp_free_entry>
 801584c:	e04a      	b.n	80158e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801584e:	492b      	ldr	r1, [pc, #172]	; (80158fc <etharp_tmr+0x14c>)
 8015850:	687a      	ldr	r2, [r7, #4]
 8015852:	4613      	mov	r3, r2
 8015854:	005b      	lsls	r3, r3, #1
 8015856:	4413      	add	r3, r2
 8015858:	00db      	lsls	r3, r3, #3
 801585a:	440b      	add	r3, r1
 801585c:	3314      	adds	r3, #20
 801585e:	781b      	ldrb	r3, [r3, #0]
 8015860:	2b03      	cmp	r3, #3
 8015862:	d10a      	bne.n	801587a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015864:	4925      	ldr	r1, [pc, #148]	; (80158fc <etharp_tmr+0x14c>)
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	4613      	mov	r3, r2
 801586a:	005b      	lsls	r3, r3, #1
 801586c:	4413      	add	r3, r2
 801586e:	00db      	lsls	r3, r3, #3
 8015870:	440b      	add	r3, r1
 8015872:	3314      	adds	r3, #20
 8015874:	2204      	movs	r2, #4
 8015876:	701a      	strb	r2, [r3, #0]
 8015878:	e034      	b.n	80158e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801587a:	4920      	ldr	r1, [pc, #128]	; (80158fc <etharp_tmr+0x14c>)
 801587c:	687a      	ldr	r2, [r7, #4]
 801587e:	4613      	mov	r3, r2
 8015880:	005b      	lsls	r3, r3, #1
 8015882:	4413      	add	r3, r2
 8015884:	00db      	lsls	r3, r3, #3
 8015886:	440b      	add	r3, r1
 8015888:	3314      	adds	r3, #20
 801588a:	781b      	ldrb	r3, [r3, #0]
 801588c:	2b04      	cmp	r3, #4
 801588e:	d10a      	bne.n	80158a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015890:	491a      	ldr	r1, [pc, #104]	; (80158fc <etharp_tmr+0x14c>)
 8015892:	687a      	ldr	r2, [r7, #4]
 8015894:	4613      	mov	r3, r2
 8015896:	005b      	lsls	r3, r3, #1
 8015898:	4413      	add	r3, r2
 801589a:	00db      	lsls	r3, r3, #3
 801589c:	440b      	add	r3, r1
 801589e:	3314      	adds	r3, #20
 80158a0:	2202      	movs	r2, #2
 80158a2:	701a      	strb	r2, [r3, #0]
 80158a4:	e01e      	b.n	80158e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80158a6:	4915      	ldr	r1, [pc, #84]	; (80158fc <etharp_tmr+0x14c>)
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	4613      	mov	r3, r2
 80158ac:	005b      	lsls	r3, r3, #1
 80158ae:	4413      	add	r3, r2
 80158b0:	00db      	lsls	r3, r3, #3
 80158b2:	440b      	add	r3, r1
 80158b4:	3314      	adds	r3, #20
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	2b01      	cmp	r3, #1
 80158ba:	d113      	bne.n	80158e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80158bc:	490f      	ldr	r1, [pc, #60]	; (80158fc <etharp_tmr+0x14c>)
 80158be:	687a      	ldr	r2, [r7, #4]
 80158c0:	4613      	mov	r3, r2
 80158c2:	005b      	lsls	r3, r3, #1
 80158c4:	4413      	add	r3, r2
 80158c6:	00db      	lsls	r3, r3, #3
 80158c8:	440b      	add	r3, r1
 80158ca:	3308      	adds	r3, #8
 80158cc:	6818      	ldr	r0, [r3, #0]
 80158ce:	687a      	ldr	r2, [r7, #4]
 80158d0:	4613      	mov	r3, r2
 80158d2:	005b      	lsls	r3, r3, #1
 80158d4:	4413      	add	r3, r2
 80158d6:	00db      	lsls	r3, r3, #3
 80158d8:	4a08      	ldr	r2, [pc, #32]	; (80158fc <etharp_tmr+0x14c>)
 80158da:	4413      	add	r3, r2
 80158dc:	3304      	adds	r3, #4
 80158de:	4619      	mov	r1, r3
 80158e0:	f000 fe72 	bl	80165c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	3301      	adds	r3, #1
 80158e8:	607b      	str	r3, [r7, #4]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2b09      	cmp	r3, #9
 80158ee:	f77f af65 	ble.w	80157bc <etharp_tmr+0xc>
      }
    }
  }
}
 80158f2:	bf00      	nop
 80158f4:	bf00      	nop
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}
 80158fc:	20008f68 	.word	0x20008f68

08015900 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b08a      	sub	sp, #40	; 0x28
 8015904:	af00      	add	r7, sp, #0
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	460b      	mov	r3, r1
 801590a:	607a      	str	r2, [r7, #4]
 801590c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801590e:	230a      	movs	r3, #10
 8015910:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015912:	230a      	movs	r3, #10
 8015914:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015916:	230a      	movs	r3, #10
 8015918:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801591a:	2300      	movs	r3, #0
 801591c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801591e:	230a      	movs	r3, #10
 8015920:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	83bb      	strh	r3, [r7, #28]
 8015926:	2300      	movs	r3, #0
 8015928:	837b      	strh	r3, [r7, #26]
 801592a:	2300      	movs	r3, #0
 801592c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801592e:	2300      	movs	r3, #0
 8015930:	843b      	strh	r3, [r7, #32]
 8015932:	e0ae      	b.n	8015a92 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015938:	49a6      	ldr	r1, [pc, #664]	; (8015bd4 <etharp_find_entry+0x2d4>)
 801593a:	4613      	mov	r3, r2
 801593c:	005b      	lsls	r3, r3, #1
 801593e:	4413      	add	r3, r2
 8015940:	00db      	lsls	r3, r3, #3
 8015942:	440b      	add	r3, r1
 8015944:	3314      	adds	r3, #20
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801594a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801594e:	2b0a      	cmp	r3, #10
 8015950:	d105      	bne.n	801595e <etharp_find_entry+0x5e>
 8015952:	7dfb      	ldrb	r3, [r7, #23]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d102      	bne.n	801595e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015958:	8c3b      	ldrh	r3, [r7, #32]
 801595a:	847b      	strh	r3, [r7, #34]	; 0x22
 801595c:	e095      	b.n	8015a8a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801595e:	7dfb      	ldrb	r3, [r7, #23]
 8015960:	2b00      	cmp	r3, #0
 8015962:	f000 8092 	beq.w	8015a8a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015966:	7dfb      	ldrb	r3, [r7, #23]
 8015968:	2b01      	cmp	r3, #1
 801596a:	d009      	beq.n	8015980 <etharp_find_entry+0x80>
 801596c:	7dfb      	ldrb	r3, [r7, #23]
 801596e:	2b01      	cmp	r3, #1
 8015970:	d806      	bhi.n	8015980 <etharp_find_entry+0x80>
 8015972:	4b99      	ldr	r3, [pc, #612]	; (8015bd8 <etharp_find_entry+0x2d8>)
 8015974:	f240 1223 	movw	r2, #291	; 0x123
 8015978:	4998      	ldr	r1, [pc, #608]	; (8015bdc <etharp_find_entry+0x2dc>)
 801597a:	4899      	ldr	r0, [pc, #612]	; (8015be0 <etharp_find_entry+0x2e0>)
 801597c:	f00b ff4e 	bl	802181c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d020      	beq.n	80159c8 <etharp_find_entry+0xc8>
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	6819      	ldr	r1, [r3, #0]
 801598a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801598e:	4891      	ldr	r0, [pc, #580]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	4403      	add	r3, r0
 801599a:	3304      	adds	r3, #4
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	4299      	cmp	r1, r3
 80159a0:	d112      	bne.n	80159c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d00c      	beq.n	80159c2 <etharp_find_entry+0xc2>
 80159a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159ac:	4989      	ldr	r1, [pc, #548]	; (8015bd4 <etharp_find_entry+0x2d4>)
 80159ae:	4613      	mov	r3, r2
 80159b0:	005b      	lsls	r3, r3, #1
 80159b2:	4413      	add	r3, r2
 80159b4:	00db      	lsls	r3, r3, #3
 80159b6:	440b      	add	r3, r1
 80159b8:	3308      	adds	r3, #8
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d102      	bne.n	80159c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80159c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159c6:	e100      	b.n	8015bca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80159c8:	7dfb      	ldrb	r3, [r7, #23]
 80159ca:	2b01      	cmp	r3, #1
 80159cc:	d140      	bne.n	8015a50 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80159ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159d2:	4980      	ldr	r1, [pc, #512]	; (8015bd4 <etharp_find_entry+0x2d4>)
 80159d4:	4613      	mov	r3, r2
 80159d6:	005b      	lsls	r3, r3, #1
 80159d8:	4413      	add	r3, r2
 80159da:	00db      	lsls	r3, r3, #3
 80159dc:	440b      	add	r3, r1
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d01a      	beq.n	8015a1a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80159e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159e8:	497a      	ldr	r1, [pc, #488]	; (8015bd4 <etharp_find_entry+0x2d4>)
 80159ea:	4613      	mov	r3, r2
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	4413      	add	r3, r2
 80159f0:	00db      	lsls	r3, r3, #3
 80159f2:	440b      	add	r3, r1
 80159f4:	3312      	adds	r3, #18
 80159f6:	881b      	ldrh	r3, [r3, #0]
 80159f8:	8bba      	ldrh	r2, [r7, #28]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d845      	bhi.n	8015a8a <etharp_find_entry+0x18a>
            old_queue = i;
 80159fe:	8c3b      	ldrh	r3, [r7, #32]
 8015a00:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015a02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a06:	4973      	ldr	r1, [pc, #460]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015a08:	4613      	mov	r3, r2
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	4413      	add	r3, r2
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	440b      	add	r3, r1
 8015a12:	3312      	adds	r3, #18
 8015a14:	881b      	ldrh	r3, [r3, #0]
 8015a16:	83bb      	strh	r3, [r7, #28]
 8015a18:	e037      	b.n	8015a8a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015a1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a1e:	496d      	ldr	r1, [pc, #436]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015a20:	4613      	mov	r3, r2
 8015a22:	005b      	lsls	r3, r3, #1
 8015a24:	4413      	add	r3, r2
 8015a26:	00db      	lsls	r3, r3, #3
 8015a28:	440b      	add	r3, r1
 8015a2a:	3312      	adds	r3, #18
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	8b7a      	ldrh	r2, [r7, #26]
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d82a      	bhi.n	8015a8a <etharp_find_entry+0x18a>
            old_pending = i;
 8015a34:	8c3b      	ldrh	r3, [r7, #32]
 8015a36:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015a38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a3c:	4965      	ldr	r1, [pc, #404]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015a3e:	4613      	mov	r3, r2
 8015a40:	005b      	lsls	r3, r3, #1
 8015a42:	4413      	add	r3, r2
 8015a44:	00db      	lsls	r3, r3, #3
 8015a46:	440b      	add	r3, r1
 8015a48:	3312      	adds	r3, #18
 8015a4a:	881b      	ldrh	r3, [r3, #0]
 8015a4c:	837b      	strh	r3, [r7, #26]
 8015a4e:	e01c      	b.n	8015a8a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015a50:	7dfb      	ldrb	r3, [r7, #23]
 8015a52:	2b01      	cmp	r3, #1
 8015a54:	d919      	bls.n	8015a8a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015a56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a5a:	495e      	ldr	r1, [pc, #376]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015a5c:	4613      	mov	r3, r2
 8015a5e:	005b      	lsls	r3, r3, #1
 8015a60:	4413      	add	r3, r2
 8015a62:	00db      	lsls	r3, r3, #3
 8015a64:	440b      	add	r3, r1
 8015a66:	3312      	adds	r3, #18
 8015a68:	881b      	ldrh	r3, [r3, #0]
 8015a6a:	8b3a      	ldrh	r2, [r7, #24]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d80c      	bhi.n	8015a8a <etharp_find_entry+0x18a>
            old_stable = i;
 8015a70:	8c3b      	ldrh	r3, [r7, #32]
 8015a72:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015a74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a78:	4956      	ldr	r1, [pc, #344]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015a7a:	4613      	mov	r3, r2
 8015a7c:	005b      	lsls	r3, r3, #1
 8015a7e:	4413      	add	r3, r2
 8015a80:	00db      	lsls	r3, r3, #3
 8015a82:	440b      	add	r3, r1
 8015a84:	3312      	adds	r3, #18
 8015a86:	881b      	ldrh	r3, [r3, #0]
 8015a88:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a8a:	8c3b      	ldrh	r3, [r7, #32]
 8015a8c:	3301      	adds	r3, #1
 8015a8e:	b29b      	uxth	r3, r3
 8015a90:	843b      	strh	r3, [r7, #32]
 8015a92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a96:	2b09      	cmp	r3, #9
 8015a98:	f77f af4c 	ble.w	8015934 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015a9c:	7afb      	ldrb	r3, [r7, #11]
 8015a9e:	f003 0302 	and.w	r3, r3, #2
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d108      	bne.n	8015ab8 <etharp_find_entry+0x1b8>
 8015aa6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015aaa:	2b0a      	cmp	r3, #10
 8015aac:	d107      	bne.n	8015abe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015aae:	7afb      	ldrb	r3, [r7, #11]
 8015ab0:	f003 0301 	and.w	r3, r3, #1
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d102      	bne.n	8015abe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8015abc:	e085      	b.n	8015bca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015abe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015ac2:	2b09      	cmp	r3, #9
 8015ac4:	dc02      	bgt.n	8015acc <etharp_find_entry+0x1cc>
    i = empty;
 8015ac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ac8:	843b      	strh	r3, [r7, #32]
 8015aca:	e039      	b.n	8015b40 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015acc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015ad0:	2b09      	cmp	r3, #9
 8015ad2:	dc14      	bgt.n	8015afe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015ad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ad6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015ad8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015adc:	493d      	ldr	r1, [pc, #244]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015ade:	4613      	mov	r3, r2
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	4413      	add	r3, r2
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	440b      	add	r3, r1
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d018      	beq.n	8015b20 <etharp_find_entry+0x220>
 8015aee:	4b3a      	ldr	r3, [pc, #232]	; (8015bd8 <etharp_find_entry+0x2d8>)
 8015af0:	f240 126d 	movw	r2, #365	; 0x16d
 8015af4:	493b      	ldr	r1, [pc, #236]	; (8015be4 <etharp_find_entry+0x2e4>)
 8015af6:	483a      	ldr	r0, [pc, #232]	; (8015be0 <etharp_find_entry+0x2e0>)
 8015af8:	f00b fe90 	bl	802181c <iprintf>
 8015afc:	e010      	b.n	8015b20 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015afe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015b02:	2b09      	cmp	r3, #9
 8015b04:	dc02      	bgt.n	8015b0c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015b08:	843b      	strh	r3, [r7, #32]
 8015b0a:	e009      	b.n	8015b20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015b0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015b10:	2b09      	cmp	r3, #9
 8015b12:	dc02      	bgt.n	8015b1a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015b14:	8bfb      	ldrh	r3, [r7, #30]
 8015b16:	843b      	strh	r3, [r7, #32]
 8015b18:	e002      	b.n	8015b20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b1e:	e054      	b.n	8015bca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015b20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b24:	2b09      	cmp	r3, #9
 8015b26:	dd06      	ble.n	8015b36 <etharp_find_entry+0x236>
 8015b28:	4b2b      	ldr	r3, [pc, #172]	; (8015bd8 <etharp_find_entry+0x2d8>)
 8015b2a:	f240 127f 	movw	r2, #383	; 0x17f
 8015b2e:	492e      	ldr	r1, [pc, #184]	; (8015be8 <etharp_find_entry+0x2e8>)
 8015b30:	482b      	ldr	r0, [pc, #172]	; (8015be0 <etharp_find_entry+0x2e0>)
 8015b32:	f00b fe73 	bl	802181c <iprintf>
    etharp_free_entry(i);
 8015b36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7ff fe06 	bl	801574c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015b40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b44:	2b09      	cmp	r3, #9
 8015b46:	dd06      	ble.n	8015b56 <etharp_find_entry+0x256>
 8015b48:	4b23      	ldr	r3, [pc, #140]	; (8015bd8 <etharp_find_entry+0x2d8>)
 8015b4a:	f240 1283 	movw	r2, #387	; 0x183
 8015b4e:	4926      	ldr	r1, [pc, #152]	; (8015be8 <etharp_find_entry+0x2e8>)
 8015b50:	4823      	ldr	r0, [pc, #140]	; (8015be0 <etharp_find_entry+0x2e0>)
 8015b52:	f00b fe63 	bl	802181c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015b56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b5a:	491e      	ldr	r1, [pc, #120]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	005b      	lsls	r3, r3, #1
 8015b60:	4413      	add	r3, r2
 8015b62:	00db      	lsls	r3, r3, #3
 8015b64:	440b      	add	r3, r1
 8015b66:	3314      	adds	r3, #20
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d006      	beq.n	8015b7c <etharp_find_entry+0x27c>
 8015b6e:	4b1a      	ldr	r3, [pc, #104]	; (8015bd8 <etharp_find_entry+0x2d8>)
 8015b70:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015b74:	491d      	ldr	r1, [pc, #116]	; (8015bec <etharp_find_entry+0x2ec>)
 8015b76:	481a      	ldr	r0, [pc, #104]	; (8015be0 <etharp_find_entry+0x2e0>)
 8015b78:	f00b fe50 	bl	802181c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d00b      	beq.n	8015b9a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015b82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	6819      	ldr	r1, [r3, #0]
 8015b8a:	4812      	ldr	r0, [pc, #72]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	005b      	lsls	r3, r3, #1
 8015b90:	4413      	add	r3, r2
 8015b92:	00db      	lsls	r3, r3, #3
 8015b94:	4403      	add	r3, r0
 8015b96:	3304      	adds	r3, #4
 8015b98:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015b9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b9e:	490d      	ldr	r1, [pc, #52]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015ba0:	4613      	mov	r3, r2
 8015ba2:	005b      	lsls	r3, r3, #1
 8015ba4:	4413      	add	r3, r2
 8015ba6:	00db      	lsls	r3, r3, #3
 8015ba8:	440b      	add	r3, r1
 8015baa:	3312      	adds	r3, #18
 8015bac:	2200      	movs	r2, #0
 8015bae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015bb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bb4:	4907      	ldr	r1, [pc, #28]	; (8015bd4 <etharp_find_entry+0x2d4>)
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	005b      	lsls	r3, r3, #1
 8015bba:	4413      	add	r3, r2
 8015bbc:	00db      	lsls	r3, r3, #3
 8015bbe:	440b      	add	r3, r1
 8015bc0:	3308      	adds	r3, #8
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015bc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3728      	adds	r7, #40	; 0x28
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	20008f68 	.word	0x20008f68
 8015bd8:	08022cac 	.word	0x08022cac
 8015bdc:	08022d2c 	.word	0x08022d2c
 8015be0:	08022d6c 	.word	0x08022d6c
 8015be4:	08022d94 	.word	0x08022d94
 8015be8:	08022dac 	.word	0x08022dac
 8015bec:	08022dc0 	.word	0x08022dc0

08015bf0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b088      	sub	sp, #32
 8015bf4:	af02      	add	r7, sp, #8
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	607a      	str	r2, [r7, #4]
 8015bfc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c04:	2b06      	cmp	r3, #6
 8015c06:	d006      	beq.n	8015c16 <etharp_update_arp_entry+0x26>
 8015c08:	4b48      	ldr	r3, [pc, #288]	; (8015d2c <etharp_update_arp_entry+0x13c>)
 8015c0a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015c0e:	4948      	ldr	r1, [pc, #288]	; (8015d30 <etharp_update_arp_entry+0x140>)
 8015c10:	4848      	ldr	r0, [pc, #288]	; (8015d34 <etharp_update_arp_entry+0x144>)
 8015c12:	f00b fe03 	bl	802181c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d012      	beq.n	8015c42 <etharp_update_arp_entry+0x52>
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d00e      	beq.n	8015c42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	68f9      	ldr	r1, [r7, #12]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f001 fa0e 	bl	801704c <ip4_addr_isbroadcast_u32>
 8015c30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d105      	bne.n	8015c42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c3e:	2be0      	cmp	r3, #224	; 0xe0
 8015c40:	d102      	bne.n	8015c48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015c42:	f06f 030f 	mvn.w	r3, #15
 8015c46:	e06c      	b.n	8015d22 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015c48:	78fb      	ldrb	r3, [r7, #3]
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	4619      	mov	r1, r3
 8015c4e:	68b8      	ldr	r0, [r7, #8]
 8015c50:	f7ff fe56 	bl	8015900 <etharp_find_entry>
 8015c54:	4603      	mov	r3, r0
 8015c56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015c58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	da02      	bge.n	8015c66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015c60:	8afb      	ldrh	r3, [r7, #22]
 8015c62:	b25b      	sxtb	r3, r3
 8015c64:	e05d      	b.n	8015d22 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015c66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c6a:	4933      	ldr	r1, [pc, #204]	; (8015d38 <etharp_update_arp_entry+0x148>)
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	005b      	lsls	r3, r3, #1
 8015c70:	4413      	add	r3, r2
 8015c72:	00db      	lsls	r3, r3, #3
 8015c74:	440b      	add	r3, r1
 8015c76:	3314      	adds	r3, #20
 8015c78:	2202      	movs	r2, #2
 8015c7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015c7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c80:	492d      	ldr	r1, [pc, #180]	; (8015d38 <etharp_update_arp_entry+0x148>)
 8015c82:	4613      	mov	r3, r2
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	4413      	add	r3, r2
 8015c88:	00db      	lsls	r3, r3, #3
 8015c8a:	440b      	add	r3, r1
 8015c8c:	3308      	adds	r3, #8
 8015c8e:	68fa      	ldr	r2, [r7, #12]
 8015c90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015c92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c96:	4613      	mov	r3, r2
 8015c98:	005b      	lsls	r3, r3, #1
 8015c9a:	4413      	add	r3, r2
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	3308      	adds	r3, #8
 8015ca0:	4a25      	ldr	r2, [pc, #148]	; (8015d38 <etharp_update_arp_entry+0x148>)
 8015ca2:	4413      	add	r3, r2
 8015ca4:	3304      	adds	r3, #4
 8015ca6:	2206      	movs	r2, #6
 8015ca8:	6879      	ldr	r1, [r7, #4]
 8015caa:	4618      	mov	r0, r3
 8015cac:	f00b fcf6 	bl	802169c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015cb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015cb4:	4920      	ldr	r1, [pc, #128]	; (8015d38 <etharp_update_arp_entry+0x148>)
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	005b      	lsls	r3, r3, #1
 8015cba:	4413      	add	r3, r2
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	440b      	add	r3, r1
 8015cc0:	3312      	adds	r3, #18
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015cc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015cca:	491b      	ldr	r1, [pc, #108]	; (8015d38 <etharp_update_arp_entry+0x148>)
 8015ccc:	4613      	mov	r3, r2
 8015cce:	005b      	lsls	r3, r3, #1
 8015cd0:	4413      	add	r3, r2
 8015cd2:	00db      	lsls	r3, r3, #3
 8015cd4:	440b      	add	r3, r1
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d021      	beq.n	8015d20 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015cdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ce0:	4915      	ldr	r1, [pc, #84]	; (8015d38 <etharp_update_arp_entry+0x148>)
 8015ce2:	4613      	mov	r3, r2
 8015ce4:	005b      	lsls	r3, r3, #1
 8015ce6:	4413      	add	r3, r2
 8015ce8:	00db      	lsls	r3, r3, #3
 8015cea:	440b      	add	r3, r1
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015cf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015cf4:	4910      	ldr	r1, [pc, #64]	; (8015d38 <etharp_update_arp_entry+0x148>)
 8015cf6:	4613      	mov	r3, r2
 8015cf8:	005b      	lsls	r3, r3, #1
 8015cfa:	4413      	add	r3, r2
 8015cfc:	00db      	lsls	r3, r3, #3
 8015cfe:	440b      	add	r3, r1
 8015d00:	2200      	movs	r2, #0
 8015d02:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015d0e:	9300      	str	r3, [sp, #0]
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	6939      	ldr	r1, [r7, #16]
 8015d14:	68f8      	ldr	r0, [r7, #12]
 8015d16:	f000 fcf7 	bl	8016708 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015d1a:	6938      	ldr	r0, [r7, #16]
 8015d1c:	f003 fb82 	bl	8019424 <pbuf_free>
  }
  return ERR_OK;
 8015d20:	2300      	movs	r3, #0
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3718      	adds	r7, #24
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	08022cac 	.word	0x08022cac
 8015d30:	08022dec 	.word	0x08022dec
 8015d34:	08022d6c 	.word	0x08022d6c
 8015d38:	20008f68 	.word	0x20008f68

08015d3c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d44:	2300      	movs	r3, #0
 8015d46:	60fb      	str	r3, [r7, #12]
 8015d48:	e01e      	b.n	8015d88 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015d4a:	4913      	ldr	r1, [pc, #76]	; (8015d98 <etharp_cleanup_netif+0x5c>)
 8015d4c:	68fa      	ldr	r2, [r7, #12]
 8015d4e:	4613      	mov	r3, r2
 8015d50:	005b      	lsls	r3, r3, #1
 8015d52:	4413      	add	r3, r2
 8015d54:	00db      	lsls	r3, r3, #3
 8015d56:	440b      	add	r3, r1
 8015d58:	3314      	adds	r3, #20
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015d5e:	7afb      	ldrb	r3, [r7, #11]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00e      	beq.n	8015d82 <etharp_cleanup_netif+0x46>
 8015d64:	490c      	ldr	r1, [pc, #48]	; (8015d98 <etharp_cleanup_netif+0x5c>)
 8015d66:	68fa      	ldr	r2, [r7, #12]
 8015d68:	4613      	mov	r3, r2
 8015d6a:	005b      	lsls	r3, r3, #1
 8015d6c:	4413      	add	r3, r2
 8015d6e:	00db      	lsls	r3, r3, #3
 8015d70:	440b      	add	r3, r1
 8015d72:	3308      	adds	r3, #8
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	687a      	ldr	r2, [r7, #4]
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d102      	bne.n	8015d82 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015d7c:	68f8      	ldr	r0, [r7, #12]
 8015d7e:	f7ff fce5 	bl	801574c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	3301      	adds	r3, #1
 8015d86:	60fb      	str	r3, [r7, #12]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2b09      	cmp	r3, #9
 8015d8c:	dddd      	ble.n	8015d4a <etharp_cleanup_netif+0xe>
    }
  }
}
 8015d8e:	bf00      	nop
 8015d90:	bf00      	nop
 8015d92:	3710      	adds	r7, #16
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}
 8015d98:	20008f68 	.word	0x20008f68

08015d9c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015d9c:	b5b0      	push	{r4, r5, r7, lr}
 8015d9e:	b08a      	sub	sp, #40	; 0x28
 8015da0:	af04      	add	r7, sp, #16
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d107      	bne.n	8015dbc <etharp_input+0x20>
 8015dac:	4b3f      	ldr	r3, [pc, #252]	; (8015eac <etharp_input+0x110>)
 8015dae:	f240 228a 	movw	r2, #650	; 0x28a
 8015db2:	493f      	ldr	r1, [pc, #252]	; (8015eb0 <etharp_input+0x114>)
 8015db4:	483f      	ldr	r0, [pc, #252]	; (8015eb4 <etharp_input+0x118>)
 8015db6:	f00b fd31 	bl	802181c <iprintf>
 8015dba:	e074      	b.n	8015ea6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	685b      	ldr	r3, [r3, #4]
 8015dc0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	881b      	ldrh	r3, [r3, #0]
 8015dc6:	b29b      	uxth	r3, r3
 8015dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015dcc:	d10c      	bne.n	8015de8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015dd2:	2b06      	cmp	r3, #6
 8015dd4:	d108      	bne.n	8015de8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015dda:	2b04      	cmp	r3, #4
 8015ddc:	d104      	bne.n	8015de8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	885b      	ldrh	r3, [r3, #2]
 8015de2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015de4:	2b08      	cmp	r3, #8
 8015de6:	d003      	beq.n	8015df0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f003 fb1b 	bl	8019424 <pbuf_free>
    return;
 8015dee:	e05a      	b.n	8015ea6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015df0:	693b      	ldr	r3, [r7, #16]
 8015df2:	330e      	adds	r3, #14
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	3318      	adds	r3, #24
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	3304      	adds	r3, #4
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d102      	bne.n	8015e10 <etharp_input+0x74>
    for_us = 0;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	75fb      	strb	r3, [r7, #23]
 8015e0e:	e009      	b.n	8015e24 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015e10:	68ba      	ldr	r2, [r7, #8]
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	3304      	adds	r3, #4
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	bf0c      	ite	eq
 8015e1c:	2301      	moveq	r3, #1
 8015e1e:	2300      	movne	r3, #0
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	f103 0208 	add.w	r2, r3, #8
 8015e2a:	7dfb      	ldrb	r3, [r7, #23]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d001      	beq.n	8015e34 <etharp_input+0x98>
 8015e30:	2301      	movs	r3, #1
 8015e32:	e000      	b.n	8015e36 <etharp_input+0x9a>
 8015e34:	2302      	movs	r3, #2
 8015e36:	f107 010c 	add.w	r1, r7, #12
 8015e3a:	6838      	ldr	r0, [r7, #0]
 8015e3c:	f7ff fed8 	bl	8015bf0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	88db      	ldrh	r3, [r3, #6]
 8015e44:	b29b      	uxth	r3, r3
 8015e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e4a:	d003      	beq.n	8015e54 <etharp_input+0xb8>
 8015e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e50:	d01e      	beq.n	8015e90 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015e52:	e025      	b.n	8015ea0 <etharp_input+0x104>
      if (for_us) {
 8015e54:	7dfb      	ldrb	r3, [r7, #23]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d021      	beq.n	8015e9e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015e60:	693b      	ldr	r3, [r7, #16]
 8015e62:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015e70:	693a      	ldr	r2, [r7, #16]
 8015e72:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015e74:	2102      	movs	r1, #2
 8015e76:	9103      	str	r1, [sp, #12]
 8015e78:	f107 010c 	add.w	r1, r7, #12
 8015e7c:	9102      	str	r1, [sp, #8]
 8015e7e:	9201      	str	r2, [sp, #4]
 8015e80:	9300      	str	r3, [sp, #0]
 8015e82:	462b      	mov	r3, r5
 8015e84:	4622      	mov	r2, r4
 8015e86:	4601      	mov	r1, r0
 8015e88:	6838      	ldr	r0, [r7, #0]
 8015e8a:	f000 faef 	bl	801646c <etharp_raw>
      break;
 8015e8e:	e006      	b.n	8015e9e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015e90:	f107 030c 	add.w	r3, r7, #12
 8015e94:	4619      	mov	r1, r3
 8015e96:	6838      	ldr	r0, [r7, #0]
 8015e98:	f7fe f9fc 	bl	8014294 <dhcp_arp_reply>
      break;
 8015e9c:	e000      	b.n	8015ea0 <etharp_input+0x104>
      break;
 8015e9e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f003 fabf 	bl	8019424 <pbuf_free>
}
 8015ea6:	3718      	adds	r7, #24
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8015eac:	08022cac 	.word	0x08022cac
 8015eb0:	08022e44 	.word	0x08022e44
 8015eb4:	08022d6c 	.word	0x08022d6c

08015eb8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b086      	sub	sp, #24
 8015ebc:	af02      	add	r7, sp, #8
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	4613      	mov	r3, r2
 8015ec4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015ec6:	79fa      	ldrb	r2, [r7, #7]
 8015ec8:	4944      	ldr	r1, [pc, #272]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015eca:	4613      	mov	r3, r2
 8015ecc:	005b      	lsls	r3, r3, #1
 8015ece:	4413      	add	r3, r2
 8015ed0:	00db      	lsls	r3, r3, #3
 8015ed2:	440b      	add	r3, r1
 8015ed4:	3314      	adds	r3, #20
 8015ed6:	781b      	ldrb	r3, [r3, #0]
 8015ed8:	2b01      	cmp	r3, #1
 8015eda:	d806      	bhi.n	8015eea <etharp_output_to_arp_index+0x32>
 8015edc:	4b40      	ldr	r3, [pc, #256]	; (8015fe0 <etharp_output_to_arp_index+0x128>)
 8015ede:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015ee2:	4940      	ldr	r1, [pc, #256]	; (8015fe4 <etharp_output_to_arp_index+0x12c>)
 8015ee4:	4840      	ldr	r0, [pc, #256]	; (8015fe8 <etharp_output_to_arp_index+0x130>)
 8015ee6:	f00b fc99 	bl	802181c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015eea:	79fa      	ldrb	r2, [r7, #7]
 8015eec:	493b      	ldr	r1, [pc, #236]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015eee:	4613      	mov	r3, r2
 8015ef0:	005b      	lsls	r3, r3, #1
 8015ef2:	4413      	add	r3, r2
 8015ef4:	00db      	lsls	r3, r3, #3
 8015ef6:	440b      	add	r3, r1
 8015ef8:	3314      	adds	r3, #20
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	2b02      	cmp	r3, #2
 8015efe:	d153      	bne.n	8015fa8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015f00:	79fa      	ldrb	r2, [r7, #7]
 8015f02:	4936      	ldr	r1, [pc, #216]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015f04:	4613      	mov	r3, r2
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	4413      	add	r3, r2
 8015f0a:	00db      	lsls	r3, r3, #3
 8015f0c:	440b      	add	r3, r1
 8015f0e:	3312      	adds	r3, #18
 8015f10:	881b      	ldrh	r3, [r3, #0]
 8015f12:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015f16:	d919      	bls.n	8015f4c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015f18:	79fa      	ldrb	r2, [r7, #7]
 8015f1a:	4613      	mov	r3, r2
 8015f1c:	005b      	lsls	r3, r3, #1
 8015f1e:	4413      	add	r3, r2
 8015f20:	00db      	lsls	r3, r3, #3
 8015f22:	4a2e      	ldr	r2, [pc, #184]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015f24:	4413      	add	r3, r2
 8015f26:	3304      	adds	r3, #4
 8015f28:	4619      	mov	r1, r3
 8015f2a:	68f8      	ldr	r0, [r7, #12]
 8015f2c:	f000 fb4c 	bl	80165c8 <etharp_request>
 8015f30:	4603      	mov	r3, r0
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d138      	bne.n	8015fa8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015f36:	79fa      	ldrb	r2, [r7, #7]
 8015f38:	4928      	ldr	r1, [pc, #160]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015f3a:	4613      	mov	r3, r2
 8015f3c:	005b      	lsls	r3, r3, #1
 8015f3e:	4413      	add	r3, r2
 8015f40:	00db      	lsls	r3, r3, #3
 8015f42:	440b      	add	r3, r1
 8015f44:	3314      	adds	r3, #20
 8015f46:	2203      	movs	r2, #3
 8015f48:	701a      	strb	r2, [r3, #0]
 8015f4a:	e02d      	b.n	8015fa8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015f4c:	79fa      	ldrb	r2, [r7, #7]
 8015f4e:	4923      	ldr	r1, [pc, #140]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015f50:	4613      	mov	r3, r2
 8015f52:	005b      	lsls	r3, r3, #1
 8015f54:	4413      	add	r3, r2
 8015f56:	00db      	lsls	r3, r3, #3
 8015f58:	440b      	add	r3, r1
 8015f5a:	3312      	adds	r3, #18
 8015f5c:	881b      	ldrh	r3, [r3, #0]
 8015f5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015f62:	d321      	bcc.n	8015fa8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015f64:	79fa      	ldrb	r2, [r7, #7]
 8015f66:	4613      	mov	r3, r2
 8015f68:	005b      	lsls	r3, r3, #1
 8015f6a:	4413      	add	r3, r2
 8015f6c:	00db      	lsls	r3, r3, #3
 8015f6e:	4a1b      	ldr	r2, [pc, #108]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015f70:	4413      	add	r3, r2
 8015f72:	1d19      	adds	r1, r3, #4
 8015f74:	79fa      	ldrb	r2, [r7, #7]
 8015f76:	4613      	mov	r3, r2
 8015f78:	005b      	lsls	r3, r3, #1
 8015f7a:	4413      	add	r3, r2
 8015f7c:	00db      	lsls	r3, r3, #3
 8015f7e:	3308      	adds	r3, #8
 8015f80:	4a16      	ldr	r2, [pc, #88]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015f82:	4413      	add	r3, r2
 8015f84:	3304      	adds	r3, #4
 8015f86:	461a      	mov	r2, r3
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	f000 fafb 	bl	8016584 <etharp_request_dst>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d109      	bne.n	8015fa8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015f94:	79fa      	ldrb	r2, [r7, #7]
 8015f96:	4911      	ldr	r1, [pc, #68]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015f98:	4613      	mov	r3, r2
 8015f9a:	005b      	lsls	r3, r3, #1
 8015f9c:	4413      	add	r3, r2
 8015f9e:	00db      	lsls	r3, r3, #3
 8015fa0:	440b      	add	r3, r1
 8015fa2:	3314      	adds	r3, #20
 8015fa4:	2203      	movs	r2, #3
 8015fa6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015fae:	79fa      	ldrb	r2, [r7, #7]
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	005b      	lsls	r3, r3, #1
 8015fb4:	4413      	add	r3, r2
 8015fb6:	00db      	lsls	r3, r3, #3
 8015fb8:	3308      	adds	r3, #8
 8015fba:	4a08      	ldr	r2, [pc, #32]	; (8015fdc <etharp_output_to_arp_index+0x124>)
 8015fbc:	4413      	add	r3, r2
 8015fbe:	3304      	adds	r3, #4
 8015fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015fc4:	9200      	str	r2, [sp, #0]
 8015fc6:	460a      	mov	r2, r1
 8015fc8:	68b9      	ldr	r1, [r7, #8]
 8015fca:	68f8      	ldr	r0, [r7, #12]
 8015fcc:	f000 fb9c 	bl	8016708 <ethernet_output>
 8015fd0:	4603      	mov	r3, r0
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3710      	adds	r7, #16
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	20008f68 	.word	0x20008f68
 8015fe0:	08022cac 	.word	0x08022cac
 8015fe4:	08022e64 	.word	0x08022e64
 8015fe8:	08022d6c 	.word	0x08022d6c

08015fec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b08a      	sub	sp, #40	; 0x28
 8015ff0:	af02      	add	r7, sp, #8
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d106      	bne.n	8016010 <etharp_output+0x24>
 8016002:	4b73      	ldr	r3, [pc, #460]	; (80161d0 <etharp_output+0x1e4>)
 8016004:	f240 321e 	movw	r2, #798	; 0x31e
 8016008:	4972      	ldr	r1, [pc, #456]	; (80161d4 <etharp_output+0x1e8>)
 801600a:	4873      	ldr	r0, [pc, #460]	; (80161d8 <etharp_output+0x1ec>)
 801600c:	f00b fc06 	bl	802181c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d106      	bne.n	8016024 <etharp_output+0x38>
 8016016:	4b6e      	ldr	r3, [pc, #440]	; (80161d0 <etharp_output+0x1e4>)
 8016018:	f240 321f 	movw	r2, #799	; 0x31f
 801601c:	496f      	ldr	r1, [pc, #444]	; (80161dc <etharp_output+0x1f0>)
 801601e:	486e      	ldr	r0, [pc, #440]	; (80161d8 <etharp_output+0x1ec>)
 8016020:	f00b fbfc 	bl	802181c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d106      	bne.n	8016038 <etharp_output+0x4c>
 801602a:	4b69      	ldr	r3, [pc, #420]	; (80161d0 <etharp_output+0x1e4>)
 801602c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016030:	496b      	ldr	r1, [pc, #428]	; (80161e0 <etharp_output+0x1f4>)
 8016032:	4869      	ldr	r0, [pc, #420]	; (80161d8 <etharp_output+0x1ec>)
 8016034:	f00b fbf2 	bl	802181c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	68f9      	ldr	r1, [r7, #12]
 801603e:	4618      	mov	r0, r3
 8016040:	f001 f804 	bl	801704c <ip4_addr_isbroadcast_u32>
 8016044:	4603      	mov	r3, r0
 8016046:	2b00      	cmp	r3, #0
 8016048:	d002      	beq.n	8016050 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801604a:	4b66      	ldr	r3, [pc, #408]	; (80161e4 <etharp_output+0x1f8>)
 801604c:	61fb      	str	r3, [r7, #28]
 801604e:	e0af      	b.n	80161b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016058:	2be0      	cmp	r3, #224	; 0xe0
 801605a:	d118      	bne.n	801608e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801605c:	2301      	movs	r3, #1
 801605e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016060:	2300      	movs	r3, #0
 8016062:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016064:	235e      	movs	r3, #94	; 0x5e
 8016066:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	3301      	adds	r3, #1
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016072:	b2db      	uxtb	r3, r3
 8016074:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	3302      	adds	r3, #2
 801607a:	781b      	ldrb	r3, [r3, #0]
 801607c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	3303      	adds	r3, #3
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016086:	f107 0310 	add.w	r3, r7, #16
 801608a:	61fb      	str	r3, [r7, #28]
 801608c:	e090      	b.n	80161b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681a      	ldr	r2, [r3, #0]
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	3304      	adds	r3, #4
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	405a      	eors	r2, r3
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	3308      	adds	r3, #8
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4013      	ands	r3, r2
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d012      	beq.n	80160cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80160ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80160b0:	4293      	cmp	r3, r2
 80160b2:	d00b      	beq.n	80160cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	330c      	adds	r3, #12
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d003      	beq.n	80160c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	330c      	adds	r3, #12
 80160c2:	61bb      	str	r3, [r7, #24]
 80160c4:	e002      	b.n	80160cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80160c6:	f06f 0303 	mvn.w	r3, #3
 80160ca:	e07d      	b.n	80161c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80160cc:	4b46      	ldr	r3, [pc, #280]	; (80161e8 <etharp_output+0x1fc>)
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	4619      	mov	r1, r3
 80160d2:	4a46      	ldr	r2, [pc, #280]	; (80161ec <etharp_output+0x200>)
 80160d4:	460b      	mov	r3, r1
 80160d6:	005b      	lsls	r3, r3, #1
 80160d8:	440b      	add	r3, r1
 80160da:	00db      	lsls	r3, r3, #3
 80160dc:	4413      	add	r3, r2
 80160de:	3314      	adds	r3, #20
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d925      	bls.n	8016132 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80160e6:	4b40      	ldr	r3, [pc, #256]	; (80161e8 <etharp_output+0x1fc>)
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	4619      	mov	r1, r3
 80160ec:	4a3f      	ldr	r2, [pc, #252]	; (80161ec <etharp_output+0x200>)
 80160ee:	460b      	mov	r3, r1
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	440b      	add	r3, r1
 80160f4:	00db      	lsls	r3, r3, #3
 80160f6:	4413      	add	r3, r2
 80160f8:	3308      	adds	r3, #8
 80160fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80160fc:	68fa      	ldr	r2, [r7, #12]
 80160fe:	429a      	cmp	r2, r3
 8016100:	d117      	bne.n	8016132 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016102:	69bb      	ldr	r3, [r7, #24]
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	4b38      	ldr	r3, [pc, #224]	; (80161e8 <etharp_output+0x1fc>)
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	4618      	mov	r0, r3
 801610c:	4937      	ldr	r1, [pc, #220]	; (80161ec <etharp_output+0x200>)
 801610e:	4603      	mov	r3, r0
 8016110:	005b      	lsls	r3, r3, #1
 8016112:	4403      	add	r3, r0
 8016114:	00db      	lsls	r3, r3, #3
 8016116:	440b      	add	r3, r1
 8016118:	3304      	adds	r3, #4
 801611a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801611c:	429a      	cmp	r2, r3
 801611e:	d108      	bne.n	8016132 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016120:	4b31      	ldr	r3, [pc, #196]	; (80161e8 <etharp_output+0x1fc>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	461a      	mov	r2, r3
 8016126:	68b9      	ldr	r1, [r7, #8]
 8016128:	68f8      	ldr	r0, [r7, #12]
 801612a:	f7ff fec5 	bl	8015eb8 <etharp_output_to_arp_index>
 801612e:	4603      	mov	r3, r0
 8016130:	e04a      	b.n	80161c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016132:	2300      	movs	r3, #0
 8016134:	75fb      	strb	r3, [r7, #23]
 8016136:	e031      	b.n	801619c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016138:	7dfa      	ldrb	r2, [r7, #23]
 801613a:	492c      	ldr	r1, [pc, #176]	; (80161ec <etharp_output+0x200>)
 801613c:	4613      	mov	r3, r2
 801613e:	005b      	lsls	r3, r3, #1
 8016140:	4413      	add	r3, r2
 8016142:	00db      	lsls	r3, r3, #3
 8016144:	440b      	add	r3, r1
 8016146:	3314      	adds	r3, #20
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	2b01      	cmp	r3, #1
 801614c:	d923      	bls.n	8016196 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801614e:	7dfa      	ldrb	r2, [r7, #23]
 8016150:	4926      	ldr	r1, [pc, #152]	; (80161ec <etharp_output+0x200>)
 8016152:	4613      	mov	r3, r2
 8016154:	005b      	lsls	r3, r3, #1
 8016156:	4413      	add	r3, r2
 8016158:	00db      	lsls	r3, r3, #3
 801615a:	440b      	add	r3, r1
 801615c:	3308      	adds	r3, #8
 801615e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016160:	68fa      	ldr	r2, [r7, #12]
 8016162:	429a      	cmp	r2, r3
 8016164:	d117      	bne.n	8016196 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016166:	69bb      	ldr	r3, [r7, #24]
 8016168:	6819      	ldr	r1, [r3, #0]
 801616a:	7dfa      	ldrb	r2, [r7, #23]
 801616c:	481f      	ldr	r0, [pc, #124]	; (80161ec <etharp_output+0x200>)
 801616e:	4613      	mov	r3, r2
 8016170:	005b      	lsls	r3, r3, #1
 8016172:	4413      	add	r3, r2
 8016174:	00db      	lsls	r3, r3, #3
 8016176:	4403      	add	r3, r0
 8016178:	3304      	adds	r3, #4
 801617a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801617c:	4299      	cmp	r1, r3
 801617e:	d10a      	bne.n	8016196 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016180:	4a19      	ldr	r2, [pc, #100]	; (80161e8 <etharp_output+0x1fc>)
 8016182:	7dfb      	ldrb	r3, [r7, #23]
 8016184:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016186:	7dfb      	ldrb	r3, [r7, #23]
 8016188:	461a      	mov	r2, r3
 801618a:	68b9      	ldr	r1, [r7, #8]
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f7ff fe93 	bl	8015eb8 <etharp_output_to_arp_index>
 8016192:	4603      	mov	r3, r0
 8016194:	e018      	b.n	80161c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016196:	7dfb      	ldrb	r3, [r7, #23]
 8016198:	3301      	adds	r3, #1
 801619a:	75fb      	strb	r3, [r7, #23]
 801619c:	7dfb      	ldrb	r3, [r7, #23]
 801619e:	2b09      	cmp	r3, #9
 80161a0:	d9ca      	bls.n	8016138 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80161a2:	68ba      	ldr	r2, [r7, #8]
 80161a4:	69b9      	ldr	r1, [r7, #24]
 80161a6:	68f8      	ldr	r0, [r7, #12]
 80161a8:	f000 f822 	bl	80161f0 <etharp_query>
 80161ac:	4603      	mov	r3, r0
 80161ae:	e00b      	b.n	80161c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80161b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80161ba:	9300      	str	r3, [sp, #0]
 80161bc:	69fb      	ldr	r3, [r7, #28]
 80161be:	68b9      	ldr	r1, [r7, #8]
 80161c0:	68f8      	ldr	r0, [r7, #12]
 80161c2:	f000 faa1 	bl	8016708 <ethernet_output>
 80161c6:	4603      	mov	r3, r0
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	3720      	adds	r7, #32
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}
 80161d0:	08022cac 	.word	0x08022cac
 80161d4:	08022e44 	.word	0x08022e44
 80161d8:	08022d6c 	.word	0x08022d6c
 80161dc:	08022e94 	.word	0x08022e94
 80161e0:	08022e34 	.word	0x08022e34
 80161e4:	08025be0 	.word	0x08025be0
 80161e8:	20009058 	.word	0x20009058
 80161ec:	20008f68 	.word	0x20008f68

080161f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b08c      	sub	sp, #48	; 0x30
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	332a      	adds	r3, #42	; 0x2a
 8016200:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016202:	23ff      	movs	r3, #255	; 0xff
 8016204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016208:	2300      	movs	r3, #0
 801620a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	68f9      	ldr	r1, [r7, #12]
 8016212:	4618      	mov	r0, r3
 8016214:	f000 ff1a 	bl	801704c <ip4_addr_isbroadcast_u32>
 8016218:	4603      	mov	r3, r0
 801621a:	2b00      	cmp	r3, #0
 801621c:	d10c      	bne.n	8016238 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016226:	2be0      	cmp	r3, #224	; 0xe0
 8016228:	d006      	beq.n	8016238 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d003      	beq.n	8016238 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d102      	bne.n	801623e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016238:	f06f 030f 	mvn.w	r3, #15
 801623c:	e101      	b.n	8016442 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801623e:	68fa      	ldr	r2, [r7, #12]
 8016240:	2101      	movs	r1, #1
 8016242:	68b8      	ldr	r0, [r7, #8]
 8016244:	f7ff fb5c 	bl	8015900 <etharp_find_entry>
 8016248:	4603      	mov	r3, r0
 801624a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801624c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016250:	2b00      	cmp	r3, #0
 8016252:	da02      	bge.n	801625a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016254:	8a7b      	ldrh	r3, [r7, #18]
 8016256:	b25b      	sxtb	r3, r3
 8016258:	e0f3      	b.n	8016442 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801625a:	8a7b      	ldrh	r3, [r7, #18]
 801625c:	2b7e      	cmp	r3, #126	; 0x7e
 801625e:	d906      	bls.n	801626e <etharp_query+0x7e>
 8016260:	4b7a      	ldr	r3, [pc, #488]	; (801644c <etharp_query+0x25c>)
 8016262:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016266:	497a      	ldr	r1, [pc, #488]	; (8016450 <etharp_query+0x260>)
 8016268:	487a      	ldr	r0, [pc, #488]	; (8016454 <etharp_query+0x264>)
 801626a:	f00b fad7 	bl	802181c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801626e:	8a7b      	ldrh	r3, [r7, #18]
 8016270:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016272:	7c7a      	ldrb	r2, [r7, #17]
 8016274:	4978      	ldr	r1, [pc, #480]	; (8016458 <etharp_query+0x268>)
 8016276:	4613      	mov	r3, r2
 8016278:	005b      	lsls	r3, r3, #1
 801627a:	4413      	add	r3, r2
 801627c:	00db      	lsls	r3, r3, #3
 801627e:	440b      	add	r3, r1
 8016280:	3314      	adds	r3, #20
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d115      	bne.n	80162b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8016288:	2301      	movs	r3, #1
 801628a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801628c:	7c7a      	ldrb	r2, [r7, #17]
 801628e:	4972      	ldr	r1, [pc, #456]	; (8016458 <etharp_query+0x268>)
 8016290:	4613      	mov	r3, r2
 8016292:	005b      	lsls	r3, r3, #1
 8016294:	4413      	add	r3, r2
 8016296:	00db      	lsls	r3, r3, #3
 8016298:	440b      	add	r3, r1
 801629a:	3314      	adds	r3, #20
 801629c:	2201      	movs	r2, #1
 801629e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80162a0:	7c7a      	ldrb	r2, [r7, #17]
 80162a2:	496d      	ldr	r1, [pc, #436]	; (8016458 <etharp_query+0x268>)
 80162a4:	4613      	mov	r3, r2
 80162a6:	005b      	lsls	r3, r3, #1
 80162a8:	4413      	add	r3, r2
 80162aa:	00db      	lsls	r3, r3, #3
 80162ac:	440b      	add	r3, r1
 80162ae:	3308      	adds	r3, #8
 80162b0:	68fa      	ldr	r2, [r7, #12]
 80162b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80162b4:	7c7a      	ldrb	r2, [r7, #17]
 80162b6:	4968      	ldr	r1, [pc, #416]	; (8016458 <etharp_query+0x268>)
 80162b8:	4613      	mov	r3, r2
 80162ba:	005b      	lsls	r3, r3, #1
 80162bc:	4413      	add	r3, r2
 80162be:	00db      	lsls	r3, r3, #3
 80162c0:	440b      	add	r3, r1
 80162c2:	3314      	adds	r3, #20
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	2b01      	cmp	r3, #1
 80162c8:	d011      	beq.n	80162ee <etharp_query+0xfe>
 80162ca:	7c7a      	ldrb	r2, [r7, #17]
 80162cc:	4962      	ldr	r1, [pc, #392]	; (8016458 <etharp_query+0x268>)
 80162ce:	4613      	mov	r3, r2
 80162d0:	005b      	lsls	r3, r3, #1
 80162d2:	4413      	add	r3, r2
 80162d4:	00db      	lsls	r3, r3, #3
 80162d6:	440b      	add	r3, r1
 80162d8:	3314      	adds	r3, #20
 80162da:	781b      	ldrb	r3, [r3, #0]
 80162dc:	2b01      	cmp	r3, #1
 80162de:	d806      	bhi.n	80162ee <etharp_query+0xfe>
 80162e0:	4b5a      	ldr	r3, [pc, #360]	; (801644c <etharp_query+0x25c>)
 80162e2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80162e6:	495d      	ldr	r1, [pc, #372]	; (801645c <etharp_query+0x26c>)
 80162e8:	485a      	ldr	r0, [pc, #360]	; (8016454 <etharp_query+0x264>)
 80162ea:	f00b fa97 	bl	802181c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80162ee:	6a3b      	ldr	r3, [r7, #32]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d102      	bne.n	80162fa <etharp_query+0x10a>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d10c      	bne.n	8016314 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80162fa:	68b9      	ldr	r1, [r7, #8]
 80162fc:	68f8      	ldr	r0, [r7, #12]
 80162fe:	f000 f963 	bl	80165c8 <etharp_request>
 8016302:	4603      	mov	r3, r0
 8016304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d102      	bne.n	8016314 <etharp_query+0x124>
      return result;
 801630e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016312:	e096      	b.n	8016442 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d106      	bne.n	8016328 <etharp_query+0x138>
 801631a:	4b4c      	ldr	r3, [pc, #304]	; (801644c <etharp_query+0x25c>)
 801631c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016320:	494f      	ldr	r1, [pc, #316]	; (8016460 <etharp_query+0x270>)
 8016322:	484c      	ldr	r0, [pc, #304]	; (8016454 <etharp_query+0x264>)
 8016324:	f00b fa7a 	bl	802181c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016328:	7c7a      	ldrb	r2, [r7, #17]
 801632a:	494b      	ldr	r1, [pc, #300]	; (8016458 <etharp_query+0x268>)
 801632c:	4613      	mov	r3, r2
 801632e:	005b      	lsls	r3, r3, #1
 8016330:	4413      	add	r3, r2
 8016332:	00db      	lsls	r3, r3, #3
 8016334:	440b      	add	r3, r1
 8016336:	3314      	adds	r3, #20
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	2b01      	cmp	r3, #1
 801633c:	d917      	bls.n	801636e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801633e:	4a49      	ldr	r2, [pc, #292]	; (8016464 <etharp_query+0x274>)
 8016340:	7c7b      	ldrb	r3, [r7, #17]
 8016342:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016344:	7c7a      	ldrb	r2, [r7, #17]
 8016346:	4613      	mov	r3, r2
 8016348:	005b      	lsls	r3, r3, #1
 801634a:	4413      	add	r3, r2
 801634c:	00db      	lsls	r3, r3, #3
 801634e:	3308      	adds	r3, #8
 8016350:	4a41      	ldr	r2, [pc, #260]	; (8016458 <etharp_query+0x268>)
 8016352:	4413      	add	r3, r2
 8016354:	3304      	adds	r3, #4
 8016356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801635a:	9200      	str	r2, [sp, #0]
 801635c:	697a      	ldr	r2, [r7, #20]
 801635e:	6879      	ldr	r1, [r7, #4]
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f000 f9d1 	bl	8016708 <ethernet_output>
 8016366:	4603      	mov	r3, r0
 8016368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801636c:	e067      	b.n	801643e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801636e:	7c7a      	ldrb	r2, [r7, #17]
 8016370:	4939      	ldr	r1, [pc, #228]	; (8016458 <etharp_query+0x268>)
 8016372:	4613      	mov	r3, r2
 8016374:	005b      	lsls	r3, r3, #1
 8016376:	4413      	add	r3, r2
 8016378:	00db      	lsls	r3, r3, #3
 801637a:	440b      	add	r3, r1
 801637c:	3314      	adds	r3, #20
 801637e:	781b      	ldrb	r3, [r3, #0]
 8016380:	2b01      	cmp	r3, #1
 8016382:	d15c      	bne.n	801643e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016384:	2300      	movs	r3, #0
 8016386:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801638c:	e01c      	b.n	80163c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801638e:	69fb      	ldr	r3, [r7, #28]
 8016390:	895a      	ldrh	r2, [r3, #10]
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	891b      	ldrh	r3, [r3, #8]
 8016396:	429a      	cmp	r2, r3
 8016398:	d10a      	bne.n	80163b0 <etharp_query+0x1c0>
 801639a:	69fb      	ldr	r3, [r7, #28]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d006      	beq.n	80163b0 <etharp_query+0x1c0>
 80163a2:	4b2a      	ldr	r3, [pc, #168]	; (801644c <etharp_query+0x25c>)
 80163a4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80163a8:	492f      	ldr	r1, [pc, #188]	; (8016468 <etharp_query+0x278>)
 80163aa:	482a      	ldr	r0, [pc, #168]	; (8016454 <etharp_query+0x264>)
 80163ac:	f00b fa36 	bl	802181c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80163b0:	69fb      	ldr	r3, [r7, #28]
 80163b2:	7b1b      	ldrb	r3, [r3, #12]
 80163b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d002      	beq.n	80163c2 <etharp_query+0x1d2>
        copy_needed = 1;
 80163bc:	2301      	movs	r3, #1
 80163be:	61bb      	str	r3, [r7, #24]
        break;
 80163c0:	e005      	b.n	80163ce <etharp_query+0x1de>
      }
      p = p->next;
 80163c2:	69fb      	ldr	r3, [r7, #28]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80163c8:	69fb      	ldr	r3, [r7, #28]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1df      	bne.n	801638e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80163ce:	69bb      	ldr	r3, [r7, #24]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d007      	beq.n	80163e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80163da:	200e      	movs	r0, #14
 80163dc:	f003 fa9a 	bl	8019914 <pbuf_clone>
 80163e0:	61f8      	str	r0, [r7, #28]
 80163e2:	e004      	b.n	80163ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80163e8:	69f8      	ldr	r0, [r7, #28]
 80163ea:	f003 f8c1 	bl	8019570 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80163ee:	69fb      	ldr	r3, [r7, #28]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d021      	beq.n	8016438 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80163f4:	7c7a      	ldrb	r2, [r7, #17]
 80163f6:	4918      	ldr	r1, [pc, #96]	; (8016458 <etharp_query+0x268>)
 80163f8:	4613      	mov	r3, r2
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	4413      	add	r3, r2
 80163fe:	00db      	lsls	r3, r3, #3
 8016400:	440b      	add	r3, r1
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d00a      	beq.n	801641e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016408:	7c7a      	ldrb	r2, [r7, #17]
 801640a:	4913      	ldr	r1, [pc, #76]	; (8016458 <etharp_query+0x268>)
 801640c:	4613      	mov	r3, r2
 801640e:	005b      	lsls	r3, r3, #1
 8016410:	4413      	add	r3, r2
 8016412:	00db      	lsls	r3, r3, #3
 8016414:	440b      	add	r3, r1
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	4618      	mov	r0, r3
 801641a:	f003 f803 	bl	8019424 <pbuf_free>
      }
      arp_table[i].q = p;
 801641e:	7c7a      	ldrb	r2, [r7, #17]
 8016420:	490d      	ldr	r1, [pc, #52]	; (8016458 <etharp_query+0x268>)
 8016422:	4613      	mov	r3, r2
 8016424:	005b      	lsls	r3, r3, #1
 8016426:	4413      	add	r3, r2
 8016428:	00db      	lsls	r3, r3, #3
 801642a:	440b      	add	r3, r1
 801642c:	69fa      	ldr	r2, [r7, #28]
 801642e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016430:	2300      	movs	r3, #0
 8016432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016436:	e002      	b.n	801643e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016438:	23ff      	movs	r3, #255	; 0xff
 801643a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801643e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016442:	4618      	mov	r0, r3
 8016444:	3728      	adds	r7, #40	; 0x28
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}
 801644a:	bf00      	nop
 801644c:	08022cac 	.word	0x08022cac
 8016450:	08022ea0 	.word	0x08022ea0
 8016454:	08022d6c 	.word	0x08022d6c
 8016458:	20008f68 	.word	0x20008f68
 801645c:	08022eb0 	.word	0x08022eb0
 8016460:	08022e94 	.word	0x08022e94
 8016464:	20009058 	.word	0x20009058
 8016468:	08022ed8 	.word	0x08022ed8

0801646c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b08a      	sub	sp, #40	; 0x28
 8016470:	af02      	add	r7, sp, #8
 8016472:	60f8      	str	r0, [r7, #12]
 8016474:	60b9      	str	r1, [r7, #8]
 8016476:	607a      	str	r2, [r7, #4]
 8016478:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801647a:	2300      	movs	r3, #0
 801647c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d106      	bne.n	8016492 <etharp_raw+0x26>
 8016484:	4b3a      	ldr	r3, [pc, #232]	; (8016570 <etharp_raw+0x104>)
 8016486:	f240 4257 	movw	r2, #1111	; 0x457
 801648a:	493a      	ldr	r1, [pc, #232]	; (8016574 <etharp_raw+0x108>)
 801648c:	483a      	ldr	r0, [pc, #232]	; (8016578 <etharp_raw+0x10c>)
 801648e:	f00b f9c5 	bl	802181c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016492:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016496:	211c      	movs	r1, #28
 8016498:	200e      	movs	r0, #14
 801649a:	f002 fcdf 	bl	8018e5c <pbuf_alloc>
 801649e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80164a0:	69bb      	ldr	r3, [r7, #24]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d102      	bne.n	80164ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80164a6:	f04f 33ff 	mov.w	r3, #4294967295
 80164aa:	e05d      	b.n	8016568 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80164ac:	69bb      	ldr	r3, [r7, #24]
 80164ae:	895b      	ldrh	r3, [r3, #10]
 80164b0:	2b1b      	cmp	r3, #27
 80164b2:	d806      	bhi.n	80164c2 <etharp_raw+0x56>
 80164b4:	4b2e      	ldr	r3, [pc, #184]	; (8016570 <etharp_raw+0x104>)
 80164b6:	f240 4262 	movw	r2, #1122	; 0x462
 80164ba:	4930      	ldr	r1, [pc, #192]	; (801657c <etharp_raw+0x110>)
 80164bc:	482e      	ldr	r0, [pc, #184]	; (8016578 <etharp_raw+0x10c>)
 80164be:	f00b f9ad 	bl	802181c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80164c2:	69bb      	ldr	r3, [r7, #24]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80164c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7fd fa7c 	bl	80139c8 <lwip_htons>
 80164d0:	4603      	mov	r3, r0
 80164d2:	461a      	mov	r2, r3
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164de:	2b06      	cmp	r3, #6
 80164e0:	d006      	beq.n	80164f0 <etharp_raw+0x84>
 80164e2:	4b23      	ldr	r3, [pc, #140]	; (8016570 <etharp_raw+0x104>)
 80164e4:	f240 4269 	movw	r2, #1129	; 0x469
 80164e8:	4925      	ldr	r1, [pc, #148]	; (8016580 <etharp_raw+0x114>)
 80164ea:	4823      	ldr	r0, [pc, #140]	; (8016578 <etharp_raw+0x10c>)
 80164ec:	f00b f996 	bl	802181c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	3308      	adds	r3, #8
 80164f4:	2206      	movs	r2, #6
 80164f6:	6839      	ldr	r1, [r7, #0]
 80164f8:	4618      	mov	r0, r3
 80164fa:	f00b f8cf 	bl	802169c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	3312      	adds	r3, #18
 8016502:	2206      	movs	r2, #6
 8016504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016506:	4618      	mov	r0, r3
 8016508:	f00b f8c8 	bl	802169c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	330e      	adds	r3, #14
 8016510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016512:	6812      	ldr	r2, [r2, #0]
 8016514:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	3318      	adds	r3, #24
 801651a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801651c:	6812      	ldr	r2, [r2, #0]
 801651e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	2200      	movs	r2, #0
 8016524:	701a      	strb	r2, [r3, #0]
 8016526:	2200      	movs	r2, #0
 8016528:	f042 0201 	orr.w	r2, r2, #1
 801652c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	2200      	movs	r2, #0
 8016532:	f042 0208 	orr.w	r2, r2, #8
 8016536:	709a      	strb	r2, [r3, #2]
 8016538:	2200      	movs	r2, #0
 801653a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	2206      	movs	r2, #6
 8016540:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016542:	697b      	ldr	r3, [r7, #20]
 8016544:	2204      	movs	r2, #4
 8016546:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016548:	f640 0306 	movw	r3, #2054	; 0x806
 801654c:	9300      	str	r3, [sp, #0]
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	68ba      	ldr	r2, [r7, #8]
 8016552:	69b9      	ldr	r1, [r7, #24]
 8016554:	68f8      	ldr	r0, [r7, #12]
 8016556:	f000 f8d7 	bl	8016708 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801655a:	69b8      	ldr	r0, [r7, #24]
 801655c:	f002 ff62 	bl	8019424 <pbuf_free>
  p = NULL;
 8016560:	2300      	movs	r3, #0
 8016562:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016564:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016568:	4618      	mov	r0, r3
 801656a:	3720      	adds	r7, #32
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}
 8016570:	08022cac 	.word	0x08022cac
 8016574:	08022e44 	.word	0x08022e44
 8016578:	08022d6c 	.word	0x08022d6c
 801657c:	08022ef4 	.word	0x08022ef4
 8016580:	08022f28 	.word	0x08022f28

08016584 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b088      	sub	sp, #32
 8016588:	af04      	add	r7, sp, #16
 801658a:	60f8      	str	r0, [r7, #12]
 801658c:	60b9      	str	r1, [r7, #8]
 801658e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80165a0:	2201      	movs	r2, #1
 80165a2:	9203      	str	r2, [sp, #12]
 80165a4:	68ba      	ldr	r2, [r7, #8]
 80165a6:	9202      	str	r2, [sp, #8]
 80165a8:	4a06      	ldr	r2, [pc, #24]	; (80165c4 <etharp_request_dst+0x40>)
 80165aa:	9201      	str	r2, [sp, #4]
 80165ac:	9300      	str	r3, [sp, #0]
 80165ae:	4603      	mov	r3, r0
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	68f8      	ldr	r0, [r7, #12]
 80165b4:	f7ff ff5a 	bl	801646c <etharp_raw>
 80165b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	3710      	adds	r7, #16
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	bf00      	nop
 80165c4:	08025be8 	.word	0x08025be8

080165c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b082      	sub	sp, #8
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80165d2:	4a05      	ldr	r2, [pc, #20]	; (80165e8 <etharp_request+0x20>)
 80165d4:	6839      	ldr	r1, [r7, #0]
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f7ff ffd4 	bl	8016584 <etharp_request_dst>
 80165dc:	4603      	mov	r3, r0
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3708      	adds	r7, #8
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	08025be0 	.word	0x08025be0

080165ec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b086      	sub	sp, #24
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
 80165f4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80165f6:	230e      	movs	r3, #14
 80165f8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	895b      	ldrh	r3, [r3, #10]
 80165fe:	2b0e      	cmp	r3, #14
 8016600:	d96e      	bls.n	80166e0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	7bdb      	ldrb	r3, [r3, #15]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d106      	bne.n	8016618 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801660a:	683b      	ldr	r3, [r7, #0]
 801660c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016610:	3301      	adds	r3, #1
 8016612:	b2da      	uxtb	r2, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	7b1a      	ldrb	r2, [r3, #12]
 8016622:	7b5b      	ldrb	r3, [r3, #13]
 8016624:	021b      	lsls	r3, r3, #8
 8016626:	4313      	orrs	r3, r2
 8016628:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801662a:	693b      	ldr	r3, [r7, #16]
 801662c:	781b      	ldrb	r3, [r3, #0]
 801662e:	f003 0301 	and.w	r3, r3, #1
 8016632:	2b00      	cmp	r3, #0
 8016634:	d023      	beq.n	801667e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	2b01      	cmp	r3, #1
 801663c:	d10f      	bne.n	801665e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	785b      	ldrb	r3, [r3, #1]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d11b      	bne.n	801667e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801664a:	2b5e      	cmp	r3, #94	; 0x5e
 801664c:	d117      	bne.n	801667e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	7b5b      	ldrb	r3, [r3, #13]
 8016652:	f043 0310 	orr.w	r3, r3, #16
 8016656:	b2da      	uxtb	r2, r3
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	735a      	strb	r2, [r3, #13]
 801665c:	e00f      	b.n	801667e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	2206      	movs	r2, #6
 8016662:	4928      	ldr	r1, [pc, #160]	; (8016704 <ethernet_input+0x118>)
 8016664:	4618      	mov	r0, r3
 8016666:	f00b f80b 	bl	8021680 <memcmp>
 801666a:	4603      	mov	r3, r0
 801666c:	2b00      	cmp	r3, #0
 801666e:	d106      	bne.n	801667e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	7b5b      	ldrb	r3, [r3, #13]
 8016674:	f043 0308 	orr.w	r3, r3, #8
 8016678:	b2da      	uxtb	r2, r3
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801667e:	89fb      	ldrh	r3, [r7, #14]
 8016680:	2b08      	cmp	r3, #8
 8016682:	d003      	beq.n	801668c <ethernet_input+0xa0>
 8016684:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016688:	d014      	beq.n	80166b4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801668a:	e032      	b.n	80166f2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016692:	f003 0308 	and.w	r3, r3, #8
 8016696:	2b00      	cmp	r3, #0
 8016698:	d024      	beq.n	80166e4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801669a:	8afb      	ldrh	r3, [r7, #22]
 801669c:	4619      	mov	r1, r3
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f002 fe3a 	bl	8019318 <pbuf_remove_header>
 80166a4:	4603      	mov	r3, r0
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d11e      	bne.n	80166e8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80166aa:	6839      	ldr	r1, [r7, #0]
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f000 fab3 	bl	8016c18 <ip4_input>
      break;
 80166b2:	e013      	b.n	80166dc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80166ba:	f003 0308 	and.w	r3, r3, #8
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d014      	beq.n	80166ec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80166c2:	8afb      	ldrh	r3, [r7, #22]
 80166c4:	4619      	mov	r1, r3
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f002 fe26 	bl	8019318 <pbuf_remove_header>
 80166cc:	4603      	mov	r3, r0
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d10e      	bne.n	80166f0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80166d2:	6839      	ldr	r1, [r7, #0]
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f7ff fb61 	bl	8015d9c <etharp_input>
      break;
 80166da:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80166dc:	2300      	movs	r3, #0
 80166de:	e00c      	b.n	80166fa <ethernet_input+0x10e>
    goto free_and_return;
 80166e0:	bf00      	nop
 80166e2:	e006      	b.n	80166f2 <ethernet_input+0x106>
        goto free_and_return;
 80166e4:	bf00      	nop
 80166e6:	e004      	b.n	80166f2 <ethernet_input+0x106>
        goto free_and_return;
 80166e8:	bf00      	nop
 80166ea:	e002      	b.n	80166f2 <ethernet_input+0x106>
        goto free_and_return;
 80166ec:	bf00      	nop
 80166ee:	e000      	b.n	80166f2 <ethernet_input+0x106>
        goto free_and_return;
 80166f0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f002 fe96 	bl	8019424 <pbuf_free>
  return ERR_OK;
 80166f8:	2300      	movs	r3, #0
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3718      	adds	r7, #24
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	08025be0 	.word	0x08025be0

08016708 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016708:	b580      	push	{r7, lr}
 801670a:	b086      	sub	sp, #24
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
 8016714:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016716:	8c3b      	ldrh	r3, [r7, #32]
 8016718:	4618      	mov	r0, r3
 801671a:	f7fd f955 	bl	80139c8 <lwip_htons>
 801671e:	4603      	mov	r3, r0
 8016720:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016722:	210e      	movs	r1, #14
 8016724:	68b8      	ldr	r0, [r7, #8]
 8016726:	f002 fde7 	bl	80192f8 <pbuf_add_header>
 801672a:	4603      	mov	r3, r0
 801672c:	2b00      	cmp	r3, #0
 801672e:	d125      	bne.n	801677c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	8afa      	ldrh	r2, [r7, #22]
 801673a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801673c:	693b      	ldr	r3, [r7, #16]
 801673e:	2206      	movs	r2, #6
 8016740:	6839      	ldr	r1, [r7, #0]
 8016742:	4618      	mov	r0, r3
 8016744:	f00a ffaa 	bl	802169c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016748:	693b      	ldr	r3, [r7, #16]
 801674a:	3306      	adds	r3, #6
 801674c:	2206      	movs	r2, #6
 801674e:	6879      	ldr	r1, [r7, #4]
 8016750:	4618      	mov	r0, r3
 8016752:	f00a ffa3 	bl	802169c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801675c:	2b06      	cmp	r3, #6
 801675e:	d006      	beq.n	801676e <ethernet_output+0x66>
 8016760:	4b0a      	ldr	r3, [pc, #40]	; (801678c <ethernet_output+0x84>)
 8016762:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016766:	490a      	ldr	r1, [pc, #40]	; (8016790 <ethernet_output+0x88>)
 8016768:	480a      	ldr	r0, [pc, #40]	; (8016794 <ethernet_output+0x8c>)
 801676a:	f00b f857 	bl	802181c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	699b      	ldr	r3, [r3, #24]
 8016772:	68b9      	ldr	r1, [r7, #8]
 8016774:	68f8      	ldr	r0, [r7, #12]
 8016776:	4798      	blx	r3
 8016778:	4603      	mov	r3, r0
 801677a:	e002      	b.n	8016782 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801677c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801677e:	f06f 0301 	mvn.w	r3, #1
}
 8016782:	4618      	mov	r0, r3
 8016784:	3718      	adds	r7, #24
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}
 801678a:	bf00      	nop
 801678c:	08022f6c 	.word	0x08022f6c
 8016790:	08022fe8 	.word	0x08022fe8
 8016794:	0802301c 	.word	0x0802301c

08016798 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b08e      	sub	sp, #56	; 0x38
 801679c:	af04      	add	r7, sp, #16
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80167a2:	4b79      	ldr	r3, [pc, #484]	; (8016988 <icmp_input+0x1f0>)
 80167a4:	689b      	ldr	r3, [r3, #8]
 80167a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80167a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	f003 030f 	and.w	r3, r3, #15
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	b2db      	uxtb	r3, r3
 80167b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80167b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167ba:	2b13      	cmp	r3, #19
 80167bc:	f240 80cd 	bls.w	801695a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	895b      	ldrh	r3, [r3, #10]
 80167c4:	2b03      	cmp	r3, #3
 80167c6:	f240 80ca 	bls.w	801695e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80167d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80167d8:	2b00      	cmp	r3, #0
 80167da:	f000 80b7 	beq.w	801694c <icmp_input+0x1b4>
 80167de:	2b08      	cmp	r3, #8
 80167e0:	f040 80b7 	bne.w	8016952 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80167e4:	4b69      	ldr	r3, [pc, #420]	; (801698c <icmp_input+0x1f4>)
 80167e6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80167e8:	4b67      	ldr	r3, [pc, #412]	; (8016988 <icmp_input+0x1f0>)
 80167ea:	695b      	ldr	r3, [r3, #20]
 80167ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80167f0:	2be0      	cmp	r3, #224	; 0xe0
 80167f2:	f000 80bb 	beq.w	801696c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80167f6:	4b64      	ldr	r3, [pc, #400]	; (8016988 <icmp_input+0x1f0>)
 80167f8:	695b      	ldr	r3, [r3, #20]
 80167fa:	4a63      	ldr	r2, [pc, #396]	; (8016988 <icmp_input+0x1f0>)
 80167fc:	6812      	ldr	r2, [r2, #0]
 80167fe:	4611      	mov	r1, r2
 8016800:	4618      	mov	r0, r3
 8016802:	f000 fc23 	bl	801704c <ip4_addr_isbroadcast_u32>
 8016806:	4603      	mov	r3, r0
 8016808:	2b00      	cmp	r3, #0
 801680a:	f040 80b1 	bne.w	8016970 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	891b      	ldrh	r3, [r3, #8]
 8016812:	2b07      	cmp	r3, #7
 8016814:	f240 80a5 	bls.w	8016962 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801681a:	330e      	adds	r3, #14
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f002 fd6a 	bl	80192f8 <pbuf_add_header>
 8016824:	4603      	mov	r3, r0
 8016826:	2b00      	cmp	r3, #0
 8016828:	d04b      	beq.n	80168c2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	891a      	ldrh	r2, [r3, #8]
 801682e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016830:	4413      	add	r3, r2
 8016832:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	891b      	ldrh	r3, [r3, #8]
 8016838:	8b7a      	ldrh	r2, [r7, #26]
 801683a:	429a      	cmp	r2, r3
 801683c:	f0c0 809a 	bcc.w	8016974 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016840:	8b7b      	ldrh	r3, [r7, #26]
 8016842:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016846:	4619      	mov	r1, r3
 8016848:	200e      	movs	r0, #14
 801684a:	f002 fb07 	bl	8018e5c <pbuf_alloc>
 801684e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	2b00      	cmp	r3, #0
 8016854:	f000 8090 	beq.w	8016978 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	895b      	ldrh	r3, [r3, #10]
 801685c:	461a      	mov	r2, r3
 801685e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016860:	3308      	adds	r3, #8
 8016862:	429a      	cmp	r2, r3
 8016864:	d203      	bcs.n	801686e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016866:	6978      	ldr	r0, [r7, #20]
 8016868:	f002 fddc 	bl	8019424 <pbuf_free>
          goto icmperr;
 801686c:	e085      	b.n	801697a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016876:	4618      	mov	r0, r3
 8016878:	f00a ff10 	bl	802169c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801687c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801687e:	4619      	mov	r1, r3
 8016880:	6978      	ldr	r0, [r7, #20]
 8016882:	f002 fd49 	bl	8019318 <pbuf_remove_header>
 8016886:	4603      	mov	r3, r0
 8016888:	2b00      	cmp	r3, #0
 801688a:	d009      	beq.n	80168a0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801688c:	4b40      	ldr	r3, [pc, #256]	; (8016990 <icmp_input+0x1f8>)
 801688e:	22b6      	movs	r2, #182	; 0xb6
 8016890:	4940      	ldr	r1, [pc, #256]	; (8016994 <icmp_input+0x1fc>)
 8016892:	4841      	ldr	r0, [pc, #260]	; (8016998 <icmp_input+0x200>)
 8016894:	f00a ffc2 	bl	802181c <iprintf>
          pbuf_free(r);
 8016898:	6978      	ldr	r0, [r7, #20]
 801689a:	f002 fdc3 	bl	8019424 <pbuf_free>
          goto icmperr;
 801689e:	e06c      	b.n	801697a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80168a0:	6879      	ldr	r1, [r7, #4]
 80168a2:	6978      	ldr	r0, [r7, #20]
 80168a4:	f002 fef2 	bl	801968c <pbuf_copy>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d003      	beq.n	80168b6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80168ae:	6978      	ldr	r0, [r7, #20]
 80168b0:	f002 fdb8 	bl	8019424 <pbuf_free>
          goto icmperr;
 80168b4:	e061      	b.n	801697a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80168b6:	6878      	ldr	r0, [r7, #4]
 80168b8:	f002 fdb4 	bl	8019424 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80168bc:	697b      	ldr	r3, [r7, #20]
 80168be:	607b      	str	r3, [r7, #4]
 80168c0:	e00f      	b.n	80168e2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80168c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168c4:	330e      	adds	r3, #14
 80168c6:	4619      	mov	r1, r3
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f002 fd25 	bl	8019318 <pbuf_remove_header>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d006      	beq.n	80168e2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80168d4:	4b2e      	ldr	r3, [pc, #184]	; (8016990 <icmp_input+0x1f8>)
 80168d6:	22c7      	movs	r2, #199	; 0xc7
 80168d8:	4930      	ldr	r1, [pc, #192]	; (801699c <icmp_input+0x204>)
 80168da:	482f      	ldr	r0, [pc, #188]	; (8016998 <icmp_input+0x200>)
 80168dc:	f00a ff9e 	bl	802181c <iprintf>
          goto icmperr;
 80168e0:	e04b      	b.n	801697a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	685b      	ldr	r3, [r3, #4]
 80168e6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80168e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168ea:	4619      	mov	r1, r3
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f002 fd03 	bl	80192f8 <pbuf_add_header>
 80168f2:	4603      	mov	r3, r0
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d12b      	bne.n	8016950 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80168fe:	69fb      	ldr	r3, [r7, #28]
 8016900:	681a      	ldr	r2, [r3, #0]
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016906:	4b20      	ldr	r3, [pc, #128]	; (8016988 <icmp_input+0x1f0>)
 8016908:	691a      	ldr	r2, [r3, #16]
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801690e:	693b      	ldr	r3, [r7, #16]
 8016910:	2200      	movs	r2, #0
 8016912:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	2200      	movs	r2, #0
 8016918:	709a      	strb	r2, [r3, #2]
 801691a:	2200      	movs	r2, #0
 801691c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	22ff      	movs	r2, #255	; 0xff
 8016922:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	2200      	movs	r2, #0
 8016928:	729a      	strb	r2, [r3, #10]
 801692a:	2200      	movs	r2, #0
 801692c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	9302      	str	r3, [sp, #8]
 8016932:	2301      	movs	r3, #1
 8016934:	9301      	str	r3, [sp, #4]
 8016936:	2300      	movs	r3, #0
 8016938:	9300      	str	r3, [sp, #0]
 801693a:	23ff      	movs	r3, #255	; 0xff
 801693c:	2200      	movs	r2, #0
 801693e:	69f9      	ldr	r1, [r7, #28]
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f000 faab 	bl	8016e9c <ip4_output_if>
 8016946:	4603      	mov	r3, r0
 8016948:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801694a:	e001      	b.n	8016950 <icmp_input+0x1b8>
      break;
 801694c:	bf00      	nop
 801694e:	e000      	b.n	8016952 <icmp_input+0x1ba>
      break;
 8016950:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f002 fd66 	bl	8019424 <pbuf_free>
  return;
 8016958:	e013      	b.n	8016982 <icmp_input+0x1ea>
    goto lenerr;
 801695a:	bf00      	nop
 801695c:	e002      	b.n	8016964 <icmp_input+0x1cc>
    goto lenerr;
 801695e:	bf00      	nop
 8016960:	e000      	b.n	8016964 <icmp_input+0x1cc>
        goto lenerr;
 8016962:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f002 fd5d 	bl	8019424 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801696a:	e00a      	b.n	8016982 <icmp_input+0x1ea>
        goto icmperr;
 801696c:	bf00      	nop
 801696e:	e004      	b.n	801697a <icmp_input+0x1e2>
        goto icmperr;
 8016970:	bf00      	nop
 8016972:	e002      	b.n	801697a <icmp_input+0x1e2>
          goto icmperr;
 8016974:	bf00      	nop
 8016976:	e000      	b.n	801697a <icmp_input+0x1e2>
          goto icmperr;
 8016978:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f002 fd52 	bl	8019424 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016980:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016982:	3728      	adds	r7, #40	; 0x28
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}
 8016988:	2000e840 	.word	0x2000e840
 801698c:	2000e854 	.word	0x2000e854
 8016990:	08023044 	.word	0x08023044
 8016994:	080230c0 	.word	0x080230c0
 8016998:	080230f8 	.word	0x080230f8
 801699c:	08023120 	.word	0x08023120

080169a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	460b      	mov	r3, r1
 80169aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80169ac:	78fb      	ldrb	r3, [r7, #3]
 80169ae:	461a      	mov	r2, r3
 80169b0:	2103      	movs	r1, #3
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f000 f814 	bl	80169e0 <icmp_send_response>
}
 80169b8:	bf00      	nop
 80169ba:	3708      	adds	r7, #8
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}

080169c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	460b      	mov	r3, r1
 80169ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80169cc:	78fb      	ldrb	r3, [r7, #3]
 80169ce:	461a      	mov	r2, r3
 80169d0:	210b      	movs	r1, #11
 80169d2:	6878      	ldr	r0, [r7, #4]
 80169d4:	f000 f804 	bl	80169e0 <icmp_send_response>
}
 80169d8:	bf00      	nop
 80169da:	3708      	adds	r7, #8
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd80      	pop	{r7, pc}

080169e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b08c      	sub	sp, #48	; 0x30
 80169e4:	af04      	add	r7, sp, #16
 80169e6:	6078      	str	r0, [r7, #4]
 80169e8:	460b      	mov	r3, r1
 80169ea:	70fb      	strb	r3, [r7, #3]
 80169ec:	4613      	mov	r3, r2
 80169ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80169f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80169f4:	2124      	movs	r1, #36	; 0x24
 80169f6:	2022      	movs	r0, #34	; 0x22
 80169f8:	f002 fa30 	bl	8018e5c <pbuf_alloc>
 80169fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80169fe:	69fb      	ldr	r3, [r7, #28]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d04c      	beq.n	8016a9e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016a04:	69fb      	ldr	r3, [r7, #28]
 8016a06:	895b      	ldrh	r3, [r3, #10]
 8016a08:	2b23      	cmp	r3, #35	; 0x23
 8016a0a:	d806      	bhi.n	8016a1a <icmp_send_response+0x3a>
 8016a0c:	4b26      	ldr	r3, [pc, #152]	; (8016aa8 <icmp_send_response+0xc8>)
 8016a0e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016a12:	4926      	ldr	r1, [pc, #152]	; (8016aac <icmp_send_response+0xcc>)
 8016a14:	4826      	ldr	r0, [pc, #152]	; (8016ab0 <icmp_send_response+0xd0>)
 8016a16:	f00a ff01 	bl	802181c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	78fa      	ldrb	r2, [r7, #3]
 8016a2a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	78ba      	ldrb	r2, [r7, #2]
 8016a30:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016a32:	697b      	ldr	r3, [r7, #20]
 8016a34:	2200      	movs	r2, #0
 8016a36:	711a      	strb	r2, [r3, #4]
 8016a38:	2200      	movs	r2, #0
 8016a3a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	2200      	movs	r2, #0
 8016a40:	719a      	strb	r2, [r3, #6]
 8016a42:	2200      	movs	r2, #0
 8016a44:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	f103 0008 	add.w	r0, r3, #8
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	221c      	movs	r2, #28
 8016a54:	4619      	mov	r1, r3
 8016a56:	f00a fe21 	bl	802169c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	68db      	ldr	r3, [r3, #12]
 8016a5e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016a60:	f107 030c 	add.w	r3, r7, #12
 8016a64:	4618      	mov	r0, r3
 8016a66:	f000 f83d 	bl	8016ae4 <ip4_route>
 8016a6a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d011      	beq.n	8016a96 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	2200      	movs	r2, #0
 8016a76:	709a      	strb	r2, [r3, #2]
 8016a78:	2200      	movs	r2, #0
 8016a7a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016a7c:	f107 020c 	add.w	r2, r7, #12
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	9302      	str	r3, [sp, #8]
 8016a84:	2301      	movs	r3, #1
 8016a86:	9301      	str	r3, [sp, #4]
 8016a88:	2300      	movs	r3, #0
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	23ff      	movs	r3, #255	; 0xff
 8016a8e:	2100      	movs	r1, #0
 8016a90:	69f8      	ldr	r0, [r7, #28]
 8016a92:	f000 fa03 	bl	8016e9c <ip4_output_if>
  }
  pbuf_free(q);
 8016a96:	69f8      	ldr	r0, [r7, #28]
 8016a98:	f002 fcc4 	bl	8019424 <pbuf_free>
 8016a9c:	e000      	b.n	8016aa0 <icmp_send_response+0xc0>
    return;
 8016a9e:	bf00      	nop
}
 8016aa0:	3720      	adds	r7, #32
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}
 8016aa6:	bf00      	nop
 8016aa8:	08023044 	.word	0x08023044
 8016aac:	08023154 	.word	0x08023154
 8016ab0:	080230f8 	.word	0x080230f8

08016ab4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8016aba:	2300      	movs	r3, #0
 8016abc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8016abe:	f002 ffd1 	bl	8019a64 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8016ac2:	f001 fa03 	bl	8017ecc <mem_init>
  memp_init();
 8016ac6:	f001 fd5f 	bl	8018588 <memp_init>
  pbuf_init();
  netif_init();
 8016aca:	f001 fe25 	bl	8018718 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8016ace:	f008 fcb9 	bl	801f444 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8016ad2:	f003 f843 	bl	8019b5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8016ad6:	f008 fbfb 	bl	801f2d0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8016ada:	bf00      	nop
 8016adc:	3708      	adds	r7, #8
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
	...

08016ae4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016ae4:	b480      	push	{r7}
 8016ae6:	b085      	sub	sp, #20
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016aec:	4b33      	ldr	r3, [pc, #204]	; (8016bbc <ip4_route+0xd8>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	60fb      	str	r3, [r7, #12]
 8016af2:	e036      	b.n	8016b62 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016afa:	f003 0301 	and.w	r3, r3, #1
 8016afe:	b2db      	uxtb	r3, r3
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d02b      	beq.n	8016b5c <ip4_route+0x78>
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b0a:	089b      	lsrs	r3, r3, #2
 8016b0c:	f003 0301 	and.w	r3, r3, #1
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d022      	beq.n	8016b5c <ip4_route+0x78>
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	3304      	adds	r3, #4
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d01d      	beq.n	8016b5c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681a      	ldr	r2, [r3, #0]
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	3304      	adds	r3, #4
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	405a      	eors	r2, r3
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	3308      	adds	r3, #8
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	4013      	ands	r3, r2
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d101      	bne.n	8016b3c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	e038      	b.n	8016bae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b42:	f003 0302 	and.w	r3, r3, #2
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d108      	bne.n	8016b5c <ip4_route+0x78>
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681a      	ldr	r2, [r3, #0]
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	330c      	adds	r3, #12
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	429a      	cmp	r2, r3
 8016b56:	d101      	bne.n	8016b5c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	e028      	b.n	8016bae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	60fb      	str	r3, [r7, #12]
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d1c5      	bne.n	8016af4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b68:	4b15      	ldr	r3, [pc, #84]	; (8016bc0 <ip4_route+0xdc>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d01a      	beq.n	8016ba6 <ip4_route+0xc2>
 8016b70:	4b13      	ldr	r3, [pc, #76]	; (8016bc0 <ip4_route+0xdc>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b78:	f003 0301 	and.w	r3, r3, #1
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d012      	beq.n	8016ba6 <ip4_route+0xc2>
 8016b80:	4b0f      	ldr	r3, [pc, #60]	; (8016bc0 <ip4_route+0xdc>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b88:	f003 0304 	and.w	r3, r3, #4
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d00a      	beq.n	8016ba6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b90:	4b0b      	ldr	r3, [pc, #44]	; (8016bc0 <ip4_route+0xdc>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	3304      	adds	r3, #4
 8016b96:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d004      	beq.n	8016ba6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	b2db      	uxtb	r3, r3
 8016ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8016ba4:	d101      	bne.n	8016baa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	e001      	b.n	8016bae <ip4_route+0xca>
  }

  return netif_default;
 8016baa:	4b05      	ldr	r3, [pc, #20]	; (8016bc0 <ip4_route+0xdc>)
 8016bac:	681b      	ldr	r3, [r3, #0]
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	3714      	adds	r7, #20
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb8:	4770      	bx	lr
 8016bba:	bf00      	nop
 8016bbc:	20011f64 	.word	0x20011f64
 8016bc0:	20011f68 	.word	0x20011f68

08016bc4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016bd2:	f003 0301 	and.w	r3, r3, #1
 8016bd6:	b2db      	uxtb	r3, r3
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d016      	beq.n	8016c0a <ip4_input_accept+0x46>
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	3304      	adds	r3, #4
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d011      	beq.n	8016c0a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016be6:	4b0b      	ldr	r3, [pc, #44]	; (8016c14 <ip4_input_accept+0x50>)
 8016be8:	695a      	ldr	r2, [r3, #20]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	3304      	adds	r3, #4
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d008      	beq.n	8016c06 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016bf4:	4b07      	ldr	r3, [pc, #28]	; (8016c14 <ip4_input_accept+0x50>)
 8016bf6:	695b      	ldr	r3, [r3, #20]
 8016bf8:	6879      	ldr	r1, [r7, #4]
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f000 fa26 	bl	801704c <ip4_addr_isbroadcast_u32>
 8016c00:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d001      	beq.n	8016c0a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016c06:	2301      	movs	r3, #1
 8016c08:	e000      	b.n	8016c0c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016c0a:	2300      	movs	r3, #0
}
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	3708      	adds	r7, #8
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	2000e840 	.word	0x2000e840

08016c18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b088      	sub	sp, #32
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
 8016c20:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016c22:	2301      	movs	r3, #1
 8016c24:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016c2c:	69fb      	ldr	r3, [r7, #28]
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	091b      	lsrs	r3, r3, #4
 8016c32:	b2db      	uxtb	r3, r3
 8016c34:	2b04      	cmp	r3, #4
 8016c36:	d004      	beq.n	8016c42 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f002 fbf3 	bl	8019424 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	e123      	b.n	8016e8a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	f003 030f 	and.w	r3, r3, #15
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	009b      	lsls	r3, r3, #2
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	885b      	ldrh	r3, [r3, #2]
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7fc feb5 	bl	80139c8 <lwip_htons>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	891b      	ldrh	r3, [r3, #8]
 8016c66:	8a3a      	ldrh	r2, [r7, #16]
 8016c68:	429a      	cmp	r2, r3
 8016c6a:	d204      	bcs.n	8016c76 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016c6c:	8a3b      	ldrh	r3, [r7, #16]
 8016c6e:	4619      	mov	r1, r3
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f002 fa51 	bl	8019118 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	895b      	ldrh	r3, [r3, #10]
 8016c7a:	8a7a      	ldrh	r2, [r7, #18]
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d807      	bhi.n	8016c90 <ip4_input+0x78>
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	891b      	ldrh	r3, [r3, #8]
 8016c84:	8a3a      	ldrh	r2, [r7, #16]
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d802      	bhi.n	8016c90 <ip4_input+0x78>
 8016c8a:	8a7b      	ldrh	r3, [r7, #18]
 8016c8c:	2b13      	cmp	r3, #19
 8016c8e:	d804      	bhi.n	8016c9a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f002 fbc7 	bl	8019424 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016c96:	2300      	movs	r3, #0
 8016c98:	e0f7      	b.n	8016e8a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016c9a:	69fb      	ldr	r3, [r7, #28]
 8016c9c:	691b      	ldr	r3, [r3, #16]
 8016c9e:	4a7d      	ldr	r2, [pc, #500]	; (8016e94 <ip4_input+0x27c>)
 8016ca0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016ca2:	69fb      	ldr	r3, [r7, #28]
 8016ca4:	68db      	ldr	r3, [r3, #12]
 8016ca6:	4a7b      	ldr	r2, [pc, #492]	; (8016e94 <ip4_input+0x27c>)
 8016ca8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016caa:	4b7a      	ldr	r3, [pc, #488]	; (8016e94 <ip4_input+0x27c>)
 8016cac:	695b      	ldr	r3, [r3, #20]
 8016cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016cb2:	2be0      	cmp	r3, #224	; 0xe0
 8016cb4:	d112      	bne.n	8016cdc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016cbc:	f003 0301 	and.w	r3, r3, #1
 8016cc0:	b2db      	uxtb	r3, r3
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d007      	beq.n	8016cd6 <ip4_input+0xbe>
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	3304      	adds	r3, #4
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d002      	beq.n	8016cd6 <ip4_input+0xbe>
      netif = inp;
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	61bb      	str	r3, [r7, #24]
 8016cd4:	e02a      	b.n	8016d2c <ip4_input+0x114>
    } else {
      netif = NULL;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	61bb      	str	r3, [r7, #24]
 8016cda:	e027      	b.n	8016d2c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016cdc:	6838      	ldr	r0, [r7, #0]
 8016cde:	f7ff ff71 	bl	8016bc4 <ip4_input_accept>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d002      	beq.n	8016cee <ip4_input+0xd6>
      netif = inp;
 8016ce8:	683b      	ldr	r3, [r7, #0]
 8016cea:	61bb      	str	r3, [r7, #24]
 8016cec:	e01e      	b.n	8016d2c <ip4_input+0x114>
    } else {
      netif = NULL;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016cf2:	4b68      	ldr	r3, [pc, #416]	; (8016e94 <ip4_input+0x27c>)
 8016cf4:	695b      	ldr	r3, [r3, #20]
 8016cf6:	b2db      	uxtb	r3, r3
 8016cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8016cfa:	d017      	beq.n	8016d2c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016cfc:	4b66      	ldr	r3, [pc, #408]	; (8016e98 <ip4_input+0x280>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	61bb      	str	r3, [r7, #24]
 8016d02:	e00e      	b.n	8016d22 <ip4_input+0x10a>
          if (netif == inp) {
 8016d04:	69ba      	ldr	r2, [r7, #24]
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d006      	beq.n	8016d1a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016d0c:	69b8      	ldr	r0, [r7, #24]
 8016d0e:	f7ff ff59 	bl	8016bc4 <ip4_input_accept>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d108      	bne.n	8016d2a <ip4_input+0x112>
 8016d18:	e000      	b.n	8016d1c <ip4_input+0x104>
            continue;
 8016d1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016d1c:	69bb      	ldr	r3, [r7, #24]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	61bb      	str	r3, [r7, #24]
 8016d22:	69bb      	ldr	r3, [r7, #24]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d1ed      	bne.n	8016d04 <ip4_input+0xec>
 8016d28:	e000      	b.n	8016d2c <ip4_input+0x114>
            break;
 8016d2a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016d2c:	69bb      	ldr	r3, [r7, #24]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d111      	bne.n	8016d56 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016d32:	69fb      	ldr	r3, [r7, #28]
 8016d34:	7a5b      	ldrb	r3, [r3, #9]
 8016d36:	2b11      	cmp	r3, #17
 8016d38:	d10d      	bne.n	8016d56 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016d3a:	8a7b      	ldrh	r3, [r7, #18]
 8016d3c:	69fa      	ldr	r2, [r7, #28]
 8016d3e:	4413      	add	r3, r2
 8016d40:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	885b      	ldrh	r3, [r3, #2]
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016d4c:	d103      	bne.n	8016d56 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016d52:	2300      	movs	r3, #0
 8016d54:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d017      	beq.n	8016d8c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016d5c:	4b4d      	ldr	r3, [pc, #308]	; (8016e94 <ip4_input+0x27c>)
 8016d5e:	691b      	ldr	r3, [r3, #16]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d013      	beq.n	8016d8c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d64:	4b4b      	ldr	r3, [pc, #300]	; (8016e94 <ip4_input+0x27c>)
 8016d66:	691b      	ldr	r3, [r3, #16]
 8016d68:	6839      	ldr	r1, [r7, #0]
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f000 f96e 	bl	801704c <ip4_addr_isbroadcast_u32>
 8016d70:	4603      	mov	r3, r0
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d105      	bne.n	8016d82 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016d76:	4b47      	ldr	r3, [pc, #284]	; (8016e94 <ip4_input+0x27c>)
 8016d78:	691b      	ldr	r3, [r3, #16]
 8016d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d7e:	2be0      	cmp	r3, #224	; 0xe0
 8016d80:	d104      	bne.n	8016d8c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f002 fb4e 	bl	8019424 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	e07e      	b.n	8016e8a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016d8c:	69bb      	ldr	r3, [r7, #24]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d104      	bne.n	8016d9c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f002 fb46 	bl	8019424 <pbuf_free>
    return ERR_OK;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	e076      	b.n	8016e8a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016d9c:	69fb      	ldr	r3, [r7, #28]
 8016d9e:	88db      	ldrh	r3, [r3, #6]
 8016da0:	b29b      	uxth	r3, r3
 8016da2:	461a      	mov	r2, r3
 8016da4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016da8:	4013      	ands	r3, r2
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d00b      	beq.n	8016dc6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f000 fc92 	bl	80176d8 <ip4_reass>
 8016db4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d101      	bne.n	8016dc0 <ip4_input+0x1a8>
      return ERR_OK;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	e064      	b.n	8016e8a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016dc6:	4a33      	ldr	r2, [pc, #204]	; (8016e94 <ip4_input+0x27c>)
 8016dc8:	69bb      	ldr	r3, [r7, #24]
 8016dca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016dcc:	4a31      	ldr	r2, [pc, #196]	; (8016e94 <ip4_input+0x27c>)
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016dd2:	4a30      	ldr	r2, [pc, #192]	; (8016e94 <ip4_input+0x27c>)
 8016dd4:	69fb      	ldr	r3, [r7, #28]
 8016dd6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016dd8:	69fb      	ldr	r3, [r7, #28]
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	f003 030f 	and.w	r3, r3, #15
 8016de0:	b2db      	uxtb	r3, r3
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	b29a      	uxth	r2, r3
 8016de8:	4b2a      	ldr	r3, [pc, #168]	; (8016e94 <ip4_input+0x27c>)
 8016dea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016dec:	8a7b      	ldrh	r3, [r7, #18]
 8016dee:	4619      	mov	r1, r3
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f002 fa91 	bl	8019318 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016df6:	69fb      	ldr	r3, [r7, #28]
 8016df8:	7a5b      	ldrb	r3, [r3, #9]
 8016dfa:	2b11      	cmp	r3, #17
 8016dfc:	d006      	beq.n	8016e0c <ip4_input+0x1f4>
 8016dfe:	2b11      	cmp	r3, #17
 8016e00:	dc13      	bgt.n	8016e2a <ip4_input+0x212>
 8016e02:	2b01      	cmp	r3, #1
 8016e04:	d00c      	beq.n	8016e20 <ip4_input+0x208>
 8016e06:	2b06      	cmp	r3, #6
 8016e08:	d005      	beq.n	8016e16 <ip4_input+0x1fe>
 8016e0a:	e00e      	b.n	8016e2a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016e0c:	6839      	ldr	r1, [r7, #0]
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f008 fbc6 	bl	801f5a0 <udp_input>
        break;
 8016e14:	e026      	b.n	8016e64 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016e16:	6839      	ldr	r1, [r7, #0]
 8016e18:	6878      	ldr	r0, [r7, #4]
 8016e1a:	f004 fa39 	bl	801b290 <tcp_input>
        break;
 8016e1e:	e021      	b.n	8016e64 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016e20:	6839      	ldr	r1, [r7, #0]
 8016e22:	6878      	ldr	r0, [r7, #4]
 8016e24:	f7ff fcb8 	bl	8016798 <icmp_input>
        break;
 8016e28:	e01c      	b.n	8016e64 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e2a:	4b1a      	ldr	r3, [pc, #104]	; (8016e94 <ip4_input+0x27c>)
 8016e2c:	695b      	ldr	r3, [r3, #20]
 8016e2e:	69b9      	ldr	r1, [r7, #24]
 8016e30:	4618      	mov	r0, r3
 8016e32:	f000 f90b 	bl	801704c <ip4_addr_isbroadcast_u32>
 8016e36:	4603      	mov	r3, r0
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d10f      	bne.n	8016e5c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e3c:	4b15      	ldr	r3, [pc, #84]	; (8016e94 <ip4_input+0x27c>)
 8016e3e:	695b      	ldr	r3, [r3, #20]
 8016e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e44:	2be0      	cmp	r3, #224	; 0xe0
 8016e46:	d009      	beq.n	8016e5c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	6878      	ldr	r0, [r7, #4]
 8016e50:	f002 fad5 	bl	80193fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016e54:	2102      	movs	r1, #2
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f7ff fda2 	bl	80169a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f002 fae1 	bl	8019424 <pbuf_free>
        break;
 8016e62:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016e64:	4b0b      	ldr	r3, [pc, #44]	; (8016e94 <ip4_input+0x27c>)
 8016e66:	2200      	movs	r2, #0
 8016e68:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016e6a:	4b0a      	ldr	r3, [pc, #40]	; (8016e94 <ip4_input+0x27c>)
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016e70:	4b08      	ldr	r3, [pc, #32]	; (8016e94 <ip4_input+0x27c>)
 8016e72:	2200      	movs	r2, #0
 8016e74:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016e76:	4b07      	ldr	r3, [pc, #28]	; (8016e94 <ip4_input+0x27c>)
 8016e78:	2200      	movs	r2, #0
 8016e7a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016e7c:	4b05      	ldr	r3, [pc, #20]	; (8016e94 <ip4_input+0x27c>)
 8016e7e:	2200      	movs	r2, #0
 8016e80:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016e82:	4b04      	ldr	r3, [pc, #16]	; (8016e94 <ip4_input+0x27c>)
 8016e84:	2200      	movs	r2, #0
 8016e86:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016e88:	2300      	movs	r3, #0
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3720      	adds	r7, #32
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}
 8016e92:	bf00      	nop
 8016e94:	2000e840 	.word	0x2000e840
 8016e98:	20011f64 	.word	0x20011f64

08016e9c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b08a      	sub	sp, #40	; 0x28
 8016ea0:	af04      	add	r7, sp, #16
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	60b9      	str	r1, [r7, #8]
 8016ea6:	607a      	str	r2, [r7, #4]
 8016ea8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016eaa:	68bb      	ldr	r3, [r7, #8]
 8016eac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d009      	beq.n	8016ec8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d003      	beq.n	8016ec2 <ip4_output_if+0x26>
 8016eba:	68bb      	ldr	r3, [r7, #8]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d102      	bne.n	8016ec8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec4:	3304      	adds	r3, #4
 8016ec6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016ec8:	78fa      	ldrb	r2, [r7, #3]
 8016eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ecc:	9302      	str	r3, [sp, #8]
 8016ece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ed2:	9301      	str	r3, [sp, #4]
 8016ed4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016ed8:	9300      	str	r3, [sp, #0]
 8016eda:	4613      	mov	r3, r2
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	6979      	ldr	r1, [r7, #20]
 8016ee0:	68f8      	ldr	r0, [r7, #12]
 8016ee2:	f000 f805 	bl	8016ef0 <ip4_output_if_src>
 8016ee6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016ee8:	4618      	mov	r0, r3
 8016eea:	3718      	adds	r7, #24
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}

08016ef0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b088      	sub	sp, #32
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	60b9      	str	r1, [r7, #8]
 8016efa:	607a      	str	r2, [r7, #4]
 8016efc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	7b9b      	ldrb	r3, [r3, #14]
 8016f02:	2b01      	cmp	r3, #1
 8016f04:	d006      	beq.n	8016f14 <ip4_output_if_src+0x24>
 8016f06:	4b4b      	ldr	r3, [pc, #300]	; (8017034 <ip4_output_if_src+0x144>)
 8016f08:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016f0c:	494a      	ldr	r1, [pc, #296]	; (8017038 <ip4_output_if_src+0x148>)
 8016f0e:	484b      	ldr	r0, [pc, #300]	; (801703c <ip4_output_if_src+0x14c>)
 8016f10:	f00a fc84 	bl	802181c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d060      	beq.n	8016fdc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016f1a:	2314      	movs	r3, #20
 8016f1c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016f1e:	2114      	movs	r1, #20
 8016f20:	68f8      	ldr	r0, [r7, #12]
 8016f22:	f002 f9e9 	bl	80192f8 <pbuf_add_header>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d002      	beq.n	8016f32 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f2c:	f06f 0301 	mvn.w	r3, #1
 8016f30:	e07c      	b.n	801702c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	895b      	ldrh	r3, [r3, #10]
 8016f3c:	2b13      	cmp	r3, #19
 8016f3e:	d806      	bhi.n	8016f4e <ip4_output_if_src+0x5e>
 8016f40:	4b3c      	ldr	r3, [pc, #240]	; (8017034 <ip4_output_if_src+0x144>)
 8016f42:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016f46:	493e      	ldr	r1, [pc, #248]	; (8017040 <ip4_output_if_src+0x150>)
 8016f48:	483c      	ldr	r0, [pc, #240]	; (801703c <ip4_output_if_src+0x14c>)
 8016f4a:	f00a fc67 	bl	802181c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016f4e:	69fb      	ldr	r3, [r7, #28]
 8016f50:	78fa      	ldrb	r2, [r7, #3]
 8016f52:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016f54:	69fb      	ldr	r3, [r7, #28]
 8016f56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016f5a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681a      	ldr	r2, [r3, #0]
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016f64:	8b7b      	ldrh	r3, [r7, #26]
 8016f66:	089b      	lsrs	r3, r3, #2
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f70:	b2da      	uxtb	r2, r3
 8016f72:	69fb      	ldr	r3, [r7, #28]
 8016f74:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016f76:	69fb      	ldr	r3, [r7, #28]
 8016f78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016f7c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	891b      	ldrh	r3, [r3, #8]
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7fc fd20 	bl	80139c8 <lwip_htons>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	2200      	movs	r2, #0
 8016f94:	719a      	strb	r2, [r3, #6]
 8016f96:	2200      	movs	r2, #0
 8016f98:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016f9a:	4b2a      	ldr	r3, [pc, #168]	; (8017044 <ip4_output_if_src+0x154>)
 8016f9c:	881b      	ldrh	r3, [r3, #0]
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fc fd12 	bl	80139c8 <lwip_htons>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	69fb      	ldr	r3, [r7, #28]
 8016faa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016fac:	4b25      	ldr	r3, [pc, #148]	; (8017044 <ip4_output_if_src+0x154>)
 8016fae:	881b      	ldrh	r3, [r3, #0]
 8016fb0:	3301      	adds	r3, #1
 8016fb2:	b29a      	uxth	r2, r3
 8016fb4:	4b23      	ldr	r3, [pc, #140]	; (8017044 <ip4_output_if_src+0x154>)
 8016fb6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d104      	bne.n	8016fc8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016fbe:	4b22      	ldr	r3, [pc, #136]	; (8017048 <ip4_output_if_src+0x158>)
 8016fc0:	681a      	ldr	r2, [r3, #0]
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	60da      	str	r2, [r3, #12]
 8016fc6:	e003      	b.n	8016fd0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	69fb      	ldr	r3, [r7, #28]
 8016fce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	729a      	strb	r2, [r3, #10]
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	72da      	strb	r2, [r3, #11]
 8016fda:	e00f      	b.n	8016ffc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	895b      	ldrh	r3, [r3, #10]
 8016fe0:	2b13      	cmp	r3, #19
 8016fe2:	d802      	bhi.n	8016fea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016fe4:	f06f 0301 	mvn.w	r3, #1
 8016fe8:	e020      	b.n	801702c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016ff0:	69fb      	ldr	r3, [r7, #28]
 8016ff2:	691b      	ldr	r3, [r3, #16]
 8016ff4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016ff6:	f107 0314 	add.w	r3, r7, #20
 8016ffa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017000:	2b00      	cmp	r3, #0
 8017002:	d00c      	beq.n	801701e <ip4_output_if_src+0x12e>
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	891a      	ldrh	r2, [r3, #8]
 8017008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801700a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801700c:	429a      	cmp	r2, r3
 801700e:	d906      	bls.n	801701e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017010:	687a      	ldr	r2, [r7, #4]
 8017012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017014:	68f8      	ldr	r0, [r7, #12]
 8017016:	f000 fd4d 	bl	8017ab4 <ip4_frag>
 801701a:	4603      	mov	r3, r0
 801701c:	e006      	b.n	801702c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017020:	695b      	ldr	r3, [r3, #20]
 8017022:	687a      	ldr	r2, [r7, #4]
 8017024:	68f9      	ldr	r1, [r7, #12]
 8017026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017028:	4798      	blx	r3
 801702a:	4603      	mov	r3, r0
}
 801702c:	4618      	mov	r0, r3
 801702e:	3720      	adds	r7, #32
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}
 8017034:	08023180 	.word	0x08023180
 8017038:	080231fc 	.word	0x080231fc
 801703c:	08023208 	.word	0x08023208
 8017040:	08023230 	.word	0x08023230
 8017044:	2000905a 	.word	0x2000905a
 8017048:	08025bf0 	.word	0x08025bf0

0801704c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801704c:	b480      	push	{r7}
 801704e:	b085      	sub	sp, #20
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017060:	d002      	beq.n	8017068 <ip4_addr_isbroadcast_u32+0x1c>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d101      	bne.n	801706c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017068:	2301      	movs	r3, #1
 801706a:	e02a      	b.n	80170c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017072:	f003 0302 	and.w	r3, r3, #2
 8017076:	2b00      	cmp	r3, #0
 8017078:	d101      	bne.n	801707e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801707a:	2300      	movs	r3, #0
 801707c:	e021      	b.n	80170c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	3304      	adds	r3, #4
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	687a      	ldr	r2, [r7, #4]
 8017086:	429a      	cmp	r2, r3
 8017088:	d101      	bne.n	801708e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801708a:	2300      	movs	r3, #0
 801708c:	e019      	b.n	80170c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801708e:	68fa      	ldr	r2, [r7, #12]
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	3304      	adds	r3, #4
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	405a      	eors	r2, r3
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	3308      	adds	r3, #8
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	4013      	ands	r3, r2
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d10d      	bne.n	80170c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	3308      	adds	r3, #8
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	43da      	mvns	r2, r3
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	3308      	adds	r3, #8
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d101      	bne.n	80170c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80170bc:	2301      	movs	r3, #1
 80170be:	e000      	b.n	80170c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80170c0:	2300      	movs	r3, #0
  }
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	3714      	adds	r7, #20
 80170c6:	46bd      	mov	sp, r7
 80170c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170cc:	4770      	bx	lr
	...

080170d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80170d6:	2300      	movs	r3, #0
 80170d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80170da:	4b12      	ldr	r3, [pc, #72]	; (8017124 <ip_reass_tmr+0x54>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80170e0:	e018      	b.n	8017114 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	7fdb      	ldrb	r3, [r3, #31]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d00b      	beq.n	8017102 <ip_reass_tmr+0x32>
      r->timer--;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	7fdb      	ldrb	r3, [r3, #31]
 80170ee:	3b01      	subs	r3, #1
 80170f0:	b2da      	uxtb	r2, r3
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	60fb      	str	r3, [r7, #12]
 8017100:	e008      	b.n	8017114 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801710c:	68b9      	ldr	r1, [r7, #8]
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f000 f80a 	bl	8017128 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d1e3      	bne.n	80170e2 <ip_reass_tmr+0x12>
    }
  }
}
 801711a:	bf00      	nop
 801711c:	bf00      	nop
 801711e:	3710      	adds	r7, #16
 8017120:	46bd      	mov	sp, r7
 8017122:	bd80      	pop	{r7, pc}
 8017124:	2000905c 	.word	0x2000905c

08017128 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b088      	sub	sp, #32
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017132:	2300      	movs	r3, #0
 8017134:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017136:	683a      	ldr	r2, [r7, #0]
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	429a      	cmp	r2, r3
 801713c:	d105      	bne.n	801714a <ip_reass_free_complete_datagram+0x22>
 801713e:	4b45      	ldr	r3, [pc, #276]	; (8017254 <ip_reass_free_complete_datagram+0x12c>)
 8017140:	22ab      	movs	r2, #171	; 0xab
 8017142:	4945      	ldr	r1, [pc, #276]	; (8017258 <ip_reass_free_complete_datagram+0x130>)
 8017144:	4845      	ldr	r0, [pc, #276]	; (801725c <ip_reass_free_complete_datagram+0x134>)
 8017146:	f00a fb69 	bl	802181c <iprintf>
  if (prev != NULL) {
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d00a      	beq.n	8017166 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	429a      	cmp	r2, r3
 8017158:	d005      	beq.n	8017166 <ip_reass_free_complete_datagram+0x3e>
 801715a:	4b3e      	ldr	r3, [pc, #248]	; (8017254 <ip_reass_free_complete_datagram+0x12c>)
 801715c:	22ad      	movs	r2, #173	; 0xad
 801715e:	4940      	ldr	r1, [pc, #256]	; (8017260 <ip_reass_free_complete_datagram+0x138>)
 8017160:	483e      	ldr	r0, [pc, #248]	; (801725c <ip_reass_free_complete_datagram+0x134>)
 8017162:	f00a fb5b 	bl	802181c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	685b      	ldr	r3, [r3, #4]
 801716c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	889b      	ldrh	r3, [r3, #4]
 8017172:	b29b      	uxth	r3, r3
 8017174:	2b00      	cmp	r3, #0
 8017176:	d12a      	bne.n	80171ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	685b      	ldr	r3, [r3, #4]
 801717c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801717e:	697b      	ldr	r3, [r7, #20]
 8017180:	681a      	ldr	r2, [r3, #0]
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017186:	69bb      	ldr	r3, [r7, #24]
 8017188:	6858      	ldr	r0, [r3, #4]
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	3308      	adds	r3, #8
 801718e:	2214      	movs	r2, #20
 8017190:	4619      	mov	r1, r3
 8017192:	f00a fa83 	bl	802169c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017196:	2101      	movs	r1, #1
 8017198:	69b8      	ldr	r0, [r7, #24]
 801719a:	f7ff fc11 	bl	80169c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801719e:	69b8      	ldr	r0, [r7, #24]
 80171a0:	f002 f9ce 	bl	8019540 <pbuf_clen>
 80171a4:	4603      	mov	r3, r0
 80171a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80171a8:	8bfa      	ldrh	r2, [r7, #30]
 80171aa:	8a7b      	ldrh	r3, [r7, #18]
 80171ac:	4413      	add	r3, r2
 80171ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171b2:	db05      	blt.n	80171c0 <ip_reass_free_complete_datagram+0x98>
 80171b4:	4b27      	ldr	r3, [pc, #156]	; (8017254 <ip_reass_free_complete_datagram+0x12c>)
 80171b6:	22bc      	movs	r2, #188	; 0xbc
 80171b8:	492a      	ldr	r1, [pc, #168]	; (8017264 <ip_reass_free_complete_datagram+0x13c>)
 80171ba:	4828      	ldr	r0, [pc, #160]	; (801725c <ip_reass_free_complete_datagram+0x134>)
 80171bc:	f00a fb2e 	bl	802181c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80171c0:	8bfa      	ldrh	r2, [r7, #30]
 80171c2:	8a7b      	ldrh	r3, [r7, #18]
 80171c4:	4413      	add	r3, r2
 80171c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80171c8:	69b8      	ldr	r0, [r7, #24]
 80171ca:	f002 f92b 	bl	8019424 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80171d4:	e01f      	b.n	8017216 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80171d6:	69bb      	ldr	r3, [r7, #24]
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	617b      	str	r3, [r7, #20]
    pcur = p;
 80171dc:	69bb      	ldr	r3, [r7, #24]
 80171de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80171e0:	697b      	ldr	r3, [r7, #20]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80171e6:	68f8      	ldr	r0, [r7, #12]
 80171e8:	f002 f9aa 	bl	8019540 <pbuf_clen>
 80171ec:	4603      	mov	r3, r0
 80171ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80171f0:	8bfa      	ldrh	r2, [r7, #30]
 80171f2:	8a7b      	ldrh	r3, [r7, #18]
 80171f4:	4413      	add	r3, r2
 80171f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171fa:	db05      	blt.n	8017208 <ip_reass_free_complete_datagram+0xe0>
 80171fc:	4b15      	ldr	r3, [pc, #84]	; (8017254 <ip_reass_free_complete_datagram+0x12c>)
 80171fe:	22cc      	movs	r2, #204	; 0xcc
 8017200:	4918      	ldr	r1, [pc, #96]	; (8017264 <ip_reass_free_complete_datagram+0x13c>)
 8017202:	4816      	ldr	r0, [pc, #88]	; (801725c <ip_reass_free_complete_datagram+0x134>)
 8017204:	f00a fb0a 	bl	802181c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017208:	8bfa      	ldrh	r2, [r7, #30]
 801720a:	8a7b      	ldrh	r3, [r7, #18]
 801720c:	4413      	add	r3, r2
 801720e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017210:	68f8      	ldr	r0, [r7, #12]
 8017212:	f002 f907 	bl	8019424 <pbuf_free>
  while (p != NULL) {
 8017216:	69bb      	ldr	r3, [r7, #24]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d1dc      	bne.n	80171d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801721c:	6839      	ldr	r1, [r7, #0]
 801721e:	6878      	ldr	r0, [r7, #4]
 8017220:	f000 f8c2 	bl	80173a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017224:	4b10      	ldr	r3, [pc, #64]	; (8017268 <ip_reass_free_complete_datagram+0x140>)
 8017226:	881b      	ldrh	r3, [r3, #0]
 8017228:	8bfa      	ldrh	r2, [r7, #30]
 801722a:	429a      	cmp	r2, r3
 801722c:	d905      	bls.n	801723a <ip_reass_free_complete_datagram+0x112>
 801722e:	4b09      	ldr	r3, [pc, #36]	; (8017254 <ip_reass_free_complete_datagram+0x12c>)
 8017230:	22d2      	movs	r2, #210	; 0xd2
 8017232:	490e      	ldr	r1, [pc, #56]	; (801726c <ip_reass_free_complete_datagram+0x144>)
 8017234:	4809      	ldr	r0, [pc, #36]	; (801725c <ip_reass_free_complete_datagram+0x134>)
 8017236:	f00a faf1 	bl	802181c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801723a:	4b0b      	ldr	r3, [pc, #44]	; (8017268 <ip_reass_free_complete_datagram+0x140>)
 801723c:	881a      	ldrh	r2, [r3, #0]
 801723e:	8bfb      	ldrh	r3, [r7, #30]
 8017240:	1ad3      	subs	r3, r2, r3
 8017242:	b29a      	uxth	r2, r3
 8017244:	4b08      	ldr	r3, [pc, #32]	; (8017268 <ip_reass_free_complete_datagram+0x140>)
 8017246:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017248:	8bfb      	ldrh	r3, [r7, #30]
}
 801724a:	4618      	mov	r0, r3
 801724c:	3720      	adds	r7, #32
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	08023260 	.word	0x08023260
 8017258:	080232e0 	.word	0x080232e0
 801725c:	080232ec 	.word	0x080232ec
 8017260:	08023314 	.word	0x08023314
 8017264:	08023328 	.word	0x08023328
 8017268:	20009060 	.word	0x20009060
 801726c:	08023348 	.word	0x08023348

08017270 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017270:	b580      	push	{r7, lr}
 8017272:	b08a      	sub	sp, #40	; 0x28
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801727a:	2300      	movs	r3, #0
 801727c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801727e:	2300      	movs	r3, #0
 8017280:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017282:	2300      	movs	r3, #0
 8017284:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017286:	2300      	movs	r3, #0
 8017288:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801728a:	2300      	movs	r3, #0
 801728c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801728e:	4b28      	ldr	r3, [pc, #160]	; (8017330 <ip_reass_remove_oldest_datagram+0xc0>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017294:	e030      	b.n	80172f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017298:	695a      	ldr	r2, [r3, #20]
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	68db      	ldr	r3, [r3, #12]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d10c      	bne.n	80172bc <ip_reass_remove_oldest_datagram+0x4c>
 80172a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a4:	699a      	ldr	r2, [r3, #24]
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	691b      	ldr	r3, [r3, #16]
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d106      	bne.n	80172bc <ip_reass_remove_oldest_datagram+0x4c>
 80172ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b0:	899a      	ldrh	r2, [r3, #12]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	889b      	ldrh	r3, [r3, #4]
 80172b6:	b29b      	uxth	r3, r3
 80172b8:	429a      	cmp	r2, r3
 80172ba:	d014      	beq.n	80172e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	3301      	adds	r3, #1
 80172c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80172c2:	6a3b      	ldr	r3, [r7, #32]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d104      	bne.n	80172d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80172c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80172cc:	69fb      	ldr	r3, [r7, #28]
 80172ce:	61bb      	str	r3, [r7, #24]
 80172d0:	e009      	b.n	80172e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80172d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d4:	7fda      	ldrb	r2, [r3, #31]
 80172d6:	6a3b      	ldr	r3, [r7, #32]
 80172d8:	7fdb      	ldrb	r3, [r3, #31]
 80172da:	429a      	cmp	r2, r3
 80172dc:	d803      	bhi.n	80172e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80172de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80172e2:	69fb      	ldr	r3, [r7, #28]
 80172e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80172e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d001      	beq.n	80172f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80172ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80172f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80172f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d1cb      	bne.n	8017296 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80172fe:	6a3b      	ldr	r3, [r7, #32]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d008      	beq.n	8017316 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017304:	69b9      	ldr	r1, [r7, #24]
 8017306:	6a38      	ldr	r0, [r7, #32]
 8017308:	f7ff ff0e 	bl	8017128 <ip_reass_free_complete_datagram>
 801730c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801730e:	697a      	ldr	r2, [r7, #20]
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	4413      	add	r3, r2
 8017314:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017316:	697a      	ldr	r2, [r7, #20]
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	429a      	cmp	r2, r3
 801731c:	da02      	bge.n	8017324 <ip_reass_remove_oldest_datagram+0xb4>
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	2b01      	cmp	r3, #1
 8017322:	dcac      	bgt.n	801727e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017324:	697b      	ldr	r3, [r7, #20]
}
 8017326:	4618      	mov	r0, r3
 8017328:	3728      	adds	r7, #40	; 0x28
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	2000905c 	.word	0x2000905c

08017334 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b084      	sub	sp, #16
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801733e:	2004      	movs	r0, #4
 8017340:	f001 f96e 	bl	8018620 <memp_malloc>
 8017344:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d110      	bne.n	801736e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801734c:	6839      	ldr	r1, [r7, #0]
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f7ff ff8e 	bl	8017270 <ip_reass_remove_oldest_datagram>
 8017354:	4602      	mov	r2, r0
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	4293      	cmp	r3, r2
 801735a:	dc03      	bgt.n	8017364 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801735c:	2004      	movs	r0, #4
 801735e:	f001 f95f 	bl	8018620 <memp_malloc>
 8017362:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d101      	bne.n	801736e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801736a:	2300      	movs	r3, #0
 801736c:	e016      	b.n	801739c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801736e:	2220      	movs	r2, #32
 8017370:	2100      	movs	r1, #0
 8017372:	68f8      	ldr	r0, [r7, #12]
 8017374:	f00a f9a0 	bl	80216b8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	220f      	movs	r2, #15
 801737c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801737e:	4b09      	ldr	r3, [pc, #36]	; (80173a4 <ip_reass_enqueue_new_datagram+0x70>)
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017386:	4a07      	ldr	r2, [pc, #28]	; (80173a4 <ip_reass_enqueue_new_datagram+0x70>)
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	3308      	adds	r3, #8
 8017390:	2214      	movs	r2, #20
 8017392:	6879      	ldr	r1, [r7, #4]
 8017394:	4618      	mov	r0, r3
 8017396:	f00a f981 	bl	802169c <memcpy>
  return ipr;
 801739a:	68fb      	ldr	r3, [r7, #12]
}
 801739c:	4618      	mov	r0, r3
 801739e:	3710      	adds	r7, #16
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	2000905c 	.word	0x2000905c

080173a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
 80173b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80173b2:	4b10      	ldr	r3, [pc, #64]	; (80173f4 <ip_reass_dequeue_datagram+0x4c>)
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	687a      	ldr	r2, [r7, #4]
 80173b8:	429a      	cmp	r2, r3
 80173ba:	d104      	bne.n	80173c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	4a0c      	ldr	r2, [pc, #48]	; (80173f4 <ip_reass_dequeue_datagram+0x4c>)
 80173c2:	6013      	str	r3, [r2, #0]
 80173c4:	e00d      	b.n	80173e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d106      	bne.n	80173da <ip_reass_dequeue_datagram+0x32>
 80173cc:	4b0a      	ldr	r3, [pc, #40]	; (80173f8 <ip_reass_dequeue_datagram+0x50>)
 80173ce:	f240 1245 	movw	r2, #325	; 0x145
 80173d2:	490a      	ldr	r1, [pc, #40]	; (80173fc <ip_reass_dequeue_datagram+0x54>)
 80173d4:	480a      	ldr	r0, [pc, #40]	; (8017400 <ip_reass_dequeue_datagram+0x58>)
 80173d6:	f00a fa21 	bl	802181c <iprintf>
    prev->next = ipr->next;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80173e2:	6879      	ldr	r1, [r7, #4]
 80173e4:	2004      	movs	r0, #4
 80173e6:	f001 f96d 	bl	80186c4 <memp_free>
}
 80173ea:	bf00      	nop
 80173ec:	3708      	adds	r7, #8
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
 80173f2:	bf00      	nop
 80173f4:	2000905c 	.word	0x2000905c
 80173f8:	08023260 	.word	0x08023260
 80173fc:	0802336c 	.word	0x0802336c
 8017400:	080232ec 	.word	0x080232ec

08017404 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b08c      	sub	sp, #48	; 0x30
 8017408:	af00      	add	r7, sp, #0
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017410:	2300      	movs	r3, #0
 8017412:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017414:	2301      	movs	r3, #1
 8017416:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	685b      	ldr	r3, [r3, #4]
 801741c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801741e:	69fb      	ldr	r3, [r7, #28]
 8017420:	885b      	ldrh	r3, [r3, #2]
 8017422:	b29b      	uxth	r3, r3
 8017424:	4618      	mov	r0, r3
 8017426:	f7fc facf 	bl	80139c8 <lwip_htons>
 801742a:	4603      	mov	r3, r0
 801742c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801742e:	69fb      	ldr	r3, [r7, #28]
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	f003 030f 	and.w	r3, r3, #15
 8017436:	b2db      	uxtb	r3, r3
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801743c:	7e7b      	ldrb	r3, [r7, #25]
 801743e:	b29b      	uxth	r3, r3
 8017440:	8b7a      	ldrh	r2, [r7, #26]
 8017442:	429a      	cmp	r2, r3
 8017444:	d202      	bcs.n	801744c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017446:	f04f 33ff 	mov.w	r3, #4294967295
 801744a:	e135      	b.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801744c:	7e7b      	ldrb	r3, [r7, #25]
 801744e:	b29b      	uxth	r3, r3
 8017450:	8b7a      	ldrh	r2, [r7, #26]
 8017452:	1ad3      	subs	r3, r2, r3
 8017454:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017456:	69fb      	ldr	r3, [r7, #28]
 8017458:	88db      	ldrh	r3, [r3, #6]
 801745a:	b29b      	uxth	r3, r3
 801745c:	4618      	mov	r0, r3
 801745e:	f7fc fab3 	bl	80139c8 <lwip_htons>
 8017462:	4603      	mov	r3, r0
 8017464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017468:	b29b      	uxth	r3, r3
 801746a:	00db      	lsls	r3, r3, #3
 801746c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	685b      	ldr	r3, [r3, #4]
 8017472:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017476:	2200      	movs	r2, #0
 8017478:	701a      	strb	r2, [r3, #0]
 801747a:	2200      	movs	r2, #0
 801747c:	705a      	strb	r2, [r3, #1]
 801747e:	2200      	movs	r2, #0
 8017480:	709a      	strb	r2, [r3, #2]
 8017482:	2200      	movs	r2, #0
 8017484:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017488:	8afa      	ldrh	r2, [r7, #22]
 801748a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801748c:	8afa      	ldrh	r2, [r7, #22]
 801748e:	8b7b      	ldrh	r3, [r7, #26]
 8017490:	4413      	add	r3, r2
 8017492:	b29a      	uxth	r2, r3
 8017494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017496:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801749a:	88db      	ldrh	r3, [r3, #6]
 801749c:	b29b      	uxth	r3, r3
 801749e:	8afa      	ldrh	r2, [r7, #22]
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d902      	bls.n	80174aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174a4:	f04f 33ff 	mov.w	r3, #4294967295
 80174a8:	e106      	b.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	685b      	ldr	r3, [r3, #4]
 80174ae:	627b      	str	r3, [r7, #36]	; 0x24
 80174b0:	e068      	b.n	8017584 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80174b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b4:	685b      	ldr	r3, [r3, #4]
 80174b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80174b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ba:	889b      	ldrh	r3, [r3, #4]
 80174bc:	b29a      	uxth	r2, r3
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	889b      	ldrh	r3, [r3, #4]
 80174c2:	b29b      	uxth	r3, r3
 80174c4:	429a      	cmp	r2, r3
 80174c6:	d235      	bcs.n	8017534 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80174c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80174ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d020      	beq.n	8017516 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80174d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d6:	889b      	ldrh	r3, [r3, #4]
 80174d8:	b29a      	uxth	r2, r3
 80174da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174dc:	88db      	ldrh	r3, [r3, #6]
 80174de:	b29b      	uxth	r3, r3
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d307      	bcc.n	80174f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80174e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e6:	88db      	ldrh	r3, [r3, #6]
 80174e8:	b29a      	uxth	r2, r3
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	889b      	ldrh	r3, [r3, #4]
 80174ee:	b29b      	uxth	r3, r3
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d902      	bls.n	80174fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174f4:	f04f 33ff 	mov.w	r3, #4294967295
 80174f8:	e0de      	b.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80174fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fc:	68ba      	ldr	r2, [r7, #8]
 80174fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017502:	88db      	ldrh	r3, [r3, #6]
 8017504:	b29a      	uxth	r2, r3
 8017506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017508:	889b      	ldrh	r3, [r3, #4]
 801750a:	b29b      	uxth	r3, r3
 801750c:	429a      	cmp	r2, r3
 801750e:	d03d      	beq.n	801758c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017510:	2300      	movs	r3, #0
 8017512:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017514:	e03a      	b.n	801758c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017518:	88db      	ldrh	r3, [r3, #6]
 801751a:	b29a      	uxth	r2, r3
 801751c:	693b      	ldr	r3, [r7, #16]
 801751e:	889b      	ldrh	r3, [r3, #4]
 8017520:	b29b      	uxth	r3, r3
 8017522:	429a      	cmp	r2, r3
 8017524:	d902      	bls.n	801752c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017526:	f04f 33ff 	mov.w	r3, #4294967295
 801752a:	e0c5      	b.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	68ba      	ldr	r2, [r7, #8]
 8017530:	605a      	str	r2, [r3, #4]
      break;
 8017532:	e02b      	b.n	801758c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017536:	889b      	ldrh	r3, [r3, #4]
 8017538:	b29a      	uxth	r2, r3
 801753a:	693b      	ldr	r3, [r7, #16]
 801753c:	889b      	ldrh	r3, [r3, #4]
 801753e:	b29b      	uxth	r3, r3
 8017540:	429a      	cmp	r2, r3
 8017542:	d102      	bne.n	801754a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017544:	f04f 33ff 	mov.w	r3, #4294967295
 8017548:	e0b6      	b.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754c:	889b      	ldrh	r3, [r3, #4]
 801754e:	b29a      	uxth	r2, r3
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	88db      	ldrh	r3, [r3, #6]
 8017554:	b29b      	uxth	r3, r3
 8017556:	429a      	cmp	r2, r3
 8017558:	d202      	bcs.n	8017560 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801755a:	f04f 33ff 	mov.w	r3, #4294967295
 801755e:	e0ab      	b.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017562:	2b00      	cmp	r3, #0
 8017564:	d009      	beq.n	801757a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017568:	88db      	ldrh	r3, [r3, #6]
 801756a:	b29a      	uxth	r2, r3
 801756c:	693b      	ldr	r3, [r7, #16]
 801756e:	889b      	ldrh	r3, [r3, #4]
 8017570:	b29b      	uxth	r3, r3
 8017572:	429a      	cmp	r2, r3
 8017574:	d001      	beq.n	801757a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017576:	2300      	movs	r3, #0
 8017578:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017586:	2b00      	cmp	r3, #0
 8017588:	d193      	bne.n	80174b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801758a:	e000      	b.n	801758e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801758c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017590:	2b00      	cmp	r3, #0
 8017592:	d12d      	bne.n	80175f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017596:	2b00      	cmp	r3, #0
 8017598:	d01c      	beq.n	80175d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801759c:	88db      	ldrh	r3, [r3, #6]
 801759e:	b29a      	uxth	r2, r3
 80175a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a2:	889b      	ldrh	r3, [r3, #4]
 80175a4:	b29b      	uxth	r3, r3
 80175a6:	429a      	cmp	r2, r3
 80175a8:	d906      	bls.n	80175b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80175aa:	4b45      	ldr	r3, [pc, #276]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175ac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80175b0:	4944      	ldr	r1, [pc, #272]	; (80176c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80175b2:	4845      	ldr	r0, [pc, #276]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175b4:	f00a f932 	bl	802181c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80175b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ba:	68ba      	ldr	r2, [r7, #8]
 80175bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80175be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c0:	88db      	ldrh	r3, [r3, #6]
 80175c2:	b29a      	uxth	r2, r3
 80175c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c6:	889b      	ldrh	r3, [r3, #4]
 80175c8:	b29b      	uxth	r3, r3
 80175ca:	429a      	cmp	r2, r3
 80175cc:	d010      	beq.n	80175f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80175ce:	2300      	movs	r3, #0
 80175d0:	623b      	str	r3, [r7, #32]
 80175d2:	e00d      	b.n	80175f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	685b      	ldr	r3, [r3, #4]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d006      	beq.n	80175ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80175dc:	4b38      	ldr	r3, [pc, #224]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175de:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80175e2:	493a      	ldr	r1, [pc, #232]	; (80176cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80175e4:	4838      	ldr	r0, [pc, #224]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175e6:	f00a f919 	bl	802181c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	68ba      	ldr	r2, [r7, #8]
 80175ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d105      	bne.n	8017602 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	7f9b      	ldrb	r3, [r3, #30]
 80175fa:	f003 0301 	and.w	r3, r3, #1
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d059      	beq.n	80176b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017602:	6a3b      	ldr	r3, [r7, #32]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d04f      	beq.n	80176a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d006      	beq.n	801761e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	685b      	ldr	r3, [r3, #4]
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	889b      	ldrh	r3, [r3, #4]
 8017618:	b29b      	uxth	r3, r3
 801761a:	2b00      	cmp	r3, #0
 801761c:	d002      	beq.n	8017624 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801761e:	2300      	movs	r3, #0
 8017620:	623b      	str	r3, [r7, #32]
 8017622:	e041      	b.n	80176a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017626:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801762e:	e012      	b.n	8017656 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017632:	685b      	ldr	r3, [r3, #4]
 8017634:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017638:	88db      	ldrh	r3, [r3, #6]
 801763a:	b29a      	uxth	r2, r3
 801763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801763e:	889b      	ldrh	r3, [r3, #4]
 8017640:	b29b      	uxth	r3, r3
 8017642:	429a      	cmp	r2, r3
 8017644:	d002      	beq.n	801764c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017646:	2300      	movs	r3, #0
 8017648:	623b      	str	r3, [r7, #32]
            break;
 801764a:	e007      	b.n	801765c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801764e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017658:	2b00      	cmp	r3, #0
 801765a:	d1e9      	bne.n	8017630 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801765c:	6a3b      	ldr	r3, [r7, #32]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d022      	beq.n	80176a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d106      	bne.n	8017678 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801766a:	4b15      	ldr	r3, [pc, #84]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801766c:	f240 12df 	movw	r2, #479	; 0x1df
 8017670:	4917      	ldr	r1, [pc, #92]	; (80176d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017672:	4815      	ldr	r0, [pc, #84]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017674:	f00a f8d2 	bl	802181c <iprintf>
          LWIP_ASSERT("sanity check",
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	685b      	ldr	r3, [r3, #4]
 801767c:	685b      	ldr	r3, [r3, #4]
 801767e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017680:	429a      	cmp	r2, r3
 8017682:	d106      	bne.n	8017692 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017684:	4b0e      	ldr	r3, [pc, #56]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017686:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801768a:	4911      	ldr	r1, [pc, #68]	; (80176d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801768c:	480e      	ldr	r0, [pc, #56]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801768e:	f00a f8c5 	bl	802181c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d006      	beq.n	80176a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801769a:	4b09      	ldr	r3, [pc, #36]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801769c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80176a0:	490c      	ldr	r1, [pc, #48]	; (80176d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80176a2:	4809      	ldr	r0, [pc, #36]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176a4:	f00a f8ba 	bl	802181c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80176a8:	6a3b      	ldr	r3, [r7, #32]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	bf14      	ite	ne
 80176ae:	2301      	movne	r3, #1
 80176b0:	2300      	moveq	r3, #0
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	e000      	b.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80176b6:	2300      	movs	r3, #0
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	3730      	adds	r7, #48	; 0x30
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	08023260 	.word	0x08023260
 80176c4:	08023388 	.word	0x08023388
 80176c8:	080232ec 	.word	0x080232ec
 80176cc:	080233a8 	.word	0x080233a8
 80176d0:	080233e0 	.word	0x080233e0
 80176d4:	080233f0 	.word	0x080233f0

080176d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b08e      	sub	sp, #56	; 0x38
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	685b      	ldr	r3, [r3, #4]
 80176e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80176e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	f003 030f 	and.w	r3, r3, #15
 80176ee:	b2db      	uxtb	r3, r3
 80176f0:	009b      	lsls	r3, r3, #2
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	2b14      	cmp	r3, #20
 80176f6:	f040 8167 	bne.w	80179c8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80176fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176fc:	88db      	ldrh	r3, [r3, #6]
 80176fe:	b29b      	uxth	r3, r3
 8017700:	4618      	mov	r0, r3
 8017702:	f7fc f961 	bl	80139c8 <lwip_htons>
 8017706:	4603      	mov	r3, r0
 8017708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801770c:	b29b      	uxth	r3, r3
 801770e:	00db      	lsls	r3, r3, #3
 8017710:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017714:	885b      	ldrh	r3, [r3, #2]
 8017716:	b29b      	uxth	r3, r3
 8017718:	4618      	mov	r0, r3
 801771a:	f7fc f955 	bl	80139c8 <lwip_htons>
 801771e:	4603      	mov	r3, r0
 8017720:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	f003 030f 	and.w	r3, r3, #15
 801772a:	b2db      	uxtb	r3, r3
 801772c:	009b      	lsls	r3, r3, #2
 801772e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017736:	b29b      	uxth	r3, r3
 8017738:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801773a:	429a      	cmp	r2, r3
 801773c:	f0c0 8146 	bcc.w	80179cc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017744:	b29b      	uxth	r3, r3
 8017746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017748:	1ad3      	subs	r3, r2, r3
 801774a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f001 fef7 	bl	8019540 <pbuf_clen>
 8017752:	4603      	mov	r3, r0
 8017754:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017756:	4b9f      	ldr	r3, [pc, #636]	; (80179d4 <ip4_reass+0x2fc>)
 8017758:	881b      	ldrh	r3, [r3, #0]
 801775a:	461a      	mov	r2, r3
 801775c:	8c3b      	ldrh	r3, [r7, #32]
 801775e:	4413      	add	r3, r2
 8017760:	2b0a      	cmp	r3, #10
 8017762:	dd10      	ble.n	8017786 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017764:	8c3b      	ldrh	r3, [r7, #32]
 8017766:	4619      	mov	r1, r3
 8017768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801776a:	f7ff fd81 	bl	8017270 <ip_reass_remove_oldest_datagram>
 801776e:	4603      	mov	r3, r0
 8017770:	2b00      	cmp	r3, #0
 8017772:	f000 812d 	beq.w	80179d0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017776:	4b97      	ldr	r3, [pc, #604]	; (80179d4 <ip4_reass+0x2fc>)
 8017778:	881b      	ldrh	r3, [r3, #0]
 801777a:	461a      	mov	r2, r3
 801777c:	8c3b      	ldrh	r3, [r7, #32]
 801777e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017780:	2b0a      	cmp	r3, #10
 8017782:	f300 8125 	bgt.w	80179d0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017786:	4b94      	ldr	r3, [pc, #592]	; (80179d8 <ip4_reass+0x300>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	633b      	str	r3, [r7, #48]	; 0x30
 801778c:	e015      	b.n	80177ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017790:	695a      	ldr	r2, [r3, #20]
 8017792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017794:	68db      	ldr	r3, [r3, #12]
 8017796:	429a      	cmp	r2, r3
 8017798:	d10c      	bne.n	80177b4 <ip4_reass+0xdc>
 801779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801779c:	699a      	ldr	r2, [r3, #24]
 801779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a0:	691b      	ldr	r3, [r3, #16]
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d106      	bne.n	80177b4 <ip4_reass+0xdc>
 80177a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177a8:	899a      	ldrh	r2, [r3, #12]
 80177aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ac:	889b      	ldrh	r3, [r3, #4]
 80177ae:	b29b      	uxth	r3, r3
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d006      	beq.n	80177c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80177b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	633b      	str	r3, [r7, #48]	; 0x30
 80177ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d1e6      	bne.n	801778e <ip4_reass+0xb6>
 80177c0:	e000      	b.n	80177c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80177c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80177c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d109      	bne.n	80177de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80177ca:	8c3b      	ldrh	r3, [r7, #32]
 80177cc:	4619      	mov	r1, r3
 80177ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177d0:	f7ff fdb0 	bl	8017334 <ip_reass_enqueue_new_datagram>
 80177d4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80177d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d11c      	bne.n	8017816 <ip4_reass+0x13e>
      goto nullreturn;
 80177dc:	e109      	b.n	80179f2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80177de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e0:	88db      	ldrh	r3, [r3, #6]
 80177e2:	b29b      	uxth	r3, r3
 80177e4:	4618      	mov	r0, r3
 80177e6:	f7fc f8ef 	bl	80139c8 <lwip_htons>
 80177ea:	4603      	mov	r3, r0
 80177ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d110      	bne.n	8017816 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80177f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f6:	89db      	ldrh	r3, [r3, #14]
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fc f8e5 	bl	80139c8 <lwip_htons>
 80177fe:	4603      	mov	r3, r0
 8017800:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017804:	2b00      	cmp	r3, #0
 8017806:	d006      	beq.n	8017816 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801780a:	3308      	adds	r3, #8
 801780c:	2214      	movs	r2, #20
 801780e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017810:	4618      	mov	r0, r3
 8017812:	f009 ff43 	bl	802169c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017818:	88db      	ldrh	r3, [r3, #6]
 801781a:	b29b      	uxth	r3, r3
 801781c:	f003 0320 	and.w	r3, r3, #32
 8017820:	2b00      	cmp	r3, #0
 8017822:	bf0c      	ite	eq
 8017824:	2301      	moveq	r3, #1
 8017826:	2300      	movne	r3, #0
 8017828:	b2db      	uxtb	r3, r3
 801782a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801782c:	69fb      	ldr	r3, [r7, #28]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d00e      	beq.n	8017850 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017832:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017836:	4413      	add	r3, r2
 8017838:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801783a:	8b7a      	ldrh	r2, [r7, #26]
 801783c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801783e:	429a      	cmp	r2, r3
 8017840:	f0c0 80a0 	bcc.w	8017984 <ip4_reass+0x2ac>
 8017844:	8b7b      	ldrh	r3, [r7, #26]
 8017846:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801784a:	4293      	cmp	r3, r2
 801784c:	f200 809a 	bhi.w	8017984 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017850:	69fa      	ldr	r2, [r7, #28]
 8017852:	6879      	ldr	r1, [r7, #4]
 8017854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017856:	f7ff fdd5 	bl	8017404 <ip_reass_chain_frag_into_datagram_and_validate>
 801785a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801785c:	697b      	ldr	r3, [r7, #20]
 801785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017862:	f000 8091 	beq.w	8017988 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017866:	4b5b      	ldr	r3, [pc, #364]	; (80179d4 <ip4_reass+0x2fc>)
 8017868:	881a      	ldrh	r2, [r3, #0]
 801786a:	8c3b      	ldrh	r3, [r7, #32]
 801786c:	4413      	add	r3, r2
 801786e:	b29a      	uxth	r2, r3
 8017870:	4b58      	ldr	r3, [pc, #352]	; (80179d4 <ip4_reass+0x2fc>)
 8017872:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017874:	69fb      	ldr	r3, [r7, #28]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d00d      	beq.n	8017896 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801787a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801787c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801787e:	4413      	add	r3, r2
 8017880:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017884:	8a7a      	ldrh	r2, [r7, #18]
 8017886:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801788a:	7f9b      	ldrb	r3, [r3, #30]
 801788c:	f043 0301 	orr.w	r3, r3, #1
 8017890:	b2da      	uxtb	r2, r3
 8017892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017894:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	2b01      	cmp	r3, #1
 801789a:	d171      	bne.n	8017980 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801789e:	8b9b      	ldrh	r3, [r3, #28]
 80178a0:	3314      	adds	r3, #20
 80178a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80178a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178a6:	685b      	ldr	r3, [r3, #4]
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80178ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	685b      	ldr	r3, [r3, #4]
 80178b4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80178b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b8:	3308      	adds	r3, #8
 80178ba:	2214      	movs	r2, #20
 80178bc:	4619      	mov	r1, r3
 80178be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178c0:	f009 feec 	bl	802169c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80178c4:	8a3b      	ldrh	r3, [r7, #16]
 80178c6:	4618      	mov	r0, r3
 80178c8:	f7fc f87e 	bl	80139c8 <lwip_htons>
 80178cc:	4603      	mov	r3, r0
 80178ce:	461a      	mov	r2, r3
 80178d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80178d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d6:	2200      	movs	r2, #0
 80178d8:	719a      	strb	r2, [r3, #6]
 80178da:	2200      	movs	r2, #0
 80178dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80178de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e0:	2200      	movs	r2, #0
 80178e2:	729a      	strb	r2, [r3, #10]
 80178e4:	2200      	movs	r2, #0
 80178e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80178e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ea:	685b      	ldr	r3, [r3, #4]
 80178ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80178ee:	e00d      	b.n	801790c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80178f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80178f6:	2114      	movs	r1, #20
 80178f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80178fa:	f001 fd0d 	bl	8019318 <pbuf_remove_header>
      pbuf_cat(p, r);
 80178fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	f001 fe5d 	bl	80195c0 <pbuf_cat>
      r = iprh->next_pbuf;
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801790e:	2b00      	cmp	r3, #0
 8017910:	d1ee      	bne.n	80178f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017912:	4b31      	ldr	r3, [pc, #196]	; (80179d8 <ip4_reass+0x300>)
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017918:	429a      	cmp	r2, r3
 801791a:	d102      	bne.n	8017922 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801791c:	2300      	movs	r3, #0
 801791e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017920:	e010      	b.n	8017944 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017922:	4b2d      	ldr	r3, [pc, #180]	; (80179d8 <ip4_reass+0x300>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017928:	e007      	b.n	801793a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017930:	429a      	cmp	r2, r3
 8017932:	d006      	beq.n	8017942 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	62fb      	str	r3, [r7, #44]	; 0x2c
 801793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801793c:	2b00      	cmp	r3, #0
 801793e:	d1f4      	bne.n	801792a <ip4_reass+0x252>
 8017940:	e000      	b.n	8017944 <ip4_reass+0x26c>
          break;
 8017942:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017944:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017948:	f7ff fd2e 	bl	80173a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f001 fdf7 	bl	8019540 <pbuf_clen>
 8017952:	4603      	mov	r3, r0
 8017954:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017956:	4b1f      	ldr	r3, [pc, #124]	; (80179d4 <ip4_reass+0x2fc>)
 8017958:	881b      	ldrh	r3, [r3, #0]
 801795a:	8c3a      	ldrh	r2, [r7, #32]
 801795c:	429a      	cmp	r2, r3
 801795e:	d906      	bls.n	801796e <ip4_reass+0x296>
 8017960:	4b1e      	ldr	r3, [pc, #120]	; (80179dc <ip4_reass+0x304>)
 8017962:	f240 229b 	movw	r2, #667	; 0x29b
 8017966:	491e      	ldr	r1, [pc, #120]	; (80179e0 <ip4_reass+0x308>)
 8017968:	481e      	ldr	r0, [pc, #120]	; (80179e4 <ip4_reass+0x30c>)
 801796a:	f009 ff57 	bl	802181c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801796e:	4b19      	ldr	r3, [pc, #100]	; (80179d4 <ip4_reass+0x2fc>)
 8017970:	881a      	ldrh	r2, [r3, #0]
 8017972:	8c3b      	ldrh	r3, [r7, #32]
 8017974:	1ad3      	subs	r3, r2, r3
 8017976:	b29a      	uxth	r2, r3
 8017978:	4b16      	ldr	r3, [pc, #88]	; (80179d4 <ip4_reass+0x2fc>)
 801797a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	e03c      	b.n	80179fa <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017980:	2300      	movs	r3, #0
 8017982:	e03a      	b.n	80179fa <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017984:	bf00      	nop
 8017986:	e000      	b.n	801798a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017988:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801798c:	2b00      	cmp	r3, #0
 801798e:	d106      	bne.n	801799e <ip4_reass+0x2c6>
 8017990:	4b12      	ldr	r3, [pc, #72]	; (80179dc <ip4_reass+0x304>)
 8017992:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017996:	4914      	ldr	r1, [pc, #80]	; (80179e8 <ip4_reass+0x310>)
 8017998:	4812      	ldr	r0, [pc, #72]	; (80179e4 <ip4_reass+0x30c>)
 801799a:	f009 ff3f 	bl	802181c <iprintf>
  if (ipr->p == NULL) {
 801799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a0:	685b      	ldr	r3, [r3, #4]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d124      	bne.n	80179f0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80179a6:	4b0c      	ldr	r3, [pc, #48]	; (80179d8 <ip4_reass+0x300>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d006      	beq.n	80179be <ip4_reass+0x2e6>
 80179b0:	4b0a      	ldr	r3, [pc, #40]	; (80179dc <ip4_reass+0x304>)
 80179b2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80179b6:	490d      	ldr	r1, [pc, #52]	; (80179ec <ip4_reass+0x314>)
 80179b8:	480a      	ldr	r0, [pc, #40]	; (80179e4 <ip4_reass+0x30c>)
 80179ba:	f009 ff2f 	bl	802181c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80179be:	2100      	movs	r1, #0
 80179c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179c2:	f7ff fcf1 	bl	80173a8 <ip_reass_dequeue_datagram>
 80179c6:	e014      	b.n	80179f2 <ip4_reass+0x31a>
    goto nullreturn;
 80179c8:	bf00      	nop
 80179ca:	e012      	b.n	80179f2 <ip4_reass+0x31a>
    goto nullreturn;
 80179cc:	bf00      	nop
 80179ce:	e010      	b.n	80179f2 <ip4_reass+0x31a>
      goto nullreturn;
 80179d0:	bf00      	nop
 80179d2:	e00e      	b.n	80179f2 <ip4_reass+0x31a>
 80179d4:	20009060 	.word	0x20009060
 80179d8:	2000905c 	.word	0x2000905c
 80179dc:	08023260 	.word	0x08023260
 80179e0:	08023414 	.word	0x08023414
 80179e4:	080232ec 	.word	0x080232ec
 80179e8:	08023430 	.word	0x08023430
 80179ec:	0802343c 	.word	0x0802343c
  }

nullreturn:
 80179f0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f001 fd16 	bl	8019424 <pbuf_free>
  return NULL;
 80179f8:	2300      	movs	r3, #0
}
 80179fa:	4618      	mov	r0, r3
 80179fc:	3738      	adds	r7, #56	; 0x38
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop

08017a04 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017a08:	2005      	movs	r0, #5
 8017a0a:	f000 fe09 	bl	8018620 <memp_malloc>
 8017a0e:	4603      	mov	r3, r0
}
 8017a10:	4618      	mov	r0, r3
 8017a12:	bd80      	pop	{r7, pc}

08017a14 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b082      	sub	sp, #8
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d106      	bne.n	8017a30 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017a22:	4b07      	ldr	r3, [pc, #28]	; (8017a40 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017a24:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017a28:	4906      	ldr	r1, [pc, #24]	; (8017a44 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017a2a:	4807      	ldr	r0, [pc, #28]	; (8017a48 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017a2c:	f009 fef6 	bl	802181c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017a30:	6879      	ldr	r1, [r7, #4]
 8017a32:	2005      	movs	r0, #5
 8017a34:	f000 fe46 	bl	80186c4 <memp_free>
}
 8017a38:	bf00      	nop
 8017a3a:	3708      	adds	r7, #8
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	08023260 	.word	0x08023260
 8017a44:	0802345c 	.word	0x0802345c
 8017a48:	080232ec 	.word	0x080232ec

08017a4c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b084      	sub	sp, #16
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d106      	bne.n	8017a6c <ipfrag_free_pbuf_custom+0x20>
 8017a5e:	4b11      	ldr	r3, [pc, #68]	; (8017aa4 <ipfrag_free_pbuf_custom+0x58>)
 8017a60:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017a64:	4910      	ldr	r1, [pc, #64]	; (8017aa8 <ipfrag_free_pbuf_custom+0x5c>)
 8017a66:	4811      	ldr	r0, [pc, #68]	; (8017aac <ipfrag_free_pbuf_custom+0x60>)
 8017a68:	f009 fed8 	bl	802181c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d006      	beq.n	8017a82 <ipfrag_free_pbuf_custom+0x36>
 8017a74:	4b0b      	ldr	r3, [pc, #44]	; (8017aa4 <ipfrag_free_pbuf_custom+0x58>)
 8017a76:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017a7a:	490d      	ldr	r1, [pc, #52]	; (8017ab0 <ipfrag_free_pbuf_custom+0x64>)
 8017a7c:	480b      	ldr	r0, [pc, #44]	; (8017aac <ipfrag_free_pbuf_custom+0x60>)
 8017a7e:	f009 fecd 	bl	802181c <iprintf>
  if (pcr->original != NULL) {
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	695b      	ldr	r3, [r3, #20]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d004      	beq.n	8017a94 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	695b      	ldr	r3, [r3, #20]
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f001 fcc8 	bl	8019424 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017a94:	68f8      	ldr	r0, [r7, #12]
 8017a96:	f7ff ffbd 	bl	8017a14 <ip_frag_free_pbuf_custom_ref>
}
 8017a9a:	bf00      	nop
 8017a9c:	3710      	adds	r7, #16
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	08023260 	.word	0x08023260
 8017aa8:	08023468 	.word	0x08023468
 8017aac:	080232ec 	.word	0x080232ec
 8017ab0:	08023474 	.word	0x08023474

08017ab4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b094      	sub	sp, #80	; 0x50
 8017ab8:	af02      	add	r7, sp, #8
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	60b9      	str	r1, [r7, #8]
 8017abe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017aca:	3b14      	subs	r3, #20
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	da00      	bge.n	8017ad2 <ip4_frag+0x1e>
 8017ad0:	3307      	adds	r3, #7
 8017ad2:	10db      	asrs	r3, r3, #3
 8017ad4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017ad6:	2314      	movs	r3, #20
 8017ad8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	685b      	ldr	r3, [r3, #4]
 8017ade:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ae2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae6:	781b      	ldrb	r3, [r3, #0]
 8017ae8:	f003 030f 	and.w	r3, r3, #15
 8017aec:	b2db      	uxtb	r3, r3
 8017aee:	009b      	lsls	r3, r3, #2
 8017af0:	b2db      	uxtb	r3, r3
 8017af2:	2b14      	cmp	r3, #20
 8017af4:	d002      	beq.n	8017afc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017af6:	f06f 0305 	mvn.w	r3, #5
 8017afa:	e110      	b.n	8017d1e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	895b      	ldrh	r3, [r3, #10]
 8017b00:	2b13      	cmp	r3, #19
 8017b02:	d809      	bhi.n	8017b18 <ip4_frag+0x64>
 8017b04:	4b88      	ldr	r3, [pc, #544]	; (8017d28 <ip4_frag+0x274>)
 8017b06:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017b0a:	4988      	ldr	r1, [pc, #544]	; (8017d2c <ip4_frag+0x278>)
 8017b0c:	4888      	ldr	r0, [pc, #544]	; (8017d30 <ip4_frag+0x27c>)
 8017b0e:	f009 fe85 	bl	802181c <iprintf>
 8017b12:	f06f 0305 	mvn.w	r3, #5
 8017b16:	e102      	b.n	8017d1e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b1a:	88db      	ldrh	r3, [r3, #6]
 8017b1c:	b29b      	uxth	r3, r3
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f7fb ff52 	bl	80139c8 <lwip_htons>
 8017b24:	4603      	mov	r3, r0
 8017b26:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017b28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017b32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017b38:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	891b      	ldrh	r3, [r3, #8]
 8017b3e:	3b14      	subs	r3, #20
 8017b40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017b44:	e0e1      	b.n	8017d0a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017b46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017b48:	00db      	lsls	r3, r3, #3
 8017b4a:	b29b      	uxth	r3, r3
 8017b4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b50:	4293      	cmp	r3, r2
 8017b52:	bf28      	it	cs
 8017b54:	4613      	movcs	r3, r2
 8017b56:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017b58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b5c:	2114      	movs	r1, #20
 8017b5e:	200e      	movs	r0, #14
 8017b60:	f001 f97c 	bl	8018e5c <pbuf_alloc>
 8017b64:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	f000 80d5 	beq.w	8017d18 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b70:	895b      	ldrh	r3, [r3, #10]
 8017b72:	2b13      	cmp	r3, #19
 8017b74:	d806      	bhi.n	8017b84 <ip4_frag+0xd0>
 8017b76:	4b6c      	ldr	r3, [pc, #432]	; (8017d28 <ip4_frag+0x274>)
 8017b78:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017b7c:	496d      	ldr	r1, [pc, #436]	; (8017d34 <ip4_frag+0x280>)
 8017b7e:	486c      	ldr	r0, [pc, #432]	; (8017d30 <ip4_frag+0x27c>)
 8017b80:	f009 fe4c 	bl	802181c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b86:	685b      	ldr	r3, [r3, #4]
 8017b88:	2214      	movs	r2, #20
 8017b8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f009 fd85 	bl	802169c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017b98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017b9e:	e064      	b.n	8017c6a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	895a      	ldrh	r2, [r3, #10]
 8017ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ba6:	1ad3      	subs	r3, r2, r3
 8017ba8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	895b      	ldrh	r3, [r3, #10]
 8017bae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d906      	bls.n	8017bc2 <ip4_frag+0x10e>
 8017bb4:	4b5c      	ldr	r3, [pc, #368]	; (8017d28 <ip4_frag+0x274>)
 8017bb6:	f240 322d 	movw	r2, #813	; 0x32d
 8017bba:	495f      	ldr	r1, [pc, #380]	; (8017d38 <ip4_frag+0x284>)
 8017bbc:	485c      	ldr	r0, [pc, #368]	; (8017d30 <ip4_frag+0x27c>)
 8017bbe:	f009 fe2d 	bl	802181c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017bc2:	8bfa      	ldrh	r2, [r7, #30]
 8017bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017bc8:	4293      	cmp	r3, r2
 8017bca:	bf28      	it	cs
 8017bcc:	4613      	movcs	r3, r2
 8017bce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017bd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d105      	bne.n	8017be6 <ip4_frag+0x132>
        poff = 0;
 8017bda:	2300      	movs	r3, #0
 8017bdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	60fb      	str	r3, [r7, #12]
        continue;
 8017be4:	e041      	b.n	8017c6a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017be6:	f7ff ff0d 	bl	8017a04 <ip_frag_alloc_pbuf_custom_ref>
 8017bea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017bec:	69bb      	ldr	r3, [r7, #24]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d103      	bne.n	8017bfa <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bf4:	f001 fc16 	bl	8019424 <pbuf_free>
        goto memerr;
 8017bf8:	e08f      	b.n	8017d1a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017bfa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017c00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c02:	4413      	add	r3, r2
 8017c04:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017c08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017c0c:	9201      	str	r2, [sp, #4]
 8017c0e:	9300      	str	r3, [sp, #0]
 8017c10:	4603      	mov	r3, r0
 8017c12:	2241      	movs	r2, #65	; 0x41
 8017c14:	2000      	movs	r0, #0
 8017c16:	f001 fa4b 	bl	80190b0 <pbuf_alloced_custom>
 8017c1a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017c1c:	697b      	ldr	r3, [r7, #20]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d106      	bne.n	8017c30 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017c22:	69b8      	ldr	r0, [r7, #24]
 8017c24:	f7ff fef6 	bl	8017a14 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c2a:	f001 fbfb 	bl	8019424 <pbuf_free>
        goto memerr;
 8017c2e:	e074      	b.n	8017d1a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017c30:	68f8      	ldr	r0, [r7, #12]
 8017c32:	f001 fc9d 	bl	8019570 <pbuf_ref>
      pcr->original = p;
 8017c36:	69bb      	ldr	r3, [r7, #24]
 8017c38:	68fa      	ldr	r2, [r7, #12]
 8017c3a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017c3c:	69bb      	ldr	r3, [r7, #24]
 8017c3e:	4a3f      	ldr	r2, [pc, #252]	; (8017d3c <ip4_frag+0x288>)
 8017c40:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017c42:	6979      	ldr	r1, [r7, #20]
 8017c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c46:	f001 fcbb 	bl	80195c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017c4a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017c4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c52:	1ad3      	subs	r3, r2, r3
 8017c54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017c58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d004      	beq.n	8017c6a <ip4_frag+0x1b6>
        poff = 0;
 8017c60:	2300      	movs	r3, #0
 8017c62:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017c6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d196      	bne.n	8017ba0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017c72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c78:	4413      	add	r3, r2
 8017c7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c80:	f1a3 0213 	sub.w	r2, r3, #19
 8017c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	bfcc      	ite	gt
 8017c8c:	2301      	movgt	r3, #1
 8017c8e:	2300      	movle	r3, #0
 8017c90:	b2db      	uxtb	r3, r3
 8017c92:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017c94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017c9e:	6a3b      	ldr	r3, [r7, #32]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d002      	beq.n	8017caa <ip4_frag+0x1f6>
 8017ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d003      	beq.n	8017cb2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017caa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017cb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017cb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f7fb fe87 	bl	80139c8 <lwip_htons>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	461a      	mov	r2, r3
 8017cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017cc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017cc4:	3314      	adds	r3, #20
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7fb fe7d 	bl	80139c8 <lwip_htons>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	461a      	mov	r2, r3
 8017cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd8:	2200      	movs	r2, #0
 8017cda:	729a      	strb	r2, [r3, #10]
 8017cdc:	2200      	movs	r2, #0
 8017cde:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	695b      	ldr	r3, [r3, #20]
 8017ce4:	687a      	ldr	r2, [r7, #4]
 8017ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ce8:	68b8      	ldr	r0, [r7, #8]
 8017cea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cee:	f001 fb99 	bl	8019424 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017cf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017cf8:	1ad3      	subs	r3, r2, r3
 8017cfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017cfe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017d02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d04:	4413      	add	r3, r2
 8017d06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017d0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	f47f af19 	bne.w	8017b46 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017d14:	2300      	movs	r3, #0
 8017d16:	e002      	b.n	8017d1e <ip4_frag+0x26a>
      goto memerr;
 8017d18:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3748      	adds	r7, #72	; 0x48
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}
 8017d26:	bf00      	nop
 8017d28:	08023260 	.word	0x08023260
 8017d2c:	08023480 	.word	0x08023480
 8017d30:	080232ec 	.word	0x080232ec
 8017d34:	0802349c 	.word	0x0802349c
 8017d38:	080234bc 	.word	0x080234bc
 8017d3c:	08017a4d 	.word	0x08017a4d

08017d40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8017d40:	b480      	push	{r7}
 8017d42:	b083      	sub	sp, #12
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	4603      	mov	r3, r0
 8017d48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8017d4a:	4b05      	ldr	r3, [pc, #20]	; (8017d60 <ptr_to_mem+0x20>)
 8017d4c:	681a      	ldr	r2, [r3, #0]
 8017d4e:	88fb      	ldrh	r3, [r7, #6]
 8017d50:	4413      	add	r3, r2
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	370c      	adds	r7, #12
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	20009064 	.word	0x20009064

08017d64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8017d64:	b480      	push	{r7}
 8017d66:	b083      	sub	sp, #12
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8017d6c:	4b05      	ldr	r3, [pc, #20]	; (8017d84 <mem_to_ptr+0x20>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	687a      	ldr	r2, [r7, #4]
 8017d72:	1ad3      	subs	r3, r2, r3
 8017d74:	b29b      	uxth	r3, r3
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	370c      	adds	r7, #12
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d80:	4770      	bx	lr
 8017d82:	bf00      	nop
 8017d84:	20009064 	.word	0x20009064

08017d88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017d88:	b590      	push	{r4, r7, lr}
 8017d8a:	b085      	sub	sp, #20
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017d90:	4b45      	ldr	r3, [pc, #276]	; (8017ea8 <plug_holes+0x120>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	687a      	ldr	r2, [r7, #4]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d206      	bcs.n	8017da8 <plug_holes+0x20>
 8017d9a:	4b44      	ldr	r3, [pc, #272]	; (8017eac <plug_holes+0x124>)
 8017d9c:	f240 12df 	movw	r2, #479	; 0x1df
 8017da0:	4943      	ldr	r1, [pc, #268]	; (8017eb0 <plug_holes+0x128>)
 8017da2:	4844      	ldr	r0, [pc, #272]	; (8017eb4 <plug_holes+0x12c>)
 8017da4:	f009 fd3a 	bl	802181c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017da8:	4b43      	ldr	r3, [pc, #268]	; (8017eb8 <plug_holes+0x130>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	687a      	ldr	r2, [r7, #4]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d306      	bcc.n	8017dc0 <plug_holes+0x38>
 8017db2:	4b3e      	ldr	r3, [pc, #248]	; (8017eac <plug_holes+0x124>)
 8017db4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017db8:	4940      	ldr	r1, [pc, #256]	; (8017ebc <plug_holes+0x134>)
 8017dba:	483e      	ldr	r0, [pc, #248]	; (8017eb4 <plug_holes+0x12c>)
 8017dbc:	f009 fd2e 	bl	802181c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	791b      	ldrb	r3, [r3, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d006      	beq.n	8017dd6 <plug_holes+0x4e>
 8017dc8:	4b38      	ldr	r3, [pc, #224]	; (8017eac <plug_holes+0x124>)
 8017dca:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017dce:	493c      	ldr	r1, [pc, #240]	; (8017ec0 <plug_holes+0x138>)
 8017dd0:	4838      	ldr	r0, [pc, #224]	; (8017eb4 <plug_holes+0x12c>)
 8017dd2:	f009 fd23 	bl	802181c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	881b      	ldrh	r3, [r3, #0]
 8017dda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017dde:	d906      	bls.n	8017dee <plug_holes+0x66>
 8017de0:	4b32      	ldr	r3, [pc, #200]	; (8017eac <plug_holes+0x124>)
 8017de2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8017de6:	4937      	ldr	r1, [pc, #220]	; (8017ec4 <plug_holes+0x13c>)
 8017de8:	4832      	ldr	r0, [pc, #200]	; (8017eb4 <plug_holes+0x12c>)
 8017dea:	f009 fd17 	bl	802181c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	881b      	ldrh	r3, [r3, #0]
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7ff ffa4 	bl	8017d40 <ptr_to_mem>
 8017df8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d024      	beq.n	8017e4c <plug_holes+0xc4>
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	791b      	ldrb	r3, [r3, #4]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d120      	bne.n	8017e4c <plug_holes+0xc4>
 8017e0a:	4b2b      	ldr	r3, [pc, #172]	; (8017eb8 <plug_holes+0x130>)
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	68fa      	ldr	r2, [r7, #12]
 8017e10:	429a      	cmp	r2, r3
 8017e12:	d01b      	beq.n	8017e4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8017e14:	4b2c      	ldr	r3, [pc, #176]	; (8017ec8 <plug_holes+0x140>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	68fa      	ldr	r2, [r7, #12]
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d102      	bne.n	8017e24 <plug_holes+0x9c>
      lfree = mem;
 8017e1e:	4a2a      	ldr	r2, [pc, #168]	; (8017ec8 <plug_holes+0x140>)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	881a      	ldrh	r2, [r3, #0]
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	881b      	ldrh	r3, [r3, #0]
 8017e30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017e34:	d00a      	beq.n	8017e4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	881b      	ldrh	r3, [r3, #0]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7ff ff80 	bl	8017d40 <ptr_to_mem>
 8017e40:	4604      	mov	r4, r0
 8017e42:	6878      	ldr	r0, [r7, #4]
 8017e44:	f7ff ff8e 	bl	8017d64 <mem_to_ptr>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	885b      	ldrh	r3, [r3, #2]
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7ff ff75 	bl	8017d40 <ptr_to_mem>
 8017e56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8017e58:	68ba      	ldr	r2, [r7, #8]
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	d01f      	beq.n	8017ea0 <plug_holes+0x118>
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	791b      	ldrb	r3, [r3, #4]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d11b      	bne.n	8017ea0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017e68:	4b17      	ldr	r3, [pc, #92]	; (8017ec8 <plug_holes+0x140>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	687a      	ldr	r2, [r7, #4]
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d102      	bne.n	8017e78 <plug_holes+0xf0>
      lfree = pmem;
 8017e72:	4a15      	ldr	r2, [pc, #84]	; (8017ec8 <plug_holes+0x140>)
 8017e74:	68bb      	ldr	r3, [r7, #8]
 8017e76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	881a      	ldrh	r2, [r3, #0]
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	881b      	ldrh	r3, [r3, #0]
 8017e84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017e88:	d00a      	beq.n	8017ea0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	881b      	ldrh	r3, [r3, #0]
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7ff ff56 	bl	8017d40 <ptr_to_mem>
 8017e94:	4604      	mov	r4, r0
 8017e96:	68b8      	ldr	r0, [r7, #8]
 8017e98:	f7ff ff64 	bl	8017d64 <mem_to_ptr>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8017ea0:	bf00      	nop
 8017ea2:	3714      	adds	r7, #20
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	bd90      	pop	{r4, r7, pc}
 8017ea8:	20009064 	.word	0x20009064
 8017eac:	080234cc 	.word	0x080234cc
 8017eb0:	08023544 	.word	0x08023544
 8017eb4:	0802355c 	.word	0x0802355c
 8017eb8:	20009068 	.word	0x20009068
 8017ebc:	08023584 	.word	0x08023584
 8017ec0:	080235a0 	.word	0x080235a0
 8017ec4:	080235bc 	.word	0x080235bc
 8017ec8:	20009070 	.word	0x20009070

08017ecc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8017ed2:	4b1f      	ldr	r3, [pc, #124]	; (8017f50 <mem_init+0x84>)
 8017ed4:	3303      	adds	r3, #3
 8017ed6:	f023 0303 	bic.w	r3, r3, #3
 8017eda:	461a      	mov	r2, r3
 8017edc:	4b1d      	ldr	r3, [pc, #116]	; (8017f54 <mem_init+0x88>)
 8017ede:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8017ee0:	4b1c      	ldr	r3, [pc, #112]	; (8017f54 <mem_init+0x88>)
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8017eec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8017efa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8017efe:	f7ff ff1f 	bl	8017d40 <ptr_to_mem>
 8017f02:	4603      	mov	r3, r0
 8017f04:	4a14      	ldr	r2, [pc, #80]	; (8017f58 <mem_init+0x8c>)
 8017f06:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8017f08:	4b13      	ldr	r3, [pc, #76]	; (8017f58 <mem_init+0x8c>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2201      	movs	r2, #1
 8017f0e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017f10:	4b11      	ldr	r3, [pc, #68]	; (8017f58 <mem_init+0x8c>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8017f18:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017f1a:	4b0f      	ldr	r3, [pc, #60]	; (8017f58 <mem_init+0x8c>)
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8017f22:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8017f24:	4b0b      	ldr	r3, [pc, #44]	; (8017f54 <mem_init+0x88>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	4a0c      	ldr	r2, [pc, #48]	; (8017f5c <mem_init+0x90>)
 8017f2a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017f2c:	480c      	ldr	r0, [pc, #48]	; (8017f60 <mem_init+0x94>)
 8017f2e:	f001 fda5 	bl	8019a7c <sys_mutex_new>
 8017f32:	4603      	mov	r3, r0
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d006      	beq.n	8017f46 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017f38:	4b0a      	ldr	r3, [pc, #40]	; (8017f64 <mem_init+0x98>)
 8017f3a:	f240 221f 	movw	r2, #543	; 0x21f
 8017f3e:	490a      	ldr	r1, [pc, #40]	; (8017f68 <mem_init+0x9c>)
 8017f40:	480a      	ldr	r0, [pc, #40]	; (8017f6c <mem_init+0xa0>)
 8017f42:	f009 fc6b 	bl	802181c <iprintf>
  }
}
 8017f46:	bf00      	nop
 8017f48:	3708      	adds	r7, #8
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	2000e858 	.word	0x2000e858
 8017f54:	20009064 	.word	0x20009064
 8017f58:	20009068 	.word	0x20009068
 8017f5c:	20009070 	.word	0x20009070
 8017f60:	2000906c 	.word	0x2000906c
 8017f64:	080234cc 	.word	0x080234cc
 8017f68:	080235e8 	.word	0x080235e8
 8017f6c:	0802355c 	.word	0x0802355c

08017f70 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b086      	sub	sp, #24
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f7ff fef3 	bl	8017d64 <mem_to_ptr>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	881b      	ldrh	r3, [r3, #0]
 8017f86:	4618      	mov	r0, r3
 8017f88:	f7ff feda 	bl	8017d40 <ptr_to_mem>
 8017f8c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	885b      	ldrh	r3, [r3, #2]
 8017f92:	4618      	mov	r0, r3
 8017f94:	f7ff fed4 	bl	8017d40 <ptr_to_mem>
 8017f98:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	881b      	ldrh	r3, [r3, #0]
 8017f9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017fa2:	d818      	bhi.n	8017fd6 <mem_link_valid+0x66>
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	885b      	ldrh	r3, [r3, #2]
 8017fa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017fac:	d813      	bhi.n	8017fd6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017fb2:	8afa      	ldrh	r2, [r7, #22]
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	d004      	beq.n	8017fc2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	881b      	ldrh	r3, [r3, #0]
 8017fbc:	8afa      	ldrh	r2, [r7, #22]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d109      	bne.n	8017fd6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017fc2:	4b08      	ldr	r3, [pc, #32]	; (8017fe4 <mem_link_valid+0x74>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017fc6:	693a      	ldr	r2, [r7, #16]
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	d006      	beq.n	8017fda <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017fcc:	693b      	ldr	r3, [r7, #16]
 8017fce:	885b      	ldrh	r3, [r3, #2]
 8017fd0:	8afa      	ldrh	r2, [r7, #22]
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d001      	beq.n	8017fda <mem_link_valid+0x6a>
    return 0;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	e000      	b.n	8017fdc <mem_link_valid+0x6c>
  }
  return 1;
 8017fda:	2301      	movs	r3, #1
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3718      	adds	r7, #24
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}
 8017fe4:	20009068 	.word	0x20009068

08017fe8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b088      	sub	sp, #32
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d070      	beq.n	80180d8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f003 0303 	and.w	r3, r3, #3
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d00d      	beq.n	801801c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8018000:	4b37      	ldr	r3, [pc, #220]	; (80180e0 <mem_free+0xf8>)
 8018002:	f240 2273 	movw	r2, #627	; 0x273
 8018006:	4937      	ldr	r1, [pc, #220]	; (80180e4 <mem_free+0xfc>)
 8018008:	4837      	ldr	r0, [pc, #220]	; (80180e8 <mem_free+0x100>)
 801800a:	f009 fc07 	bl	802181c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801800e:	f001 fd87 	bl	8019b20 <sys_arch_protect>
 8018012:	60f8      	str	r0, [r7, #12]
 8018014:	68f8      	ldr	r0, [r7, #12]
 8018016:	f001 fd91 	bl	8019b3c <sys_arch_unprotect>
    return;
 801801a:	e05e      	b.n	80180da <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	3b08      	subs	r3, #8
 8018020:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018022:	4b32      	ldr	r3, [pc, #200]	; (80180ec <mem_free+0x104>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	69fa      	ldr	r2, [r7, #28]
 8018028:	429a      	cmp	r2, r3
 801802a:	d306      	bcc.n	801803a <mem_free+0x52>
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	f103 020c 	add.w	r2, r3, #12
 8018032:	4b2f      	ldr	r3, [pc, #188]	; (80180f0 <mem_free+0x108>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	429a      	cmp	r2, r3
 8018038:	d90d      	bls.n	8018056 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801803a:	4b29      	ldr	r3, [pc, #164]	; (80180e0 <mem_free+0xf8>)
 801803c:	f240 227f 	movw	r2, #639	; 0x27f
 8018040:	492c      	ldr	r1, [pc, #176]	; (80180f4 <mem_free+0x10c>)
 8018042:	4829      	ldr	r0, [pc, #164]	; (80180e8 <mem_free+0x100>)
 8018044:	f009 fbea 	bl	802181c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018048:	f001 fd6a 	bl	8019b20 <sys_arch_protect>
 801804c:	6138      	str	r0, [r7, #16]
 801804e:	6938      	ldr	r0, [r7, #16]
 8018050:	f001 fd74 	bl	8019b3c <sys_arch_unprotect>
    return;
 8018054:	e041      	b.n	80180da <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018056:	4828      	ldr	r0, [pc, #160]	; (80180f8 <mem_free+0x110>)
 8018058:	f001 fd26 	bl	8019aa8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801805c:	69fb      	ldr	r3, [r7, #28]
 801805e:	791b      	ldrb	r3, [r3, #4]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d110      	bne.n	8018086 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8018064:	4b1e      	ldr	r3, [pc, #120]	; (80180e0 <mem_free+0xf8>)
 8018066:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801806a:	4924      	ldr	r1, [pc, #144]	; (80180fc <mem_free+0x114>)
 801806c:	481e      	ldr	r0, [pc, #120]	; (80180e8 <mem_free+0x100>)
 801806e:	f009 fbd5 	bl	802181c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018072:	4821      	ldr	r0, [pc, #132]	; (80180f8 <mem_free+0x110>)
 8018074:	f001 fd27 	bl	8019ac6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018078:	f001 fd52 	bl	8019b20 <sys_arch_protect>
 801807c:	6178      	str	r0, [r7, #20]
 801807e:	6978      	ldr	r0, [r7, #20]
 8018080:	f001 fd5c 	bl	8019b3c <sys_arch_unprotect>
    return;
 8018084:	e029      	b.n	80180da <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8018086:	69f8      	ldr	r0, [r7, #28]
 8018088:	f7ff ff72 	bl	8017f70 <mem_link_valid>
 801808c:	4603      	mov	r3, r0
 801808e:	2b00      	cmp	r3, #0
 8018090:	d110      	bne.n	80180b4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018092:	4b13      	ldr	r3, [pc, #76]	; (80180e0 <mem_free+0xf8>)
 8018094:	f240 2295 	movw	r2, #661	; 0x295
 8018098:	4919      	ldr	r1, [pc, #100]	; (8018100 <mem_free+0x118>)
 801809a:	4813      	ldr	r0, [pc, #76]	; (80180e8 <mem_free+0x100>)
 801809c:	f009 fbbe 	bl	802181c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80180a0:	4815      	ldr	r0, [pc, #84]	; (80180f8 <mem_free+0x110>)
 80180a2:	f001 fd10 	bl	8019ac6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80180a6:	f001 fd3b 	bl	8019b20 <sys_arch_protect>
 80180aa:	61b8      	str	r0, [r7, #24]
 80180ac:	69b8      	ldr	r0, [r7, #24]
 80180ae:	f001 fd45 	bl	8019b3c <sys_arch_unprotect>
    return;
 80180b2:	e012      	b.n	80180da <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80180b4:	69fb      	ldr	r3, [r7, #28]
 80180b6:	2200      	movs	r2, #0
 80180b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80180ba:	4b12      	ldr	r3, [pc, #72]	; (8018104 <mem_free+0x11c>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	69fa      	ldr	r2, [r7, #28]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d202      	bcs.n	80180ca <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80180c4:	4a0f      	ldr	r2, [pc, #60]	; (8018104 <mem_free+0x11c>)
 80180c6:	69fb      	ldr	r3, [r7, #28]
 80180c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80180ca:	69f8      	ldr	r0, [r7, #28]
 80180cc:	f7ff fe5c 	bl	8017d88 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80180d0:	4809      	ldr	r0, [pc, #36]	; (80180f8 <mem_free+0x110>)
 80180d2:	f001 fcf8 	bl	8019ac6 <sys_mutex_unlock>
 80180d6:	e000      	b.n	80180da <mem_free+0xf2>
    return;
 80180d8:	bf00      	nop
}
 80180da:	3720      	adds	r7, #32
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	080234cc 	.word	0x080234cc
 80180e4:	08023604 	.word	0x08023604
 80180e8:	0802355c 	.word	0x0802355c
 80180ec:	20009064 	.word	0x20009064
 80180f0:	20009068 	.word	0x20009068
 80180f4:	08023628 	.word	0x08023628
 80180f8:	2000906c 	.word	0x2000906c
 80180fc:	08023644 	.word	0x08023644
 8018100:	0802366c 	.word	0x0802366c
 8018104:	20009070 	.word	0x20009070

08018108 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b088      	sub	sp, #32
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
 8018110:	460b      	mov	r3, r1
 8018112:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018114:	887b      	ldrh	r3, [r7, #2]
 8018116:	3303      	adds	r3, #3
 8018118:	b29b      	uxth	r3, r3
 801811a:	f023 0303 	bic.w	r3, r3, #3
 801811e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8018120:	8bfb      	ldrh	r3, [r7, #30]
 8018122:	2b0b      	cmp	r3, #11
 8018124:	d801      	bhi.n	801812a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8018126:	230c      	movs	r3, #12
 8018128:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801812a:	8bfb      	ldrh	r3, [r7, #30]
 801812c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018130:	d803      	bhi.n	801813a <mem_trim+0x32>
 8018132:	8bfa      	ldrh	r2, [r7, #30]
 8018134:	887b      	ldrh	r3, [r7, #2]
 8018136:	429a      	cmp	r2, r3
 8018138:	d201      	bcs.n	801813e <mem_trim+0x36>
    return NULL;
 801813a:	2300      	movs	r3, #0
 801813c:	e0d8      	b.n	80182f0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801813e:	4b6e      	ldr	r3, [pc, #440]	; (80182f8 <mem_trim+0x1f0>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	687a      	ldr	r2, [r7, #4]
 8018144:	429a      	cmp	r2, r3
 8018146:	d304      	bcc.n	8018152 <mem_trim+0x4a>
 8018148:	4b6c      	ldr	r3, [pc, #432]	; (80182fc <mem_trim+0x1f4>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	687a      	ldr	r2, [r7, #4]
 801814e:	429a      	cmp	r2, r3
 8018150:	d306      	bcc.n	8018160 <mem_trim+0x58>
 8018152:	4b6b      	ldr	r3, [pc, #428]	; (8018300 <mem_trim+0x1f8>)
 8018154:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018158:	496a      	ldr	r1, [pc, #424]	; (8018304 <mem_trim+0x1fc>)
 801815a:	486b      	ldr	r0, [pc, #428]	; (8018308 <mem_trim+0x200>)
 801815c:	f009 fb5e 	bl	802181c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8018160:	4b65      	ldr	r3, [pc, #404]	; (80182f8 <mem_trim+0x1f0>)
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	687a      	ldr	r2, [r7, #4]
 8018166:	429a      	cmp	r2, r3
 8018168:	d304      	bcc.n	8018174 <mem_trim+0x6c>
 801816a:	4b64      	ldr	r3, [pc, #400]	; (80182fc <mem_trim+0x1f4>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	687a      	ldr	r2, [r7, #4]
 8018170:	429a      	cmp	r2, r3
 8018172:	d307      	bcc.n	8018184 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018174:	f001 fcd4 	bl	8019b20 <sys_arch_protect>
 8018178:	60b8      	str	r0, [r7, #8]
 801817a:	68b8      	ldr	r0, [r7, #8]
 801817c:	f001 fcde 	bl	8019b3c <sys_arch_unprotect>
    return rmem;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	e0b5      	b.n	80182f0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	3b08      	subs	r3, #8
 8018188:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801818a:	69b8      	ldr	r0, [r7, #24]
 801818c:	f7ff fdea 	bl	8017d64 <mem_to_ptr>
 8018190:	4603      	mov	r3, r0
 8018192:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8018194:	69bb      	ldr	r3, [r7, #24]
 8018196:	881a      	ldrh	r2, [r3, #0]
 8018198:	8afb      	ldrh	r3, [r7, #22]
 801819a:	1ad3      	subs	r3, r2, r3
 801819c:	b29b      	uxth	r3, r3
 801819e:	3b08      	subs	r3, #8
 80181a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80181a2:	8bfa      	ldrh	r2, [r7, #30]
 80181a4:	8abb      	ldrh	r3, [r7, #20]
 80181a6:	429a      	cmp	r2, r3
 80181a8:	d906      	bls.n	80181b8 <mem_trim+0xb0>
 80181aa:	4b55      	ldr	r3, [pc, #340]	; (8018300 <mem_trim+0x1f8>)
 80181ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80181b0:	4956      	ldr	r1, [pc, #344]	; (801830c <mem_trim+0x204>)
 80181b2:	4855      	ldr	r0, [pc, #340]	; (8018308 <mem_trim+0x200>)
 80181b4:	f009 fb32 	bl	802181c <iprintf>
  if (newsize > size) {
 80181b8:	8bfa      	ldrh	r2, [r7, #30]
 80181ba:	8abb      	ldrh	r3, [r7, #20]
 80181bc:	429a      	cmp	r2, r3
 80181be:	d901      	bls.n	80181c4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80181c0:	2300      	movs	r3, #0
 80181c2:	e095      	b.n	80182f0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80181c4:	8bfa      	ldrh	r2, [r7, #30]
 80181c6:	8abb      	ldrh	r3, [r7, #20]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d101      	bne.n	80181d0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	e08f      	b.n	80182f0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80181d0:	484f      	ldr	r0, [pc, #316]	; (8018310 <mem_trim+0x208>)
 80181d2:	f001 fc69 	bl	8019aa8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	881b      	ldrh	r3, [r3, #0]
 80181da:	4618      	mov	r0, r3
 80181dc:	f7ff fdb0 	bl	8017d40 <ptr_to_mem>
 80181e0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80181e2:	693b      	ldr	r3, [r7, #16]
 80181e4:	791b      	ldrb	r3, [r3, #4]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d13f      	bne.n	801826a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	881b      	ldrh	r3, [r3, #0]
 80181ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80181f2:	d106      	bne.n	8018202 <mem_trim+0xfa>
 80181f4:	4b42      	ldr	r3, [pc, #264]	; (8018300 <mem_trim+0x1f8>)
 80181f6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80181fa:	4946      	ldr	r1, [pc, #280]	; (8018314 <mem_trim+0x20c>)
 80181fc:	4842      	ldr	r0, [pc, #264]	; (8018308 <mem_trim+0x200>)
 80181fe:	f009 fb0d 	bl	802181c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8018202:	693b      	ldr	r3, [r7, #16]
 8018204:	881b      	ldrh	r3, [r3, #0]
 8018206:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018208:	8afa      	ldrh	r2, [r7, #22]
 801820a:	8bfb      	ldrh	r3, [r7, #30]
 801820c:	4413      	add	r3, r2
 801820e:	b29b      	uxth	r3, r3
 8018210:	3308      	adds	r3, #8
 8018212:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8018214:	4b40      	ldr	r3, [pc, #256]	; (8018318 <mem_trim+0x210>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	693a      	ldr	r2, [r7, #16]
 801821a:	429a      	cmp	r2, r3
 801821c:	d106      	bne.n	801822c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801821e:	89fb      	ldrh	r3, [r7, #14]
 8018220:	4618      	mov	r0, r3
 8018222:	f7ff fd8d 	bl	8017d40 <ptr_to_mem>
 8018226:	4603      	mov	r3, r0
 8018228:	4a3b      	ldr	r2, [pc, #236]	; (8018318 <mem_trim+0x210>)
 801822a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801822c:	89fb      	ldrh	r3, [r7, #14]
 801822e:	4618      	mov	r0, r3
 8018230:	f7ff fd86 	bl	8017d40 <ptr_to_mem>
 8018234:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8018236:	693b      	ldr	r3, [r7, #16]
 8018238:	2200      	movs	r2, #0
 801823a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801823c:	693b      	ldr	r3, [r7, #16]
 801823e:	89ba      	ldrh	r2, [r7, #12]
 8018240:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8018242:	693b      	ldr	r3, [r7, #16]
 8018244:	8afa      	ldrh	r2, [r7, #22]
 8018246:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8018248:	69bb      	ldr	r3, [r7, #24]
 801824a:	89fa      	ldrh	r2, [r7, #14]
 801824c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	881b      	ldrh	r3, [r3, #0]
 8018252:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018256:	d047      	beq.n	80182e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018258:	693b      	ldr	r3, [r7, #16]
 801825a:	881b      	ldrh	r3, [r3, #0]
 801825c:	4618      	mov	r0, r3
 801825e:	f7ff fd6f 	bl	8017d40 <ptr_to_mem>
 8018262:	4602      	mov	r2, r0
 8018264:	89fb      	ldrh	r3, [r7, #14]
 8018266:	8053      	strh	r3, [r2, #2]
 8018268:	e03e      	b.n	80182e8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801826a:	8bfb      	ldrh	r3, [r7, #30]
 801826c:	f103 0214 	add.w	r2, r3, #20
 8018270:	8abb      	ldrh	r3, [r7, #20]
 8018272:	429a      	cmp	r2, r3
 8018274:	d838      	bhi.n	80182e8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018276:	8afa      	ldrh	r2, [r7, #22]
 8018278:	8bfb      	ldrh	r3, [r7, #30]
 801827a:	4413      	add	r3, r2
 801827c:	b29b      	uxth	r3, r3
 801827e:	3308      	adds	r3, #8
 8018280:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	881b      	ldrh	r3, [r3, #0]
 8018286:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801828a:	d106      	bne.n	801829a <mem_trim+0x192>
 801828c:	4b1c      	ldr	r3, [pc, #112]	; (8018300 <mem_trim+0x1f8>)
 801828e:	f240 3216 	movw	r2, #790	; 0x316
 8018292:	4920      	ldr	r1, [pc, #128]	; (8018314 <mem_trim+0x20c>)
 8018294:	481c      	ldr	r0, [pc, #112]	; (8018308 <mem_trim+0x200>)
 8018296:	f009 fac1 	bl	802181c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801829a:	89fb      	ldrh	r3, [r7, #14]
 801829c:	4618      	mov	r0, r3
 801829e:	f7ff fd4f 	bl	8017d40 <ptr_to_mem>
 80182a2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80182a4:	4b1c      	ldr	r3, [pc, #112]	; (8018318 <mem_trim+0x210>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	693a      	ldr	r2, [r7, #16]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d202      	bcs.n	80182b4 <mem_trim+0x1ac>
      lfree = mem2;
 80182ae:	4a1a      	ldr	r2, [pc, #104]	; (8018318 <mem_trim+0x210>)
 80182b0:	693b      	ldr	r3, [r7, #16]
 80182b2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80182b4:	693b      	ldr	r3, [r7, #16]
 80182b6:	2200      	movs	r2, #0
 80182b8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80182ba:	69bb      	ldr	r3, [r7, #24]
 80182bc:	881a      	ldrh	r2, [r3, #0]
 80182be:	693b      	ldr	r3, [r7, #16]
 80182c0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	8afa      	ldrh	r2, [r7, #22]
 80182c6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80182c8:	69bb      	ldr	r3, [r7, #24]
 80182ca:	89fa      	ldrh	r2, [r7, #14]
 80182cc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80182ce:	693b      	ldr	r3, [r7, #16]
 80182d0:	881b      	ldrh	r3, [r3, #0]
 80182d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80182d6:	d007      	beq.n	80182e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	881b      	ldrh	r3, [r3, #0]
 80182dc:	4618      	mov	r0, r3
 80182de:	f7ff fd2f 	bl	8017d40 <ptr_to_mem>
 80182e2:	4602      	mov	r2, r0
 80182e4:	89fb      	ldrh	r3, [r7, #14]
 80182e6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80182e8:	4809      	ldr	r0, [pc, #36]	; (8018310 <mem_trim+0x208>)
 80182ea:	f001 fbec 	bl	8019ac6 <sys_mutex_unlock>
  return rmem;
 80182ee:	687b      	ldr	r3, [r7, #4]
}
 80182f0:	4618      	mov	r0, r3
 80182f2:	3720      	adds	r7, #32
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}
 80182f8:	20009064 	.word	0x20009064
 80182fc:	20009068 	.word	0x20009068
 8018300:	080234cc 	.word	0x080234cc
 8018304:	080236a0 	.word	0x080236a0
 8018308:	0802355c 	.word	0x0802355c
 801830c:	080236b8 	.word	0x080236b8
 8018310:	2000906c 	.word	0x2000906c
 8018314:	080236d8 	.word	0x080236d8
 8018318:	20009070 	.word	0x20009070

0801831c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b088      	sub	sp, #32
 8018320:	af00      	add	r7, sp, #0
 8018322:	4603      	mov	r3, r0
 8018324:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8018326:	88fb      	ldrh	r3, [r7, #6]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d101      	bne.n	8018330 <mem_malloc+0x14>
    return NULL;
 801832c:	2300      	movs	r3, #0
 801832e:	e0e2      	b.n	80184f6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8018330:	88fb      	ldrh	r3, [r7, #6]
 8018332:	3303      	adds	r3, #3
 8018334:	b29b      	uxth	r3, r3
 8018336:	f023 0303 	bic.w	r3, r3, #3
 801833a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801833c:	8bbb      	ldrh	r3, [r7, #28]
 801833e:	2b0b      	cmp	r3, #11
 8018340:	d801      	bhi.n	8018346 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8018342:	230c      	movs	r3, #12
 8018344:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8018346:	8bbb      	ldrh	r3, [r7, #28]
 8018348:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801834c:	d803      	bhi.n	8018356 <mem_malloc+0x3a>
 801834e:	8bba      	ldrh	r2, [r7, #28]
 8018350:	88fb      	ldrh	r3, [r7, #6]
 8018352:	429a      	cmp	r2, r3
 8018354:	d201      	bcs.n	801835a <mem_malloc+0x3e>
    return NULL;
 8018356:	2300      	movs	r3, #0
 8018358:	e0cd      	b.n	80184f6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801835a:	4869      	ldr	r0, [pc, #420]	; (8018500 <mem_malloc+0x1e4>)
 801835c:	f001 fba4 	bl	8019aa8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018360:	4b68      	ldr	r3, [pc, #416]	; (8018504 <mem_malloc+0x1e8>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	4618      	mov	r0, r3
 8018366:	f7ff fcfd 	bl	8017d64 <mem_to_ptr>
 801836a:	4603      	mov	r3, r0
 801836c:	83fb      	strh	r3, [r7, #30]
 801836e:	e0b7      	b.n	80184e0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8018370:	8bfb      	ldrh	r3, [r7, #30]
 8018372:	4618      	mov	r0, r3
 8018374:	f7ff fce4 	bl	8017d40 <ptr_to_mem>
 8018378:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	791b      	ldrb	r3, [r3, #4]
 801837e:	2b00      	cmp	r3, #0
 8018380:	f040 80a7 	bne.w	80184d2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8018384:	697b      	ldr	r3, [r7, #20]
 8018386:	881b      	ldrh	r3, [r3, #0]
 8018388:	461a      	mov	r2, r3
 801838a:	8bfb      	ldrh	r3, [r7, #30]
 801838c:	1ad3      	subs	r3, r2, r3
 801838e:	f1a3 0208 	sub.w	r2, r3, #8
 8018392:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8018394:	429a      	cmp	r2, r3
 8018396:	f0c0 809c 	bcc.w	80184d2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801839a:	697b      	ldr	r3, [r7, #20]
 801839c:	881b      	ldrh	r3, [r3, #0]
 801839e:	461a      	mov	r2, r3
 80183a0:	8bfb      	ldrh	r3, [r7, #30]
 80183a2:	1ad3      	subs	r3, r2, r3
 80183a4:	f1a3 0208 	sub.w	r2, r3, #8
 80183a8:	8bbb      	ldrh	r3, [r7, #28]
 80183aa:	3314      	adds	r3, #20
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d333      	bcc.n	8018418 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80183b0:	8bfa      	ldrh	r2, [r7, #30]
 80183b2:	8bbb      	ldrh	r3, [r7, #28]
 80183b4:	4413      	add	r3, r2
 80183b6:	b29b      	uxth	r3, r3
 80183b8:	3308      	adds	r3, #8
 80183ba:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80183bc:	8a7b      	ldrh	r3, [r7, #18]
 80183be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80183c2:	d106      	bne.n	80183d2 <mem_malloc+0xb6>
 80183c4:	4b50      	ldr	r3, [pc, #320]	; (8018508 <mem_malloc+0x1ec>)
 80183c6:	f240 3287 	movw	r2, #903	; 0x387
 80183ca:	4950      	ldr	r1, [pc, #320]	; (801850c <mem_malloc+0x1f0>)
 80183cc:	4850      	ldr	r0, [pc, #320]	; (8018510 <mem_malloc+0x1f4>)
 80183ce:	f009 fa25 	bl	802181c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80183d2:	8a7b      	ldrh	r3, [r7, #18]
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7ff fcb3 	bl	8017d40 <ptr_to_mem>
 80183da:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2200      	movs	r2, #0
 80183e0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	881a      	ldrh	r2, [r3, #0]
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	8bfa      	ldrh	r2, [r7, #30]
 80183ee:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	8a7a      	ldrh	r2, [r7, #18]
 80183f4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80183f6:	697b      	ldr	r3, [r7, #20]
 80183f8:	2201      	movs	r2, #1
 80183fa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	881b      	ldrh	r3, [r3, #0]
 8018400:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018404:	d00b      	beq.n	801841e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	881b      	ldrh	r3, [r3, #0]
 801840a:	4618      	mov	r0, r3
 801840c:	f7ff fc98 	bl	8017d40 <ptr_to_mem>
 8018410:	4602      	mov	r2, r0
 8018412:	8a7b      	ldrh	r3, [r7, #18]
 8018414:	8053      	strh	r3, [r2, #2]
 8018416:	e002      	b.n	801841e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	2201      	movs	r2, #1
 801841c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801841e:	4b39      	ldr	r3, [pc, #228]	; (8018504 <mem_malloc+0x1e8>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	697a      	ldr	r2, [r7, #20]
 8018424:	429a      	cmp	r2, r3
 8018426:	d127      	bne.n	8018478 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8018428:	4b36      	ldr	r3, [pc, #216]	; (8018504 <mem_malloc+0x1e8>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801842e:	e005      	b.n	801843c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8018430:	69bb      	ldr	r3, [r7, #24]
 8018432:	881b      	ldrh	r3, [r3, #0]
 8018434:	4618      	mov	r0, r3
 8018436:	f7ff fc83 	bl	8017d40 <ptr_to_mem>
 801843a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801843c:	69bb      	ldr	r3, [r7, #24]
 801843e:	791b      	ldrb	r3, [r3, #4]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d004      	beq.n	801844e <mem_malloc+0x132>
 8018444:	4b33      	ldr	r3, [pc, #204]	; (8018514 <mem_malloc+0x1f8>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	69ba      	ldr	r2, [r7, #24]
 801844a:	429a      	cmp	r2, r3
 801844c:	d1f0      	bne.n	8018430 <mem_malloc+0x114>
          }
          lfree = cur;
 801844e:	4a2d      	ldr	r2, [pc, #180]	; (8018504 <mem_malloc+0x1e8>)
 8018450:	69bb      	ldr	r3, [r7, #24]
 8018452:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8018454:	4b2b      	ldr	r3, [pc, #172]	; (8018504 <mem_malloc+0x1e8>)
 8018456:	681a      	ldr	r2, [r3, #0]
 8018458:	4b2e      	ldr	r3, [pc, #184]	; (8018514 <mem_malloc+0x1f8>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	429a      	cmp	r2, r3
 801845e:	d00b      	beq.n	8018478 <mem_malloc+0x15c>
 8018460:	4b28      	ldr	r3, [pc, #160]	; (8018504 <mem_malloc+0x1e8>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	791b      	ldrb	r3, [r3, #4]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d006      	beq.n	8018478 <mem_malloc+0x15c>
 801846a:	4b27      	ldr	r3, [pc, #156]	; (8018508 <mem_malloc+0x1ec>)
 801846c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8018470:	4929      	ldr	r1, [pc, #164]	; (8018518 <mem_malloc+0x1fc>)
 8018472:	4827      	ldr	r0, [pc, #156]	; (8018510 <mem_malloc+0x1f4>)
 8018474:	f009 f9d2 	bl	802181c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8018478:	4821      	ldr	r0, [pc, #132]	; (8018500 <mem_malloc+0x1e4>)
 801847a:	f001 fb24 	bl	8019ac6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801847e:	8bba      	ldrh	r2, [r7, #28]
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	4413      	add	r3, r2
 8018484:	3308      	adds	r3, #8
 8018486:	4a23      	ldr	r2, [pc, #140]	; (8018514 <mem_malloc+0x1f8>)
 8018488:	6812      	ldr	r2, [r2, #0]
 801848a:	4293      	cmp	r3, r2
 801848c:	d906      	bls.n	801849c <mem_malloc+0x180>
 801848e:	4b1e      	ldr	r3, [pc, #120]	; (8018508 <mem_malloc+0x1ec>)
 8018490:	f240 32b9 	movw	r2, #953	; 0x3b9
 8018494:	4921      	ldr	r1, [pc, #132]	; (801851c <mem_malloc+0x200>)
 8018496:	481e      	ldr	r0, [pc, #120]	; (8018510 <mem_malloc+0x1f4>)
 8018498:	f009 f9c0 	bl	802181c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	f003 0303 	and.w	r3, r3, #3
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d006      	beq.n	80184b4 <mem_malloc+0x198>
 80184a6:	4b18      	ldr	r3, [pc, #96]	; (8018508 <mem_malloc+0x1ec>)
 80184a8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80184ac:	491c      	ldr	r1, [pc, #112]	; (8018520 <mem_malloc+0x204>)
 80184ae:	4818      	ldr	r0, [pc, #96]	; (8018510 <mem_malloc+0x1f4>)
 80184b0:	f009 f9b4 	bl	802181c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	f003 0303 	and.w	r3, r3, #3
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d006      	beq.n	80184cc <mem_malloc+0x1b0>
 80184be:	4b12      	ldr	r3, [pc, #72]	; (8018508 <mem_malloc+0x1ec>)
 80184c0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80184c4:	4917      	ldr	r1, [pc, #92]	; (8018524 <mem_malloc+0x208>)
 80184c6:	4812      	ldr	r0, [pc, #72]	; (8018510 <mem_malloc+0x1f4>)
 80184c8:	f009 f9a8 	bl	802181c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80184cc:	697b      	ldr	r3, [r7, #20]
 80184ce:	3308      	adds	r3, #8
 80184d0:	e011      	b.n	80184f6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80184d2:	8bfb      	ldrh	r3, [r7, #30]
 80184d4:	4618      	mov	r0, r3
 80184d6:	f7ff fc33 	bl	8017d40 <ptr_to_mem>
 80184da:	4603      	mov	r3, r0
 80184dc:	881b      	ldrh	r3, [r3, #0]
 80184de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80184e0:	8bfa      	ldrh	r2, [r7, #30]
 80184e2:	8bbb      	ldrh	r3, [r7, #28]
 80184e4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80184e8:	429a      	cmp	r2, r3
 80184ea:	f4ff af41 	bcc.w	8018370 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80184ee:	4804      	ldr	r0, [pc, #16]	; (8018500 <mem_malloc+0x1e4>)
 80184f0:	f001 fae9 	bl	8019ac6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80184f4:	2300      	movs	r3, #0
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3720      	adds	r7, #32
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
 80184fe:	bf00      	nop
 8018500:	2000906c 	.word	0x2000906c
 8018504:	20009070 	.word	0x20009070
 8018508:	080234cc 	.word	0x080234cc
 801850c:	080236d8 	.word	0x080236d8
 8018510:	0802355c 	.word	0x0802355c
 8018514:	20009068 	.word	0x20009068
 8018518:	080236ec 	.word	0x080236ec
 801851c:	08023708 	.word	0x08023708
 8018520:	08023738 	.word	0x08023738
 8018524:	08023768 	.word	0x08023768

08018528 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8018528:	b480      	push	{r7}
 801852a:	b085      	sub	sp, #20
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	689b      	ldr	r3, [r3, #8]
 8018534:	2200      	movs	r2, #0
 8018536:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	685b      	ldr	r3, [r3, #4]
 801853c:	3303      	adds	r3, #3
 801853e:	f023 0303 	bic.w	r3, r3, #3
 8018542:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8018544:	2300      	movs	r3, #0
 8018546:	60fb      	str	r3, [r7, #12]
 8018548:	e011      	b.n	801856e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	689b      	ldr	r3, [r3, #8]
 801854e:	681a      	ldr	r2, [r3, #0]
 8018550:	68bb      	ldr	r3, [r7, #8]
 8018552:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	689b      	ldr	r3, [r3, #8]
 8018558:	68ba      	ldr	r2, [r7, #8]
 801855a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	881b      	ldrh	r3, [r3, #0]
 8018560:	461a      	mov	r2, r3
 8018562:	68bb      	ldr	r3, [r7, #8]
 8018564:	4413      	add	r3, r2
 8018566:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	3301      	adds	r3, #1
 801856c:	60fb      	str	r3, [r7, #12]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	885b      	ldrh	r3, [r3, #2]
 8018572:	461a      	mov	r2, r3
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	4293      	cmp	r3, r2
 8018578:	dbe7      	blt.n	801854a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801857a:	bf00      	nop
 801857c:	bf00      	nop
 801857e:	3714      	adds	r7, #20
 8018580:	46bd      	mov	sp, r7
 8018582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018586:	4770      	bx	lr

08018588 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b082      	sub	sp, #8
 801858c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801858e:	2300      	movs	r3, #0
 8018590:	80fb      	strh	r3, [r7, #6]
 8018592:	e009      	b.n	80185a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8018594:	88fb      	ldrh	r3, [r7, #6]
 8018596:	4a08      	ldr	r2, [pc, #32]	; (80185b8 <memp_init+0x30>)
 8018598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801859c:	4618      	mov	r0, r3
 801859e:	f7ff ffc3 	bl	8018528 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80185a2:	88fb      	ldrh	r3, [r7, #6]
 80185a4:	3301      	adds	r3, #1
 80185a6:	80fb      	strh	r3, [r7, #6]
 80185a8:	88fb      	ldrh	r3, [r7, #6]
 80185aa:	2b0c      	cmp	r3, #12
 80185ac:	d9f2      	bls.n	8018594 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80185ae:	bf00      	nop
 80185b0:	bf00      	nop
 80185b2:	3708      	adds	r7, #8
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}
 80185b8:	08025c94 	.word	0x08025c94

080185bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b084      	sub	sp, #16
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80185c4:	f001 faac 	bl	8019b20 <sys_arch_protect>
 80185c8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	689b      	ldr	r3, [r3, #8]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d015      	beq.n	8018604 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	689b      	ldr	r3, [r3, #8]
 80185dc:	68ba      	ldr	r2, [r7, #8]
 80185de:	6812      	ldr	r2, [r2, #0]
 80185e0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	f003 0303 	and.w	r3, r3, #3
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d006      	beq.n	80185fa <do_memp_malloc_pool+0x3e>
 80185ec:	4b09      	ldr	r3, [pc, #36]	; (8018614 <do_memp_malloc_pool+0x58>)
 80185ee:	f44f 728c 	mov.w	r2, #280	; 0x118
 80185f2:	4909      	ldr	r1, [pc, #36]	; (8018618 <do_memp_malloc_pool+0x5c>)
 80185f4:	4809      	ldr	r0, [pc, #36]	; (801861c <do_memp_malloc_pool+0x60>)
 80185f6:	f009 f911 	bl	802181c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80185fa:	68f8      	ldr	r0, [r7, #12]
 80185fc:	f001 fa9e 	bl	8019b3c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8018600:	68bb      	ldr	r3, [r7, #8]
 8018602:	e003      	b.n	801860c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018604:	68f8      	ldr	r0, [r7, #12]
 8018606:	f001 fa99 	bl	8019b3c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801860a:	2300      	movs	r3, #0
}
 801860c:	4618      	mov	r0, r3
 801860e:	3710      	adds	r7, #16
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}
 8018614:	0802378c 	.word	0x0802378c
 8018618:	08023804 	.word	0x08023804
 801861c:	08023828 	.word	0x08023828

08018620 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b084      	sub	sp, #16
 8018624:	af00      	add	r7, sp, #0
 8018626:	4603      	mov	r3, r0
 8018628:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801862a:	79fb      	ldrb	r3, [r7, #7]
 801862c:	2b0c      	cmp	r3, #12
 801862e:	d908      	bls.n	8018642 <memp_malloc+0x22>
 8018630:	4b0a      	ldr	r3, [pc, #40]	; (801865c <memp_malloc+0x3c>)
 8018632:	f240 1257 	movw	r2, #343	; 0x157
 8018636:	490a      	ldr	r1, [pc, #40]	; (8018660 <memp_malloc+0x40>)
 8018638:	480a      	ldr	r0, [pc, #40]	; (8018664 <memp_malloc+0x44>)
 801863a:	f009 f8ef 	bl	802181c <iprintf>
 801863e:	2300      	movs	r3, #0
 8018640:	e008      	b.n	8018654 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8018642:	79fb      	ldrb	r3, [r7, #7]
 8018644:	4a08      	ldr	r2, [pc, #32]	; (8018668 <memp_malloc+0x48>)
 8018646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801864a:	4618      	mov	r0, r3
 801864c:	f7ff ffb6 	bl	80185bc <do_memp_malloc_pool>
 8018650:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8018652:	68fb      	ldr	r3, [r7, #12]
}
 8018654:	4618      	mov	r0, r3
 8018656:	3710      	adds	r7, #16
 8018658:	46bd      	mov	sp, r7
 801865a:	bd80      	pop	{r7, pc}
 801865c:	0802378c 	.word	0x0802378c
 8018660:	08023864 	.word	0x08023864
 8018664:	08023828 	.word	0x08023828
 8018668:	08025c94 	.word	0x08025c94

0801866c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b084      	sub	sp, #16
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
 8018674:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	f003 0303 	and.w	r3, r3, #3
 801867c:	2b00      	cmp	r3, #0
 801867e:	d006      	beq.n	801868e <do_memp_free_pool+0x22>
 8018680:	4b0d      	ldr	r3, [pc, #52]	; (80186b8 <do_memp_free_pool+0x4c>)
 8018682:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8018686:	490d      	ldr	r1, [pc, #52]	; (80186bc <do_memp_free_pool+0x50>)
 8018688:	480d      	ldr	r0, [pc, #52]	; (80186c0 <do_memp_free_pool+0x54>)
 801868a:	f009 f8c7 	bl	802181c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8018692:	f001 fa45 	bl	8019b20 <sys_arch_protect>
 8018696:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	689b      	ldr	r3, [r3, #8]
 801869c:	681a      	ldr	r2, [r3, #0]
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	689b      	ldr	r3, [r3, #8]
 80186a6:	68fa      	ldr	r2, [r7, #12]
 80186a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80186aa:	68b8      	ldr	r0, [r7, #8]
 80186ac:	f001 fa46 	bl	8019b3c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80186b0:	bf00      	nop
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	0802378c 	.word	0x0802378c
 80186bc:	08023884 	.word	0x08023884
 80186c0:	08023828 	.word	0x08023828

080186c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	4603      	mov	r3, r0
 80186cc:	6039      	str	r1, [r7, #0]
 80186ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80186d0:	79fb      	ldrb	r3, [r7, #7]
 80186d2:	2b0c      	cmp	r3, #12
 80186d4:	d907      	bls.n	80186e6 <memp_free+0x22>
 80186d6:	4b0c      	ldr	r3, [pc, #48]	; (8018708 <memp_free+0x44>)
 80186d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80186dc:	490b      	ldr	r1, [pc, #44]	; (801870c <memp_free+0x48>)
 80186de:	480c      	ldr	r0, [pc, #48]	; (8018710 <memp_free+0x4c>)
 80186e0:	f009 f89c 	bl	802181c <iprintf>
 80186e4:	e00c      	b.n	8018700 <memp_free+0x3c>

  if (mem == NULL) {
 80186e6:	683b      	ldr	r3, [r7, #0]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d008      	beq.n	80186fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80186ec:	79fb      	ldrb	r3, [r7, #7]
 80186ee:	4a09      	ldr	r2, [pc, #36]	; (8018714 <memp_free+0x50>)
 80186f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80186f4:	6839      	ldr	r1, [r7, #0]
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7ff ffb8 	bl	801866c <do_memp_free_pool>
 80186fc:	e000      	b.n	8018700 <memp_free+0x3c>
    return;
 80186fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8018700:	3708      	adds	r7, #8
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	0802378c 	.word	0x0802378c
 801870c:	080238a4 	.word	0x080238a4
 8018710:	08023828 	.word	0x08023828
 8018714:	08025c94 	.word	0x08025c94

08018718 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8018718:	b480      	push	{r7}
 801871a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801871c:	bf00      	nop
 801871e:	46bd      	mov	sp, r7
 8018720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018724:	4770      	bx	lr
	...

08018728 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b086      	sub	sp, #24
 801872c:	af00      	add	r7, sp, #0
 801872e:	60f8      	str	r0, [r7, #12]
 8018730:	60b9      	str	r1, [r7, #8]
 8018732:	607a      	str	r2, [r7, #4]
 8018734:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d108      	bne.n	801874e <netif_add+0x26>
 801873c:	4b5b      	ldr	r3, [pc, #364]	; (80188ac <netif_add+0x184>)
 801873e:	f240 1227 	movw	r2, #295	; 0x127
 8018742:	495b      	ldr	r1, [pc, #364]	; (80188b0 <netif_add+0x188>)
 8018744:	485b      	ldr	r0, [pc, #364]	; (80188b4 <netif_add+0x18c>)
 8018746:	f009 f869 	bl	802181c <iprintf>
 801874a:	2300      	movs	r3, #0
 801874c:	e0a9      	b.n	80188a2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018750:	2b00      	cmp	r3, #0
 8018752:	d108      	bne.n	8018766 <netif_add+0x3e>
 8018754:	4b55      	ldr	r3, [pc, #340]	; (80188ac <netif_add+0x184>)
 8018756:	f44f 7294 	mov.w	r2, #296	; 0x128
 801875a:	4957      	ldr	r1, [pc, #348]	; (80188b8 <netif_add+0x190>)
 801875c:	4855      	ldr	r0, [pc, #340]	; (80188b4 <netif_add+0x18c>)
 801875e:	f009 f85d 	bl	802181c <iprintf>
 8018762:	2300      	movs	r3, #0
 8018764:	e09d      	b.n	80188a2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	2b00      	cmp	r3, #0
 801876a:	d101      	bne.n	8018770 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801876c:	4b53      	ldr	r3, [pc, #332]	; (80188bc <netif_add+0x194>)
 801876e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d101      	bne.n	801877a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8018776:	4b51      	ldr	r3, [pc, #324]	; (80188bc <netif_add+0x194>)
 8018778:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d101      	bne.n	8018784 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8018780:	4b4e      	ldr	r3, [pc, #312]	; (80188bc <netif_add+0x194>)
 8018782:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2200      	movs	r2, #0
 8018788:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	2200      	movs	r2, #0
 801878e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	2200      	movs	r2, #0
 8018794:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	4a49      	ldr	r2, [pc, #292]	; (80188c0 <netif_add+0x198>)
 801879a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	2200      	movs	r2, #0
 80187a0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	2200      	movs	r2, #0
 80187a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	3324      	adds	r3, #36	; 0x24
 80187ae:	2204      	movs	r2, #4
 80187b0:	2100      	movs	r1, #0
 80187b2:	4618      	mov	r0, r3
 80187b4:	f008 ff80 	bl	80216b8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	2200      	movs	r2, #0
 80187bc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	6a3a      	ldr	r2, [r7, #32]
 80187c2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80187c4:	4b3f      	ldr	r3, [pc, #252]	; (80188c4 <netif_add+0x19c>)
 80187c6:	781a      	ldrb	r2, [r3, #0]
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187d2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	687a      	ldr	r2, [r7, #4]
 80187d8:	68b9      	ldr	r1, [r7, #8]
 80187da:	68f8      	ldr	r0, [r7, #12]
 80187dc:	f000 f914 	bl	8018a08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	68f8      	ldr	r0, [r7, #12]
 80187e4:	4798      	blx	r3
 80187e6:	4603      	mov	r3, r0
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d001      	beq.n	80187f0 <netif_add+0xc8>
    return NULL;
 80187ec:	2300      	movs	r3, #0
 80187ee:	e058      	b.n	80188a2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80187f6:	2bff      	cmp	r3, #255	; 0xff
 80187f8:	d103      	bne.n	8018802 <netif_add+0xda>
        netif->num = 0;
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	2200      	movs	r2, #0
 80187fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8018802:	2300      	movs	r3, #0
 8018804:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018806:	4b30      	ldr	r3, [pc, #192]	; (80188c8 <netif_add+0x1a0>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	617b      	str	r3, [r7, #20]
 801880c:	e02b      	b.n	8018866 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801880e:	697a      	ldr	r2, [r7, #20]
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	429a      	cmp	r2, r3
 8018814:	d106      	bne.n	8018824 <netif_add+0xfc>
 8018816:	4b25      	ldr	r3, [pc, #148]	; (80188ac <netif_add+0x184>)
 8018818:	f240 128b 	movw	r2, #395	; 0x18b
 801881c:	492b      	ldr	r1, [pc, #172]	; (80188cc <netif_add+0x1a4>)
 801881e:	4825      	ldr	r0, [pc, #148]	; (80188b4 <netif_add+0x18c>)
 8018820:	f008 fffc 	bl	802181c <iprintf>
        num_netifs++;
 8018824:	693b      	ldr	r3, [r7, #16]
 8018826:	3301      	adds	r3, #1
 8018828:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	2bff      	cmp	r3, #255	; 0xff
 801882e:	dd06      	ble.n	801883e <netif_add+0x116>
 8018830:	4b1e      	ldr	r3, [pc, #120]	; (80188ac <netif_add+0x184>)
 8018832:	f240 128d 	movw	r2, #397	; 0x18d
 8018836:	4926      	ldr	r1, [pc, #152]	; (80188d0 <netif_add+0x1a8>)
 8018838:	481e      	ldr	r0, [pc, #120]	; (80188b4 <netif_add+0x18c>)
 801883a:	f008 ffef 	bl	802181c <iprintf>
        if (netif2->num == netif->num) {
 801883e:	697b      	ldr	r3, [r7, #20]
 8018840:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801884a:	429a      	cmp	r2, r3
 801884c:	d108      	bne.n	8018860 <netif_add+0x138>
          netif->num++;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018854:	3301      	adds	r3, #1
 8018856:	b2da      	uxtb	r2, r3
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801885e:	e005      	b.n	801886c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	617b      	str	r3, [r7, #20]
 8018866:	697b      	ldr	r3, [r7, #20]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d1d0      	bne.n	801880e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 801886c:	697b      	ldr	r3, [r7, #20]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d1be      	bne.n	80187f0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018878:	2bfe      	cmp	r3, #254	; 0xfe
 801887a:	d103      	bne.n	8018884 <netif_add+0x15c>
    netif_num = 0;
 801887c:	4b11      	ldr	r3, [pc, #68]	; (80188c4 <netif_add+0x19c>)
 801887e:	2200      	movs	r2, #0
 8018880:	701a      	strb	r2, [r3, #0]
 8018882:	e006      	b.n	8018892 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801888a:	3301      	adds	r3, #1
 801888c:	b2da      	uxtb	r2, r3
 801888e:	4b0d      	ldr	r3, [pc, #52]	; (80188c4 <netif_add+0x19c>)
 8018890:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8018892:	4b0d      	ldr	r3, [pc, #52]	; (80188c8 <netif_add+0x1a0>)
 8018894:	681a      	ldr	r2, [r3, #0]
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801889a:	4a0b      	ldr	r2, [pc, #44]	; (80188c8 <netif_add+0x1a0>)
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80188a0:	68fb      	ldr	r3, [r7, #12]
}
 80188a2:	4618      	mov	r0, r3
 80188a4:	3718      	adds	r7, #24
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bd80      	pop	{r7, pc}
 80188aa:	bf00      	nop
 80188ac:	080238c0 	.word	0x080238c0
 80188b0:	08023998 	.word	0x08023998
 80188b4:	08023954 	.word	0x08023954
 80188b8:	080239b4 	.word	0x080239b4
 80188bc:	08025bf0 	.word	0x08025bf0
 80188c0:	08018ceb 	.word	0x08018ceb
 80188c4:	200090a8 	.word	0x200090a8
 80188c8:	20011f64 	.word	0x20011f64
 80188cc:	080239d8 	.word	0x080239d8
 80188d0:	080239ec 	.word	0x080239ec

080188d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
 80188dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80188de:	6839      	ldr	r1, [r7, #0]
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f002 fc83 	bl	801b1ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80188e6:	6839      	ldr	r1, [r7, #0]
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	f007 fa37 	bl	801fd5c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80188ee:	bf00      	nop
 80188f0:	3708      	adds	r7, #8
 80188f2:	46bd      	mov	sp, r7
 80188f4:	bd80      	pop	{r7, pc}
	...

080188f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b086      	sub	sp, #24
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	60f8      	str	r0, [r7, #12]
 8018900:	60b9      	str	r1, [r7, #8]
 8018902:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d106      	bne.n	8018918 <netif_do_set_ipaddr+0x20>
 801890a:	4b1d      	ldr	r3, [pc, #116]	; (8018980 <netif_do_set_ipaddr+0x88>)
 801890c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8018910:	491c      	ldr	r1, [pc, #112]	; (8018984 <netif_do_set_ipaddr+0x8c>)
 8018912:	481d      	ldr	r0, [pc, #116]	; (8018988 <netif_do_set_ipaddr+0x90>)
 8018914:	f008 ff82 	bl	802181c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d106      	bne.n	801892c <netif_do_set_ipaddr+0x34>
 801891e:	4b18      	ldr	r3, [pc, #96]	; (8018980 <netif_do_set_ipaddr+0x88>)
 8018920:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8018924:	4917      	ldr	r1, [pc, #92]	; (8018984 <netif_do_set_ipaddr+0x8c>)
 8018926:	4818      	ldr	r0, [pc, #96]	; (8018988 <netif_do_set_ipaddr+0x90>)
 8018928:	f008 ff78 	bl	802181c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801892c:	68bb      	ldr	r3, [r7, #8]
 801892e:	681a      	ldr	r2, [r3, #0]
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	3304      	adds	r3, #4
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	429a      	cmp	r2, r3
 8018938:	d01c      	beq.n	8018974 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	3304      	adds	r3, #4
 8018944:	681a      	ldr	r2, [r3, #0]
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801894a:	f107 0314 	add.w	r3, r7, #20
 801894e:	4619      	mov	r1, r3
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f7ff ffbf 	bl	80188d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d002      	beq.n	8018962 <netif_do_set_ipaddr+0x6a>
 801895c:	68bb      	ldr	r3, [r7, #8]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	e000      	b.n	8018964 <netif_do_set_ipaddr+0x6c>
 8018962:	2300      	movs	r3, #0
 8018964:	68fa      	ldr	r2, [r7, #12]
 8018966:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8018968:	2101      	movs	r1, #1
 801896a:	68f8      	ldr	r0, [r7, #12]
 801896c:	f000 f8d2 	bl	8018b14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8018970:	2301      	movs	r3, #1
 8018972:	e000      	b.n	8018976 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8018974:	2300      	movs	r3, #0
}
 8018976:	4618      	mov	r0, r3
 8018978:	3718      	adds	r7, #24
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}
 801897e:	bf00      	nop
 8018980:	080238c0 	.word	0x080238c0
 8018984:	08023a1c 	.word	0x08023a1c
 8018988:	08023954 	.word	0x08023954

0801898c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801898c:	b480      	push	{r7}
 801898e:	b085      	sub	sp, #20
 8018990:	af00      	add	r7, sp, #0
 8018992:	60f8      	str	r0, [r7, #12]
 8018994:	60b9      	str	r1, [r7, #8]
 8018996:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	681a      	ldr	r2, [r3, #0]
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	3308      	adds	r3, #8
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d00a      	beq.n	80189bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80189a6:	68bb      	ldr	r3, [r7, #8]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d002      	beq.n	80189b2 <netif_do_set_netmask+0x26>
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	e000      	b.n	80189b4 <netif_do_set_netmask+0x28>
 80189b2:	2300      	movs	r3, #0
 80189b4:	68fa      	ldr	r2, [r7, #12]
 80189b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80189b8:	2301      	movs	r3, #1
 80189ba:	e000      	b.n	80189be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80189bc:	2300      	movs	r3, #0
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3714      	adds	r7, #20
 80189c2:	46bd      	mov	sp, r7
 80189c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c8:	4770      	bx	lr

080189ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80189ca:	b480      	push	{r7}
 80189cc:	b085      	sub	sp, #20
 80189ce:	af00      	add	r7, sp, #0
 80189d0:	60f8      	str	r0, [r7, #12]
 80189d2:	60b9      	str	r1, [r7, #8]
 80189d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80189d6:	68bb      	ldr	r3, [r7, #8]
 80189d8:	681a      	ldr	r2, [r3, #0]
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	330c      	adds	r3, #12
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d00a      	beq.n	80189fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80189e4:	68bb      	ldr	r3, [r7, #8]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d002      	beq.n	80189f0 <netif_do_set_gw+0x26>
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	e000      	b.n	80189f2 <netif_do_set_gw+0x28>
 80189f0:	2300      	movs	r3, #0
 80189f2:	68fa      	ldr	r2, [r7, #12]
 80189f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80189f6:	2301      	movs	r3, #1
 80189f8:	e000      	b.n	80189fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80189fa:	2300      	movs	r3, #0
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	3714      	adds	r7, #20
 8018a00:	46bd      	mov	sp, r7
 8018a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a06:	4770      	bx	lr

08018a08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b088      	sub	sp, #32
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	60f8      	str	r0, [r7, #12]
 8018a10:	60b9      	str	r1, [r7, #8]
 8018a12:	607a      	str	r2, [r7, #4]
 8018a14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8018a16:	2300      	movs	r3, #0
 8018a18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d101      	bne.n	8018a28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8018a24:	4b1c      	ldr	r3, [pc, #112]	; (8018a98 <netif_set_addr+0x90>)
 8018a26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d101      	bne.n	8018a32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8018a2e:	4b1a      	ldr	r3, [pc, #104]	; (8018a98 <netif_set_addr+0x90>)
 8018a30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018a32:	683b      	ldr	r3, [r7, #0]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d101      	bne.n	8018a3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8018a38:	4b17      	ldr	r3, [pc, #92]	; (8018a98 <netif_set_addr+0x90>)
 8018a3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d003      	beq.n	8018a4a <netif_set_addr+0x42>
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d101      	bne.n	8018a4e <netif_set_addr+0x46>
 8018a4a:	2301      	movs	r3, #1
 8018a4c:	e000      	b.n	8018a50 <netif_set_addr+0x48>
 8018a4e:	2300      	movs	r3, #0
 8018a50:	617b      	str	r3, [r7, #20]
  if (remove) {
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d006      	beq.n	8018a66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018a58:	f107 0310 	add.w	r3, r7, #16
 8018a5c:	461a      	mov	r2, r3
 8018a5e:	68b9      	ldr	r1, [r7, #8]
 8018a60:	68f8      	ldr	r0, [r7, #12]
 8018a62:	f7ff ff49 	bl	80188f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8018a66:	69fa      	ldr	r2, [r7, #28]
 8018a68:	6879      	ldr	r1, [r7, #4]
 8018a6a:	68f8      	ldr	r0, [r7, #12]
 8018a6c:	f7ff ff8e 	bl	801898c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8018a70:	69ba      	ldr	r2, [r7, #24]
 8018a72:	6839      	ldr	r1, [r7, #0]
 8018a74:	68f8      	ldr	r0, [r7, #12]
 8018a76:	f7ff ffa8 	bl	80189ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d106      	bne.n	8018a8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018a80:	f107 0310 	add.w	r3, r7, #16
 8018a84:	461a      	mov	r2, r3
 8018a86:	68b9      	ldr	r1, [r7, #8]
 8018a88:	68f8      	ldr	r0, [r7, #12]
 8018a8a:	f7ff ff35 	bl	80188f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8018a8e:	bf00      	nop
 8018a90:	3720      	adds	r7, #32
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}
 8018a96:	bf00      	nop
 8018a98:	08025bf0 	.word	0x08025bf0

08018a9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8018a9c:	b480      	push	{r7}
 8018a9e:	b083      	sub	sp, #12
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8018aa4:	4a04      	ldr	r2, [pc, #16]	; (8018ab8 <netif_set_default+0x1c>)
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8018aaa:	bf00      	nop
 8018aac:	370c      	adds	r7, #12
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab4:	4770      	bx	lr
 8018ab6:	bf00      	nop
 8018ab8:	20011f68 	.word	0x20011f68

08018abc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d107      	bne.n	8018ada <netif_set_up+0x1e>
 8018aca:	4b0f      	ldr	r3, [pc, #60]	; (8018b08 <netif_set_up+0x4c>)
 8018acc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8018ad0:	490e      	ldr	r1, [pc, #56]	; (8018b0c <netif_set_up+0x50>)
 8018ad2:	480f      	ldr	r0, [pc, #60]	; (8018b10 <netif_set_up+0x54>)
 8018ad4:	f008 fea2 	bl	802181c <iprintf>
 8018ad8:	e013      	b.n	8018b02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018ae0:	f003 0301 	and.w	r3, r3, #1
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d10c      	bne.n	8018b02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018aee:	f043 0301 	orr.w	r3, r3, #1
 8018af2:	b2da      	uxtb	r2, r3
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018afa:	2103      	movs	r1, #3
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f000 f809 	bl	8018b14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8018b02:	3708      	adds	r7, #8
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	080238c0 	.word	0x080238c0
 8018b0c:	08023a8c 	.word	0x08023a8c
 8018b10:	08023954 	.word	0x08023954

08018b14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	460b      	mov	r3, r1
 8018b1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d106      	bne.n	8018b34 <netif_issue_reports+0x20>
 8018b26:	4b18      	ldr	r3, [pc, #96]	; (8018b88 <netif_issue_reports+0x74>)
 8018b28:	f240 326d 	movw	r2, #877	; 0x36d
 8018b2c:	4917      	ldr	r1, [pc, #92]	; (8018b8c <netif_issue_reports+0x78>)
 8018b2e:	4818      	ldr	r0, [pc, #96]	; (8018b90 <netif_issue_reports+0x7c>)
 8018b30:	f008 fe74 	bl	802181c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b3a:	f003 0304 	and.w	r3, r3, #4
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d01e      	beq.n	8018b80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d017      	beq.n	8018b80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018b50:	78fb      	ldrb	r3, [r7, #3]
 8018b52:	f003 0301 	and.w	r3, r3, #1
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d013      	beq.n	8018b82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	3304      	adds	r3, #4
 8018b5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d00e      	beq.n	8018b82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b6a:	f003 0308 	and.w	r3, r3, #8
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d007      	beq.n	8018b82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	3304      	adds	r3, #4
 8018b76:	4619      	mov	r1, r3
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f7fd fd25 	bl	80165c8 <etharp_request>
 8018b7e:	e000      	b.n	8018b82 <netif_issue_reports+0x6e>
    return;
 8018b80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8018b82:	3708      	adds	r7, #8
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	080238c0 	.word	0x080238c0
 8018b8c:	08023aa8 	.word	0x08023aa8
 8018b90:	08023954 	.word	0x08023954

08018b94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d107      	bne.n	8018bb2 <netif_set_down+0x1e>
 8018ba2:	4b12      	ldr	r3, [pc, #72]	; (8018bec <netif_set_down+0x58>)
 8018ba4:	f240 329b 	movw	r2, #923	; 0x39b
 8018ba8:	4911      	ldr	r1, [pc, #68]	; (8018bf0 <netif_set_down+0x5c>)
 8018baa:	4812      	ldr	r0, [pc, #72]	; (8018bf4 <netif_set_down+0x60>)
 8018bac:	f008 fe36 	bl	802181c <iprintf>
 8018bb0:	e019      	b.n	8018be6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bb8:	f003 0301 	and.w	r3, r3, #1
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d012      	beq.n	8018be6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bc6:	f023 0301 	bic.w	r3, r3, #1
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bd8:	f003 0308 	and.w	r3, r3, #8
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d002      	beq.n	8018be6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8018be0:	6878      	ldr	r0, [r7, #4]
 8018be2:	f7fd f8ab 	bl	8015d3c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8018be6:	3708      	adds	r7, #8
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}
 8018bec:	080238c0 	.word	0x080238c0
 8018bf0:	08023acc 	.word	0x08023acc
 8018bf4:	08023954 	.word	0x08023954

08018bf8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d107      	bne.n	8018c16 <netif_set_link_up+0x1e>
 8018c06:	4b15      	ldr	r3, [pc, #84]	; (8018c5c <netif_set_link_up+0x64>)
 8018c08:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018c0c:	4914      	ldr	r1, [pc, #80]	; (8018c60 <netif_set_link_up+0x68>)
 8018c0e:	4815      	ldr	r0, [pc, #84]	; (8018c64 <netif_set_link_up+0x6c>)
 8018c10:	f008 fe04 	bl	802181c <iprintf>
 8018c14:	e01e      	b.n	8018c54 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c1c:	f003 0304 	and.w	r3, r3, #4
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d117      	bne.n	8018c54 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c2a:	f043 0304 	orr.w	r3, r3, #4
 8018c2e:	b2da      	uxtb	r2, r3
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8018c36:	6878      	ldr	r0, [r7, #4]
 8018c38:	f7fb faf0 	bl	801421c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018c3c:	2103      	movs	r1, #3
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	f7ff ff68 	bl	8018b14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	69db      	ldr	r3, [r3, #28]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d003      	beq.n	8018c54 <netif_set_link_up+0x5c>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	69db      	ldr	r3, [r3, #28]
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018c54:	3708      	adds	r7, #8
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd80      	pop	{r7, pc}
 8018c5a:	bf00      	nop
 8018c5c:	080238c0 	.word	0x080238c0
 8018c60:	08023aec 	.word	0x08023aec
 8018c64:	08023954 	.word	0x08023954

08018c68 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b082      	sub	sp, #8
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d107      	bne.n	8018c86 <netif_set_link_down+0x1e>
 8018c76:	4b11      	ldr	r3, [pc, #68]	; (8018cbc <netif_set_link_down+0x54>)
 8018c78:	f240 4206 	movw	r2, #1030	; 0x406
 8018c7c:	4910      	ldr	r1, [pc, #64]	; (8018cc0 <netif_set_link_down+0x58>)
 8018c7e:	4811      	ldr	r0, [pc, #68]	; (8018cc4 <netif_set_link_down+0x5c>)
 8018c80:	f008 fdcc 	bl	802181c <iprintf>
 8018c84:	e017      	b.n	8018cb6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c8c:	f003 0304 	and.w	r3, r3, #4
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d010      	beq.n	8018cb6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c9a:	f023 0304 	bic.w	r3, r3, #4
 8018c9e:	b2da      	uxtb	r2, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	69db      	ldr	r3, [r3, #28]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d003      	beq.n	8018cb6 <netif_set_link_down+0x4e>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	69db      	ldr	r3, [r3, #28]
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018cb6:	3708      	adds	r7, #8
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}
 8018cbc:	080238c0 	.word	0x080238c0
 8018cc0:	08023b10 	.word	0x08023b10
 8018cc4:	08023954 	.word	0x08023954

08018cc8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8018cc8:	b480      	push	{r7}
 8018cca:	b083      	sub	sp, #12
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
 8018cd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d002      	beq.n	8018cde <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	683a      	ldr	r2, [r7, #0]
 8018cdc:	61da      	str	r2, [r3, #28]
  }
}
 8018cde:	bf00      	nop
 8018ce0:	370c      	adds	r7, #12
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce8:	4770      	bx	lr

08018cea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018cea:	b480      	push	{r7}
 8018cec:	b085      	sub	sp, #20
 8018cee:	af00      	add	r7, sp, #0
 8018cf0:	60f8      	str	r0, [r7, #12]
 8018cf2:	60b9      	str	r1, [r7, #8]
 8018cf4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8018cf6:	f06f 030b 	mvn.w	r3, #11
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3714      	adds	r7, #20
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d04:	4770      	bx	lr
	...

08018d08 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8018d08:	b480      	push	{r7}
 8018d0a:	b085      	sub	sp, #20
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	4603      	mov	r3, r0
 8018d10:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8018d12:	79fb      	ldrb	r3, [r7, #7]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d013      	beq.n	8018d40 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018d18:	4b0d      	ldr	r3, [pc, #52]	; (8018d50 <netif_get_by_index+0x48>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	60fb      	str	r3, [r7, #12]
 8018d1e:	e00c      	b.n	8018d3a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018d26:	3301      	adds	r3, #1
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	79fa      	ldrb	r2, [r7, #7]
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	d101      	bne.n	8018d34 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	e006      	b.n	8018d42 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	60fb      	str	r3, [r7, #12]
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d1ef      	bne.n	8018d20 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8018d40:	2300      	movs	r3, #0
}
 8018d42:	4618      	mov	r0, r3
 8018d44:	3714      	adds	r7, #20
 8018d46:	46bd      	mov	sp, r7
 8018d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4c:	4770      	bx	lr
 8018d4e:	bf00      	nop
 8018d50:	20011f64 	.word	0x20011f64

08018d54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018d5a:	f000 fee1 	bl	8019b20 <sys_arch_protect>
 8018d5e:	6038      	str	r0, [r7, #0]
 8018d60:	4b0d      	ldr	r3, [pc, #52]	; (8018d98 <pbuf_free_ooseq+0x44>)
 8018d62:	2200      	movs	r2, #0
 8018d64:	701a      	strb	r2, [r3, #0]
 8018d66:	6838      	ldr	r0, [r7, #0]
 8018d68:	f000 fee8 	bl	8019b3c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018d6c:	4b0b      	ldr	r3, [pc, #44]	; (8018d9c <pbuf_free_ooseq+0x48>)
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	607b      	str	r3, [r7, #4]
 8018d72:	e00a      	b.n	8018d8a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d003      	beq.n	8018d84 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f002 fa73 	bl	801b268 <tcp_free_ooseq>
      return;
 8018d82:	e005      	b.n	8018d90 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	68db      	ldr	r3, [r3, #12]
 8018d88:	607b      	str	r3, [r7, #4]
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d1f1      	bne.n	8018d74 <pbuf_free_ooseq+0x20>
    }
  }
}
 8018d90:	3708      	adds	r7, #8
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	20011f6c 	.word	0x20011f6c
 8018d9c:	20011f7c 	.word	0x20011f7c

08018da0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b082      	sub	sp, #8
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8018da8:	f7ff ffd4 	bl	8018d54 <pbuf_free_ooseq>
}
 8018dac:	bf00      	nop
 8018dae:	3708      	adds	r7, #8
 8018db0:	46bd      	mov	sp, r7
 8018db2:	bd80      	pop	{r7, pc}

08018db4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b082      	sub	sp, #8
 8018db8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8018dba:	f000 feb1 	bl	8019b20 <sys_arch_protect>
 8018dbe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8018dc0:	4b0f      	ldr	r3, [pc, #60]	; (8018e00 <pbuf_pool_is_empty+0x4c>)
 8018dc2:	781b      	ldrb	r3, [r3, #0]
 8018dc4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8018dc6:	4b0e      	ldr	r3, [pc, #56]	; (8018e00 <pbuf_pool_is_empty+0x4c>)
 8018dc8:	2201      	movs	r2, #1
 8018dca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f000 feb5 	bl	8019b3c <sys_arch_unprotect>

  if (!queued) {
 8018dd2:	78fb      	ldrb	r3, [r7, #3]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d10f      	bne.n	8018df8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018dd8:	2100      	movs	r1, #0
 8018dda:	480a      	ldr	r0, [pc, #40]	; (8018e04 <pbuf_pool_is_empty+0x50>)
 8018ddc:	f006 f90a 	bl	801eff4 <tcpip_try_callback>
 8018de0:	4603      	mov	r3, r0
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d008      	beq.n	8018df8 <pbuf_pool_is_empty+0x44>
 8018de6:	f000 fe9b 	bl	8019b20 <sys_arch_protect>
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	4b04      	ldr	r3, [pc, #16]	; (8018e00 <pbuf_pool_is_empty+0x4c>)
 8018dee:	2200      	movs	r2, #0
 8018df0:	701a      	strb	r2, [r3, #0]
 8018df2:	6878      	ldr	r0, [r7, #4]
 8018df4:	f000 fea2 	bl	8019b3c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8018df8:	bf00      	nop
 8018dfa:	3708      	adds	r7, #8
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd80      	pop	{r7, pc}
 8018e00:	20011f6c 	.word	0x20011f6c
 8018e04:	08018da1 	.word	0x08018da1

08018e08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8018e08:	b480      	push	{r7}
 8018e0a:	b085      	sub	sp, #20
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	60f8      	str	r0, [r7, #12]
 8018e10:	60b9      	str	r1, [r7, #8]
 8018e12:	4611      	mov	r1, r2
 8018e14:	461a      	mov	r2, r3
 8018e16:	460b      	mov	r3, r1
 8018e18:	80fb      	strh	r3, [r7, #6]
 8018e1a:	4613      	mov	r3, r2
 8018e1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	2200      	movs	r2, #0
 8018e22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	68ba      	ldr	r2, [r7, #8]
 8018e28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	88fa      	ldrh	r2, [r7, #6]
 8018e2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	88ba      	ldrh	r2, [r7, #4]
 8018e34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8018e36:	8b3b      	ldrh	r3, [r7, #24]
 8018e38:	b2da      	uxtb	r2, r3
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	7f3a      	ldrb	r2, [r7, #28]
 8018e42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	2201      	movs	r2, #1
 8018e48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	73da      	strb	r2, [r3, #15]
}
 8018e50:	bf00      	nop
 8018e52:	3714      	adds	r7, #20
 8018e54:	46bd      	mov	sp, r7
 8018e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5a:	4770      	bx	lr

08018e5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b08c      	sub	sp, #48	; 0x30
 8018e60:	af02      	add	r7, sp, #8
 8018e62:	4603      	mov	r3, r0
 8018e64:	71fb      	strb	r3, [r7, #7]
 8018e66:	460b      	mov	r3, r1
 8018e68:	80bb      	strh	r3, [r7, #4]
 8018e6a:	4613      	mov	r3, r2
 8018e6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8018e6e:	79fb      	ldrb	r3, [r7, #7]
 8018e70:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8018e72:	887b      	ldrh	r3, [r7, #2]
 8018e74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018e78:	d07f      	beq.n	8018f7a <pbuf_alloc+0x11e>
 8018e7a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018e7e:	f300 80c8 	bgt.w	8019012 <pbuf_alloc+0x1b6>
 8018e82:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018e86:	d010      	beq.n	8018eaa <pbuf_alloc+0x4e>
 8018e88:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018e8c:	f300 80c1 	bgt.w	8019012 <pbuf_alloc+0x1b6>
 8018e90:	2b01      	cmp	r3, #1
 8018e92:	d002      	beq.n	8018e9a <pbuf_alloc+0x3e>
 8018e94:	2b41      	cmp	r3, #65	; 0x41
 8018e96:	f040 80bc 	bne.w	8019012 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018e9a:	887a      	ldrh	r2, [r7, #2]
 8018e9c:	88bb      	ldrh	r3, [r7, #4]
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	2000      	movs	r0, #0
 8018ea2:	f000 f8d1 	bl	8019048 <pbuf_alloc_reference>
 8018ea6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8018ea8:	e0bd      	b.n	8019026 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8018eb2:	88bb      	ldrh	r3, [r7, #4]
 8018eb4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018eb6:	200c      	movs	r0, #12
 8018eb8:	f7ff fbb2 	bl	8018620 <memp_malloc>
 8018ebc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8018ebe:	693b      	ldr	r3, [r7, #16]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d109      	bne.n	8018ed8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8018ec4:	f7ff ff76 	bl	8018db4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8018ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d002      	beq.n	8018ed4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8018ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ed0:	f000 faa8 	bl	8019424 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	e0a7      	b.n	8019028 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018eda:	3303      	adds	r3, #3
 8018edc:	b29b      	uxth	r3, r3
 8018ede:	f023 0303 	bic.w	r3, r3, #3
 8018ee2:	b29b      	uxth	r3, r3
 8018ee4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	8b7a      	ldrh	r2, [r7, #26]
 8018eec:	4293      	cmp	r3, r2
 8018eee:	bf28      	it	cs
 8018ef0:	4613      	movcs	r3, r2
 8018ef2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ef6:	3310      	adds	r3, #16
 8018ef8:	693a      	ldr	r2, [r7, #16]
 8018efa:	4413      	add	r3, r2
 8018efc:	3303      	adds	r3, #3
 8018efe:	f023 0303 	bic.w	r3, r3, #3
 8018f02:	4618      	mov	r0, r3
 8018f04:	89f9      	ldrh	r1, [r7, #14]
 8018f06:	8b7a      	ldrh	r2, [r7, #26]
 8018f08:	2300      	movs	r3, #0
 8018f0a:	9301      	str	r3, [sp, #4]
 8018f0c:	887b      	ldrh	r3, [r7, #2]
 8018f0e:	9300      	str	r3, [sp, #0]
 8018f10:	460b      	mov	r3, r1
 8018f12:	4601      	mov	r1, r0
 8018f14:	6938      	ldr	r0, [r7, #16]
 8018f16:	f7ff ff77 	bl	8018e08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018f1a:	693b      	ldr	r3, [r7, #16]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	f003 0303 	and.w	r3, r3, #3
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d006      	beq.n	8018f34 <pbuf_alloc+0xd8>
 8018f26:	4b42      	ldr	r3, [pc, #264]	; (8019030 <pbuf_alloc+0x1d4>)
 8018f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018f2c:	4941      	ldr	r1, [pc, #260]	; (8019034 <pbuf_alloc+0x1d8>)
 8018f2e:	4842      	ldr	r0, [pc, #264]	; (8019038 <pbuf_alloc+0x1dc>)
 8018f30:	f008 fc74 	bl	802181c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8018f34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f36:	3303      	adds	r3, #3
 8018f38:	f023 0303 	bic.w	r3, r3, #3
 8018f3c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8018f40:	d106      	bne.n	8018f50 <pbuf_alloc+0xf4>
 8018f42:	4b3b      	ldr	r3, [pc, #236]	; (8019030 <pbuf_alloc+0x1d4>)
 8018f44:	f44f 7281 	mov.w	r2, #258	; 0x102
 8018f48:	493c      	ldr	r1, [pc, #240]	; (801903c <pbuf_alloc+0x1e0>)
 8018f4a:	483b      	ldr	r0, [pc, #236]	; (8019038 <pbuf_alloc+0x1dc>)
 8018f4c:	f008 fc66 	bl	802181c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8018f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d102      	bne.n	8018f5c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8018f56:	693b      	ldr	r3, [r7, #16]
 8018f58:	627b      	str	r3, [r7, #36]	; 0x24
 8018f5a:	e002      	b.n	8018f62 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8018f5c:	69fb      	ldr	r3, [r7, #28]
 8018f5e:	693a      	ldr	r2, [r7, #16]
 8018f60:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8018f62:	693b      	ldr	r3, [r7, #16]
 8018f64:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018f66:	8b7a      	ldrh	r2, [r7, #26]
 8018f68:	89fb      	ldrh	r3, [r7, #14]
 8018f6a:	1ad3      	subs	r3, r2, r3
 8018f6c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8018f72:	8b7b      	ldrh	r3, [r7, #26]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d19e      	bne.n	8018eb6 <pbuf_alloc+0x5a>
      break;
 8018f78:	e055      	b.n	8019026 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018f7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f7c:	3303      	adds	r3, #3
 8018f7e:	b29b      	uxth	r3, r3
 8018f80:	f023 0303 	bic.w	r3, r3, #3
 8018f84:	b29a      	uxth	r2, r3
 8018f86:	88bb      	ldrh	r3, [r7, #4]
 8018f88:	3303      	adds	r3, #3
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	f023 0303 	bic.w	r3, r3, #3
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	4413      	add	r3, r2
 8018f94:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018f96:	8b3b      	ldrh	r3, [r7, #24]
 8018f98:	3310      	adds	r3, #16
 8018f9a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018f9c:	8b3a      	ldrh	r2, [r7, #24]
 8018f9e:	88bb      	ldrh	r3, [r7, #4]
 8018fa0:	3303      	adds	r3, #3
 8018fa2:	f023 0303 	bic.w	r3, r3, #3
 8018fa6:	429a      	cmp	r2, r3
 8018fa8:	d306      	bcc.n	8018fb8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018faa:	8afa      	ldrh	r2, [r7, #22]
 8018fac:	88bb      	ldrh	r3, [r7, #4]
 8018fae:	3303      	adds	r3, #3
 8018fb0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	d201      	bcs.n	8018fbc <pbuf_alloc+0x160>
        return NULL;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	e035      	b.n	8019028 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018fbc:	8afb      	ldrh	r3, [r7, #22]
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7ff f9ac 	bl	801831c <mem_malloc>
 8018fc4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8018fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d101      	bne.n	8018fd0 <pbuf_alloc+0x174>
        return NULL;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	e02b      	b.n	8019028 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018fd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fd2:	3310      	adds	r3, #16
 8018fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fd6:	4413      	add	r3, r2
 8018fd8:	3303      	adds	r3, #3
 8018fda:	f023 0303 	bic.w	r3, r3, #3
 8018fde:	4618      	mov	r0, r3
 8018fe0:	88b9      	ldrh	r1, [r7, #4]
 8018fe2:	88ba      	ldrh	r2, [r7, #4]
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	9301      	str	r3, [sp, #4]
 8018fe8:	887b      	ldrh	r3, [r7, #2]
 8018fea:	9300      	str	r3, [sp, #0]
 8018fec:	460b      	mov	r3, r1
 8018fee:	4601      	mov	r1, r0
 8018ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ff2:	f7ff ff09 	bl	8018e08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	f003 0303 	and.w	r3, r3, #3
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d010      	beq.n	8019024 <pbuf_alloc+0x1c8>
 8019002:	4b0b      	ldr	r3, [pc, #44]	; (8019030 <pbuf_alloc+0x1d4>)
 8019004:	f44f 7291 	mov.w	r2, #290	; 0x122
 8019008:	490d      	ldr	r1, [pc, #52]	; (8019040 <pbuf_alloc+0x1e4>)
 801900a:	480b      	ldr	r0, [pc, #44]	; (8019038 <pbuf_alloc+0x1dc>)
 801900c:	f008 fc06 	bl	802181c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8019010:	e008      	b.n	8019024 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019012:	4b07      	ldr	r3, [pc, #28]	; (8019030 <pbuf_alloc+0x1d4>)
 8019014:	f240 1227 	movw	r2, #295	; 0x127
 8019018:	490a      	ldr	r1, [pc, #40]	; (8019044 <pbuf_alloc+0x1e8>)
 801901a:	4807      	ldr	r0, [pc, #28]	; (8019038 <pbuf_alloc+0x1dc>)
 801901c:	f008 fbfe 	bl	802181c <iprintf>
      return NULL;
 8019020:	2300      	movs	r3, #0
 8019022:	e001      	b.n	8019028 <pbuf_alloc+0x1cc>
      break;
 8019024:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8019026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019028:	4618      	mov	r0, r3
 801902a:	3728      	adds	r7, #40	; 0x28
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}
 8019030:	08023b34 	.word	0x08023b34
 8019034:	08023bac 	.word	0x08023bac
 8019038:	08023bdc 	.word	0x08023bdc
 801903c:	08023c04 	.word	0x08023c04
 8019040:	08023c38 	.word	0x08023c38
 8019044:	08023c64 	.word	0x08023c64

08019048 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b086      	sub	sp, #24
 801904c:	af02      	add	r7, sp, #8
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	460b      	mov	r3, r1
 8019052:	807b      	strh	r3, [r7, #2]
 8019054:	4613      	mov	r3, r2
 8019056:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019058:	883b      	ldrh	r3, [r7, #0]
 801905a:	2b41      	cmp	r3, #65	; 0x41
 801905c:	d009      	beq.n	8019072 <pbuf_alloc_reference+0x2a>
 801905e:	883b      	ldrh	r3, [r7, #0]
 8019060:	2b01      	cmp	r3, #1
 8019062:	d006      	beq.n	8019072 <pbuf_alloc_reference+0x2a>
 8019064:	4b0f      	ldr	r3, [pc, #60]	; (80190a4 <pbuf_alloc_reference+0x5c>)
 8019066:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801906a:	490f      	ldr	r1, [pc, #60]	; (80190a8 <pbuf_alloc_reference+0x60>)
 801906c:	480f      	ldr	r0, [pc, #60]	; (80190ac <pbuf_alloc_reference+0x64>)
 801906e:	f008 fbd5 	bl	802181c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019072:	200b      	movs	r0, #11
 8019074:	f7ff fad4 	bl	8018620 <memp_malloc>
 8019078:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d101      	bne.n	8019084 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8019080:	2300      	movs	r3, #0
 8019082:	e00b      	b.n	801909c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8019084:	8879      	ldrh	r1, [r7, #2]
 8019086:	887a      	ldrh	r2, [r7, #2]
 8019088:	2300      	movs	r3, #0
 801908a:	9301      	str	r3, [sp, #4]
 801908c:	883b      	ldrh	r3, [r7, #0]
 801908e:	9300      	str	r3, [sp, #0]
 8019090:	460b      	mov	r3, r1
 8019092:	6879      	ldr	r1, [r7, #4]
 8019094:	68f8      	ldr	r0, [r7, #12]
 8019096:	f7ff feb7 	bl	8018e08 <pbuf_init_alloced_pbuf>
  return p;
 801909a:	68fb      	ldr	r3, [r7, #12]
}
 801909c:	4618      	mov	r0, r3
 801909e:	3710      	adds	r7, #16
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}
 80190a4:	08023b34 	.word	0x08023b34
 80190a8:	08023c80 	.word	0x08023c80
 80190ac:	08023bdc 	.word	0x08023bdc

080190b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b088      	sub	sp, #32
 80190b4:	af02      	add	r7, sp, #8
 80190b6:	607b      	str	r3, [r7, #4]
 80190b8:	4603      	mov	r3, r0
 80190ba:	73fb      	strb	r3, [r7, #15]
 80190bc:	460b      	mov	r3, r1
 80190be:	81bb      	strh	r3, [r7, #12]
 80190c0:	4613      	mov	r3, r2
 80190c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80190c4:	7bfb      	ldrb	r3, [r7, #15]
 80190c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80190c8:	8a7b      	ldrh	r3, [r7, #18]
 80190ca:	3303      	adds	r3, #3
 80190cc:	f023 0203 	bic.w	r2, r3, #3
 80190d0:	89bb      	ldrh	r3, [r7, #12]
 80190d2:	441a      	add	r2, r3
 80190d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d901      	bls.n	80190de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80190da:	2300      	movs	r3, #0
 80190dc:	e018      	b.n	8019110 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80190de:	6a3b      	ldr	r3, [r7, #32]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d007      	beq.n	80190f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80190e4:	8a7b      	ldrh	r3, [r7, #18]
 80190e6:	3303      	adds	r3, #3
 80190e8:	f023 0303 	bic.w	r3, r3, #3
 80190ec:	6a3a      	ldr	r2, [r7, #32]
 80190ee:	4413      	add	r3, r2
 80190f0:	617b      	str	r3, [r7, #20]
 80190f2:	e001      	b.n	80190f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80190f4:	2300      	movs	r3, #0
 80190f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	89b9      	ldrh	r1, [r7, #12]
 80190fc:	89ba      	ldrh	r2, [r7, #12]
 80190fe:	2302      	movs	r3, #2
 8019100:	9301      	str	r3, [sp, #4]
 8019102:	897b      	ldrh	r3, [r7, #10]
 8019104:	9300      	str	r3, [sp, #0]
 8019106:	460b      	mov	r3, r1
 8019108:	6979      	ldr	r1, [r7, #20]
 801910a:	f7ff fe7d 	bl	8018e08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801910e:	687b      	ldr	r3, [r7, #4]
}
 8019110:	4618      	mov	r0, r3
 8019112:	3718      	adds	r7, #24
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}

08019118 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b084      	sub	sp, #16
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
 8019120:	460b      	mov	r3, r1
 8019122:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d106      	bne.n	8019138 <pbuf_realloc+0x20>
 801912a:	4b3a      	ldr	r3, [pc, #232]	; (8019214 <pbuf_realloc+0xfc>)
 801912c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8019130:	4939      	ldr	r1, [pc, #228]	; (8019218 <pbuf_realloc+0x100>)
 8019132:	483a      	ldr	r0, [pc, #232]	; (801921c <pbuf_realloc+0x104>)
 8019134:	f008 fb72 	bl	802181c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	891b      	ldrh	r3, [r3, #8]
 801913c:	887a      	ldrh	r2, [r7, #2]
 801913e:	429a      	cmp	r2, r3
 8019140:	d263      	bcs.n	801920a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	891a      	ldrh	r2, [r3, #8]
 8019146:	887b      	ldrh	r3, [r7, #2]
 8019148:	1ad3      	subs	r3, r2, r3
 801914a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801914c:	887b      	ldrh	r3, [r7, #2]
 801914e:	817b      	strh	r3, [r7, #10]
  q = p;
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8019154:	e018      	b.n	8019188 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	895b      	ldrh	r3, [r3, #10]
 801915a:	897a      	ldrh	r2, [r7, #10]
 801915c:	1ad3      	subs	r3, r2, r3
 801915e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	891a      	ldrh	r2, [r3, #8]
 8019164:	893b      	ldrh	r3, [r7, #8]
 8019166:	1ad3      	subs	r3, r2, r3
 8019168:	b29a      	uxth	r2, r3
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d106      	bne.n	8019188 <pbuf_realloc+0x70>
 801917a:	4b26      	ldr	r3, [pc, #152]	; (8019214 <pbuf_realloc+0xfc>)
 801917c:	f240 12af 	movw	r2, #431	; 0x1af
 8019180:	4927      	ldr	r1, [pc, #156]	; (8019220 <pbuf_realloc+0x108>)
 8019182:	4826      	ldr	r0, [pc, #152]	; (801921c <pbuf_realloc+0x104>)
 8019184:	f008 fb4a 	bl	802181c <iprintf>
  while (rem_len > q->len) {
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	895b      	ldrh	r3, [r3, #10]
 801918c:	897a      	ldrh	r2, [r7, #10]
 801918e:	429a      	cmp	r2, r3
 8019190:	d8e1      	bhi.n	8019156 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	7b1b      	ldrb	r3, [r3, #12]
 8019196:	f003 030f 	and.w	r3, r3, #15
 801919a:	2b00      	cmp	r3, #0
 801919c:	d121      	bne.n	80191e2 <pbuf_realloc+0xca>
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	895b      	ldrh	r3, [r3, #10]
 80191a2:	897a      	ldrh	r2, [r7, #10]
 80191a4:	429a      	cmp	r2, r3
 80191a6:	d01c      	beq.n	80191e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	7b5b      	ldrb	r3, [r3, #13]
 80191ac:	f003 0302 	and.w	r3, r3, #2
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d116      	bne.n	80191e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	685a      	ldr	r2, [r3, #4]
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	1ad3      	subs	r3, r2, r3
 80191bc:	b29a      	uxth	r2, r3
 80191be:	897b      	ldrh	r3, [r7, #10]
 80191c0:	4413      	add	r3, r2
 80191c2:	b29b      	uxth	r3, r3
 80191c4:	4619      	mov	r1, r3
 80191c6:	68f8      	ldr	r0, [r7, #12]
 80191c8:	f7fe ff9e 	bl	8018108 <mem_trim>
 80191cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d106      	bne.n	80191e2 <pbuf_realloc+0xca>
 80191d4:	4b0f      	ldr	r3, [pc, #60]	; (8019214 <pbuf_realloc+0xfc>)
 80191d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80191da:	4912      	ldr	r1, [pc, #72]	; (8019224 <pbuf_realloc+0x10c>)
 80191dc:	480f      	ldr	r0, [pc, #60]	; (801921c <pbuf_realloc+0x104>)
 80191de:	f008 fb1d 	bl	802181c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	897a      	ldrh	r2, [r7, #10]
 80191e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	895a      	ldrh	r2, [r3, #10]
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d004      	beq.n	8019202 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	4618      	mov	r0, r3
 80191fe:	f000 f911 	bl	8019424 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	2200      	movs	r2, #0
 8019206:	601a      	str	r2, [r3, #0]
 8019208:	e000      	b.n	801920c <pbuf_realloc+0xf4>
    return;
 801920a:	bf00      	nop

}
 801920c:	3710      	adds	r7, #16
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	08023b34 	.word	0x08023b34
 8019218:	08023c94 	.word	0x08023c94
 801921c:	08023bdc 	.word	0x08023bdc
 8019220:	08023cac 	.word	0x08023cac
 8019224:	08023cc4 	.word	0x08023cc4

08019228 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b086      	sub	sp, #24
 801922c:	af00      	add	r7, sp, #0
 801922e:	60f8      	str	r0, [r7, #12]
 8019230:	60b9      	str	r1, [r7, #8]
 8019232:	4613      	mov	r3, r2
 8019234:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d106      	bne.n	801924a <pbuf_add_header_impl+0x22>
 801923c:	4b2b      	ldr	r3, [pc, #172]	; (80192ec <pbuf_add_header_impl+0xc4>)
 801923e:	f240 12df 	movw	r2, #479	; 0x1df
 8019242:	492b      	ldr	r1, [pc, #172]	; (80192f0 <pbuf_add_header_impl+0xc8>)
 8019244:	482b      	ldr	r0, [pc, #172]	; (80192f4 <pbuf_add_header_impl+0xcc>)
 8019246:	f008 fae9 	bl	802181c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d003      	beq.n	8019258 <pbuf_add_header_impl+0x30>
 8019250:	68bb      	ldr	r3, [r7, #8]
 8019252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019256:	d301      	bcc.n	801925c <pbuf_add_header_impl+0x34>
    return 1;
 8019258:	2301      	movs	r3, #1
 801925a:	e043      	b.n	80192e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801925c:	68bb      	ldr	r3, [r7, #8]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d101      	bne.n	8019266 <pbuf_add_header_impl+0x3e>
    return 0;
 8019262:	2300      	movs	r3, #0
 8019264:	e03e      	b.n	80192e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8019266:	68bb      	ldr	r3, [r7, #8]
 8019268:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	891a      	ldrh	r2, [r3, #8]
 801926e:	8a7b      	ldrh	r3, [r7, #18]
 8019270:	4413      	add	r3, r2
 8019272:	b29b      	uxth	r3, r3
 8019274:	8a7a      	ldrh	r2, [r7, #18]
 8019276:	429a      	cmp	r2, r3
 8019278:	d901      	bls.n	801927e <pbuf_add_header_impl+0x56>
    return 1;
 801927a:	2301      	movs	r3, #1
 801927c:	e032      	b.n	80192e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	7b1b      	ldrb	r3, [r3, #12]
 8019282:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019284:	8a3b      	ldrh	r3, [r7, #16]
 8019286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801928a:	2b00      	cmp	r3, #0
 801928c:	d00c      	beq.n	80192a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	685a      	ldr	r2, [r3, #4]
 8019292:	68bb      	ldr	r3, [r7, #8]
 8019294:	425b      	negs	r3, r3
 8019296:	4413      	add	r3, r2
 8019298:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	3310      	adds	r3, #16
 801929e:	697a      	ldr	r2, [r7, #20]
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d20d      	bcs.n	80192c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80192a4:	2301      	movs	r3, #1
 80192a6:	e01d      	b.n	80192e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80192a8:	79fb      	ldrb	r3, [r7, #7]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d006      	beq.n	80192bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	685a      	ldr	r2, [r3, #4]
 80192b2:	68bb      	ldr	r3, [r7, #8]
 80192b4:	425b      	negs	r3, r3
 80192b6:	4413      	add	r3, r2
 80192b8:	617b      	str	r3, [r7, #20]
 80192ba:	e001      	b.n	80192c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80192bc:	2301      	movs	r3, #1
 80192be:	e011      	b.n	80192e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	697a      	ldr	r2, [r7, #20]
 80192c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	895a      	ldrh	r2, [r3, #10]
 80192ca:	8a7b      	ldrh	r3, [r7, #18]
 80192cc:	4413      	add	r3, r2
 80192ce:	b29a      	uxth	r2, r3
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	891a      	ldrh	r2, [r3, #8]
 80192d8:	8a7b      	ldrh	r3, [r7, #18]
 80192da:	4413      	add	r3, r2
 80192dc:	b29a      	uxth	r2, r3
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	811a      	strh	r2, [r3, #8]


  return 0;
 80192e2:	2300      	movs	r3, #0
}
 80192e4:	4618      	mov	r0, r3
 80192e6:	3718      	adds	r7, #24
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	08023b34 	.word	0x08023b34
 80192f0:	08023ce0 	.word	0x08023ce0
 80192f4:	08023bdc 	.word	0x08023bdc

080192f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
 8019300:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8019302:	2200      	movs	r2, #0
 8019304:	6839      	ldr	r1, [r7, #0]
 8019306:	6878      	ldr	r0, [r7, #4]
 8019308:	f7ff ff8e 	bl	8019228 <pbuf_add_header_impl>
 801930c:	4603      	mov	r3, r0
}
 801930e:	4618      	mov	r0, r3
 8019310:	3708      	adds	r7, #8
 8019312:	46bd      	mov	sp, r7
 8019314:	bd80      	pop	{r7, pc}
	...

08019318 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b084      	sub	sp, #16
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d106      	bne.n	8019336 <pbuf_remove_header+0x1e>
 8019328:	4b20      	ldr	r3, [pc, #128]	; (80193ac <pbuf_remove_header+0x94>)
 801932a:	f240 224b 	movw	r2, #587	; 0x24b
 801932e:	4920      	ldr	r1, [pc, #128]	; (80193b0 <pbuf_remove_header+0x98>)
 8019330:	4820      	ldr	r0, [pc, #128]	; (80193b4 <pbuf_remove_header+0x9c>)
 8019332:	f008 fa73 	bl	802181c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d003      	beq.n	8019344 <pbuf_remove_header+0x2c>
 801933c:	683b      	ldr	r3, [r7, #0]
 801933e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019342:	d301      	bcc.n	8019348 <pbuf_remove_header+0x30>
    return 1;
 8019344:	2301      	movs	r3, #1
 8019346:	e02c      	b.n	80193a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d101      	bne.n	8019352 <pbuf_remove_header+0x3a>
    return 0;
 801934e:	2300      	movs	r3, #0
 8019350:	e027      	b.n	80193a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	895b      	ldrh	r3, [r3, #10]
 801935a:	89fa      	ldrh	r2, [r7, #14]
 801935c:	429a      	cmp	r2, r3
 801935e:	d908      	bls.n	8019372 <pbuf_remove_header+0x5a>
 8019360:	4b12      	ldr	r3, [pc, #72]	; (80193ac <pbuf_remove_header+0x94>)
 8019362:	f240 2255 	movw	r2, #597	; 0x255
 8019366:	4914      	ldr	r1, [pc, #80]	; (80193b8 <pbuf_remove_header+0xa0>)
 8019368:	4812      	ldr	r0, [pc, #72]	; (80193b4 <pbuf_remove_header+0x9c>)
 801936a:	f008 fa57 	bl	802181c <iprintf>
 801936e:	2301      	movs	r3, #1
 8019370:	e017      	b.n	80193a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	685b      	ldr	r3, [r3, #4]
 8019376:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	685a      	ldr	r2, [r3, #4]
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	441a      	add	r2, r3
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	895a      	ldrh	r2, [r3, #10]
 8019388:	89fb      	ldrh	r3, [r7, #14]
 801938a:	1ad3      	subs	r3, r2, r3
 801938c:	b29a      	uxth	r2, r3
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	891a      	ldrh	r2, [r3, #8]
 8019396:	89fb      	ldrh	r3, [r7, #14]
 8019398:	1ad3      	subs	r3, r2, r3
 801939a:	b29a      	uxth	r2, r3
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80193a0:	2300      	movs	r3, #0
}
 80193a2:	4618      	mov	r0, r3
 80193a4:	3710      	adds	r7, #16
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
 80193aa:	bf00      	nop
 80193ac:	08023b34 	.word	0x08023b34
 80193b0:	08023ce0 	.word	0x08023ce0
 80193b4:	08023bdc 	.word	0x08023bdc
 80193b8:	08023cec 	.word	0x08023cec

080193bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
 80193c4:	460b      	mov	r3, r1
 80193c6:	807b      	strh	r3, [r7, #2]
 80193c8:	4613      	mov	r3, r2
 80193ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80193cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	da08      	bge.n	80193e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80193d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80193d8:	425b      	negs	r3, r3
 80193da:	4619      	mov	r1, r3
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f7ff ff9b 	bl	8019318 <pbuf_remove_header>
 80193e2:	4603      	mov	r3, r0
 80193e4:	e007      	b.n	80193f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80193e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80193ea:	787a      	ldrb	r2, [r7, #1]
 80193ec:	4619      	mov	r1, r3
 80193ee:	6878      	ldr	r0, [r7, #4]
 80193f0:	f7ff ff1a 	bl	8019228 <pbuf_add_header_impl>
 80193f4:	4603      	mov	r3, r0
  }
}
 80193f6:	4618      	mov	r0, r3
 80193f8:	3708      	adds	r7, #8
 80193fa:	46bd      	mov	sp, r7
 80193fc:	bd80      	pop	{r7, pc}

080193fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80193fe:	b580      	push	{r7, lr}
 8019400:	b082      	sub	sp, #8
 8019402:	af00      	add	r7, sp, #0
 8019404:	6078      	str	r0, [r7, #4]
 8019406:	460b      	mov	r3, r1
 8019408:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801940a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801940e:	2201      	movs	r2, #1
 8019410:	4619      	mov	r1, r3
 8019412:	6878      	ldr	r0, [r7, #4]
 8019414:	f7ff ffd2 	bl	80193bc <pbuf_header_impl>
 8019418:	4603      	mov	r3, r0
}
 801941a:	4618      	mov	r0, r3
 801941c:	3708      	adds	r7, #8
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}
	...

08019424 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b088      	sub	sp, #32
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d10b      	bne.n	801944a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d106      	bne.n	8019446 <pbuf_free+0x22>
 8019438:	4b3b      	ldr	r3, [pc, #236]	; (8019528 <pbuf_free+0x104>)
 801943a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801943e:	493b      	ldr	r1, [pc, #236]	; (801952c <pbuf_free+0x108>)
 8019440:	483b      	ldr	r0, [pc, #236]	; (8019530 <pbuf_free+0x10c>)
 8019442:	f008 f9eb 	bl	802181c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8019446:	2300      	movs	r3, #0
 8019448:	e069      	b.n	801951e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801944a:	2300      	movs	r3, #0
 801944c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801944e:	e062      	b.n	8019516 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8019450:	f000 fb66 	bl	8019b20 <sys_arch_protect>
 8019454:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	7b9b      	ldrb	r3, [r3, #14]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d106      	bne.n	801946c <pbuf_free+0x48>
 801945e:	4b32      	ldr	r3, [pc, #200]	; (8019528 <pbuf_free+0x104>)
 8019460:	f240 22f1 	movw	r2, #753	; 0x2f1
 8019464:	4933      	ldr	r1, [pc, #204]	; (8019534 <pbuf_free+0x110>)
 8019466:	4832      	ldr	r0, [pc, #200]	; (8019530 <pbuf_free+0x10c>)
 8019468:	f008 f9d8 	bl	802181c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	7b9b      	ldrb	r3, [r3, #14]
 8019470:	3b01      	subs	r3, #1
 8019472:	b2da      	uxtb	r2, r3
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	739a      	strb	r2, [r3, #14]
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	7b9b      	ldrb	r3, [r3, #14]
 801947c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801947e:	69b8      	ldr	r0, [r7, #24]
 8019480:	f000 fb5c 	bl	8019b3c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8019484:	7dfb      	ldrb	r3, [r7, #23]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d143      	bne.n	8019512 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	7b1b      	ldrb	r3, [r3, #12]
 8019494:	f003 030f 	and.w	r3, r3, #15
 8019498:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	7b5b      	ldrb	r3, [r3, #13]
 801949e:	f003 0302 	and.w	r3, r3, #2
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d011      	beq.n	80194ca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	691b      	ldr	r3, [r3, #16]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d106      	bne.n	80194c0 <pbuf_free+0x9c>
 80194b2:	4b1d      	ldr	r3, [pc, #116]	; (8019528 <pbuf_free+0x104>)
 80194b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80194b8:	491f      	ldr	r1, [pc, #124]	; (8019538 <pbuf_free+0x114>)
 80194ba:	481d      	ldr	r0, [pc, #116]	; (8019530 <pbuf_free+0x10c>)
 80194bc:	f008 f9ae 	bl	802181c <iprintf>
        pc->custom_free_function(p);
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	691b      	ldr	r3, [r3, #16]
 80194c4:	6878      	ldr	r0, [r7, #4]
 80194c6:	4798      	blx	r3
 80194c8:	e01d      	b.n	8019506 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80194ca:	7bfb      	ldrb	r3, [r7, #15]
 80194cc:	2b02      	cmp	r3, #2
 80194ce:	d104      	bne.n	80194da <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80194d0:	6879      	ldr	r1, [r7, #4]
 80194d2:	200c      	movs	r0, #12
 80194d4:	f7ff f8f6 	bl	80186c4 <memp_free>
 80194d8:	e015      	b.n	8019506 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80194da:	7bfb      	ldrb	r3, [r7, #15]
 80194dc:	2b01      	cmp	r3, #1
 80194de:	d104      	bne.n	80194ea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80194e0:	6879      	ldr	r1, [r7, #4]
 80194e2:	200b      	movs	r0, #11
 80194e4:	f7ff f8ee 	bl	80186c4 <memp_free>
 80194e8:	e00d      	b.n	8019506 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80194ea:	7bfb      	ldrb	r3, [r7, #15]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d103      	bne.n	80194f8 <pbuf_free+0xd4>
          mem_free(p);
 80194f0:	6878      	ldr	r0, [r7, #4]
 80194f2:	f7fe fd79 	bl	8017fe8 <mem_free>
 80194f6:	e006      	b.n	8019506 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80194f8:	4b0b      	ldr	r3, [pc, #44]	; (8019528 <pbuf_free+0x104>)
 80194fa:	f240 320f 	movw	r2, #783	; 0x30f
 80194fe:	490f      	ldr	r1, [pc, #60]	; (801953c <pbuf_free+0x118>)
 8019500:	480b      	ldr	r0, [pc, #44]	; (8019530 <pbuf_free+0x10c>)
 8019502:	f008 f98b 	bl	802181c <iprintf>
        }
      }
      count++;
 8019506:	7ffb      	ldrb	r3, [r7, #31]
 8019508:	3301      	adds	r3, #1
 801950a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801950c:	693b      	ldr	r3, [r7, #16]
 801950e:	607b      	str	r3, [r7, #4]
 8019510:	e001      	b.n	8019516 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8019512:	2300      	movs	r3, #0
 8019514:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d199      	bne.n	8019450 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801951c:	7ffb      	ldrb	r3, [r7, #31]
}
 801951e:	4618      	mov	r0, r3
 8019520:	3720      	adds	r7, #32
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}
 8019526:	bf00      	nop
 8019528:	08023b34 	.word	0x08023b34
 801952c:	08023ce0 	.word	0x08023ce0
 8019530:	08023bdc 	.word	0x08023bdc
 8019534:	08023d0c 	.word	0x08023d0c
 8019538:	08023d24 	.word	0x08023d24
 801953c:	08023d48 	.word	0x08023d48

08019540 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8019540:	b480      	push	{r7}
 8019542:	b085      	sub	sp, #20
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8019548:	2300      	movs	r3, #0
 801954a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801954c:	e005      	b.n	801955a <pbuf_clen+0x1a>
    ++len;
 801954e:	89fb      	ldrh	r3, [r7, #14]
 8019550:	3301      	adds	r3, #1
 8019552:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d1f6      	bne.n	801954e <pbuf_clen+0xe>
  }
  return len;
 8019560:	89fb      	ldrh	r3, [r7, #14]
}
 8019562:	4618      	mov	r0, r3
 8019564:	3714      	adds	r7, #20
 8019566:	46bd      	mov	sp, r7
 8019568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956c:	4770      	bx	lr
	...

08019570 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b084      	sub	sp, #16
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d016      	beq.n	80195ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801957e:	f000 facf 	bl	8019b20 <sys_arch_protect>
 8019582:	60f8      	str	r0, [r7, #12]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	7b9b      	ldrb	r3, [r3, #14]
 8019588:	3301      	adds	r3, #1
 801958a:	b2da      	uxtb	r2, r3
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	739a      	strb	r2, [r3, #14]
 8019590:	68f8      	ldr	r0, [r7, #12]
 8019592:	f000 fad3 	bl	8019b3c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	7b9b      	ldrb	r3, [r3, #14]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d106      	bne.n	80195ac <pbuf_ref+0x3c>
 801959e:	4b05      	ldr	r3, [pc, #20]	; (80195b4 <pbuf_ref+0x44>)
 80195a0:	f240 3242 	movw	r2, #834	; 0x342
 80195a4:	4904      	ldr	r1, [pc, #16]	; (80195b8 <pbuf_ref+0x48>)
 80195a6:	4805      	ldr	r0, [pc, #20]	; (80195bc <pbuf_ref+0x4c>)
 80195a8:	f008 f938 	bl	802181c <iprintf>
  }
}
 80195ac:	bf00      	nop
 80195ae:	3710      	adds	r7, #16
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}
 80195b4:	08023b34 	.word	0x08023b34
 80195b8:	08023d5c 	.word	0x08023d5c
 80195bc:	08023bdc 	.word	0x08023bdc

080195c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b084      	sub	sp, #16
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d002      	beq.n	80195d6 <pbuf_cat+0x16>
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d107      	bne.n	80195e6 <pbuf_cat+0x26>
 80195d6:	4b20      	ldr	r3, [pc, #128]	; (8019658 <pbuf_cat+0x98>)
 80195d8:	f240 3259 	movw	r2, #857	; 0x359
 80195dc:	491f      	ldr	r1, [pc, #124]	; (801965c <pbuf_cat+0x9c>)
 80195de:	4820      	ldr	r0, [pc, #128]	; (8019660 <pbuf_cat+0xa0>)
 80195e0:	f008 f91c 	bl	802181c <iprintf>
 80195e4:	e034      	b.n	8019650 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	60fb      	str	r3, [r7, #12]
 80195ea:	e00a      	b.n	8019602 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	891a      	ldrh	r2, [r3, #8]
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	891b      	ldrh	r3, [r3, #8]
 80195f4:	4413      	add	r3, r2
 80195f6:	b29a      	uxth	r2, r3
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	60fb      	str	r3, [r7, #12]
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d1f0      	bne.n	80195ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	891a      	ldrh	r2, [r3, #8]
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	895b      	ldrh	r3, [r3, #10]
 8019612:	429a      	cmp	r2, r3
 8019614:	d006      	beq.n	8019624 <pbuf_cat+0x64>
 8019616:	4b10      	ldr	r3, [pc, #64]	; (8019658 <pbuf_cat+0x98>)
 8019618:	f240 3262 	movw	r2, #866	; 0x362
 801961c:	4911      	ldr	r1, [pc, #68]	; (8019664 <pbuf_cat+0xa4>)
 801961e:	4810      	ldr	r0, [pc, #64]	; (8019660 <pbuf_cat+0xa0>)
 8019620:	f008 f8fc 	bl	802181c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d006      	beq.n	801963a <pbuf_cat+0x7a>
 801962c:	4b0a      	ldr	r3, [pc, #40]	; (8019658 <pbuf_cat+0x98>)
 801962e:	f240 3263 	movw	r2, #867	; 0x363
 8019632:	490d      	ldr	r1, [pc, #52]	; (8019668 <pbuf_cat+0xa8>)
 8019634:	480a      	ldr	r0, [pc, #40]	; (8019660 <pbuf_cat+0xa0>)
 8019636:	f008 f8f1 	bl	802181c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	891a      	ldrh	r2, [r3, #8]
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	891b      	ldrh	r3, [r3, #8]
 8019642:	4413      	add	r3, r2
 8019644:	b29a      	uxth	r2, r3
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	683a      	ldr	r2, [r7, #0]
 801964e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8019650:	3710      	adds	r7, #16
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}
 8019656:	bf00      	nop
 8019658:	08023b34 	.word	0x08023b34
 801965c:	08023d70 	.word	0x08023d70
 8019660:	08023bdc 	.word	0x08023bdc
 8019664:	08023da8 	.word	0x08023da8
 8019668:	08023dd8 	.word	0x08023dd8

0801966c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b082      	sub	sp, #8
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
 8019674:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8019676:	6839      	ldr	r1, [r7, #0]
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	f7ff ffa1 	bl	80195c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801967e:	6838      	ldr	r0, [r7, #0]
 8019680:	f7ff ff76 	bl	8019570 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8019684:	bf00      	nop
 8019686:	3708      	adds	r7, #8
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}

0801968c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b086      	sub	sp, #24
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
 8019694:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8019696:	2300      	movs	r3, #0
 8019698:	617b      	str	r3, [r7, #20]
 801969a:	2300      	movs	r3, #0
 801969c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d008      	beq.n	80196b6 <pbuf_copy+0x2a>
 80196a4:	683b      	ldr	r3, [r7, #0]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d005      	beq.n	80196b6 <pbuf_copy+0x2a>
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	891a      	ldrh	r2, [r3, #8]
 80196ae:	683b      	ldr	r3, [r7, #0]
 80196b0:	891b      	ldrh	r3, [r3, #8]
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d209      	bcs.n	80196ca <pbuf_copy+0x3e>
 80196b6:	4b57      	ldr	r3, [pc, #348]	; (8019814 <pbuf_copy+0x188>)
 80196b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80196bc:	4956      	ldr	r1, [pc, #344]	; (8019818 <pbuf_copy+0x18c>)
 80196be:	4857      	ldr	r0, [pc, #348]	; (801981c <pbuf_copy+0x190>)
 80196c0:	f008 f8ac 	bl	802181c <iprintf>
 80196c4:	f06f 030f 	mvn.w	r3, #15
 80196c8:	e09f      	b.n	801980a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	895b      	ldrh	r3, [r3, #10]
 80196ce:	461a      	mov	r2, r3
 80196d0:	697b      	ldr	r3, [r7, #20]
 80196d2:	1ad2      	subs	r2, r2, r3
 80196d4:	683b      	ldr	r3, [r7, #0]
 80196d6:	895b      	ldrh	r3, [r3, #10]
 80196d8:	4619      	mov	r1, r3
 80196da:	693b      	ldr	r3, [r7, #16]
 80196dc:	1acb      	subs	r3, r1, r3
 80196de:	429a      	cmp	r2, r3
 80196e0:	d306      	bcc.n	80196f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	895b      	ldrh	r3, [r3, #10]
 80196e6:	461a      	mov	r2, r3
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	1ad3      	subs	r3, r2, r3
 80196ec:	60fb      	str	r3, [r7, #12]
 80196ee:	e005      	b.n	80196fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	895b      	ldrh	r3, [r3, #10]
 80196f4:	461a      	mov	r2, r3
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	1ad3      	subs	r3, r2, r3
 80196fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	685a      	ldr	r2, [r3, #4]
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	18d0      	adds	r0, r2, r3
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	685a      	ldr	r2, [r3, #4]
 8019708:	693b      	ldr	r3, [r7, #16]
 801970a:	4413      	add	r3, r2
 801970c:	68fa      	ldr	r2, [r7, #12]
 801970e:	4619      	mov	r1, r3
 8019710:	f007 ffc4 	bl	802169c <memcpy>
    offset_to += len;
 8019714:	697a      	ldr	r2, [r7, #20]
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	4413      	add	r3, r2
 801971a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801971c:	693a      	ldr	r2, [r7, #16]
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	4413      	add	r3, r2
 8019722:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	895b      	ldrh	r3, [r3, #10]
 8019728:	461a      	mov	r2, r3
 801972a:	697b      	ldr	r3, [r7, #20]
 801972c:	4293      	cmp	r3, r2
 801972e:	d906      	bls.n	801973e <pbuf_copy+0xb2>
 8019730:	4b38      	ldr	r3, [pc, #224]	; (8019814 <pbuf_copy+0x188>)
 8019732:	f240 32d9 	movw	r2, #985	; 0x3d9
 8019736:	493a      	ldr	r1, [pc, #232]	; (8019820 <pbuf_copy+0x194>)
 8019738:	4838      	ldr	r0, [pc, #224]	; (801981c <pbuf_copy+0x190>)
 801973a:	f008 f86f 	bl	802181c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801973e:	683b      	ldr	r3, [r7, #0]
 8019740:	895b      	ldrh	r3, [r3, #10]
 8019742:	461a      	mov	r2, r3
 8019744:	693b      	ldr	r3, [r7, #16]
 8019746:	4293      	cmp	r3, r2
 8019748:	d906      	bls.n	8019758 <pbuf_copy+0xcc>
 801974a:	4b32      	ldr	r3, [pc, #200]	; (8019814 <pbuf_copy+0x188>)
 801974c:	f240 32da 	movw	r2, #986	; 0x3da
 8019750:	4934      	ldr	r1, [pc, #208]	; (8019824 <pbuf_copy+0x198>)
 8019752:	4832      	ldr	r0, [pc, #200]	; (801981c <pbuf_copy+0x190>)
 8019754:	f008 f862 	bl	802181c <iprintf>
    if (offset_from >= p_from->len) {
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	895b      	ldrh	r3, [r3, #10]
 801975c:	461a      	mov	r2, r3
 801975e:	693b      	ldr	r3, [r7, #16]
 8019760:	4293      	cmp	r3, r2
 8019762:	d304      	bcc.n	801976e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8019764:	2300      	movs	r3, #0
 8019766:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	895b      	ldrh	r3, [r3, #10]
 8019772:	461a      	mov	r2, r3
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	4293      	cmp	r3, r2
 8019778:	d114      	bne.n	80197a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801977a:	2300      	movs	r3, #0
 801977c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d10c      	bne.n	80197a4 <pbuf_copy+0x118>
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d009      	beq.n	80197a4 <pbuf_copy+0x118>
 8019790:	4b20      	ldr	r3, [pc, #128]	; (8019814 <pbuf_copy+0x188>)
 8019792:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8019796:	4924      	ldr	r1, [pc, #144]	; (8019828 <pbuf_copy+0x19c>)
 8019798:	4820      	ldr	r0, [pc, #128]	; (801981c <pbuf_copy+0x190>)
 801979a:	f008 f83f 	bl	802181c <iprintf>
 801979e:	f06f 030f 	mvn.w	r3, #15
 80197a2:	e032      	b.n	801980a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d013      	beq.n	80197d2 <pbuf_copy+0x146>
 80197aa:	683b      	ldr	r3, [r7, #0]
 80197ac:	895a      	ldrh	r2, [r3, #10]
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	891b      	ldrh	r3, [r3, #8]
 80197b2:	429a      	cmp	r2, r3
 80197b4:	d10d      	bne.n	80197d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d009      	beq.n	80197d2 <pbuf_copy+0x146>
 80197be:	4b15      	ldr	r3, [pc, #84]	; (8019814 <pbuf_copy+0x188>)
 80197c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80197c4:	4919      	ldr	r1, [pc, #100]	; (801982c <pbuf_copy+0x1a0>)
 80197c6:	4815      	ldr	r0, [pc, #84]	; (801981c <pbuf_copy+0x190>)
 80197c8:	f008 f828 	bl	802181c <iprintf>
 80197cc:	f06f 0305 	mvn.w	r3, #5
 80197d0:	e01b      	b.n	801980a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d013      	beq.n	8019800 <pbuf_copy+0x174>
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	895a      	ldrh	r2, [r3, #10]
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	891b      	ldrh	r3, [r3, #8]
 80197e0:	429a      	cmp	r2, r3
 80197e2:	d10d      	bne.n	8019800 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d009      	beq.n	8019800 <pbuf_copy+0x174>
 80197ec:	4b09      	ldr	r3, [pc, #36]	; (8019814 <pbuf_copy+0x188>)
 80197ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80197f2:	490e      	ldr	r1, [pc, #56]	; (801982c <pbuf_copy+0x1a0>)
 80197f4:	4809      	ldr	r0, [pc, #36]	; (801981c <pbuf_copy+0x190>)
 80197f6:	f008 f811 	bl	802181c <iprintf>
 80197fa:	f06f 0305 	mvn.w	r3, #5
 80197fe:	e004      	b.n	801980a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	2b00      	cmp	r3, #0
 8019804:	f47f af61 	bne.w	80196ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8019808:	2300      	movs	r3, #0
}
 801980a:	4618      	mov	r0, r3
 801980c:	3718      	adds	r7, #24
 801980e:	46bd      	mov	sp, r7
 8019810:	bd80      	pop	{r7, pc}
 8019812:	bf00      	nop
 8019814:	08023b34 	.word	0x08023b34
 8019818:	08023e24 	.word	0x08023e24
 801981c:	08023bdc 	.word	0x08023bdc
 8019820:	08023e54 	.word	0x08023e54
 8019824:	08023e6c 	.word	0x08023e6c
 8019828:	08023e88 	.word	0x08023e88
 801982c:	08023e98 	.word	0x08023e98

08019830 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b088      	sub	sp, #32
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	4611      	mov	r1, r2
 801983c:	461a      	mov	r2, r3
 801983e:	460b      	mov	r3, r1
 8019840:	80fb      	strh	r3, [r7, #6]
 8019842:	4613      	mov	r3, r2
 8019844:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8019846:	2300      	movs	r3, #0
 8019848:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801984a:	2300      	movs	r3, #0
 801984c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d108      	bne.n	8019866 <pbuf_copy_partial+0x36>
 8019854:	4b2b      	ldr	r3, [pc, #172]	; (8019904 <pbuf_copy_partial+0xd4>)
 8019856:	f240 420a 	movw	r2, #1034	; 0x40a
 801985a:	492b      	ldr	r1, [pc, #172]	; (8019908 <pbuf_copy_partial+0xd8>)
 801985c:	482b      	ldr	r0, [pc, #172]	; (801990c <pbuf_copy_partial+0xdc>)
 801985e:	f007 ffdd 	bl	802181c <iprintf>
 8019862:	2300      	movs	r3, #0
 8019864:	e04a      	b.n	80198fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8019866:	68bb      	ldr	r3, [r7, #8]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d108      	bne.n	801987e <pbuf_copy_partial+0x4e>
 801986c:	4b25      	ldr	r3, [pc, #148]	; (8019904 <pbuf_copy_partial+0xd4>)
 801986e:	f240 420b 	movw	r2, #1035	; 0x40b
 8019872:	4927      	ldr	r1, [pc, #156]	; (8019910 <pbuf_copy_partial+0xe0>)
 8019874:	4825      	ldr	r0, [pc, #148]	; (801990c <pbuf_copy_partial+0xdc>)
 8019876:	f007 ffd1 	bl	802181c <iprintf>
 801987a:	2300      	movs	r3, #0
 801987c:	e03e      	b.n	80198fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	61fb      	str	r3, [r7, #28]
 8019882:	e034      	b.n	80198ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019884:	88bb      	ldrh	r3, [r7, #4]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d00a      	beq.n	80198a0 <pbuf_copy_partial+0x70>
 801988a:	69fb      	ldr	r3, [r7, #28]
 801988c:	895b      	ldrh	r3, [r3, #10]
 801988e:	88ba      	ldrh	r2, [r7, #4]
 8019890:	429a      	cmp	r2, r3
 8019892:	d305      	bcc.n	80198a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019894:	69fb      	ldr	r3, [r7, #28]
 8019896:	895b      	ldrh	r3, [r3, #10]
 8019898:	88ba      	ldrh	r2, [r7, #4]
 801989a:	1ad3      	subs	r3, r2, r3
 801989c:	80bb      	strh	r3, [r7, #4]
 801989e:	e023      	b.n	80198e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	895a      	ldrh	r2, [r3, #10]
 80198a4:	88bb      	ldrh	r3, [r7, #4]
 80198a6:	1ad3      	subs	r3, r2, r3
 80198a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80198aa:	8b3a      	ldrh	r2, [r7, #24]
 80198ac:	88fb      	ldrh	r3, [r7, #6]
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d901      	bls.n	80198b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80198b2:	88fb      	ldrh	r3, [r7, #6]
 80198b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80198b6:	8b7b      	ldrh	r3, [r7, #26]
 80198b8:	68ba      	ldr	r2, [r7, #8]
 80198ba:	18d0      	adds	r0, r2, r3
 80198bc:	69fb      	ldr	r3, [r7, #28]
 80198be:	685a      	ldr	r2, [r3, #4]
 80198c0:	88bb      	ldrh	r3, [r7, #4]
 80198c2:	4413      	add	r3, r2
 80198c4:	8b3a      	ldrh	r2, [r7, #24]
 80198c6:	4619      	mov	r1, r3
 80198c8:	f007 fee8 	bl	802169c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80198cc:	8afa      	ldrh	r2, [r7, #22]
 80198ce:	8b3b      	ldrh	r3, [r7, #24]
 80198d0:	4413      	add	r3, r2
 80198d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80198d4:	8b7a      	ldrh	r2, [r7, #26]
 80198d6:	8b3b      	ldrh	r3, [r7, #24]
 80198d8:	4413      	add	r3, r2
 80198da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80198dc:	88fa      	ldrh	r2, [r7, #6]
 80198de:	8b3b      	ldrh	r3, [r7, #24]
 80198e0:	1ad3      	subs	r3, r2, r3
 80198e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80198e4:	2300      	movs	r3, #0
 80198e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80198e8:	69fb      	ldr	r3, [r7, #28]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	61fb      	str	r3, [r7, #28]
 80198ee:	88fb      	ldrh	r3, [r7, #6]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d002      	beq.n	80198fa <pbuf_copy_partial+0xca>
 80198f4:	69fb      	ldr	r3, [r7, #28]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d1c4      	bne.n	8019884 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80198fa:	8afb      	ldrh	r3, [r7, #22]
}
 80198fc:	4618      	mov	r0, r3
 80198fe:	3720      	adds	r7, #32
 8019900:	46bd      	mov	sp, r7
 8019902:	bd80      	pop	{r7, pc}
 8019904:	08023b34 	.word	0x08023b34
 8019908:	08023ec4 	.word	0x08023ec4
 801990c:	08023bdc 	.word	0x08023bdc
 8019910:	08023ee4 	.word	0x08023ee4

08019914 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b084      	sub	sp, #16
 8019918:	af00      	add	r7, sp, #0
 801991a:	4603      	mov	r3, r0
 801991c:	603a      	str	r2, [r7, #0]
 801991e:	71fb      	strb	r3, [r7, #7]
 8019920:	460b      	mov	r3, r1
 8019922:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	8919      	ldrh	r1, [r3, #8]
 8019928:	88ba      	ldrh	r2, [r7, #4]
 801992a:	79fb      	ldrb	r3, [r7, #7]
 801992c:	4618      	mov	r0, r3
 801992e:	f7ff fa95 	bl	8018e5c <pbuf_alloc>
 8019932:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d101      	bne.n	801993e <pbuf_clone+0x2a>
    return NULL;
 801993a:	2300      	movs	r3, #0
 801993c:	e011      	b.n	8019962 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801993e:	6839      	ldr	r1, [r7, #0]
 8019940:	68f8      	ldr	r0, [r7, #12]
 8019942:	f7ff fea3 	bl	801968c <pbuf_copy>
 8019946:	4603      	mov	r3, r0
 8019948:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801994a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d006      	beq.n	8019960 <pbuf_clone+0x4c>
 8019952:	4b06      	ldr	r3, [pc, #24]	; (801996c <pbuf_clone+0x58>)
 8019954:	f240 5224 	movw	r2, #1316	; 0x524
 8019958:	4905      	ldr	r1, [pc, #20]	; (8019970 <pbuf_clone+0x5c>)
 801995a:	4806      	ldr	r0, [pc, #24]	; (8019974 <pbuf_clone+0x60>)
 801995c:	f007 ff5e 	bl	802181c <iprintf>
  return q;
 8019960:	68fb      	ldr	r3, [r7, #12]
}
 8019962:	4618      	mov	r0, r3
 8019964:	3710      	adds	r7, #16
 8019966:	46bd      	mov	sp, r7
 8019968:	bd80      	pop	{r7, pc}
 801996a:	bf00      	nop
 801996c:	08023b34 	.word	0x08023b34
 8019970:	08023ff0 	.word	0x08023ff0
 8019974:	08023bdc 	.word	0x08023bdc

08019978 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019982:	683b      	ldr	r3, [r7, #0]
 8019984:	2200      	movs	r2, #0
 8019986:	2104      	movs	r1, #4
 8019988:	4618      	mov	r0, r3
 801998a:	f7f6 fccb 	bl	8010324 <osMessageQueueNew>
 801998e:	4602      	mov	r2, r0
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d102      	bne.n	80199a2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801999c:	f04f 33ff 	mov.w	r3, #4294967295
 80199a0:	e000      	b.n	80199a4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80199a2:	2300      	movs	r3, #0
}
 80199a4:	4618      	mov	r0, r3
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}

080199ac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b084      	sub	sp, #16
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
 80199b4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	6818      	ldr	r0, [r3, #0]
 80199ba:	4639      	mov	r1, r7
 80199bc:	2300      	movs	r3, #0
 80199be:	2200      	movs	r2, #0
 80199c0:	f7f6 fd36 	bl	8010430 <osMessageQueuePut>
 80199c4:	4603      	mov	r3, r0
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d102      	bne.n	80199d0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80199ca:	2300      	movs	r3, #0
 80199cc:	73fb      	strb	r3, [r7, #15]
 80199ce:	e001      	b.n	80199d4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80199d0:	23ff      	movs	r3, #255	; 0xff
 80199d2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80199d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80199d8:	4618      	mov	r0, r3
 80199da:	3710      	adds	r7, #16
 80199dc:	46bd      	mov	sp, r7
 80199de:	bd80      	pop	{r7, pc}

080199e0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b086      	sub	sp, #24
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	60f8      	str	r0, [r7, #12]
 80199e8:	60b9      	str	r1, [r7, #8]
 80199ea:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80199ec:	f7f6 f8fc 	bl	800fbe8 <osKernelGetTickCount>
 80199f0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d013      	beq.n	8019a20 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	6818      	ldr	r0, [r3, #0]
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2200      	movs	r2, #0
 8019a00:	68b9      	ldr	r1, [r7, #8]
 8019a02:	f7f6 fd89 	bl	8010518 <osMessageQueueGet>
 8019a06:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019a08:	693b      	ldr	r3, [r7, #16]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d105      	bne.n	8019a1a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019a0e:	f7f6 f8eb 	bl	800fbe8 <osKernelGetTickCount>
 8019a12:	4602      	mov	r2, r0
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	1ad3      	subs	r3, r2, r3
 8019a18:	e00f      	b.n	8019a3a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a1e:	e00c      	b.n	8019a3a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	6818      	ldr	r0, [r3, #0]
 8019a24:	f04f 33ff 	mov.w	r3, #4294967295
 8019a28:	2200      	movs	r2, #0
 8019a2a:	68b9      	ldr	r1, [r7, #8]
 8019a2c:	f7f6 fd74 	bl	8010518 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019a30:	f7f6 f8da 	bl	800fbe8 <osKernelGetTickCount>
 8019a34:	4602      	mov	r2, r0
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	3718      	adds	r7, #24
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}

08019a42 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019a42:	b480      	push	{r7}
 8019a44:	b083      	sub	sp, #12
 8019a46:	af00      	add	r7, sp, #0
 8019a48:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d101      	bne.n	8019a56 <sys_mbox_valid+0x14>
    return 0;
 8019a52:	2300      	movs	r3, #0
 8019a54:	e000      	b.n	8019a58 <sys_mbox_valid+0x16>
  else
    return 1;
 8019a56:	2301      	movs	r3, #1
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	370c      	adds	r7, #12
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a62:	4770      	bx	lr

08019a64 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019a68:	2000      	movs	r0, #0
 8019a6a:	f7f6 f9b9 	bl	800fde0 <osMutexNew>
 8019a6e:	4603      	mov	r3, r0
 8019a70:	4a01      	ldr	r2, [pc, #4]	; (8019a78 <sys_init+0x14>)
 8019a72:	6013      	str	r3, [r2, #0]
#endif
}
 8019a74:	bf00      	nop
 8019a76:	bd80      	pop	{r7, pc}
 8019a78:	20011f74 	.word	0x20011f74

08019a7c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b082      	sub	sp, #8
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019a84:	2000      	movs	r0, #0
 8019a86:	f7f6 f9ab 	bl	800fde0 <osMutexNew>
 8019a8a:	4602      	mov	r2, r0
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d102      	bne.n	8019a9e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019a98:	f04f 33ff 	mov.w	r3, #4294967295
 8019a9c:	e000      	b.n	8019aa0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019a9e:	2300      	movs	r3, #0
}
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	3708      	adds	r7, #8
 8019aa4:	46bd      	mov	sp, r7
 8019aa6:	bd80      	pop	{r7, pc}

08019aa8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b082      	sub	sp, #8
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8019ab8:	4618      	mov	r0, r3
 8019aba:	f7f6 fa2b 	bl	800ff14 <osMutexAcquire>
#endif
}
 8019abe:	bf00      	nop
 8019ac0:	3708      	adds	r7, #8
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}

08019ac6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019ac6:	b580      	push	{r7, lr}
 8019ac8:	b082      	sub	sp, #8
 8019aca:	af00      	add	r7, sp, #0
 8019acc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7f6 fa7c 	bl	800ffd0 <osMutexRelease>
}
 8019ad8:	bf00      	nop
 8019ada:	3708      	adds	r7, #8
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd80      	pop	{r7, pc}

08019ae0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b08e      	sub	sp, #56	; 0x38
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	60f8      	str	r0, [r7, #12]
 8019ae8:	60b9      	str	r1, [r7, #8]
 8019aea:	607a      	str	r2, [r7, #4]
 8019aec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019aee:	f107 0314 	add.w	r3, r7, #20
 8019af2:	2224      	movs	r2, #36	; 0x24
 8019af4:	2100      	movs	r1, #0
 8019af6:	4618      	mov	r0, r3
 8019af8:	f007 fdde 	bl	80216b8 <memset>
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	617b      	str	r3, [r7, #20]
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8019b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019b08:	f107 0314 	add.w	r3, r7, #20
 8019b0c:	461a      	mov	r2, r3
 8019b0e:	6879      	ldr	r1, [r7, #4]
 8019b10:	68b8      	ldr	r0, [r7, #8]
 8019b12:	f7f6 f891 	bl	800fc38 <osThreadNew>
 8019b16:	4603      	mov	r3, r0
#endif
}
 8019b18:	4618      	mov	r0, r3
 8019b1a:	3738      	adds	r7, #56	; 0x38
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bd80      	pop	{r7, pc}

08019b20 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019b24:	4b04      	ldr	r3, [pc, #16]	; (8019b38 <sys_arch_protect+0x18>)
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f04f 31ff 	mov.w	r1, #4294967295
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	f7f6 f9f1 	bl	800ff14 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019b32:	2301      	movs	r3, #1
}
 8019b34:	4618      	mov	r0, r3
 8019b36:	bd80      	pop	{r7, pc}
 8019b38:	20011f74 	.word	0x20011f74

08019b3c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b082      	sub	sp, #8
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019b44:	4b04      	ldr	r3, [pc, #16]	; (8019b58 <sys_arch_unprotect+0x1c>)
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	4618      	mov	r0, r3
 8019b4a:	f7f6 fa41 	bl	800ffd0 <osMutexRelease>
}
 8019b4e:	bf00      	nop
 8019b50:	3708      	adds	r7, #8
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bd80      	pop	{r7, pc}
 8019b56:	bf00      	nop
 8019b58:	20011f74 	.word	0x20011f74

08019b5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019b60:	f007 fe8a 	bl	8021878 <rand>
 8019b64:	4603      	mov	r3, r0
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019b6c:	b29b      	uxth	r3, r3
 8019b6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019b72:	b29a      	uxth	r2, r3
 8019b74:	4b01      	ldr	r3, [pc, #4]	; (8019b7c <tcp_init+0x20>)
 8019b76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019b78:	bf00      	nop
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	2000008c 	.word	0x2000008c

08019b80 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b082      	sub	sp, #8
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	7d1b      	ldrb	r3, [r3, #20]
 8019b8c:	2b01      	cmp	r3, #1
 8019b8e:	d105      	bne.n	8019b9c <tcp_free+0x1c>
 8019b90:	4b06      	ldr	r3, [pc, #24]	; (8019bac <tcp_free+0x2c>)
 8019b92:	22d4      	movs	r2, #212	; 0xd4
 8019b94:	4906      	ldr	r1, [pc, #24]	; (8019bb0 <tcp_free+0x30>)
 8019b96:	4807      	ldr	r0, [pc, #28]	; (8019bb4 <tcp_free+0x34>)
 8019b98:	f007 fe40 	bl	802181c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8019b9c:	6879      	ldr	r1, [r7, #4]
 8019b9e:	2001      	movs	r0, #1
 8019ba0:	f7fe fd90 	bl	80186c4 <memp_free>
}
 8019ba4:	bf00      	nop
 8019ba6:	3708      	adds	r7, #8
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}
 8019bac:	0802407c 	.word	0x0802407c
 8019bb0:	080240f4 	.word	0x080240f4
 8019bb4:	08024108 	.word	0x08024108

08019bb8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b082      	sub	sp, #8
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	7d1b      	ldrb	r3, [r3, #20]
 8019bc4:	2b01      	cmp	r3, #1
 8019bc6:	d105      	bne.n	8019bd4 <tcp_free_listen+0x1c>
 8019bc8:	4b06      	ldr	r3, [pc, #24]	; (8019be4 <tcp_free_listen+0x2c>)
 8019bca:	22df      	movs	r2, #223	; 0xdf
 8019bcc:	4906      	ldr	r1, [pc, #24]	; (8019be8 <tcp_free_listen+0x30>)
 8019bce:	4807      	ldr	r0, [pc, #28]	; (8019bec <tcp_free_listen+0x34>)
 8019bd0:	f007 fe24 	bl	802181c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019bd4:	6879      	ldr	r1, [r7, #4]
 8019bd6:	2002      	movs	r0, #2
 8019bd8:	f7fe fd74 	bl	80186c4 <memp_free>
}
 8019bdc:	bf00      	nop
 8019bde:	3708      	adds	r7, #8
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}
 8019be4:	0802407c 	.word	0x0802407c
 8019be8:	08024130 	.word	0x08024130
 8019bec:	08024108 	.word	0x08024108

08019bf0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8019bf4:	f000 fea2 	bl	801a93c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019bf8:	4b07      	ldr	r3, [pc, #28]	; (8019c18 <tcp_tmr+0x28>)
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	3301      	adds	r3, #1
 8019bfe:	b2da      	uxtb	r2, r3
 8019c00:	4b05      	ldr	r3, [pc, #20]	; (8019c18 <tcp_tmr+0x28>)
 8019c02:	701a      	strb	r2, [r3, #0]
 8019c04:	4b04      	ldr	r3, [pc, #16]	; (8019c18 <tcp_tmr+0x28>)
 8019c06:	781b      	ldrb	r3, [r3, #0]
 8019c08:	f003 0301 	and.w	r3, r3, #1
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d001      	beq.n	8019c14 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8019c10:	f000 fb54 	bl	801a2bc <tcp_slowtmr>
  }
}
 8019c14:	bf00      	nop
 8019c16:	bd80      	pop	{r7, pc}
 8019c18:	200090a9 	.word	0x200090a9

08019c1c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b084      	sub	sp, #16
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
 8019c24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d105      	bne.n	8019c38 <tcp_remove_listener+0x1c>
 8019c2c:	4b0d      	ldr	r3, [pc, #52]	; (8019c64 <tcp_remove_listener+0x48>)
 8019c2e:	22ff      	movs	r2, #255	; 0xff
 8019c30:	490d      	ldr	r1, [pc, #52]	; (8019c68 <tcp_remove_listener+0x4c>)
 8019c32:	480e      	ldr	r0, [pc, #56]	; (8019c6c <tcp_remove_listener+0x50>)
 8019c34:	f007 fdf2 	bl	802181c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	60fb      	str	r3, [r7, #12]
 8019c3c:	e00a      	b.n	8019c54 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019c42:	683a      	ldr	r2, [r7, #0]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d102      	bne.n	8019c4e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	68db      	ldr	r3, [r3, #12]
 8019c52:	60fb      	str	r3, [r7, #12]
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d1f1      	bne.n	8019c3e <tcp_remove_listener+0x22>
    }
  }
}
 8019c5a:	bf00      	nop
 8019c5c:	bf00      	nop
 8019c5e:	3710      	adds	r7, #16
 8019c60:	46bd      	mov	sp, r7
 8019c62:	bd80      	pop	{r7, pc}
 8019c64:	0802407c 	.word	0x0802407c
 8019c68:	0802414c 	.word	0x0802414c
 8019c6c:	08024108 	.word	0x08024108

08019c70 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b084      	sub	sp, #16
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d106      	bne.n	8019c8c <tcp_listen_closed+0x1c>
 8019c7e:	4b14      	ldr	r3, [pc, #80]	; (8019cd0 <tcp_listen_closed+0x60>)
 8019c80:	f240 1211 	movw	r2, #273	; 0x111
 8019c84:	4913      	ldr	r1, [pc, #76]	; (8019cd4 <tcp_listen_closed+0x64>)
 8019c86:	4814      	ldr	r0, [pc, #80]	; (8019cd8 <tcp_listen_closed+0x68>)
 8019c88:	f007 fdc8 	bl	802181c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	7d1b      	ldrb	r3, [r3, #20]
 8019c90:	2b01      	cmp	r3, #1
 8019c92:	d006      	beq.n	8019ca2 <tcp_listen_closed+0x32>
 8019c94:	4b0e      	ldr	r3, [pc, #56]	; (8019cd0 <tcp_listen_closed+0x60>)
 8019c96:	f44f 7289 	mov.w	r2, #274	; 0x112
 8019c9a:	4910      	ldr	r1, [pc, #64]	; (8019cdc <tcp_listen_closed+0x6c>)
 8019c9c:	480e      	ldr	r0, [pc, #56]	; (8019cd8 <tcp_listen_closed+0x68>)
 8019c9e:	f007 fdbd 	bl	802181c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	60fb      	str	r3, [r7, #12]
 8019ca6:	e00b      	b.n	8019cc0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8019ca8:	4a0d      	ldr	r2, [pc, #52]	; (8019ce0 <tcp_listen_closed+0x70>)
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	6879      	ldr	r1, [r7, #4]
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f7ff ffb1 	bl	8019c1c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	3301      	adds	r3, #1
 8019cbe:	60fb      	str	r3, [r7, #12]
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	2b03      	cmp	r3, #3
 8019cc4:	d9f0      	bls.n	8019ca8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8019cc6:	bf00      	nop
 8019cc8:	bf00      	nop
 8019cca:	3710      	adds	r7, #16
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}
 8019cd0:	0802407c 	.word	0x0802407c
 8019cd4:	08024174 	.word	0x08024174
 8019cd8:	08024108 	.word	0x08024108
 8019cdc:	08024180 	.word	0x08024180
 8019ce0:	08025ce0 	.word	0x08025ce0

08019ce4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8019ce4:	b5b0      	push	{r4, r5, r7, lr}
 8019ce6:	b088      	sub	sp, #32
 8019ce8:	af04      	add	r7, sp, #16
 8019cea:	6078      	str	r0, [r7, #4]
 8019cec:	460b      	mov	r3, r1
 8019cee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d106      	bne.n	8019d04 <tcp_close_shutdown+0x20>
 8019cf6:	4b63      	ldr	r3, [pc, #396]	; (8019e84 <tcp_close_shutdown+0x1a0>)
 8019cf8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019cfc:	4962      	ldr	r1, [pc, #392]	; (8019e88 <tcp_close_shutdown+0x1a4>)
 8019cfe:	4863      	ldr	r0, [pc, #396]	; (8019e8c <tcp_close_shutdown+0x1a8>)
 8019d00:	f007 fd8c 	bl	802181c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019d04:	78fb      	ldrb	r3, [r7, #3]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d066      	beq.n	8019dd8 <tcp_close_shutdown+0xf4>
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	7d1b      	ldrb	r3, [r3, #20]
 8019d0e:	2b04      	cmp	r3, #4
 8019d10:	d003      	beq.n	8019d1a <tcp_close_shutdown+0x36>
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	7d1b      	ldrb	r3, [r3, #20]
 8019d16:	2b07      	cmp	r3, #7
 8019d18:	d15e      	bne.n	8019dd8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d104      	bne.n	8019d2c <tcp_close_shutdown+0x48>
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019d26:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019d2a:	d055      	beq.n	8019dd8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	8b5b      	ldrh	r3, [r3, #26]
 8019d30:	f003 0310 	and.w	r3, r3, #16
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d106      	bne.n	8019d46 <tcp_close_shutdown+0x62>
 8019d38:	4b52      	ldr	r3, [pc, #328]	; (8019e84 <tcp_close_shutdown+0x1a0>)
 8019d3a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019d3e:	4954      	ldr	r1, [pc, #336]	; (8019e90 <tcp_close_shutdown+0x1ac>)
 8019d40:	4852      	ldr	r0, [pc, #328]	; (8019e8c <tcp_close_shutdown+0x1a8>)
 8019d42:	f007 fd6b 	bl	802181c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019d4e:	687d      	ldr	r5, [r7, #4]
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	3304      	adds	r3, #4
 8019d54:	687a      	ldr	r2, [r7, #4]
 8019d56:	8ad2      	ldrh	r2, [r2, #22]
 8019d58:	6879      	ldr	r1, [r7, #4]
 8019d5a:	8b09      	ldrh	r1, [r1, #24]
 8019d5c:	9102      	str	r1, [sp, #8]
 8019d5e:	9201      	str	r2, [sp, #4]
 8019d60:	9300      	str	r3, [sp, #0]
 8019d62:	462b      	mov	r3, r5
 8019d64:	4622      	mov	r2, r4
 8019d66:	4601      	mov	r1, r0
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f004 fe8d 	bl	801ea88 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8019d6e:	6878      	ldr	r0, [r7, #4]
 8019d70:	f001 f8c6 	bl	801af00 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019d74:	4b47      	ldr	r3, [pc, #284]	; (8019e94 <tcp_close_shutdown+0x1b0>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	687a      	ldr	r2, [r7, #4]
 8019d7a:	429a      	cmp	r2, r3
 8019d7c:	d105      	bne.n	8019d8a <tcp_close_shutdown+0xa6>
 8019d7e:	4b45      	ldr	r3, [pc, #276]	; (8019e94 <tcp_close_shutdown+0x1b0>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	68db      	ldr	r3, [r3, #12]
 8019d84:	4a43      	ldr	r2, [pc, #268]	; (8019e94 <tcp_close_shutdown+0x1b0>)
 8019d86:	6013      	str	r3, [r2, #0]
 8019d88:	e013      	b.n	8019db2 <tcp_close_shutdown+0xce>
 8019d8a:	4b42      	ldr	r3, [pc, #264]	; (8019e94 <tcp_close_shutdown+0x1b0>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	60fb      	str	r3, [r7, #12]
 8019d90:	e00c      	b.n	8019dac <tcp_close_shutdown+0xc8>
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	68db      	ldr	r3, [r3, #12]
 8019d96:	687a      	ldr	r2, [r7, #4]
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	d104      	bne.n	8019da6 <tcp_close_shutdown+0xc2>
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	68da      	ldr	r2, [r3, #12]
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	60da      	str	r2, [r3, #12]
 8019da4:	e005      	b.n	8019db2 <tcp_close_shutdown+0xce>
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	68db      	ldr	r3, [r3, #12]
 8019daa:	60fb      	str	r3, [r7, #12]
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d1ef      	bne.n	8019d92 <tcp_close_shutdown+0xae>
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	2200      	movs	r2, #0
 8019db6:	60da      	str	r2, [r3, #12]
 8019db8:	4b37      	ldr	r3, [pc, #220]	; (8019e98 <tcp_close_shutdown+0x1b4>)
 8019dba:	2201      	movs	r2, #1
 8019dbc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8019dbe:	4b37      	ldr	r3, [pc, #220]	; (8019e9c <tcp_close_shutdown+0x1b8>)
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	687a      	ldr	r2, [r7, #4]
 8019dc4:	429a      	cmp	r2, r3
 8019dc6:	d102      	bne.n	8019dce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019dc8:	f003 fd5a 	bl	801d880 <tcp_trigger_input_pcb_close>
 8019dcc:	e002      	b.n	8019dd4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8019dce:	6878      	ldr	r0, [r7, #4]
 8019dd0:	f7ff fed6 	bl	8019b80 <tcp_free>
      }
      return ERR_OK;
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	e050      	b.n	8019e7a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	7d1b      	ldrb	r3, [r3, #20]
 8019ddc:	2b02      	cmp	r3, #2
 8019dde:	d03b      	beq.n	8019e58 <tcp_close_shutdown+0x174>
 8019de0:	2b02      	cmp	r3, #2
 8019de2:	dc44      	bgt.n	8019e6e <tcp_close_shutdown+0x18a>
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d002      	beq.n	8019dee <tcp_close_shutdown+0x10a>
 8019de8:	2b01      	cmp	r3, #1
 8019dea:	d02a      	beq.n	8019e42 <tcp_close_shutdown+0x15e>
 8019dec:	e03f      	b.n	8019e6e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	8adb      	ldrh	r3, [r3, #22]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d021      	beq.n	8019e3a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019df6:	4b2a      	ldr	r3, [pc, #168]	; (8019ea0 <tcp_close_shutdown+0x1bc>)
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	687a      	ldr	r2, [r7, #4]
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d105      	bne.n	8019e0c <tcp_close_shutdown+0x128>
 8019e00:	4b27      	ldr	r3, [pc, #156]	; (8019ea0 <tcp_close_shutdown+0x1bc>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	68db      	ldr	r3, [r3, #12]
 8019e06:	4a26      	ldr	r2, [pc, #152]	; (8019ea0 <tcp_close_shutdown+0x1bc>)
 8019e08:	6013      	str	r3, [r2, #0]
 8019e0a:	e013      	b.n	8019e34 <tcp_close_shutdown+0x150>
 8019e0c:	4b24      	ldr	r3, [pc, #144]	; (8019ea0 <tcp_close_shutdown+0x1bc>)
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	60bb      	str	r3, [r7, #8]
 8019e12:	e00c      	b.n	8019e2e <tcp_close_shutdown+0x14a>
 8019e14:	68bb      	ldr	r3, [r7, #8]
 8019e16:	68db      	ldr	r3, [r3, #12]
 8019e18:	687a      	ldr	r2, [r7, #4]
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	d104      	bne.n	8019e28 <tcp_close_shutdown+0x144>
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	68da      	ldr	r2, [r3, #12]
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	60da      	str	r2, [r3, #12]
 8019e26:	e005      	b.n	8019e34 <tcp_close_shutdown+0x150>
 8019e28:	68bb      	ldr	r3, [r7, #8]
 8019e2a:	68db      	ldr	r3, [r3, #12]
 8019e2c:	60bb      	str	r3, [r7, #8]
 8019e2e:	68bb      	ldr	r3, [r7, #8]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d1ef      	bne.n	8019e14 <tcp_close_shutdown+0x130>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	2200      	movs	r2, #0
 8019e38:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8019e3a:	6878      	ldr	r0, [r7, #4]
 8019e3c:	f7ff fea0 	bl	8019b80 <tcp_free>
      break;
 8019e40:	e01a      	b.n	8019e78 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8019e42:	6878      	ldr	r0, [r7, #4]
 8019e44:	f7ff ff14 	bl	8019c70 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019e48:	6879      	ldr	r1, [r7, #4]
 8019e4a:	4816      	ldr	r0, [pc, #88]	; (8019ea4 <tcp_close_shutdown+0x1c0>)
 8019e4c:	f001 f8a8 	bl	801afa0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8019e50:	6878      	ldr	r0, [r7, #4]
 8019e52:	f7ff feb1 	bl	8019bb8 <tcp_free_listen>
      break;
 8019e56:	e00f      	b.n	8019e78 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019e58:	6879      	ldr	r1, [r7, #4]
 8019e5a:	480e      	ldr	r0, [pc, #56]	; (8019e94 <tcp_close_shutdown+0x1b0>)
 8019e5c:	f001 f8a0 	bl	801afa0 <tcp_pcb_remove>
 8019e60:	4b0d      	ldr	r3, [pc, #52]	; (8019e98 <tcp_close_shutdown+0x1b4>)
 8019e62:	2201      	movs	r2, #1
 8019e64:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	f7ff fe8a 	bl	8019b80 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019e6c:	e004      	b.n	8019e78 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019e6e:	6878      	ldr	r0, [r7, #4]
 8019e70:	f000 f81a 	bl	8019ea8 <tcp_close_shutdown_fin>
 8019e74:	4603      	mov	r3, r0
 8019e76:	e000      	b.n	8019e7a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019e78:	2300      	movs	r3, #0
}
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	3710      	adds	r7, #16
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bdb0      	pop	{r4, r5, r7, pc}
 8019e82:	bf00      	nop
 8019e84:	0802407c 	.word	0x0802407c
 8019e88:	08024198 	.word	0x08024198
 8019e8c:	08024108 	.word	0x08024108
 8019e90:	080241b8 	.word	0x080241b8
 8019e94:	20011f7c 	.word	0x20011f7c
 8019e98:	20011f78 	.word	0x20011f78
 8019e9c:	20011f90 	.word	0x20011f90
 8019ea0:	20011f88 	.word	0x20011f88
 8019ea4:	20011f84 	.word	0x20011f84

08019ea8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b084      	sub	sp, #16
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d106      	bne.n	8019ec4 <tcp_close_shutdown_fin+0x1c>
 8019eb6:	4b2e      	ldr	r3, [pc, #184]	; (8019f70 <tcp_close_shutdown_fin+0xc8>)
 8019eb8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019ebc:	492d      	ldr	r1, [pc, #180]	; (8019f74 <tcp_close_shutdown_fin+0xcc>)
 8019ebe:	482e      	ldr	r0, [pc, #184]	; (8019f78 <tcp_close_shutdown_fin+0xd0>)
 8019ec0:	f007 fcac 	bl	802181c <iprintf>

  switch (pcb->state) {
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	7d1b      	ldrb	r3, [r3, #20]
 8019ec8:	2b07      	cmp	r3, #7
 8019eca:	d020      	beq.n	8019f0e <tcp_close_shutdown_fin+0x66>
 8019ecc:	2b07      	cmp	r3, #7
 8019ece:	dc2b      	bgt.n	8019f28 <tcp_close_shutdown_fin+0x80>
 8019ed0:	2b03      	cmp	r3, #3
 8019ed2:	d002      	beq.n	8019eda <tcp_close_shutdown_fin+0x32>
 8019ed4:	2b04      	cmp	r3, #4
 8019ed6:	d00d      	beq.n	8019ef4 <tcp_close_shutdown_fin+0x4c>
 8019ed8:	e026      	b.n	8019f28 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	f003 fee2 	bl	801dca4 <tcp_send_fin>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d11f      	bne.n	8019f2c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	2205      	movs	r2, #5
 8019ef0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019ef2:	e01b      	b.n	8019f2c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8019ef4:	6878      	ldr	r0, [r7, #4]
 8019ef6:	f003 fed5 	bl	801dca4 <tcp_send_fin>
 8019efa:	4603      	mov	r3, r0
 8019efc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d114      	bne.n	8019f30 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	2205      	movs	r2, #5
 8019f0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019f0c:	e010      	b.n	8019f30 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019f0e:	6878      	ldr	r0, [r7, #4]
 8019f10:	f003 fec8 	bl	801dca4 <tcp_send_fin>
 8019f14:	4603      	mov	r3, r0
 8019f16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d109      	bne.n	8019f34 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	2209      	movs	r2, #9
 8019f24:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019f26:	e005      	b.n	8019f34 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019f28:	2300      	movs	r3, #0
 8019f2a:	e01c      	b.n	8019f66 <tcp_close_shutdown_fin+0xbe>
      break;
 8019f2c:	bf00      	nop
 8019f2e:	e002      	b.n	8019f36 <tcp_close_shutdown_fin+0x8e>
      break;
 8019f30:	bf00      	nop
 8019f32:	e000      	b.n	8019f36 <tcp_close_shutdown_fin+0x8e>
      break;
 8019f34:	bf00      	nop
  }

  if (err == ERR_OK) {
 8019f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d103      	bne.n	8019f46 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019f3e:	6878      	ldr	r0, [r7, #4]
 8019f40:	f003 ffee 	bl	801df20 <tcp_output>
 8019f44:	e00d      	b.n	8019f62 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8019f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f4e:	d108      	bne.n	8019f62 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	8b5b      	ldrh	r3, [r3, #26]
 8019f54:	f043 0308 	orr.w	r3, r3, #8
 8019f58:	b29a      	uxth	r2, r3
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	e001      	b.n	8019f66 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8019f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	3710      	adds	r7, #16
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}
 8019f6e:	bf00      	nop
 8019f70:	0802407c 	.word	0x0802407c
 8019f74:	08024174 	.word	0x08024174
 8019f78:	08024108 	.word	0x08024108

08019f7c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b082      	sub	sp, #8
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d109      	bne.n	8019f9e <tcp_close+0x22>
 8019f8a:	4b0f      	ldr	r3, [pc, #60]	; (8019fc8 <tcp_close+0x4c>)
 8019f8c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019f90:	490e      	ldr	r1, [pc, #56]	; (8019fcc <tcp_close+0x50>)
 8019f92:	480f      	ldr	r0, [pc, #60]	; (8019fd0 <tcp_close+0x54>)
 8019f94:	f007 fc42 	bl	802181c <iprintf>
 8019f98:	f06f 030f 	mvn.w	r3, #15
 8019f9c:	e00f      	b.n	8019fbe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	7d1b      	ldrb	r3, [r3, #20]
 8019fa2:	2b01      	cmp	r3, #1
 8019fa4:	d006      	beq.n	8019fb4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	8b5b      	ldrh	r3, [r3, #26]
 8019faa:	f043 0310 	orr.w	r3, r3, #16
 8019fae:	b29a      	uxth	r2, r3
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019fb4:	2101      	movs	r1, #1
 8019fb6:	6878      	ldr	r0, [r7, #4]
 8019fb8:	f7ff fe94 	bl	8019ce4 <tcp_close_shutdown>
 8019fbc:	4603      	mov	r3, r0
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	3708      	adds	r7, #8
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	bd80      	pop	{r7, pc}
 8019fc6:	bf00      	nop
 8019fc8:	0802407c 	.word	0x0802407c
 8019fcc:	080241d4 	.word	0x080241d4
 8019fd0:	08024108 	.word	0x08024108

08019fd4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b08e      	sub	sp, #56	; 0x38
 8019fd8:	af04      	add	r7, sp, #16
 8019fda:	6078      	str	r0, [r7, #4]
 8019fdc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d107      	bne.n	8019ff4 <tcp_abandon+0x20>
 8019fe4:	4b52      	ldr	r3, [pc, #328]	; (801a130 <tcp_abandon+0x15c>)
 8019fe6:	f240 223d 	movw	r2, #573	; 0x23d
 8019fea:	4952      	ldr	r1, [pc, #328]	; (801a134 <tcp_abandon+0x160>)
 8019fec:	4852      	ldr	r0, [pc, #328]	; (801a138 <tcp_abandon+0x164>)
 8019fee:	f007 fc15 	bl	802181c <iprintf>
 8019ff2:	e099      	b.n	801a128 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	7d1b      	ldrb	r3, [r3, #20]
 8019ff8:	2b01      	cmp	r3, #1
 8019ffa:	d106      	bne.n	801a00a <tcp_abandon+0x36>
 8019ffc:	4b4c      	ldr	r3, [pc, #304]	; (801a130 <tcp_abandon+0x15c>)
 8019ffe:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a002:	494e      	ldr	r1, [pc, #312]	; (801a13c <tcp_abandon+0x168>)
 801a004:	484c      	ldr	r0, [pc, #304]	; (801a138 <tcp_abandon+0x164>)
 801a006:	f007 fc09 	bl	802181c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	7d1b      	ldrb	r3, [r3, #20]
 801a00e:	2b0a      	cmp	r3, #10
 801a010:	d107      	bne.n	801a022 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801a012:	6879      	ldr	r1, [r7, #4]
 801a014:	484a      	ldr	r0, [pc, #296]	; (801a140 <tcp_abandon+0x16c>)
 801a016:	f000 ffc3 	bl	801afa0 <tcp_pcb_remove>
    tcp_free(pcb);
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f7ff fdb0 	bl	8019b80 <tcp_free>
 801a020:	e082      	b.n	801a128 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801a022:	2300      	movs	r3, #0
 801a024:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801a026:	2300      	movs	r3, #0
 801a028:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a02e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a034:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a03c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	691b      	ldr	r3, [r3, #16]
 801a042:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	7d1b      	ldrb	r3, [r3, #20]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d126      	bne.n	801a09a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	8adb      	ldrh	r3, [r3, #22]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d02e      	beq.n	801a0b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a054:	4b3b      	ldr	r3, [pc, #236]	; (801a144 <tcp_abandon+0x170>)
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	687a      	ldr	r2, [r7, #4]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d105      	bne.n	801a06a <tcp_abandon+0x96>
 801a05e:	4b39      	ldr	r3, [pc, #228]	; (801a144 <tcp_abandon+0x170>)
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	68db      	ldr	r3, [r3, #12]
 801a064:	4a37      	ldr	r2, [pc, #220]	; (801a144 <tcp_abandon+0x170>)
 801a066:	6013      	str	r3, [r2, #0]
 801a068:	e013      	b.n	801a092 <tcp_abandon+0xbe>
 801a06a:	4b36      	ldr	r3, [pc, #216]	; (801a144 <tcp_abandon+0x170>)
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	61fb      	str	r3, [r7, #28]
 801a070:	e00c      	b.n	801a08c <tcp_abandon+0xb8>
 801a072:	69fb      	ldr	r3, [r7, #28]
 801a074:	68db      	ldr	r3, [r3, #12]
 801a076:	687a      	ldr	r2, [r7, #4]
 801a078:	429a      	cmp	r2, r3
 801a07a:	d104      	bne.n	801a086 <tcp_abandon+0xb2>
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	68da      	ldr	r2, [r3, #12]
 801a080:	69fb      	ldr	r3, [r7, #28]
 801a082:	60da      	str	r2, [r3, #12]
 801a084:	e005      	b.n	801a092 <tcp_abandon+0xbe>
 801a086:	69fb      	ldr	r3, [r7, #28]
 801a088:	68db      	ldr	r3, [r3, #12]
 801a08a:	61fb      	str	r3, [r7, #28]
 801a08c:	69fb      	ldr	r3, [r7, #28]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d1ef      	bne.n	801a072 <tcp_abandon+0x9e>
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	2200      	movs	r2, #0
 801a096:	60da      	str	r2, [r3, #12]
 801a098:	e00b      	b.n	801a0b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	8adb      	ldrh	r3, [r3, #22]
 801a0a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a0a4:	6879      	ldr	r1, [r7, #4]
 801a0a6:	4828      	ldr	r0, [pc, #160]	; (801a148 <tcp_abandon+0x174>)
 801a0a8:	f000 ff7a 	bl	801afa0 <tcp_pcb_remove>
 801a0ac:	4b27      	ldr	r3, [pc, #156]	; (801a14c <tcp_abandon+0x178>)
 801a0ae:	2201      	movs	r2, #1
 801a0b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d004      	beq.n	801a0c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0be:	4618      	mov	r0, r3
 801a0c0:	f000 fd1c 	bl	801aafc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d004      	beq.n	801a0d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f000 fd13 	bl	801aafc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d004      	beq.n	801a0e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	f000 fd0a 	bl	801aafc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d00e      	beq.n	801a10c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801a0ee:	6879      	ldr	r1, [r7, #4]
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	3304      	adds	r3, #4
 801a0f4:	687a      	ldr	r2, [r7, #4]
 801a0f6:	8b12      	ldrh	r2, [r2, #24]
 801a0f8:	9202      	str	r2, [sp, #8]
 801a0fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a0fc:	9201      	str	r2, [sp, #4]
 801a0fe:	9300      	str	r3, [sp, #0]
 801a100:	460b      	mov	r3, r1
 801a102:	697a      	ldr	r2, [r7, #20]
 801a104:	69b9      	ldr	r1, [r7, #24]
 801a106:	6878      	ldr	r0, [r7, #4]
 801a108:	f004 fcbe 	bl	801ea88 <tcp_rst>
    }
    last_state = pcb->state;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	7d1b      	ldrb	r3, [r3, #20]
 801a110:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801a112:	6878      	ldr	r0, [r7, #4]
 801a114:	f7ff fd34 	bl	8019b80 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801a118:	693b      	ldr	r3, [r7, #16]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d004      	beq.n	801a128 <tcp_abandon+0x154>
 801a11e:	693b      	ldr	r3, [r7, #16]
 801a120:	f06f 010c 	mvn.w	r1, #12
 801a124:	68f8      	ldr	r0, [r7, #12]
 801a126:	4798      	blx	r3
  }
}
 801a128:	3728      	adds	r7, #40	; 0x28
 801a12a:	46bd      	mov	sp, r7
 801a12c:	bd80      	pop	{r7, pc}
 801a12e:	bf00      	nop
 801a130:	0802407c 	.word	0x0802407c
 801a134:	08024208 	.word	0x08024208
 801a138:	08024108 	.word	0x08024108
 801a13c:	08024224 	.word	0x08024224
 801a140:	20011f8c 	.word	0x20011f8c
 801a144:	20011f88 	.word	0x20011f88
 801a148:	20011f7c 	.word	0x20011f7c
 801a14c:	20011f78 	.word	0x20011f78

0801a150 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b082      	sub	sp, #8
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801a158:	2101      	movs	r1, #1
 801a15a:	6878      	ldr	r0, [r7, #4]
 801a15c:	f7ff ff3a 	bl	8019fd4 <tcp_abandon>
}
 801a160:	bf00      	nop
 801a162:	3708      	adds	r7, #8
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}

0801a168 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b084      	sub	sp, #16
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d106      	bne.n	801a184 <tcp_update_rcv_ann_wnd+0x1c>
 801a176:	4b25      	ldr	r3, [pc, #148]	; (801a20c <tcp_update_rcv_ann_wnd+0xa4>)
 801a178:	f240 32a6 	movw	r2, #934	; 0x3a6
 801a17c:	4924      	ldr	r1, [pc, #144]	; (801a210 <tcp_update_rcv_ann_wnd+0xa8>)
 801a17e:	4825      	ldr	r0, [pc, #148]	; (801a214 <tcp_update_rcv_ann_wnd+0xac>)
 801a180:	f007 fb4c 	bl	802181c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a188:	687a      	ldr	r2, [r7, #4]
 801a18a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801a18c:	4413      	add	r3, r2
 801a18e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a194:	687a      	ldr	r2, [r7, #4]
 801a196:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801a198:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801a19c:	bf28      	it	cs
 801a19e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801a1a2:	b292      	uxth	r2, r2
 801a1a4:	4413      	add	r3, r2
 801a1a6:	68fa      	ldr	r2, [r7, #12]
 801a1a8:	1ad3      	subs	r3, r2, r3
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	db08      	blt.n	801a1c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1ba:	68fa      	ldr	r2, [r7, #12]
 801a1bc:	1ad3      	subs	r3, r2, r3
 801a1be:	e020      	b.n	801a202 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1c8:	1ad3      	subs	r3, r2, r3
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	dd03      	ble.n	801a1d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	2200      	movs	r2, #0
 801a1d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a1d4:	e014      	b.n	801a200 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1de:	1ad3      	subs	r3, r2, r3
 801a1e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a1e8:	d306      	bcc.n	801a1f8 <tcp_update_rcv_ann_wnd+0x90>
 801a1ea:	4b08      	ldr	r3, [pc, #32]	; (801a20c <tcp_update_rcv_ann_wnd+0xa4>)
 801a1ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 801a1f0:	4909      	ldr	r1, [pc, #36]	; (801a218 <tcp_update_rcv_ann_wnd+0xb0>)
 801a1f2:	4808      	ldr	r0, [pc, #32]	; (801a214 <tcp_update_rcv_ann_wnd+0xac>)
 801a1f4:	f007 fb12 	bl	802181c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	b29a      	uxth	r2, r3
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801a200:	2300      	movs	r3, #0
  }
}
 801a202:	4618      	mov	r0, r3
 801a204:	3710      	adds	r7, #16
 801a206:	46bd      	mov	sp, r7
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	bf00      	nop
 801a20c:	0802407c 	.word	0x0802407c
 801a210:	08024320 	.word	0x08024320
 801a214:	08024108 	.word	0x08024108
 801a218:	08024344 	.word	0x08024344

0801a21c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b084      	sub	sp, #16
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
 801a224:	460b      	mov	r3, r1
 801a226:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d107      	bne.n	801a23e <tcp_recved+0x22>
 801a22e:	4b1f      	ldr	r3, [pc, #124]	; (801a2ac <tcp_recved+0x90>)
 801a230:	f240 32cf 	movw	r2, #975	; 0x3cf
 801a234:	491e      	ldr	r1, [pc, #120]	; (801a2b0 <tcp_recved+0x94>)
 801a236:	481f      	ldr	r0, [pc, #124]	; (801a2b4 <tcp_recved+0x98>)
 801a238:	f007 faf0 	bl	802181c <iprintf>
 801a23c:	e032      	b.n	801a2a4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	7d1b      	ldrb	r3, [r3, #20]
 801a242:	2b01      	cmp	r3, #1
 801a244:	d106      	bne.n	801a254 <tcp_recved+0x38>
 801a246:	4b19      	ldr	r3, [pc, #100]	; (801a2ac <tcp_recved+0x90>)
 801a248:	f240 32d2 	movw	r2, #978	; 0x3d2
 801a24c:	491a      	ldr	r1, [pc, #104]	; (801a2b8 <tcp_recved+0x9c>)
 801a24e:	4819      	ldr	r0, [pc, #100]	; (801a2b4 <tcp_recved+0x98>)
 801a250:	f007 fae4 	bl	802181c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a258:	887b      	ldrh	r3, [r7, #2]
 801a25a:	4413      	add	r3, r2
 801a25c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801a25e:	89fb      	ldrh	r3, [r7, #14]
 801a260:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a264:	d804      	bhi.n	801a270 <tcp_recved+0x54>
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a26a:	89fa      	ldrh	r2, [r7, #14]
 801a26c:	429a      	cmp	r2, r3
 801a26e:	d204      	bcs.n	801a27a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a276:	851a      	strh	r2, [r3, #40]	; 0x28
 801a278:	e002      	b.n	801a280 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	89fa      	ldrh	r2, [r7, #14]
 801a27e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	f7ff ff71 	bl	801a168 <tcp_update_rcv_ann_wnd>
 801a286:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a28e:	d309      	bcc.n	801a2a4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	8b5b      	ldrh	r3, [r3, #26]
 801a294:	f043 0302 	orr.w	r3, r3, #2
 801a298:	b29a      	uxth	r2, r3
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a29e:	6878      	ldr	r0, [r7, #4]
 801a2a0:	f003 fe3e 	bl	801df20 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801a2a4:	3710      	adds	r7, #16
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bd80      	pop	{r7, pc}
 801a2aa:	bf00      	nop
 801a2ac:	0802407c 	.word	0x0802407c
 801a2b0:	08024360 	.word	0x08024360
 801a2b4:	08024108 	.word	0x08024108
 801a2b8:	08024378 	.word	0x08024378

0801a2bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801a2bc:	b5b0      	push	{r4, r5, r7, lr}
 801a2be:	b090      	sub	sp, #64	; 0x40
 801a2c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801a2c8:	4b94      	ldr	r3, [pc, #592]	; (801a51c <tcp_slowtmr+0x260>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	3301      	adds	r3, #1
 801a2ce:	4a93      	ldr	r2, [pc, #588]	; (801a51c <tcp_slowtmr+0x260>)
 801a2d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801a2d2:	4b93      	ldr	r3, [pc, #588]	; (801a520 <tcp_slowtmr+0x264>)
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	3301      	adds	r3, #1
 801a2d8:	b2da      	uxtb	r2, r3
 801a2da:	4b91      	ldr	r3, [pc, #580]	; (801a520 <tcp_slowtmr+0x264>)
 801a2dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801a2e2:	4b90      	ldr	r3, [pc, #576]	; (801a524 <tcp_slowtmr+0x268>)
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801a2e8:	e29d      	b.n	801a826 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ec:	7d1b      	ldrb	r3, [r3, #20]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d106      	bne.n	801a300 <tcp_slowtmr+0x44>
 801a2f2:	4b8d      	ldr	r3, [pc, #564]	; (801a528 <tcp_slowtmr+0x26c>)
 801a2f4:	f240 42be 	movw	r2, #1214	; 0x4be
 801a2f8:	498c      	ldr	r1, [pc, #560]	; (801a52c <tcp_slowtmr+0x270>)
 801a2fa:	488d      	ldr	r0, [pc, #564]	; (801a530 <tcp_slowtmr+0x274>)
 801a2fc:	f007 fa8e 	bl	802181c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a302:	7d1b      	ldrb	r3, [r3, #20]
 801a304:	2b01      	cmp	r3, #1
 801a306:	d106      	bne.n	801a316 <tcp_slowtmr+0x5a>
 801a308:	4b87      	ldr	r3, [pc, #540]	; (801a528 <tcp_slowtmr+0x26c>)
 801a30a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801a30e:	4989      	ldr	r1, [pc, #548]	; (801a534 <tcp_slowtmr+0x278>)
 801a310:	4887      	ldr	r0, [pc, #540]	; (801a530 <tcp_slowtmr+0x274>)
 801a312:	f007 fa83 	bl	802181c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a318:	7d1b      	ldrb	r3, [r3, #20]
 801a31a:	2b0a      	cmp	r3, #10
 801a31c:	d106      	bne.n	801a32c <tcp_slowtmr+0x70>
 801a31e:	4b82      	ldr	r3, [pc, #520]	; (801a528 <tcp_slowtmr+0x26c>)
 801a320:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801a324:	4984      	ldr	r1, [pc, #528]	; (801a538 <tcp_slowtmr+0x27c>)
 801a326:	4882      	ldr	r0, [pc, #520]	; (801a530 <tcp_slowtmr+0x274>)
 801a328:	f007 fa78 	bl	802181c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32e:	7f9a      	ldrb	r2, [r3, #30]
 801a330:	4b7b      	ldr	r3, [pc, #492]	; (801a520 <tcp_slowtmr+0x264>)
 801a332:	781b      	ldrb	r3, [r3, #0]
 801a334:	429a      	cmp	r2, r3
 801a336:	d105      	bne.n	801a344 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a33a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a33e:	68db      	ldr	r3, [r3, #12]
 801a340:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801a342:	e270      	b.n	801a826 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801a344:	4b76      	ldr	r3, [pc, #472]	; (801a520 <tcp_slowtmr+0x264>)
 801a346:	781a      	ldrb	r2, [r3, #0]
 801a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a34a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801a34c:	2300      	movs	r3, #0
 801a34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801a352:	2300      	movs	r3, #0
 801a354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35a:	7d1b      	ldrb	r3, [r3, #20]
 801a35c:	2b02      	cmp	r3, #2
 801a35e:	d10a      	bne.n	801a376 <tcp_slowtmr+0xba>
 801a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a366:	2b05      	cmp	r3, #5
 801a368:	d905      	bls.n	801a376 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801a36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a36e:	3301      	adds	r3, #1
 801a370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a374:	e11e      	b.n	801a5b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a378:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a37c:	2b0b      	cmp	r3, #11
 801a37e:	d905      	bls.n	801a38c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801a380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a384:	3301      	adds	r3, #1
 801a386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a38a:	e113      	b.n	801a5b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a38e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a392:	2b00      	cmp	r3, #0
 801a394:	d075      	beq.n	801a482 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d006      	beq.n	801a3ac <tcp_slowtmr+0xf0>
 801a39e:	4b62      	ldr	r3, [pc, #392]	; (801a528 <tcp_slowtmr+0x26c>)
 801a3a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801a3a4:	4965      	ldr	r1, [pc, #404]	; (801a53c <tcp_slowtmr+0x280>)
 801a3a6:	4862      	ldr	r0, [pc, #392]	; (801a530 <tcp_slowtmr+0x274>)
 801a3a8:	f007 fa38 	bl	802181c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d106      	bne.n	801a3c2 <tcp_slowtmr+0x106>
 801a3b4:	4b5c      	ldr	r3, [pc, #368]	; (801a528 <tcp_slowtmr+0x26c>)
 801a3b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a3ba:	4961      	ldr	r1, [pc, #388]	; (801a540 <tcp_slowtmr+0x284>)
 801a3bc:	485c      	ldr	r0, [pc, #368]	; (801a530 <tcp_slowtmr+0x274>)
 801a3be:	f007 fa2d 	bl	802181c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a3c8:	2b0b      	cmp	r3, #11
 801a3ca:	d905      	bls.n	801a3d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801a3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3d0:	3301      	adds	r3, #1
 801a3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a3d6:	e0ed      	b.n	801a5b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a3de:	3b01      	subs	r3, #1
 801a3e0:	4a58      	ldr	r2, [pc, #352]	; (801a544 <tcp_slowtmr+0x288>)
 801a3e2:	5cd3      	ldrb	r3, [r2, r3]
 801a3e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a3ec:	7c7a      	ldrb	r2, [r7, #17]
 801a3ee:	429a      	cmp	r2, r3
 801a3f0:	d907      	bls.n	801a402 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	b2da      	uxtb	r2, r3
 801a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a404:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a408:	7c7a      	ldrb	r2, [r7, #17]
 801a40a:	429a      	cmp	r2, r3
 801a40c:	f200 80d2 	bhi.w	801a5b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801a410:	2301      	movs	r3, #1
 801a412:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d108      	bne.n	801a430 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a420:	f004 fc26 	bl	801ec70 <tcp_zero_window_probe>
 801a424:	4603      	mov	r3, r0
 801a426:	2b00      	cmp	r3, #0
 801a428:	d014      	beq.n	801a454 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801a42a:	2300      	movs	r3, #0
 801a42c:	623b      	str	r3, [r7, #32]
 801a42e:	e011      	b.n	801a454 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a436:	4619      	mov	r1, r3
 801a438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a43a:	f003 faeb 	bl	801da14 <tcp_split_unsent_seg>
 801a43e:	4603      	mov	r3, r0
 801a440:	2b00      	cmp	r3, #0
 801a442:	d107      	bne.n	801a454 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801a444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a446:	f003 fd6b 	bl	801df20 <tcp_output>
 801a44a:	4603      	mov	r3, r0
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d101      	bne.n	801a454 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801a450:	2300      	movs	r3, #0
 801a452:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801a454:	6a3b      	ldr	r3, [r7, #32]
 801a456:	2b00      	cmp	r3, #0
 801a458:	f000 80ac 	beq.w	801a5b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a45e:	2200      	movs	r2, #0
 801a460:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a466:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a46a:	2b06      	cmp	r3, #6
 801a46c:	f200 80a2 	bhi.w	801a5b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a472:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a476:	3301      	adds	r3, #1
 801a478:	b2da      	uxtb	r2, r3
 801a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a47c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801a480:	e098      	b.n	801a5b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a484:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a488:	2b00      	cmp	r3, #0
 801a48a:	db0f      	blt.n	801a4ac <tcp_slowtmr+0x1f0>
 801a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a48e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a492:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a496:	4293      	cmp	r3, r2
 801a498:	d008      	beq.n	801a4ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a49c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a4a0:	b29b      	uxth	r3, r3
 801a4a2:	3301      	adds	r3, #1
 801a4a4:	b29b      	uxth	r3, r3
 801a4a6:	b21a      	sxth	r2, r3
 801a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	db7b      	blt.n	801a5b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a4be:	f004 f821 	bl	801e504 <tcp_rexmit_rto_prepare>
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d007      	beq.n	801a4d8 <tcp_slowtmr+0x21c>
 801a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d171      	bne.n	801a5b4 <tcp_slowtmr+0x2f8>
 801a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d06d      	beq.n	801a5b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4da:	7d1b      	ldrb	r3, [r3, #20]
 801a4dc:	2b02      	cmp	r3, #2
 801a4de:	d03a      	beq.n	801a556 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a4e6:	2b0c      	cmp	r3, #12
 801a4e8:	bf28      	it	cs
 801a4ea:	230c      	movcs	r3, #12
 801a4ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a4f4:	10db      	asrs	r3, r3, #3
 801a4f6:	b21b      	sxth	r3, r3
 801a4f8:	461a      	mov	r2, r3
 801a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a500:	4413      	add	r3, r2
 801a502:	7efa      	ldrb	r2, [r7, #27]
 801a504:	4910      	ldr	r1, [pc, #64]	; (801a548 <tcp_slowtmr+0x28c>)
 801a506:	5c8a      	ldrb	r2, [r1, r2]
 801a508:	4093      	lsls	r3, r2
 801a50a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801a512:	4293      	cmp	r3, r2
 801a514:	dc1a      	bgt.n	801a54c <tcp_slowtmr+0x290>
 801a516:	697b      	ldr	r3, [r7, #20]
 801a518:	b21a      	sxth	r2, r3
 801a51a:	e019      	b.n	801a550 <tcp_slowtmr+0x294>
 801a51c:	20011f80 	.word	0x20011f80
 801a520:	200090aa 	.word	0x200090aa
 801a524:	20011f7c 	.word	0x20011f7c
 801a528:	0802407c 	.word	0x0802407c
 801a52c:	08024408 	.word	0x08024408
 801a530:	08024108 	.word	0x08024108
 801a534:	08024434 	.word	0x08024434
 801a538:	08024460 	.word	0x08024460
 801a53c:	08024490 	.word	0x08024490
 801a540:	080244c4 	.word	0x080244c4
 801a544:	08025cd8 	.word	0x08025cd8
 801a548:	08025cc8 	.word	0x08025cc8
 801a54c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a552:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a558:	2200      	movs	r2, #0
 801a55a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a55e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a564:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a568:	4293      	cmp	r3, r2
 801a56a:	bf28      	it	cs
 801a56c:	4613      	movcs	r3, r2
 801a56e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a570:	8a7b      	ldrh	r3, [r7, #18]
 801a572:	085b      	lsrs	r3, r3, #1
 801a574:	b29a      	uxth	r2, r3
 801a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a578:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a57e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a586:	005b      	lsls	r3, r3, #1
 801a588:	b29b      	uxth	r3, r3
 801a58a:	429a      	cmp	r2, r3
 801a58c:	d206      	bcs.n	801a59c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a592:	005b      	lsls	r3, r3, #1
 801a594:	b29a      	uxth	r2, r3
 801a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a598:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a59e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a5ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a5b0:	f004 f818 	bl	801e5e4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b6:	7d1b      	ldrb	r3, [r3, #20]
 801a5b8:	2b06      	cmp	r3, #6
 801a5ba:	d111      	bne.n	801a5e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5be:	8b5b      	ldrh	r3, [r3, #26]
 801a5c0:	f003 0310 	and.w	r3, r3, #16
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d00b      	beq.n	801a5e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a5c8:	4b9c      	ldr	r3, [pc, #624]	; (801a83c <tcp_slowtmr+0x580>)
 801a5ca:	681a      	ldr	r2, [r3, #0]
 801a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ce:	6a1b      	ldr	r3, [r3, #32]
 801a5d0:	1ad3      	subs	r3, r2, r3
 801a5d2:	2b28      	cmp	r3, #40	; 0x28
 801a5d4:	d904      	bls.n	801a5e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a5d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5da:	3301      	adds	r3, #1
 801a5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e2:	7a5b      	ldrb	r3, [r3, #9]
 801a5e4:	f003 0308 	and.w	r3, r3, #8
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d04a      	beq.n	801a682 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a5f0:	2b04      	cmp	r3, #4
 801a5f2:	d003      	beq.n	801a5fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a5f8:	2b07      	cmp	r3, #7
 801a5fa:	d142      	bne.n	801a682 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a5fc:	4b8f      	ldr	r3, [pc, #572]	; (801a83c <tcp_slowtmr+0x580>)
 801a5fe:	681a      	ldr	r2, [r3, #0]
 801a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a602:	6a1b      	ldr	r3, [r3, #32]
 801a604:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a608:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a60c:	4b8c      	ldr	r3, [pc, #560]	; (801a840 <tcp_slowtmr+0x584>)
 801a60e:	440b      	add	r3, r1
 801a610:	498c      	ldr	r1, [pc, #560]	; (801a844 <tcp_slowtmr+0x588>)
 801a612:	fba1 1303 	umull	r1, r3, r1, r3
 801a616:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a618:	429a      	cmp	r2, r3
 801a61a:	d90a      	bls.n	801a632 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801a61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a620:	3301      	adds	r3, #1
 801a622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801a626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a62a:	3301      	adds	r3, #1
 801a62c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a630:	e027      	b.n	801a682 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a632:	4b82      	ldr	r3, [pc, #520]	; (801a83c <tcp_slowtmr+0x580>)
 801a634:	681a      	ldr	r2, [r3, #0]
 801a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a638:	6a1b      	ldr	r3, [r3, #32]
 801a63a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a63e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a644:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a648:	4618      	mov	r0, r3
 801a64a:	4b7f      	ldr	r3, [pc, #508]	; (801a848 <tcp_slowtmr+0x58c>)
 801a64c:	fb03 f300 	mul.w	r3, r3, r0
 801a650:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a652:	497c      	ldr	r1, [pc, #496]	; (801a844 <tcp_slowtmr+0x588>)
 801a654:	fba1 1303 	umull	r1, r3, r1, r3
 801a658:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a65a:	429a      	cmp	r2, r3
 801a65c:	d911      	bls.n	801a682 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801a65e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a660:	f004 fac6 	bl	801ebf0 <tcp_keepalive>
 801a664:	4603      	mov	r3, r0
 801a666:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801a66a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d107      	bne.n	801a682 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a674:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a678:	3301      	adds	r3, #1
 801a67a:	b2da      	uxtb	r2, r3
 801a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a67e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a686:	2b00      	cmp	r3, #0
 801a688:	d011      	beq.n	801a6ae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a68a:	4b6c      	ldr	r3, [pc, #432]	; (801a83c <tcp_slowtmr+0x580>)
 801a68c:	681a      	ldr	r2, [r3, #0]
 801a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a690:	6a1b      	ldr	r3, [r3, #32]
 801a692:	1ad2      	subs	r2, r2, r3
 801a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a696:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a69a:	4619      	mov	r1, r3
 801a69c:	460b      	mov	r3, r1
 801a69e:	005b      	lsls	r3, r3, #1
 801a6a0:	440b      	add	r3, r1
 801a6a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a6a4:	429a      	cmp	r2, r3
 801a6a6:	d302      	bcc.n	801a6ae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a6a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a6aa:	f000 fddd 	bl	801b268 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6b0:	7d1b      	ldrb	r3, [r3, #20]
 801a6b2:	2b03      	cmp	r3, #3
 801a6b4:	d10b      	bne.n	801a6ce <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a6b6:	4b61      	ldr	r3, [pc, #388]	; (801a83c <tcp_slowtmr+0x580>)
 801a6b8:	681a      	ldr	r2, [r3, #0]
 801a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6bc:	6a1b      	ldr	r3, [r3, #32]
 801a6be:	1ad3      	subs	r3, r2, r3
 801a6c0:	2b28      	cmp	r3, #40	; 0x28
 801a6c2:	d904      	bls.n	801a6ce <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6c8:	3301      	adds	r3, #1
 801a6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6d0:	7d1b      	ldrb	r3, [r3, #20]
 801a6d2:	2b09      	cmp	r3, #9
 801a6d4:	d10b      	bne.n	801a6ee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a6d6:	4b59      	ldr	r3, [pc, #356]	; (801a83c <tcp_slowtmr+0x580>)
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6dc:	6a1b      	ldr	r3, [r3, #32]
 801a6de:	1ad3      	subs	r3, r2, r3
 801a6e0:	2bf0      	cmp	r3, #240	; 0xf0
 801a6e2:	d904      	bls.n	801a6ee <tcp_slowtmr+0x432>
        ++pcb_remove;
 801a6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6e8:	3301      	adds	r3, #1
 801a6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d060      	beq.n	801a7b8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a6fc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a6fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a700:	f000 fbfe 	bl	801af00 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a706:	2b00      	cmp	r3, #0
 801a708:	d010      	beq.n	801a72c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a70a:	4b50      	ldr	r3, [pc, #320]	; (801a84c <tcp_slowtmr+0x590>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a710:	429a      	cmp	r2, r3
 801a712:	d106      	bne.n	801a722 <tcp_slowtmr+0x466>
 801a714:	4b4e      	ldr	r3, [pc, #312]	; (801a850 <tcp_slowtmr+0x594>)
 801a716:	f240 526d 	movw	r2, #1389	; 0x56d
 801a71a:	494e      	ldr	r1, [pc, #312]	; (801a854 <tcp_slowtmr+0x598>)
 801a71c:	484e      	ldr	r0, [pc, #312]	; (801a858 <tcp_slowtmr+0x59c>)
 801a71e:	f007 f87d 	bl	802181c <iprintf>
        prev->next = pcb->next;
 801a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a724:	68da      	ldr	r2, [r3, #12]
 801a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a728:	60da      	str	r2, [r3, #12]
 801a72a:	e00f      	b.n	801a74c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a72c:	4b47      	ldr	r3, [pc, #284]	; (801a84c <tcp_slowtmr+0x590>)
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a732:	429a      	cmp	r2, r3
 801a734:	d006      	beq.n	801a744 <tcp_slowtmr+0x488>
 801a736:	4b46      	ldr	r3, [pc, #280]	; (801a850 <tcp_slowtmr+0x594>)
 801a738:	f240 5271 	movw	r2, #1393	; 0x571
 801a73c:	4947      	ldr	r1, [pc, #284]	; (801a85c <tcp_slowtmr+0x5a0>)
 801a73e:	4846      	ldr	r0, [pc, #280]	; (801a858 <tcp_slowtmr+0x59c>)
 801a740:	f007 f86c 	bl	802181c <iprintf>
        tcp_active_pcbs = pcb->next;
 801a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a746:	68db      	ldr	r3, [r3, #12]
 801a748:	4a40      	ldr	r2, [pc, #256]	; (801a84c <tcp_slowtmr+0x590>)
 801a74a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a74c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a750:	2b00      	cmp	r3, #0
 801a752:	d013      	beq.n	801a77c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a756:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a75a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a75c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a760:	3304      	adds	r3, #4
 801a762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a764:	8ad2      	ldrh	r2, [r2, #22]
 801a766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a768:	8b09      	ldrh	r1, [r1, #24]
 801a76a:	9102      	str	r1, [sp, #8]
 801a76c:	9201      	str	r2, [sp, #4]
 801a76e:	9300      	str	r3, [sp, #0]
 801a770:	462b      	mov	r3, r5
 801a772:	4622      	mov	r2, r4
 801a774:	4601      	mov	r1, r0
 801a776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a778:	f004 f986 	bl	801ea88 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a77e:	691b      	ldr	r3, [r3, #16]
 801a780:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a784:	7d1b      	ldrb	r3, [r3, #20]
 801a786:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78e:	68db      	ldr	r3, [r3, #12]
 801a790:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a792:	6838      	ldr	r0, [r7, #0]
 801a794:	f7ff f9f4 	bl	8019b80 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a798:	4b31      	ldr	r3, [pc, #196]	; (801a860 <tcp_slowtmr+0x5a4>)
 801a79a:	2200      	movs	r2, #0
 801a79c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d004      	beq.n	801a7ae <tcp_slowtmr+0x4f2>
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	f06f 010c 	mvn.w	r1, #12
 801a7aa:	68b8      	ldr	r0, [r7, #8]
 801a7ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a7ae:	4b2c      	ldr	r3, [pc, #176]	; (801a860 <tcp_slowtmr+0x5a4>)
 801a7b0:	781b      	ldrb	r3, [r3, #0]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d037      	beq.n	801a826 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801a7b6:	e592      	b.n	801a2de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7be:	68db      	ldr	r3, [r3, #12]
 801a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c4:	7f1b      	ldrb	r3, [r3, #28]
 801a7c6:	3301      	adds	r3, #1
 801a7c8:	b2da      	uxtb	r2, r3
 801a7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d0:	7f1a      	ldrb	r2, [r3, #28]
 801a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d4:	7f5b      	ldrb	r3, [r3, #29]
 801a7d6:	429a      	cmp	r2, r3
 801a7d8:	d325      	bcc.n	801a826 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7dc:	2200      	movs	r2, #0
 801a7de:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a7e0:	4b1f      	ldr	r3, [pc, #124]	; (801a860 <tcp_slowtmr+0x5a4>)
 801a7e2:	2200      	movs	r2, #0
 801a7e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d00b      	beq.n	801a808 <tcp_slowtmr+0x54c>
 801a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a7f8:	6912      	ldr	r2, [r2, #16]
 801a7fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a7fc:	4610      	mov	r0, r2
 801a7fe:	4798      	blx	r3
 801a800:	4603      	mov	r3, r0
 801a802:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a806:	e002      	b.n	801a80e <tcp_slowtmr+0x552>
 801a808:	2300      	movs	r3, #0
 801a80a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a80e:	4b14      	ldr	r3, [pc, #80]	; (801a860 <tcp_slowtmr+0x5a4>)
 801a810:	781b      	ldrb	r3, [r3, #0]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d000      	beq.n	801a818 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801a816:	e562      	b.n	801a2de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a818:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d102      	bne.n	801a826 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801a820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a822:	f003 fb7d 	bl	801df20 <tcp_output>
  while (pcb != NULL) {
 801a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f47f ad5e 	bne.w	801a2ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a82e:	2300      	movs	r3, #0
 801a830:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a832:	4b0c      	ldr	r3, [pc, #48]	; (801a864 <tcp_slowtmr+0x5a8>)
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a838:	e069      	b.n	801a90e <tcp_slowtmr+0x652>
 801a83a:	bf00      	nop
 801a83c:	20011f80 	.word	0x20011f80
 801a840:	000a4cb8 	.word	0x000a4cb8
 801a844:	10624dd3 	.word	0x10624dd3
 801a848:	000124f8 	.word	0x000124f8
 801a84c:	20011f7c 	.word	0x20011f7c
 801a850:	0802407c 	.word	0x0802407c
 801a854:	080244fc 	.word	0x080244fc
 801a858:	08024108 	.word	0x08024108
 801a85c:	08024528 	.word	0x08024528
 801a860:	20011f78 	.word	0x20011f78
 801a864:	20011f8c 	.word	0x20011f8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a86a:	7d1b      	ldrb	r3, [r3, #20]
 801a86c:	2b0a      	cmp	r3, #10
 801a86e:	d006      	beq.n	801a87e <tcp_slowtmr+0x5c2>
 801a870:	4b2b      	ldr	r3, [pc, #172]	; (801a920 <tcp_slowtmr+0x664>)
 801a872:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a876:	492b      	ldr	r1, [pc, #172]	; (801a924 <tcp_slowtmr+0x668>)
 801a878:	482b      	ldr	r0, [pc, #172]	; (801a928 <tcp_slowtmr+0x66c>)
 801a87a:	f006 ffcf 	bl	802181c <iprintf>
    pcb_remove = 0;
 801a87e:	2300      	movs	r3, #0
 801a880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a884:	4b29      	ldr	r3, [pc, #164]	; (801a92c <tcp_slowtmr+0x670>)
 801a886:	681a      	ldr	r2, [r3, #0]
 801a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a88a:	6a1b      	ldr	r3, [r3, #32]
 801a88c:	1ad3      	subs	r3, r2, r3
 801a88e:	2bf0      	cmp	r3, #240	; 0xf0
 801a890:	d904      	bls.n	801a89c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a896:	3301      	adds	r3, #1
 801a898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d02f      	beq.n	801a904 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a8a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8a6:	f000 fb2b 	bl	801af00 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d010      	beq.n	801a8d2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a8b0:	4b1f      	ldr	r3, [pc, #124]	; (801a930 <tcp_slowtmr+0x674>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a8b6:	429a      	cmp	r2, r3
 801a8b8:	d106      	bne.n	801a8c8 <tcp_slowtmr+0x60c>
 801a8ba:	4b19      	ldr	r3, [pc, #100]	; (801a920 <tcp_slowtmr+0x664>)
 801a8bc:	f240 52af 	movw	r2, #1455	; 0x5af
 801a8c0:	491c      	ldr	r1, [pc, #112]	; (801a934 <tcp_slowtmr+0x678>)
 801a8c2:	4819      	ldr	r0, [pc, #100]	; (801a928 <tcp_slowtmr+0x66c>)
 801a8c4:	f006 ffaa 	bl	802181c <iprintf>
        prev->next = pcb->next;
 801a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ca:	68da      	ldr	r2, [r3, #12]
 801a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8ce:	60da      	str	r2, [r3, #12]
 801a8d0:	e00f      	b.n	801a8f2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a8d2:	4b17      	ldr	r3, [pc, #92]	; (801a930 <tcp_slowtmr+0x674>)
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a8d8:	429a      	cmp	r2, r3
 801a8da:	d006      	beq.n	801a8ea <tcp_slowtmr+0x62e>
 801a8dc:	4b10      	ldr	r3, [pc, #64]	; (801a920 <tcp_slowtmr+0x664>)
 801a8de:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a8e2:	4915      	ldr	r1, [pc, #84]	; (801a938 <tcp_slowtmr+0x67c>)
 801a8e4:	4810      	ldr	r0, [pc, #64]	; (801a928 <tcp_slowtmr+0x66c>)
 801a8e6:	f006 ff99 	bl	802181c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ec:	68db      	ldr	r3, [r3, #12]
 801a8ee:	4a10      	ldr	r2, [pc, #64]	; (801a930 <tcp_slowtmr+0x674>)
 801a8f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f8:	68db      	ldr	r3, [r3, #12]
 801a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a8fc:	69f8      	ldr	r0, [r7, #28]
 801a8fe:	f7ff f93f 	bl	8019b80 <tcp_free>
 801a902:	e004      	b.n	801a90e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a906:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a90a:	68db      	ldr	r3, [r3, #12]
 801a90c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a910:	2b00      	cmp	r3, #0
 801a912:	d1a9      	bne.n	801a868 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a914:	bf00      	nop
 801a916:	bf00      	nop
 801a918:	3730      	adds	r7, #48	; 0x30
 801a91a:	46bd      	mov	sp, r7
 801a91c:	bdb0      	pop	{r4, r5, r7, pc}
 801a91e:	bf00      	nop
 801a920:	0802407c 	.word	0x0802407c
 801a924:	08024554 	.word	0x08024554
 801a928:	08024108 	.word	0x08024108
 801a92c:	20011f80 	.word	0x20011f80
 801a930:	20011f8c 	.word	0x20011f8c
 801a934:	08024584 	.word	0x08024584
 801a938:	080245ac 	.word	0x080245ac

0801a93c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b082      	sub	sp, #8
 801a940:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a942:	4b2d      	ldr	r3, [pc, #180]	; (801a9f8 <tcp_fasttmr+0xbc>)
 801a944:	781b      	ldrb	r3, [r3, #0]
 801a946:	3301      	adds	r3, #1
 801a948:	b2da      	uxtb	r2, r3
 801a94a:	4b2b      	ldr	r3, [pc, #172]	; (801a9f8 <tcp_fasttmr+0xbc>)
 801a94c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a94e:	4b2b      	ldr	r3, [pc, #172]	; (801a9fc <tcp_fasttmr+0xc0>)
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a954:	e048      	b.n	801a9e8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	7f9a      	ldrb	r2, [r3, #30]
 801a95a:	4b27      	ldr	r3, [pc, #156]	; (801a9f8 <tcp_fasttmr+0xbc>)
 801a95c:	781b      	ldrb	r3, [r3, #0]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d03f      	beq.n	801a9e2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a962:	4b25      	ldr	r3, [pc, #148]	; (801a9f8 <tcp_fasttmr+0xbc>)
 801a964:	781a      	ldrb	r2, [r3, #0]
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	8b5b      	ldrh	r3, [r3, #26]
 801a96e:	f003 0301 	and.w	r3, r3, #1
 801a972:	2b00      	cmp	r3, #0
 801a974:	d010      	beq.n	801a998 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	8b5b      	ldrh	r3, [r3, #26]
 801a97a:	f043 0302 	orr.w	r3, r3, #2
 801a97e:	b29a      	uxth	r2, r3
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a984:	6878      	ldr	r0, [r7, #4]
 801a986:	f003 facb 	bl	801df20 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	8b5b      	ldrh	r3, [r3, #26]
 801a98e:	f023 0303 	bic.w	r3, r3, #3
 801a992:	b29a      	uxth	r2, r3
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	8b5b      	ldrh	r3, [r3, #26]
 801a99c:	f003 0308 	and.w	r3, r3, #8
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d009      	beq.n	801a9b8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	8b5b      	ldrh	r3, [r3, #26]
 801a9a8:	f023 0308 	bic.w	r3, r3, #8
 801a9ac:	b29a      	uxth	r2, r3
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a9b2:	6878      	ldr	r0, [r7, #4]
 801a9b4:	f7ff fa78 	bl	8019ea8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	68db      	ldr	r3, [r3, #12]
 801a9bc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d00a      	beq.n	801a9dc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a9c6:	4b0e      	ldr	r3, [pc, #56]	; (801aa00 <tcp_fasttmr+0xc4>)
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a9cc:	6878      	ldr	r0, [r7, #4]
 801a9ce:	f000 f819 	bl	801aa04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a9d2:	4b0b      	ldr	r3, [pc, #44]	; (801aa00 <tcp_fasttmr+0xc4>)
 801a9d4:	781b      	ldrb	r3, [r3, #0]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d000      	beq.n	801a9dc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a9da:	e7b8      	b.n	801a94e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	607b      	str	r3, [r7, #4]
 801a9e0:	e002      	b.n	801a9e8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	68db      	ldr	r3, [r3, #12]
 801a9e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d1b3      	bne.n	801a956 <tcp_fasttmr+0x1a>
    }
  }
}
 801a9ee:	bf00      	nop
 801a9f0:	bf00      	nop
 801a9f2:	3708      	adds	r7, #8
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	200090aa 	.word	0x200090aa
 801a9fc:	20011f7c 	.word	0x20011f7c
 801aa00:	20011f78 	.word	0x20011f78

0801aa04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801aa04:	b590      	push	{r4, r7, lr}
 801aa06:	b085      	sub	sp, #20
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d109      	bne.n	801aa26 <tcp_process_refused_data+0x22>
 801aa12:	4b37      	ldr	r3, [pc, #220]	; (801aaf0 <tcp_process_refused_data+0xec>)
 801aa14:	f240 6209 	movw	r2, #1545	; 0x609
 801aa18:	4936      	ldr	r1, [pc, #216]	; (801aaf4 <tcp_process_refused_data+0xf0>)
 801aa1a:	4837      	ldr	r0, [pc, #220]	; (801aaf8 <tcp_process_refused_data+0xf4>)
 801aa1c:	f006 fefe 	bl	802181c <iprintf>
 801aa20:	f06f 030f 	mvn.w	r3, #15
 801aa24:	e060      	b.n	801aae8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa2a:	7b5b      	ldrb	r3, [r3, #13]
 801aa2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2200      	movs	r2, #0
 801aa38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d00b      	beq.n	801aa5c <tcp_process_refused_data+0x58>
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	6918      	ldr	r0, [r3, #16]
 801aa4e:	2300      	movs	r3, #0
 801aa50:	68ba      	ldr	r2, [r7, #8]
 801aa52:	6879      	ldr	r1, [r7, #4]
 801aa54:	47a0      	blx	r4
 801aa56:	4603      	mov	r3, r0
 801aa58:	73fb      	strb	r3, [r7, #15]
 801aa5a:	e007      	b.n	801aa6c <tcp_process_refused_data+0x68>
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	68ba      	ldr	r2, [r7, #8]
 801aa60:	6879      	ldr	r1, [r7, #4]
 801aa62:	2000      	movs	r0, #0
 801aa64:	f000 f8a4 	bl	801abb0 <tcp_recv_null>
 801aa68:	4603      	mov	r3, r0
 801aa6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801aa6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d12a      	bne.n	801aaca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801aa74:	7bbb      	ldrb	r3, [r7, #14]
 801aa76:	f003 0320 	and.w	r3, r3, #32
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d033      	beq.n	801aae6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801aa86:	d005      	beq.n	801aa94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa8c:	3301      	adds	r3, #1
 801aa8e:	b29a      	uxth	r2, r3
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d00b      	beq.n	801aab6 <tcp_process_refused_data+0xb2>
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	6918      	ldr	r0, [r3, #16]
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	2200      	movs	r2, #0
 801aaac:	6879      	ldr	r1, [r7, #4]
 801aaae:	47a0      	blx	r4
 801aab0:	4603      	mov	r3, r0
 801aab2:	73fb      	strb	r3, [r7, #15]
 801aab4:	e001      	b.n	801aaba <tcp_process_refused_data+0xb6>
 801aab6:	2300      	movs	r3, #0
 801aab8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801aaba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aabe:	f113 0f0d 	cmn.w	r3, #13
 801aac2:	d110      	bne.n	801aae6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801aac4:	f06f 030c 	mvn.w	r3, #12
 801aac8:	e00e      	b.n	801aae8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801aaca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aace:	f113 0f0d 	cmn.w	r3, #13
 801aad2:	d102      	bne.n	801aada <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801aad4:	f06f 030c 	mvn.w	r3, #12
 801aad8:	e006      	b.n	801aae8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	68ba      	ldr	r2, [r7, #8]
 801aade:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801aae0:	f06f 0304 	mvn.w	r3, #4
 801aae4:	e000      	b.n	801aae8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801aae6:	2300      	movs	r3, #0
}
 801aae8:	4618      	mov	r0, r3
 801aaea:	3714      	adds	r7, #20
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd90      	pop	{r4, r7, pc}
 801aaf0:	0802407c 	.word	0x0802407c
 801aaf4:	080245d4 	.word	0x080245d4
 801aaf8:	08024108 	.word	0x08024108

0801aafc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b084      	sub	sp, #16
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801ab04:	e007      	b.n	801ab16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801ab0c:	6878      	ldr	r0, [r7, #4]
 801ab0e:	f000 f80a 	bl	801ab26 <tcp_seg_free>
    seg = next;
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d1f4      	bne.n	801ab06 <tcp_segs_free+0xa>
  }
}
 801ab1c:	bf00      	nop
 801ab1e:	bf00      	nop
 801ab20:	3710      	adds	r7, #16
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}

0801ab26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801ab26:	b580      	push	{r7, lr}
 801ab28:	b082      	sub	sp, #8
 801ab2a:	af00      	add	r7, sp, #0
 801ab2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d00c      	beq.n	801ab4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	685b      	ldr	r3, [r3, #4]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d004      	beq.n	801ab46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	685b      	ldr	r3, [r3, #4]
 801ab40:	4618      	mov	r0, r3
 801ab42:	f7fe fc6f 	bl	8019424 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801ab46:	6879      	ldr	r1, [r7, #4]
 801ab48:	2003      	movs	r0, #3
 801ab4a:	f7fd fdbb 	bl	80186c4 <memp_free>
  }
}
 801ab4e:	bf00      	nop
 801ab50:	3708      	adds	r7, #8
 801ab52:	46bd      	mov	sp, r7
 801ab54:	bd80      	pop	{r7, pc}
	...

0801ab58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b084      	sub	sp, #16
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d106      	bne.n	801ab74 <tcp_seg_copy+0x1c>
 801ab66:	4b0f      	ldr	r3, [pc, #60]	; (801aba4 <tcp_seg_copy+0x4c>)
 801ab68:	f240 6282 	movw	r2, #1666	; 0x682
 801ab6c:	490e      	ldr	r1, [pc, #56]	; (801aba8 <tcp_seg_copy+0x50>)
 801ab6e:	480f      	ldr	r0, [pc, #60]	; (801abac <tcp_seg_copy+0x54>)
 801ab70:	f006 fe54 	bl	802181c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801ab74:	2003      	movs	r0, #3
 801ab76:	f7fd fd53 	bl	8018620 <memp_malloc>
 801ab7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d101      	bne.n	801ab86 <tcp_seg_copy+0x2e>
    return NULL;
 801ab82:	2300      	movs	r3, #0
 801ab84:	e00a      	b.n	801ab9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801ab86:	2210      	movs	r2, #16
 801ab88:	6879      	ldr	r1, [r7, #4]
 801ab8a:	68f8      	ldr	r0, [r7, #12]
 801ab8c:	f006 fd86 	bl	802169c <memcpy>
  pbuf_ref(cseg->p);
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	685b      	ldr	r3, [r3, #4]
 801ab94:	4618      	mov	r0, r3
 801ab96:	f7fe fceb 	bl	8019570 <pbuf_ref>
  return cseg;
 801ab9a:	68fb      	ldr	r3, [r7, #12]
}
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	3710      	adds	r7, #16
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}
 801aba4:	0802407c 	.word	0x0802407c
 801aba8:	08024618 	.word	0x08024618
 801abac:	08024108 	.word	0x08024108

0801abb0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	60f8      	str	r0, [r7, #12]
 801abb8:	60b9      	str	r1, [r7, #8]
 801abba:	607a      	str	r2, [r7, #4]
 801abbc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d109      	bne.n	801abd8 <tcp_recv_null+0x28>
 801abc4:	4b12      	ldr	r3, [pc, #72]	; (801ac10 <tcp_recv_null+0x60>)
 801abc6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801abca:	4912      	ldr	r1, [pc, #72]	; (801ac14 <tcp_recv_null+0x64>)
 801abcc:	4812      	ldr	r0, [pc, #72]	; (801ac18 <tcp_recv_null+0x68>)
 801abce:	f006 fe25 	bl	802181c <iprintf>
 801abd2:	f06f 030f 	mvn.w	r3, #15
 801abd6:	e016      	b.n	801ac06 <tcp_recv_null+0x56>

  if (p != NULL) {
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d009      	beq.n	801abf2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	891b      	ldrh	r3, [r3, #8]
 801abe2:	4619      	mov	r1, r3
 801abe4:	68b8      	ldr	r0, [r7, #8]
 801abe6:	f7ff fb19 	bl	801a21c <tcp_recved>
    pbuf_free(p);
 801abea:	6878      	ldr	r0, [r7, #4]
 801abec:	f7fe fc1a 	bl	8019424 <pbuf_free>
 801abf0:	e008      	b.n	801ac04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801abf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d104      	bne.n	801ac04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801abfa:	68b8      	ldr	r0, [r7, #8]
 801abfc:	f7ff f9be 	bl	8019f7c <tcp_close>
 801ac00:	4603      	mov	r3, r0
 801ac02:	e000      	b.n	801ac06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801ac04:	2300      	movs	r3, #0
}
 801ac06:	4618      	mov	r0, r3
 801ac08:	3710      	adds	r7, #16
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	bd80      	pop	{r7, pc}
 801ac0e:	bf00      	nop
 801ac10:	0802407c 	.word	0x0802407c
 801ac14:	08024634 	.word	0x08024634
 801ac18:	08024108 	.word	0x08024108

0801ac1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b086      	sub	sp, #24
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	4603      	mov	r3, r0
 801ac24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801ac26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	db01      	blt.n	801ac32 <tcp_kill_prio+0x16>
 801ac2e:	79fb      	ldrb	r3, [r7, #7]
 801ac30:	e000      	b.n	801ac34 <tcp_kill_prio+0x18>
 801ac32:	237f      	movs	r3, #127	; 0x7f
 801ac34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801ac36:	7afb      	ldrb	r3, [r7, #11]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d034      	beq.n	801aca6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801ac3c:	7afb      	ldrb	r3, [r7, #11]
 801ac3e:	3b01      	subs	r3, #1
 801ac40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801ac42:	2300      	movs	r3, #0
 801ac44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ac46:	2300      	movs	r3, #0
 801ac48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac4a:	4b19      	ldr	r3, [pc, #100]	; (801acb0 <tcp_kill_prio+0x94>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	617b      	str	r3, [r7, #20]
 801ac50:	e01f      	b.n	801ac92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	7d5b      	ldrb	r3, [r3, #21]
 801ac56:	7afa      	ldrb	r2, [r7, #11]
 801ac58:	429a      	cmp	r2, r3
 801ac5a:	d80c      	bhi.n	801ac76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801ac5c:	697b      	ldr	r3, [r7, #20]
 801ac5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801ac60:	7afa      	ldrb	r2, [r7, #11]
 801ac62:	429a      	cmp	r2, r3
 801ac64:	d112      	bne.n	801ac8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801ac66:	4b13      	ldr	r3, [pc, #76]	; (801acb4 <tcp_kill_prio+0x98>)
 801ac68:	681a      	ldr	r2, [r3, #0]
 801ac6a:	697b      	ldr	r3, [r7, #20]
 801ac6c:	6a1b      	ldr	r3, [r3, #32]
 801ac6e:	1ad3      	subs	r3, r2, r3
 801ac70:	68fa      	ldr	r2, [r7, #12]
 801ac72:	429a      	cmp	r2, r3
 801ac74:	d80a      	bhi.n	801ac8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801ac76:	4b0f      	ldr	r3, [pc, #60]	; (801acb4 <tcp_kill_prio+0x98>)
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	697b      	ldr	r3, [r7, #20]
 801ac7c:	6a1b      	ldr	r3, [r3, #32]
 801ac7e:	1ad3      	subs	r3, r2, r3
 801ac80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	7d5b      	ldrb	r3, [r3, #21]
 801ac8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac8c:	697b      	ldr	r3, [r7, #20]
 801ac8e:	68db      	ldr	r3, [r3, #12]
 801ac90:	617b      	str	r3, [r7, #20]
 801ac92:	697b      	ldr	r3, [r7, #20]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d1dc      	bne.n	801ac52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d004      	beq.n	801aca8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801ac9e:	6938      	ldr	r0, [r7, #16]
 801aca0:	f7ff fa56 	bl	801a150 <tcp_abort>
 801aca4:	e000      	b.n	801aca8 <tcp_kill_prio+0x8c>
    return;
 801aca6:	bf00      	nop
  }
}
 801aca8:	3718      	adds	r7, #24
 801acaa:	46bd      	mov	sp, r7
 801acac:	bd80      	pop	{r7, pc}
 801acae:	bf00      	nop
 801acb0:	20011f7c 	.word	0x20011f7c
 801acb4:	20011f80 	.word	0x20011f80

0801acb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b086      	sub	sp, #24
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	4603      	mov	r3, r0
 801acc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801acc2:	79fb      	ldrb	r3, [r7, #7]
 801acc4:	2b08      	cmp	r3, #8
 801acc6:	d009      	beq.n	801acdc <tcp_kill_state+0x24>
 801acc8:	79fb      	ldrb	r3, [r7, #7]
 801acca:	2b09      	cmp	r3, #9
 801accc:	d006      	beq.n	801acdc <tcp_kill_state+0x24>
 801acce:	4b1a      	ldr	r3, [pc, #104]	; (801ad38 <tcp_kill_state+0x80>)
 801acd0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801acd4:	4919      	ldr	r1, [pc, #100]	; (801ad3c <tcp_kill_state+0x84>)
 801acd6:	481a      	ldr	r0, [pc, #104]	; (801ad40 <tcp_kill_state+0x88>)
 801acd8:	f006 fda0 	bl	802181c <iprintf>

  inactivity = 0;
 801acdc:	2300      	movs	r3, #0
 801acde:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ace0:	2300      	movs	r3, #0
 801ace2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ace4:	4b17      	ldr	r3, [pc, #92]	; (801ad44 <tcp_kill_state+0x8c>)
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	617b      	str	r3, [r7, #20]
 801acea:	e017      	b.n	801ad1c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801acec:	697b      	ldr	r3, [r7, #20]
 801acee:	7d1b      	ldrb	r3, [r3, #20]
 801acf0:	79fa      	ldrb	r2, [r7, #7]
 801acf2:	429a      	cmp	r2, r3
 801acf4:	d10f      	bne.n	801ad16 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801acf6:	4b14      	ldr	r3, [pc, #80]	; (801ad48 <tcp_kill_state+0x90>)
 801acf8:	681a      	ldr	r2, [r3, #0]
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	6a1b      	ldr	r3, [r3, #32]
 801acfe:	1ad3      	subs	r3, r2, r3
 801ad00:	68fa      	ldr	r2, [r7, #12]
 801ad02:	429a      	cmp	r2, r3
 801ad04:	d807      	bhi.n	801ad16 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801ad06:	4b10      	ldr	r3, [pc, #64]	; (801ad48 <tcp_kill_state+0x90>)
 801ad08:	681a      	ldr	r2, [r3, #0]
 801ad0a:	697b      	ldr	r3, [r7, #20]
 801ad0c:	6a1b      	ldr	r3, [r3, #32]
 801ad0e:	1ad3      	subs	r3, r2, r3
 801ad10:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801ad12:	697b      	ldr	r3, [r7, #20]
 801ad14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad16:	697b      	ldr	r3, [r7, #20]
 801ad18:	68db      	ldr	r3, [r3, #12]
 801ad1a:	617b      	str	r3, [r7, #20]
 801ad1c:	697b      	ldr	r3, [r7, #20]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d1e4      	bne.n	801acec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801ad22:	693b      	ldr	r3, [r7, #16]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d003      	beq.n	801ad30 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801ad28:	2100      	movs	r1, #0
 801ad2a:	6938      	ldr	r0, [r7, #16]
 801ad2c:	f7ff f952 	bl	8019fd4 <tcp_abandon>
  }
}
 801ad30:	bf00      	nop
 801ad32:	3718      	adds	r7, #24
 801ad34:	46bd      	mov	sp, r7
 801ad36:	bd80      	pop	{r7, pc}
 801ad38:	0802407c 	.word	0x0802407c
 801ad3c:	08024650 	.word	0x08024650
 801ad40:	08024108 	.word	0x08024108
 801ad44:	20011f7c 	.word	0x20011f7c
 801ad48:	20011f80 	.word	0x20011f80

0801ad4c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b084      	sub	sp, #16
 801ad50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801ad52:	2300      	movs	r3, #0
 801ad54:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801ad56:	2300      	movs	r3, #0
 801ad58:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad5a:	4b12      	ldr	r3, [pc, #72]	; (801ada4 <tcp_kill_timewait+0x58>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	60fb      	str	r3, [r7, #12]
 801ad60:	e012      	b.n	801ad88 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801ad62:	4b11      	ldr	r3, [pc, #68]	; (801ada8 <tcp_kill_timewait+0x5c>)
 801ad64:	681a      	ldr	r2, [r3, #0]
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	6a1b      	ldr	r3, [r3, #32]
 801ad6a:	1ad3      	subs	r3, r2, r3
 801ad6c:	687a      	ldr	r2, [r7, #4]
 801ad6e:	429a      	cmp	r2, r3
 801ad70:	d807      	bhi.n	801ad82 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801ad72:	4b0d      	ldr	r3, [pc, #52]	; (801ada8 <tcp_kill_timewait+0x5c>)
 801ad74:	681a      	ldr	r2, [r3, #0]
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	6a1b      	ldr	r3, [r3, #32]
 801ad7a:	1ad3      	subs	r3, r2, r3
 801ad7c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	68db      	ldr	r3, [r3, #12]
 801ad86:	60fb      	str	r3, [r7, #12]
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d1e9      	bne.n	801ad62 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801ad8e:	68bb      	ldr	r3, [r7, #8]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d002      	beq.n	801ad9a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801ad94:	68b8      	ldr	r0, [r7, #8]
 801ad96:	f7ff f9db 	bl	801a150 <tcp_abort>
  }
}
 801ad9a:	bf00      	nop
 801ad9c:	3710      	adds	r7, #16
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	bd80      	pop	{r7, pc}
 801ada2:	bf00      	nop
 801ada4:	20011f8c 	.word	0x20011f8c
 801ada8:	20011f80 	.word	0x20011f80

0801adac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	b082      	sub	sp, #8
 801adb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801adb2:	4b10      	ldr	r3, [pc, #64]	; (801adf4 <tcp_handle_closepend+0x48>)
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801adb8:	e014      	b.n	801ade4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	68db      	ldr	r3, [r3, #12]
 801adbe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	8b5b      	ldrh	r3, [r3, #26]
 801adc4:	f003 0308 	and.w	r3, r3, #8
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d009      	beq.n	801ade0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	8b5b      	ldrh	r3, [r3, #26]
 801add0:	f023 0308 	bic.w	r3, r3, #8
 801add4:	b29a      	uxth	r2, r3
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801adda:	6878      	ldr	r0, [r7, #4]
 801addc:	f7ff f864 	bl	8019ea8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801ade0:	683b      	ldr	r3, [r7, #0]
 801ade2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d1e7      	bne.n	801adba <tcp_handle_closepend+0xe>
  }
}
 801adea:	bf00      	nop
 801adec:	bf00      	nop
 801adee:	3708      	adds	r7, #8
 801adf0:	46bd      	mov	sp, r7
 801adf2:	bd80      	pop	{r7, pc}
 801adf4:	20011f7c 	.word	0x20011f7c

0801adf8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b084      	sub	sp, #16
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	4603      	mov	r3, r0
 801ae00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae02:	2001      	movs	r0, #1
 801ae04:	f7fd fc0c 	bl	8018620 <memp_malloc>
 801ae08:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d126      	bne.n	801ae5e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801ae10:	f7ff ffcc 	bl	801adac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801ae14:	f7ff ff9a 	bl	801ad4c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae18:	2001      	movs	r0, #1
 801ae1a:	f7fd fc01 	bl	8018620 <memp_malloc>
 801ae1e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d11b      	bne.n	801ae5e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801ae26:	2009      	movs	r0, #9
 801ae28:	f7ff ff46 	bl	801acb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae2c:	2001      	movs	r0, #1
 801ae2e:	f7fd fbf7 	bl	8018620 <memp_malloc>
 801ae32:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d111      	bne.n	801ae5e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801ae3a:	2008      	movs	r0, #8
 801ae3c:	f7ff ff3c 	bl	801acb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae40:	2001      	movs	r0, #1
 801ae42:	f7fd fbed 	bl	8018620 <memp_malloc>
 801ae46:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d107      	bne.n	801ae5e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801ae4e:	79fb      	ldrb	r3, [r7, #7]
 801ae50:	4618      	mov	r0, r3
 801ae52:	f7ff fee3 	bl	801ac1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae56:	2001      	movs	r0, #1
 801ae58:	f7fd fbe2 	bl	8018620 <memp_malloc>
 801ae5c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d03f      	beq.n	801aee4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801ae64:	229c      	movs	r2, #156	; 0x9c
 801ae66:	2100      	movs	r1, #0
 801ae68:	68f8      	ldr	r0, [r7, #12]
 801ae6a:	f006 fc25 	bl	80216b8 <memset>
    pcb->prio = prio;
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	79fa      	ldrb	r2, [r7, #7]
 801ae72:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801ae7a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801ae84:	855a      	strh	r2, [r3, #42]	; 0x2a
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	22ff      	movs	r2, #255	; 0xff
 801ae92:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	f44f 7206 	mov.w	r2, #536	; 0x218
 801ae9a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	2206      	movs	r2, #6
 801aea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	2206      	movs	r2, #6
 801aea8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aeb0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	2201      	movs	r2, #1
 801aeb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801aeba:	4b0d      	ldr	r3, [pc, #52]	; (801aef0 <tcp_alloc+0xf8>)
 801aebc:	681a      	ldr	r2, [r3, #0]
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801aec2:	4b0c      	ldr	r3, [pc, #48]	; (801aef4 <tcp_alloc+0xfc>)
 801aec4:	781a      	ldrb	r2, [r3, #0]
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801aed0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	4a08      	ldr	r2, [pc, #32]	; (801aef8 <tcp_alloc+0x100>)
 801aed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	4a07      	ldr	r2, [pc, #28]	; (801aefc <tcp_alloc+0x104>)
 801aee0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801aee4:	68fb      	ldr	r3, [r7, #12]
}
 801aee6:	4618      	mov	r0, r3
 801aee8:	3710      	adds	r7, #16
 801aeea:	46bd      	mov	sp, r7
 801aeec:	bd80      	pop	{r7, pc}
 801aeee:	bf00      	nop
 801aef0:	20011f80 	.word	0x20011f80
 801aef4:	200090aa 	.word	0x200090aa
 801aef8:	0801abb1 	.word	0x0801abb1
 801aefc:	006ddd00 	.word	0x006ddd00

0801af00 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b082      	sub	sp, #8
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d107      	bne.n	801af1e <tcp_pcb_purge+0x1e>
 801af0e:	4b21      	ldr	r3, [pc, #132]	; (801af94 <tcp_pcb_purge+0x94>)
 801af10:	f640 0251 	movw	r2, #2129	; 0x851
 801af14:	4920      	ldr	r1, [pc, #128]	; (801af98 <tcp_pcb_purge+0x98>)
 801af16:	4821      	ldr	r0, [pc, #132]	; (801af9c <tcp_pcb_purge+0x9c>)
 801af18:	f006 fc80 	bl	802181c <iprintf>
 801af1c:	e037      	b.n	801af8e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	7d1b      	ldrb	r3, [r3, #20]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d033      	beq.n	801af8e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801af2a:	2b0a      	cmp	r3, #10
 801af2c:	d02f      	beq.n	801af8e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801af32:	2b01      	cmp	r3, #1
 801af34:	d02b      	beq.n	801af8e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d007      	beq.n	801af4e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801af42:	4618      	mov	r0, r3
 801af44:	f7fe fa6e 	bl	8019424 <pbuf_free>
      pcb->refused_data = NULL;
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	2200      	movs	r2, #0
 801af4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801af52:	2b00      	cmp	r3, #0
 801af54:	d002      	beq.n	801af5c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801af56:	6878      	ldr	r0, [r7, #4]
 801af58:	f000 f986 	bl	801b268 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af62:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af68:	4618      	mov	r0, r3
 801af6a:	f7ff fdc7 	bl	801aafc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af72:	4618      	mov	r0, r3
 801af74:	f7ff fdc2 	bl	801aafc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	2200      	movs	r2, #0
 801af7c:	66da      	str	r2, [r3, #108]	; 0x6c
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	2200      	movs	r2, #0
 801af8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801af8e:	3708      	adds	r7, #8
 801af90:	46bd      	mov	sp, r7
 801af92:	bd80      	pop	{r7, pc}
 801af94:	0802407c 	.word	0x0802407c
 801af98:	08024710 	.word	0x08024710
 801af9c:	08024108 	.word	0x08024108

0801afa0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b084      	sub	sp, #16
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
 801afa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801afaa:	683b      	ldr	r3, [r7, #0]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d106      	bne.n	801afbe <tcp_pcb_remove+0x1e>
 801afb0:	4b3e      	ldr	r3, [pc, #248]	; (801b0ac <tcp_pcb_remove+0x10c>)
 801afb2:	f640 0283 	movw	r2, #2179	; 0x883
 801afb6:	493e      	ldr	r1, [pc, #248]	; (801b0b0 <tcp_pcb_remove+0x110>)
 801afb8:	483e      	ldr	r0, [pc, #248]	; (801b0b4 <tcp_pcb_remove+0x114>)
 801afba:	f006 fc2f 	bl	802181c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d106      	bne.n	801afd2 <tcp_pcb_remove+0x32>
 801afc4:	4b39      	ldr	r3, [pc, #228]	; (801b0ac <tcp_pcb_remove+0x10c>)
 801afc6:	f640 0284 	movw	r2, #2180	; 0x884
 801afca:	493b      	ldr	r1, [pc, #236]	; (801b0b8 <tcp_pcb_remove+0x118>)
 801afcc:	4839      	ldr	r0, [pc, #228]	; (801b0b4 <tcp_pcb_remove+0x114>)
 801afce:	f006 fc25 	bl	802181c <iprintf>

  TCP_RMV(pcblist, pcb);
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	683a      	ldr	r2, [r7, #0]
 801afd8:	429a      	cmp	r2, r3
 801afda:	d105      	bne.n	801afe8 <tcp_pcb_remove+0x48>
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	68da      	ldr	r2, [r3, #12]
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	601a      	str	r2, [r3, #0]
 801afe6:	e013      	b.n	801b010 <tcp_pcb_remove+0x70>
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	60fb      	str	r3, [r7, #12]
 801afee:	e00c      	b.n	801b00a <tcp_pcb_remove+0x6a>
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	68db      	ldr	r3, [r3, #12]
 801aff4:	683a      	ldr	r2, [r7, #0]
 801aff6:	429a      	cmp	r2, r3
 801aff8:	d104      	bne.n	801b004 <tcp_pcb_remove+0x64>
 801affa:	683b      	ldr	r3, [r7, #0]
 801affc:	68da      	ldr	r2, [r3, #12]
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	60da      	str	r2, [r3, #12]
 801b002:	e005      	b.n	801b010 <tcp_pcb_remove+0x70>
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	68db      	ldr	r3, [r3, #12]
 801b008:	60fb      	str	r3, [r7, #12]
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d1ef      	bne.n	801aff0 <tcp_pcb_remove+0x50>
 801b010:	683b      	ldr	r3, [r7, #0]
 801b012:	2200      	movs	r2, #0
 801b014:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801b016:	6838      	ldr	r0, [r7, #0]
 801b018:	f7ff ff72 	bl	801af00 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	7d1b      	ldrb	r3, [r3, #20]
 801b020:	2b0a      	cmp	r3, #10
 801b022:	d013      	beq.n	801b04c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801b028:	2b01      	cmp	r3, #1
 801b02a:	d00f      	beq.n	801b04c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801b02c:	683b      	ldr	r3, [r7, #0]
 801b02e:	8b5b      	ldrh	r3, [r3, #26]
 801b030:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801b034:	2b00      	cmp	r3, #0
 801b036:	d009      	beq.n	801b04c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801b038:	683b      	ldr	r3, [r7, #0]
 801b03a:	8b5b      	ldrh	r3, [r3, #26]
 801b03c:	f043 0302 	orr.w	r3, r3, #2
 801b040:	b29a      	uxth	r2, r3
 801b042:	683b      	ldr	r3, [r7, #0]
 801b044:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b046:	6838      	ldr	r0, [r7, #0]
 801b048:	f002 ff6a 	bl	801df20 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801b04c:	683b      	ldr	r3, [r7, #0]
 801b04e:	7d1b      	ldrb	r3, [r3, #20]
 801b050:	2b01      	cmp	r3, #1
 801b052:	d020      	beq.n	801b096 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b054:	683b      	ldr	r3, [r7, #0]
 801b056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d006      	beq.n	801b06a <tcp_pcb_remove+0xca>
 801b05c:	4b13      	ldr	r3, [pc, #76]	; (801b0ac <tcp_pcb_remove+0x10c>)
 801b05e:	f640 0293 	movw	r2, #2195	; 0x893
 801b062:	4916      	ldr	r1, [pc, #88]	; (801b0bc <tcp_pcb_remove+0x11c>)
 801b064:	4813      	ldr	r0, [pc, #76]	; (801b0b4 <tcp_pcb_remove+0x114>)
 801b066:	f006 fbd9 	bl	802181c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b06a:	683b      	ldr	r3, [r7, #0]
 801b06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d006      	beq.n	801b080 <tcp_pcb_remove+0xe0>
 801b072:	4b0e      	ldr	r3, [pc, #56]	; (801b0ac <tcp_pcb_remove+0x10c>)
 801b074:	f640 0294 	movw	r2, #2196	; 0x894
 801b078:	4911      	ldr	r1, [pc, #68]	; (801b0c0 <tcp_pcb_remove+0x120>)
 801b07a:	480e      	ldr	r0, [pc, #56]	; (801b0b4 <tcp_pcb_remove+0x114>)
 801b07c:	f006 fbce 	bl	802181c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b080:	683b      	ldr	r3, [r7, #0]
 801b082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b084:	2b00      	cmp	r3, #0
 801b086:	d006      	beq.n	801b096 <tcp_pcb_remove+0xf6>
 801b088:	4b08      	ldr	r3, [pc, #32]	; (801b0ac <tcp_pcb_remove+0x10c>)
 801b08a:	f640 0296 	movw	r2, #2198	; 0x896
 801b08e:	490d      	ldr	r1, [pc, #52]	; (801b0c4 <tcp_pcb_remove+0x124>)
 801b090:	4808      	ldr	r0, [pc, #32]	; (801b0b4 <tcp_pcb_remove+0x114>)
 801b092:	f006 fbc3 	bl	802181c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	2200      	movs	r2, #0
 801b09a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801b09c:	683b      	ldr	r3, [r7, #0]
 801b09e:	2200      	movs	r2, #0
 801b0a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801b0a2:	bf00      	nop
 801b0a4:	3710      	adds	r7, #16
 801b0a6:	46bd      	mov	sp, r7
 801b0a8:	bd80      	pop	{r7, pc}
 801b0aa:	bf00      	nop
 801b0ac:	0802407c 	.word	0x0802407c
 801b0b0:	0802472c 	.word	0x0802472c
 801b0b4:	08024108 	.word	0x08024108
 801b0b8:	08024748 	.word	0x08024748
 801b0bc:	08024768 	.word	0x08024768
 801b0c0:	08024780 	.word	0x08024780
 801b0c4:	0802479c 	.word	0x0802479c

0801b0c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b082      	sub	sp, #8
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d106      	bne.n	801b0e4 <tcp_next_iss+0x1c>
 801b0d6:	4b0a      	ldr	r3, [pc, #40]	; (801b100 <tcp_next_iss+0x38>)
 801b0d8:	f640 02af 	movw	r2, #2223	; 0x8af
 801b0dc:	4909      	ldr	r1, [pc, #36]	; (801b104 <tcp_next_iss+0x3c>)
 801b0de:	480a      	ldr	r0, [pc, #40]	; (801b108 <tcp_next_iss+0x40>)
 801b0e0:	f006 fb9c 	bl	802181c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b0e4:	4b09      	ldr	r3, [pc, #36]	; (801b10c <tcp_next_iss+0x44>)
 801b0e6:	681a      	ldr	r2, [r3, #0]
 801b0e8:	4b09      	ldr	r3, [pc, #36]	; (801b110 <tcp_next_iss+0x48>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	4413      	add	r3, r2
 801b0ee:	4a07      	ldr	r2, [pc, #28]	; (801b10c <tcp_next_iss+0x44>)
 801b0f0:	6013      	str	r3, [r2, #0]
  return iss;
 801b0f2:	4b06      	ldr	r3, [pc, #24]	; (801b10c <tcp_next_iss+0x44>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	3708      	adds	r7, #8
 801b0fa:	46bd      	mov	sp, r7
 801b0fc:	bd80      	pop	{r7, pc}
 801b0fe:	bf00      	nop
 801b100:	0802407c 	.word	0x0802407c
 801b104:	080247b4 	.word	0x080247b4
 801b108:	08024108 	.word	0x08024108
 801b10c:	20000090 	.word	0x20000090
 801b110:	20011f80 	.word	0x20011f80

0801b114 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b086      	sub	sp, #24
 801b118:	af00      	add	r7, sp, #0
 801b11a:	4603      	mov	r3, r0
 801b11c:	60b9      	str	r1, [r7, #8]
 801b11e:	607a      	str	r2, [r7, #4]
 801b120:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d106      	bne.n	801b136 <tcp_eff_send_mss_netif+0x22>
 801b128:	4b14      	ldr	r3, [pc, #80]	; (801b17c <tcp_eff_send_mss_netif+0x68>)
 801b12a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801b12e:	4914      	ldr	r1, [pc, #80]	; (801b180 <tcp_eff_send_mss_netif+0x6c>)
 801b130:	4814      	ldr	r0, [pc, #80]	; (801b184 <tcp_eff_send_mss_netif+0x70>)
 801b132:	f006 fb73 	bl	802181c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801b136:	68bb      	ldr	r3, [r7, #8]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d101      	bne.n	801b140 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801b13c:	89fb      	ldrh	r3, [r7, #14]
 801b13e:	e019      	b.n	801b174 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b144:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b146:	8afb      	ldrh	r3, [r7, #22]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d012      	beq.n	801b172 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801b14c:	2328      	movs	r3, #40	; 0x28
 801b14e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b150:	8afa      	ldrh	r2, [r7, #22]
 801b152:	8abb      	ldrh	r3, [r7, #20]
 801b154:	429a      	cmp	r2, r3
 801b156:	d904      	bls.n	801b162 <tcp_eff_send_mss_netif+0x4e>
 801b158:	8afa      	ldrh	r2, [r7, #22]
 801b15a:	8abb      	ldrh	r3, [r7, #20]
 801b15c:	1ad3      	subs	r3, r2, r3
 801b15e:	b29b      	uxth	r3, r3
 801b160:	e000      	b.n	801b164 <tcp_eff_send_mss_netif+0x50>
 801b162:	2300      	movs	r3, #0
 801b164:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b166:	8a7a      	ldrh	r2, [r7, #18]
 801b168:	89fb      	ldrh	r3, [r7, #14]
 801b16a:	4293      	cmp	r3, r2
 801b16c:	bf28      	it	cs
 801b16e:	4613      	movcs	r3, r2
 801b170:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801b172:	89fb      	ldrh	r3, [r7, #14]
}
 801b174:	4618      	mov	r0, r3
 801b176:	3718      	adds	r7, #24
 801b178:	46bd      	mov	sp, r7
 801b17a:	bd80      	pop	{r7, pc}
 801b17c:	0802407c 	.word	0x0802407c
 801b180:	080247d0 	.word	0x080247d0
 801b184:	08024108 	.word	0x08024108

0801b188 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	b084      	sub	sp, #16
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	6078      	str	r0, [r7, #4]
 801b190:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d119      	bne.n	801b1d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801b19c:	4b10      	ldr	r3, [pc, #64]	; (801b1e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801b19e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801b1a2:	4910      	ldr	r1, [pc, #64]	; (801b1e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801b1a4:	4810      	ldr	r0, [pc, #64]	; (801b1e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801b1a6:	f006 fb39 	bl	802181c <iprintf>

  while (pcb != NULL) {
 801b1aa:	e011      	b.n	801b1d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	681a      	ldr	r2, [r3, #0]
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	429a      	cmp	r2, r3
 801b1b6:	d108      	bne.n	801b1ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	68db      	ldr	r3, [r3, #12]
 801b1bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801b1be:	68f8      	ldr	r0, [r7, #12]
 801b1c0:	f7fe ffc6 	bl	801a150 <tcp_abort>
      pcb = next;
 801b1c4:	68bb      	ldr	r3, [r7, #8]
 801b1c6:	60fb      	str	r3, [r7, #12]
 801b1c8:	e002      	b.n	801b1d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	68db      	ldr	r3, [r3, #12]
 801b1ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d1ea      	bne.n	801b1ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801b1d6:	bf00      	nop
 801b1d8:	bf00      	nop
 801b1da:	3710      	adds	r7, #16
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd80      	pop	{r7, pc}
 801b1e0:	0802407c 	.word	0x0802407c
 801b1e4:	080247f8 	.word	0x080247f8
 801b1e8:	08024108 	.word	0x08024108

0801b1ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b084      	sub	sp, #16
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d02a      	beq.n	801b252 <tcp_netif_ip_addr_changed+0x66>
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d026      	beq.n	801b252 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801b204:	4b15      	ldr	r3, [pc, #84]	; (801b25c <tcp_netif_ip_addr_changed+0x70>)
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	4619      	mov	r1, r3
 801b20a:	6878      	ldr	r0, [r7, #4]
 801b20c:	f7ff ffbc 	bl	801b188 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801b210:	4b13      	ldr	r3, [pc, #76]	; (801b260 <tcp_netif_ip_addr_changed+0x74>)
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	4619      	mov	r1, r3
 801b216:	6878      	ldr	r0, [r7, #4]
 801b218:	f7ff ffb6 	bl	801b188 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801b21c:	683b      	ldr	r3, [r7, #0]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d017      	beq.n	801b252 <tcp_netif_ip_addr_changed+0x66>
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d013      	beq.n	801b252 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b22a:	4b0e      	ldr	r3, [pc, #56]	; (801b264 <tcp_netif_ip_addr_changed+0x78>)
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	60fb      	str	r3, [r7, #12]
 801b230:	e00c      	b.n	801b24c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	681a      	ldr	r2, [r3, #0]
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	429a      	cmp	r2, r3
 801b23c:	d103      	bne.n	801b246 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801b23e:	683b      	ldr	r3, [r7, #0]
 801b240:	681a      	ldr	r2, [r3, #0]
 801b242:	68fb      	ldr	r3, [r7, #12]
 801b244:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	68db      	ldr	r3, [r3, #12]
 801b24a:	60fb      	str	r3, [r7, #12]
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d1ef      	bne.n	801b232 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801b252:	bf00      	nop
 801b254:	3710      	adds	r7, #16
 801b256:	46bd      	mov	sp, r7
 801b258:	bd80      	pop	{r7, pc}
 801b25a:	bf00      	nop
 801b25c:	20011f7c 	.word	0x20011f7c
 801b260:	20011f88 	.word	0x20011f88
 801b264:	20011f84 	.word	0x20011f84

0801b268 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801b268:	b580      	push	{r7, lr}
 801b26a:	b082      	sub	sp, #8
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b274:	2b00      	cmp	r3, #0
 801b276:	d007      	beq.n	801b288 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7ff fc3d 	bl	801aafc <tcp_segs_free>
    pcb->ooseq = NULL;
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	2200      	movs	r2, #0
 801b286:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b288:	bf00      	nop
 801b28a:	3708      	adds	r7, #8
 801b28c:	46bd      	mov	sp, r7
 801b28e:	bd80      	pop	{r7, pc}

0801b290 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801b290:	b590      	push	{r4, r7, lr}
 801b292:	b08d      	sub	sp, #52	; 0x34
 801b294:	af04      	add	r7, sp, #16
 801b296:	6078      	str	r0, [r7, #4]
 801b298:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d105      	bne.n	801b2ac <tcp_input+0x1c>
 801b2a0:	4b9b      	ldr	r3, [pc, #620]	; (801b510 <tcp_input+0x280>)
 801b2a2:	2283      	movs	r2, #131	; 0x83
 801b2a4:	499b      	ldr	r1, [pc, #620]	; (801b514 <tcp_input+0x284>)
 801b2a6:	489c      	ldr	r0, [pc, #624]	; (801b518 <tcp_input+0x288>)
 801b2a8:	f006 fab8 	bl	802181c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	685b      	ldr	r3, [r3, #4]
 801b2b0:	4a9a      	ldr	r2, [pc, #616]	; (801b51c <tcp_input+0x28c>)
 801b2b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	895b      	ldrh	r3, [r3, #10]
 801b2b8:	2b13      	cmp	r3, #19
 801b2ba:	f240 83c4 	bls.w	801ba46 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b2be:	4b98      	ldr	r3, [pc, #608]	; (801b520 <tcp_input+0x290>)
 801b2c0:	695b      	ldr	r3, [r3, #20]
 801b2c2:	4a97      	ldr	r2, [pc, #604]	; (801b520 <tcp_input+0x290>)
 801b2c4:	6812      	ldr	r2, [r2, #0]
 801b2c6:	4611      	mov	r1, r2
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f7fb febf 	bl	801704c <ip4_addr_isbroadcast_u32>
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	f040 83ba 	bne.w	801ba4a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b2d6:	4b92      	ldr	r3, [pc, #584]	; (801b520 <tcp_input+0x290>)
 801b2d8:	695b      	ldr	r3, [r3, #20]
 801b2da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b2de:	2be0      	cmp	r3, #224	; 0xe0
 801b2e0:	f000 83b3 	beq.w	801ba4a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b2e4:	4b8d      	ldr	r3, [pc, #564]	; (801b51c <tcp_input+0x28c>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	899b      	ldrh	r3, [r3, #12]
 801b2ea:	b29b      	uxth	r3, r3
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f7f8 fb6b 	bl	80139c8 <lwip_htons>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	0b1b      	lsrs	r3, r3, #12
 801b2f6:	b29b      	uxth	r3, r3
 801b2f8:	b2db      	uxtb	r3, r3
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b2fe:	7cbb      	ldrb	r3, [r7, #18]
 801b300:	2b13      	cmp	r3, #19
 801b302:	f240 83a4 	bls.w	801ba4e <tcp_input+0x7be>
 801b306:	7cbb      	ldrb	r3, [r7, #18]
 801b308:	b29a      	uxth	r2, r3
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	891b      	ldrh	r3, [r3, #8]
 801b30e:	429a      	cmp	r2, r3
 801b310:	f200 839d 	bhi.w	801ba4e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b314:	7cbb      	ldrb	r3, [r7, #18]
 801b316:	b29b      	uxth	r3, r3
 801b318:	3b14      	subs	r3, #20
 801b31a:	b29a      	uxth	r2, r3
 801b31c:	4b81      	ldr	r3, [pc, #516]	; (801b524 <tcp_input+0x294>)
 801b31e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801b320:	4b81      	ldr	r3, [pc, #516]	; (801b528 <tcp_input+0x298>)
 801b322:	2200      	movs	r2, #0
 801b324:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	895a      	ldrh	r2, [r3, #10]
 801b32a:	7cbb      	ldrb	r3, [r7, #18]
 801b32c:	b29b      	uxth	r3, r3
 801b32e:	429a      	cmp	r2, r3
 801b330:	d309      	bcc.n	801b346 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801b332:	4b7c      	ldr	r3, [pc, #496]	; (801b524 <tcp_input+0x294>)
 801b334:	881a      	ldrh	r2, [r3, #0]
 801b336:	4b7d      	ldr	r3, [pc, #500]	; (801b52c <tcp_input+0x29c>)
 801b338:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b33a:	7cbb      	ldrb	r3, [r7, #18]
 801b33c:	4619      	mov	r1, r3
 801b33e:	6878      	ldr	r0, [r7, #4]
 801b340:	f7fd ffea 	bl	8019318 <pbuf_remove_header>
 801b344:	e04e      	b.n	801b3e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d105      	bne.n	801b35a <tcp_input+0xca>
 801b34e:	4b70      	ldr	r3, [pc, #448]	; (801b510 <tcp_input+0x280>)
 801b350:	22c2      	movs	r2, #194	; 0xc2
 801b352:	4977      	ldr	r1, [pc, #476]	; (801b530 <tcp_input+0x2a0>)
 801b354:	4870      	ldr	r0, [pc, #448]	; (801b518 <tcp_input+0x288>)
 801b356:	f006 fa61 	bl	802181c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801b35a:	2114      	movs	r1, #20
 801b35c:	6878      	ldr	r0, [r7, #4]
 801b35e:	f7fd ffdb 	bl	8019318 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	895a      	ldrh	r2, [r3, #10]
 801b366:	4b71      	ldr	r3, [pc, #452]	; (801b52c <tcp_input+0x29c>)
 801b368:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b36a:	4b6e      	ldr	r3, [pc, #440]	; (801b524 <tcp_input+0x294>)
 801b36c:	881a      	ldrh	r2, [r3, #0]
 801b36e:	4b6f      	ldr	r3, [pc, #444]	; (801b52c <tcp_input+0x29c>)
 801b370:	881b      	ldrh	r3, [r3, #0]
 801b372:	1ad3      	subs	r3, r2, r3
 801b374:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801b376:	4b6d      	ldr	r3, [pc, #436]	; (801b52c <tcp_input+0x29c>)
 801b378:	881b      	ldrh	r3, [r3, #0]
 801b37a:	4619      	mov	r1, r3
 801b37c:	6878      	ldr	r0, [r7, #4]
 801b37e:	f7fd ffcb 	bl	8019318 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	895b      	ldrh	r3, [r3, #10]
 801b388:	8a3a      	ldrh	r2, [r7, #16]
 801b38a:	429a      	cmp	r2, r3
 801b38c:	f200 8361 	bhi.w	801ba52 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	685b      	ldr	r3, [r3, #4]
 801b396:	4a64      	ldr	r2, [pc, #400]	; (801b528 <tcp_input+0x298>)
 801b398:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	8a3a      	ldrh	r2, [r7, #16]
 801b3a0:	4611      	mov	r1, r2
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	f7fd ffb8 	bl	8019318 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	891a      	ldrh	r2, [r3, #8]
 801b3ac:	8a3b      	ldrh	r3, [r7, #16]
 801b3ae:	1ad3      	subs	r3, r2, r3
 801b3b0:	b29a      	uxth	r2, r3
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	895b      	ldrh	r3, [r3, #10]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d005      	beq.n	801b3ca <tcp_input+0x13a>
 801b3be:	4b54      	ldr	r3, [pc, #336]	; (801b510 <tcp_input+0x280>)
 801b3c0:	22df      	movs	r2, #223	; 0xdf
 801b3c2:	495c      	ldr	r1, [pc, #368]	; (801b534 <tcp_input+0x2a4>)
 801b3c4:	4854      	ldr	r0, [pc, #336]	; (801b518 <tcp_input+0x288>)
 801b3c6:	f006 fa29 	bl	802181c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	891a      	ldrh	r2, [r3, #8]
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	891b      	ldrh	r3, [r3, #8]
 801b3d4:	429a      	cmp	r2, r3
 801b3d6:	d005      	beq.n	801b3e4 <tcp_input+0x154>
 801b3d8:	4b4d      	ldr	r3, [pc, #308]	; (801b510 <tcp_input+0x280>)
 801b3da:	22e0      	movs	r2, #224	; 0xe0
 801b3dc:	4956      	ldr	r1, [pc, #344]	; (801b538 <tcp_input+0x2a8>)
 801b3de:	484e      	ldr	r0, [pc, #312]	; (801b518 <tcp_input+0x288>)
 801b3e0:	f006 fa1c 	bl	802181c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b3e4:	4b4d      	ldr	r3, [pc, #308]	; (801b51c <tcp_input+0x28c>)
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	881b      	ldrh	r3, [r3, #0]
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	4a4b      	ldr	r2, [pc, #300]	; (801b51c <tcp_input+0x28c>)
 801b3ee:	6814      	ldr	r4, [r2, #0]
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	f7f8 fae9 	bl	80139c8 <lwip_htons>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b3fa:	4b48      	ldr	r3, [pc, #288]	; (801b51c <tcp_input+0x28c>)
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	885b      	ldrh	r3, [r3, #2]
 801b400:	b29b      	uxth	r3, r3
 801b402:	4a46      	ldr	r2, [pc, #280]	; (801b51c <tcp_input+0x28c>)
 801b404:	6814      	ldr	r4, [r2, #0]
 801b406:	4618      	mov	r0, r3
 801b408:	f7f8 fade 	bl	80139c8 <lwip_htons>
 801b40c:	4603      	mov	r3, r0
 801b40e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b410:	4b42      	ldr	r3, [pc, #264]	; (801b51c <tcp_input+0x28c>)
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	685b      	ldr	r3, [r3, #4]
 801b416:	4a41      	ldr	r2, [pc, #260]	; (801b51c <tcp_input+0x28c>)
 801b418:	6814      	ldr	r4, [r2, #0]
 801b41a:	4618      	mov	r0, r3
 801b41c:	f7f8 fae9 	bl	80139f2 <lwip_htonl>
 801b420:	4603      	mov	r3, r0
 801b422:	6063      	str	r3, [r4, #4]
 801b424:	6863      	ldr	r3, [r4, #4]
 801b426:	4a45      	ldr	r2, [pc, #276]	; (801b53c <tcp_input+0x2ac>)
 801b428:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b42a:	4b3c      	ldr	r3, [pc, #240]	; (801b51c <tcp_input+0x28c>)
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	689b      	ldr	r3, [r3, #8]
 801b430:	4a3a      	ldr	r2, [pc, #232]	; (801b51c <tcp_input+0x28c>)
 801b432:	6814      	ldr	r4, [r2, #0]
 801b434:	4618      	mov	r0, r3
 801b436:	f7f8 fadc 	bl	80139f2 <lwip_htonl>
 801b43a:	4603      	mov	r3, r0
 801b43c:	60a3      	str	r3, [r4, #8]
 801b43e:	68a3      	ldr	r3, [r4, #8]
 801b440:	4a3f      	ldr	r2, [pc, #252]	; (801b540 <tcp_input+0x2b0>)
 801b442:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b444:	4b35      	ldr	r3, [pc, #212]	; (801b51c <tcp_input+0x28c>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	89db      	ldrh	r3, [r3, #14]
 801b44a:	b29b      	uxth	r3, r3
 801b44c:	4a33      	ldr	r2, [pc, #204]	; (801b51c <tcp_input+0x28c>)
 801b44e:	6814      	ldr	r4, [r2, #0]
 801b450:	4618      	mov	r0, r3
 801b452:	f7f8 fab9 	bl	80139c8 <lwip_htons>
 801b456:	4603      	mov	r3, r0
 801b458:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b45a:	4b30      	ldr	r3, [pc, #192]	; (801b51c <tcp_input+0x28c>)
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	899b      	ldrh	r3, [r3, #12]
 801b460:	b29b      	uxth	r3, r3
 801b462:	4618      	mov	r0, r3
 801b464:	f7f8 fab0 	bl	80139c8 <lwip_htons>
 801b468:	4603      	mov	r3, r0
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b470:	b2da      	uxtb	r2, r3
 801b472:	4b34      	ldr	r3, [pc, #208]	; (801b544 <tcp_input+0x2b4>)
 801b474:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	891a      	ldrh	r2, [r3, #8]
 801b47a:	4b33      	ldr	r3, [pc, #204]	; (801b548 <tcp_input+0x2b8>)
 801b47c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801b47e:	4b31      	ldr	r3, [pc, #196]	; (801b544 <tcp_input+0x2b4>)
 801b480:	781b      	ldrb	r3, [r3, #0]
 801b482:	f003 0303 	and.w	r3, r3, #3
 801b486:	2b00      	cmp	r3, #0
 801b488:	d00c      	beq.n	801b4a4 <tcp_input+0x214>
    tcplen++;
 801b48a:	4b2f      	ldr	r3, [pc, #188]	; (801b548 <tcp_input+0x2b8>)
 801b48c:	881b      	ldrh	r3, [r3, #0]
 801b48e:	3301      	adds	r3, #1
 801b490:	b29a      	uxth	r2, r3
 801b492:	4b2d      	ldr	r3, [pc, #180]	; (801b548 <tcp_input+0x2b8>)
 801b494:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	891a      	ldrh	r2, [r3, #8]
 801b49a:	4b2b      	ldr	r3, [pc, #172]	; (801b548 <tcp_input+0x2b8>)
 801b49c:	881b      	ldrh	r3, [r3, #0]
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	f200 82d9 	bhi.w	801ba56 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b4a8:	4b28      	ldr	r3, [pc, #160]	; (801b54c <tcp_input+0x2bc>)
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	61fb      	str	r3, [r7, #28]
 801b4ae:	e09d      	b.n	801b5ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801b4b0:	69fb      	ldr	r3, [r7, #28]
 801b4b2:	7d1b      	ldrb	r3, [r3, #20]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d105      	bne.n	801b4c4 <tcp_input+0x234>
 801b4b8:	4b15      	ldr	r3, [pc, #84]	; (801b510 <tcp_input+0x280>)
 801b4ba:	22fb      	movs	r2, #251	; 0xfb
 801b4bc:	4924      	ldr	r1, [pc, #144]	; (801b550 <tcp_input+0x2c0>)
 801b4be:	4816      	ldr	r0, [pc, #88]	; (801b518 <tcp_input+0x288>)
 801b4c0:	f006 f9ac 	bl	802181c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b4c4:	69fb      	ldr	r3, [r7, #28]
 801b4c6:	7d1b      	ldrb	r3, [r3, #20]
 801b4c8:	2b0a      	cmp	r3, #10
 801b4ca:	d105      	bne.n	801b4d8 <tcp_input+0x248>
 801b4cc:	4b10      	ldr	r3, [pc, #64]	; (801b510 <tcp_input+0x280>)
 801b4ce:	22fc      	movs	r2, #252	; 0xfc
 801b4d0:	4920      	ldr	r1, [pc, #128]	; (801b554 <tcp_input+0x2c4>)
 801b4d2:	4811      	ldr	r0, [pc, #68]	; (801b518 <tcp_input+0x288>)
 801b4d4:	f006 f9a2 	bl	802181c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b4d8:	69fb      	ldr	r3, [r7, #28]
 801b4da:	7d1b      	ldrb	r3, [r3, #20]
 801b4dc:	2b01      	cmp	r3, #1
 801b4de:	d105      	bne.n	801b4ec <tcp_input+0x25c>
 801b4e0:	4b0b      	ldr	r3, [pc, #44]	; (801b510 <tcp_input+0x280>)
 801b4e2:	22fd      	movs	r2, #253	; 0xfd
 801b4e4:	491c      	ldr	r1, [pc, #112]	; (801b558 <tcp_input+0x2c8>)
 801b4e6:	480c      	ldr	r0, [pc, #48]	; (801b518 <tcp_input+0x288>)
 801b4e8:	f006 f998 	bl	802181c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b4ec:	69fb      	ldr	r3, [r7, #28]
 801b4ee:	7a1b      	ldrb	r3, [r3, #8]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d033      	beq.n	801b55c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b4f4:	69fb      	ldr	r3, [r7, #28]
 801b4f6:	7a1a      	ldrb	r2, [r3, #8]
 801b4f8:	4b09      	ldr	r3, [pc, #36]	; (801b520 <tcp_input+0x290>)
 801b4fa:	685b      	ldr	r3, [r3, #4]
 801b4fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b500:	3301      	adds	r3, #1
 801b502:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b504:	429a      	cmp	r2, r3
 801b506:	d029      	beq.n	801b55c <tcp_input+0x2cc>
      prev = pcb;
 801b508:	69fb      	ldr	r3, [r7, #28]
 801b50a:	61bb      	str	r3, [r7, #24]
      continue;
 801b50c:	e06b      	b.n	801b5e6 <tcp_input+0x356>
 801b50e:	bf00      	nop
 801b510:	0802482c 	.word	0x0802482c
 801b514:	080248a4 	.word	0x080248a4
 801b518:	080248bc 	.word	0x080248bc
 801b51c:	200090bc 	.word	0x200090bc
 801b520:	2000e840 	.word	0x2000e840
 801b524:	200090c0 	.word	0x200090c0
 801b528:	200090c4 	.word	0x200090c4
 801b52c:	200090c2 	.word	0x200090c2
 801b530:	080248e4 	.word	0x080248e4
 801b534:	080248f4 	.word	0x080248f4
 801b538:	08024900 	.word	0x08024900
 801b53c:	200090cc 	.word	0x200090cc
 801b540:	200090d0 	.word	0x200090d0
 801b544:	200090d8 	.word	0x200090d8
 801b548:	200090d6 	.word	0x200090d6
 801b54c:	20011f7c 	.word	0x20011f7c
 801b550:	08024920 	.word	0x08024920
 801b554:	08024948 	.word	0x08024948
 801b558:	08024974 	.word	0x08024974
    }

    if (pcb->remote_port == tcphdr->src &&
 801b55c:	69fb      	ldr	r3, [r7, #28]
 801b55e:	8b1a      	ldrh	r2, [r3, #24]
 801b560:	4b94      	ldr	r3, [pc, #592]	; (801b7b4 <tcp_input+0x524>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	881b      	ldrh	r3, [r3, #0]
 801b566:	b29b      	uxth	r3, r3
 801b568:	429a      	cmp	r2, r3
 801b56a:	d13a      	bne.n	801b5e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b56c:	69fb      	ldr	r3, [r7, #28]
 801b56e:	8ada      	ldrh	r2, [r3, #22]
 801b570:	4b90      	ldr	r3, [pc, #576]	; (801b7b4 <tcp_input+0x524>)
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	885b      	ldrh	r3, [r3, #2]
 801b576:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b578:	429a      	cmp	r2, r3
 801b57a:	d132      	bne.n	801b5e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b57c:	69fb      	ldr	r3, [r7, #28]
 801b57e:	685a      	ldr	r2, [r3, #4]
 801b580:	4b8d      	ldr	r3, [pc, #564]	; (801b7b8 <tcp_input+0x528>)
 801b582:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b584:	429a      	cmp	r2, r3
 801b586:	d12c      	bne.n	801b5e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b588:	69fb      	ldr	r3, [r7, #28]
 801b58a:	681a      	ldr	r2, [r3, #0]
 801b58c:	4b8a      	ldr	r3, [pc, #552]	; (801b7b8 <tcp_input+0x528>)
 801b58e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b590:	429a      	cmp	r2, r3
 801b592:	d126      	bne.n	801b5e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b594:	69fb      	ldr	r3, [r7, #28]
 801b596:	68db      	ldr	r3, [r3, #12]
 801b598:	69fa      	ldr	r2, [r7, #28]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d106      	bne.n	801b5ac <tcp_input+0x31c>
 801b59e:	4b87      	ldr	r3, [pc, #540]	; (801b7bc <tcp_input+0x52c>)
 801b5a0:	f240 120d 	movw	r2, #269	; 0x10d
 801b5a4:	4986      	ldr	r1, [pc, #536]	; (801b7c0 <tcp_input+0x530>)
 801b5a6:	4887      	ldr	r0, [pc, #540]	; (801b7c4 <tcp_input+0x534>)
 801b5a8:	f006 f938 	bl	802181c <iprintf>
      if (prev != NULL) {
 801b5ac:	69bb      	ldr	r3, [r7, #24]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d00a      	beq.n	801b5c8 <tcp_input+0x338>
        prev->next = pcb->next;
 801b5b2:	69fb      	ldr	r3, [r7, #28]
 801b5b4:	68da      	ldr	r2, [r3, #12]
 801b5b6:	69bb      	ldr	r3, [r7, #24]
 801b5b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b5ba:	4b83      	ldr	r3, [pc, #524]	; (801b7c8 <tcp_input+0x538>)
 801b5bc:	681a      	ldr	r2, [r3, #0]
 801b5be:	69fb      	ldr	r3, [r7, #28]
 801b5c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b5c2:	4a81      	ldr	r2, [pc, #516]	; (801b7c8 <tcp_input+0x538>)
 801b5c4:	69fb      	ldr	r3, [r7, #28]
 801b5c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b5c8:	69fb      	ldr	r3, [r7, #28]
 801b5ca:	68db      	ldr	r3, [r3, #12]
 801b5cc:	69fa      	ldr	r2, [r7, #28]
 801b5ce:	429a      	cmp	r2, r3
 801b5d0:	d111      	bne.n	801b5f6 <tcp_input+0x366>
 801b5d2:	4b7a      	ldr	r3, [pc, #488]	; (801b7bc <tcp_input+0x52c>)
 801b5d4:	f240 1215 	movw	r2, #277	; 0x115
 801b5d8:	497c      	ldr	r1, [pc, #496]	; (801b7cc <tcp_input+0x53c>)
 801b5da:	487a      	ldr	r0, [pc, #488]	; (801b7c4 <tcp_input+0x534>)
 801b5dc:	f006 f91e 	bl	802181c <iprintf>
      break;
 801b5e0:	e009      	b.n	801b5f6 <tcp_input+0x366>
    }
    prev = pcb;
 801b5e2:	69fb      	ldr	r3, [r7, #28]
 801b5e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b5e6:	69fb      	ldr	r3, [r7, #28]
 801b5e8:	68db      	ldr	r3, [r3, #12]
 801b5ea:	61fb      	str	r3, [r7, #28]
 801b5ec:	69fb      	ldr	r3, [r7, #28]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	f47f af5e 	bne.w	801b4b0 <tcp_input+0x220>
 801b5f4:	e000      	b.n	801b5f8 <tcp_input+0x368>
      break;
 801b5f6:	bf00      	nop
  }

  if (pcb == NULL) {
 801b5f8:	69fb      	ldr	r3, [r7, #28]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	f040 8095 	bne.w	801b72a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b600:	4b73      	ldr	r3, [pc, #460]	; (801b7d0 <tcp_input+0x540>)
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	61fb      	str	r3, [r7, #28]
 801b606:	e03f      	b.n	801b688 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b608:	69fb      	ldr	r3, [r7, #28]
 801b60a:	7d1b      	ldrb	r3, [r3, #20]
 801b60c:	2b0a      	cmp	r3, #10
 801b60e:	d006      	beq.n	801b61e <tcp_input+0x38e>
 801b610:	4b6a      	ldr	r3, [pc, #424]	; (801b7bc <tcp_input+0x52c>)
 801b612:	f240 121f 	movw	r2, #287	; 0x11f
 801b616:	496f      	ldr	r1, [pc, #444]	; (801b7d4 <tcp_input+0x544>)
 801b618:	486a      	ldr	r0, [pc, #424]	; (801b7c4 <tcp_input+0x534>)
 801b61a:	f006 f8ff 	bl	802181c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b61e:	69fb      	ldr	r3, [r7, #28]
 801b620:	7a1b      	ldrb	r3, [r3, #8]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d009      	beq.n	801b63a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b626:	69fb      	ldr	r3, [r7, #28]
 801b628:	7a1a      	ldrb	r2, [r3, #8]
 801b62a:	4b63      	ldr	r3, [pc, #396]	; (801b7b8 <tcp_input+0x528>)
 801b62c:	685b      	ldr	r3, [r3, #4]
 801b62e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b632:	3301      	adds	r3, #1
 801b634:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b636:	429a      	cmp	r2, r3
 801b638:	d122      	bne.n	801b680 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b63a:	69fb      	ldr	r3, [r7, #28]
 801b63c:	8b1a      	ldrh	r2, [r3, #24]
 801b63e:	4b5d      	ldr	r3, [pc, #372]	; (801b7b4 <tcp_input+0x524>)
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	881b      	ldrh	r3, [r3, #0]
 801b644:	b29b      	uxth	r3, r3
 801b646:	429a      	cmp	r2, r3
 801b648:	d11b      	bne.n	801b682 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b64a:	69fb      	ldr	r3, [r7, #28]
 801b64c:	8ada      	ldrh	r2, [r3, #22]
 801b64e:	4b59      	ldr	r3, [pc, #356]	; (801b7b4 <tcp_input+0x524>)
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	885b      	ldrh	r3, [r3, #2]
 801b654:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b656:	429a      	cmp	r2, r3
 801b658:	d113      	bne.n	801b682 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b65a:	69fb      	ldr	r3, [r7, #28]
 801b65c:	685a      	ldr	r2, [r3, #4]
 801b65e:	4b56      	ldr	r3, [pc, #344]	; (801b7b8 <tcp_input+0x528>)
 801b660:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b662:	429a      	cmp	r2, r3
 801b664:	d10d      	bne.n	801b682 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b666:	69fb      	ldr	r3, [r7, #28]
 801b668:	681a      	ldr	r2, [r3, #0]
 801b66a:	4b53      	ldr	r3, [pc, #332]	; (801b7b8 <tcp_input+0x528>)
 801b66c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b66e:	429a      	cmp	r2, r3
 801b670:	d107      	bne.n	801b682 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b672:	69f8      	ldr	r0, [r7, #28]
 801b674:	f000 fb54 	bl	801bd20 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b678:	6878      	ldr	r0, [r7, #4]
 801b67a:	f7fd fed3 	bl	8019424 <pbuf_free>
        return;
 801b67e:	e1f0      	b.n	801ba62 <tcp_input+0x7d2>
        continue;
 801b680:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b682:	69fb      	ldr	r3, [r7, #28]
 801b684:	68db      	ldr	r3, [r3, #12]
 801b686:	61fb      	str	r3, [r7, #28]
 801b688:	69fb      	ldr	r3, [r7, #28]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d1bc      	bne.n	801b608 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b68e:	2300      	movs	r3, #0
 801b690:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b692:	4b51      	ldr	r3, [pc, #324]	; (801b7d8 <tcp_input+0x548>)
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	617b      	str	r3, [r7, #20]
 801b698:	e02a      	b.n	801b6f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b69a:	697b      	ldr	r3, [r7, #20]
 801b69c:	7a1b      	ldrb	r3, [r3, #8]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d00c      	beq.n	801b6bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b6a2:	697b      	ldr	r3, [r7, #20]
 801b6a4:	7a1a      	ldrb	r2, [r3, #8]
 801b6a6:	4b44      	ldr	r3, [pc, #272]	; (801b7b8 <tcp_input+0x528>)
 801b6a8:	685b      	ldr	r3, [r3, #4]
 801b6aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b6b2:	429a      	cmp	r2, r3
 801b6b4:	d002      	beq.n	801b6bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b6b6:	697b      	ldr	r3, [r7, #20]
 801b6b8:	61bb      	str	r3, [r7, #24]
        continue;
 801b6ba:	e016      	b.n	801b6ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b6bc:	697b      	ldr	r3, [r7, #20]
 801b6be:	8ada      	ldrh	r2, [r3, #22]
 801b6c0:	4b3c      	ldr	r3, [pc, #240]	; (801b7b4 <tcp_input+0x524>)
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	885b      	ldrh	r3, [r3, #2]
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	429a      	cmp	r2, r3
 801b6ca:	d10c      	bne.n	801b6e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b6cc:	697b      	ldr	r3, [r7, #20]
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	4b39      	ldr	r3, [pc, #228]	; (801b7b8 <tcp_input+0x528>)
 801b6d2:	695b      	ldr	r3, [r3, #20]
 801b6d4:	429a      	cmp	r2, r3
 801b6d6:	d00f      	beq.n	801b6f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b6d8:	697b      	ldr	r3, [r7, #20]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d00d      	beq.n	801b6fa <tcp_input+0x46a>
 801b6de:	697b      	ldr	r3, [r7, #20]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d009      	beq.n	801b6fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b6e6:	697b      	ldr	r3, [r7, #20]
 801b6e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b6ea:	697b      	ldr	r3, [r7, #20]
 801b6ec:	68db      	ldr	r3, [r3, #12]
 801b6ee:	617b      	str	r3, [r7, #20]
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d1d1      	bne.n	801b69a <tcp_input+0x40a>
 801b6f6:	e000      	b.n	801b6fa <tcp_input+0x46a>
            break;
 801b6f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b6fa:	697b      	ldr	r3, [r7, #20]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d014      	beq.n	801b72a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b700:	69bb      	ldr	r3, [r7, #24]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d00a      	beq.n	801b71c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b706:	697b      	ldr	r3, [r7, #20]
 801b708:	68da      	ldr	r2, [r3, #12]
 801b70a:	69bb      	ldr	r3, [r7, #24]
 801b70c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b70e:	4b32      	ldr	r3, [pc, #200]	; (801b7d8 <tcp_input+0x548>)
 801b710:	681a      	ldr	r2, [r3, #0]
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b716:	4a30      	ldr	r2, [pc, #192]	; (801b7d8 <tcp_input+0x548>)
 801b718:	697b      	ldr	r3, [r7, #20]
 801b71a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b71c:	6978      	ldr	r0, [r7, #20]
 801b71e:	f000 fa01 	bl	801bb24 <tcp_listen_input>
      }
      pbuf_free(p);
 801b722:	6878      	ldr	r0, [r7, #4]
 801b724:	f7fd fe7e 	bl	8019424 <pbuf_free>
      return;
 801b728:	e19b      	b.n	801ba62 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b72a:	69fb      	ldr	r3, [r7, #28]
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	f000 8160 	beq.w	801b9f2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b732:	4b2a      	ldr	r3, [pc, #168]	; (801b7dc <tcp_input+0x54c>)
 801b734:	2200      	movs	r2, #0
 801b736:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	891a      	ldrh	r2, [r3, #8]
 801b73c:	4b27      	ldr	r3, [pc, #156]	; (801b7dc <tcp_input+0x54c>)
 801b73e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b740:	4a26      	ldr	r2, [pc, #152]	; (801b7dc <tcp_input+0x54c>)
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b746:	4b1b      	ldr	r3, [pc, #108]	; (801b7b4 <tcp_input+0x524>)
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	4a24      	ldr	r2, [pc, #144]	; (801b7dc <tcp_input+0x54c>)
 801b74c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b74e:	4b24      	ldr	r3, [pc, #144]	; (801b7e0 <tcp_input+0x550>)
 801b750:	2200      	movs	r2, #0
 801b752:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b754:	4b23      	ldr	r3, [pc, #140]	; (801b7e4 <tcp_input+0x554>)
 801b756:	2200      	movs	r2, #0
 801b758:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b75a:	4b23      	ldr	r3, [pc, #140]	; (801b7e8 <tcp_input+0x558>)
 801b75c:	2200      	movs	r2, #0
 801b75e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b760:	4b22      	ldr	r3, [pc, #136]	; (801b7ec <tcp_input+0x55c>)
 801b762:	781b      	ldrb	r3, [r3, #0]
 801b764:	f003 0308 	and.w	r3, r3, #8
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d006      	beq.n	801b77a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	7b5b      	ldrb	r3, [r3, #13]
 801b770:	f043 0301 	orr.w	r3, r3, #1
 801b774:	b2da      	uxtb	r2, r3
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b77a:	69fb      	ldr	r3, [r7, #28]
 801b77c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d038      	beq.n	801b7f4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b782:	69f8      	ldr	r0, [r7, #28]
 801b784:	f7ff f93e 	bl	801aa04 <tcp_process_refused_data>
 801b788:	4603      	mov	r3, r0
 801b78a:	f113 0f0d 	cmn.w	r3, #13
 801b78e:	d007      	beq.n	801b7a0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b790:	69fb      	ldr	r3, [r7, #28]
 801b792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b794:	2b00      	cmp	r3, #0
 801b796:	d02d      	beq.n	801b7f4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b798:	4b15      	ldr	r3, [pc, #84]	; (801b7f0 <tcp_input+0x560>)
 801b79a:	881b      	ldrh	r3, [r3, #0]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d029      	beq.n	801b7f4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b7a0:	69fb      	ldr	r3, [r7, #28]
 801b7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	f040 8104 	bne.w	801b9b2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b7aa:	69f8      	ldr	r0, [r7, #28]
 801b7ac:	f003 f9be 	bl	801eb2c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b7b0:	e0ff      	b.n	801b9b2 <tcp_input+0x722>
 801b7b2:	bf00      	nop
 801b7b4:	200090bc 	.word	0x200090bc
 801b7b8:	2000e840 	.word	0x2000e840
 801b7bc:	0802482c 	.word	0x0802482c
 801b7c0:	0802499c 	.word	0x0802499c
 801b7c4:	080248bc 	.word	0x080248bc
 801b7c8:	20011f7c 	.word	0x20011f7c
 801b7cc:	080249c8 	.word	0x080249c8
 801b7d0:	20011f8c 	.word	0x20011f8c
 801b7d4:	080249f4 	.word	0x080249f4
 801b7d8:	20011f84 	.word	0x20011f84
 801b7dc:	200090ac 	.word	0x200090ac
 801b7e0:	200090dc 	.word	0x200090dc
 801b7e4:	200090d9 	.word	0x200090d9
 801b7e8:	200090d4 	.word	0x200090d4
 801b7ec:	200090d8 	.word	0x200090d8
 801b7f0:	200090d6 	.word	0x200090d6
      }
    }
    tcp_input_pcb = pcb;
 801b7f4:	4a9c      	ldr	r2, [pc, #624]	; (801ba68 <tcp_input+0x7d8>)
 801b7f6:	69fb      	ldr	r3, [r7, #28]
 801b7f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b7fa:	69f8      	ldr	r0, [r7, #28]
 801b7fc:	f000 fb0a 	bl	801be14 <tcp_process>
 801b800:	4603      	mov	r3, r0
 801b802:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b804:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b808:	f113 0f0d 	cmn.w	r3, #13
 801b80c:	f000 80d3 	beq.w	801b9b6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801b810:	4b96      	ldr	r3, [pc, #600]	; (801ba6c <tcp_input+0x7dc>)
 801b812:	781b      	ldrb	r3, [r3, #0]
 801b814:	f003 0308 	and.w	r3, r3, #8
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d015      	beq.n	801b848 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b81c:	69fb      	ldr	r3, [r7, #28]
 801b81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b822:	2b00      	cmp	r3, #0
 801b824:	d008      	beq.n	801b838 <tcp_input+0x5a8>
 801b826:	69fb      	ldr	r3, [r7, #28]
 801b828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b82c:	69fa      	ldr	r2, [r7, #28]
 801b82e:	6912      	ldr	r2, [r2, #16]
 801b830:	f06f 010d 	mvn.w	r1, #13
 801b834:	4610      	mov	r0, r2
 801b836:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b838:	69f9      	ldr	r1, [r7, #28]
 801b83a:	488d      	ldr	r0, [pc, #564]	; (801ba70 <tcp_input+0x7e0>)
 801b83c:	f7ff fbb0 	bl	801afa0 <tcp_pcb_remove>
        tcp_free(pcb);
 801b840:	69f8      	ldr	r0, [r7, #28]
 801b842:	f7fe f99d 	bl	8019b80 <tcp_free>
 801b846:	e0c1      	b.n	801b9cc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801b848:	2300      	movs	r3, #0
 801b84a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b84c:	4b89      	ldr	r3, [pc, #548]	; (801ba74 <tcp_input+0x7e4>)
 801b84e:	881b      	ldrh	r3, [r3, #0]
 801b850:	2b00      	cmp	r3, #0
 801b852:	d01d      	beq.n	801b890 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b854:	4b87      	ldr	r3, [pc, #540]	; (801ba74 <tcp_input+0x7e4>)
 801b856:	881b      	ldrh	r3, [r3, #0]
 801b858:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b85a:	69fb      	ldr	r3, [r7, #28]
 801b85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b860:	2b00      	cmp	r3, #0
 801b862:	d00a      	beq.n	801b87a <tcp_input+0x5ea>
 801b864:	69fb      	ldr	r3, [r7, #28]
 801b866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b86a:	69fa      	ldr	r2, [r7, #28]
 801b86c:	6910      	ldr	r0, [r2, #16]
 801b86e:	89fa      	ldrh	r2, [r7, #14]
 801b870:	69f9      	ldr	r1, [r7, #28]
 801b872:	4798      	blx	r3
 801b874:	4603      	mov	r3, r0
 801b876:	74fb      	strb	r3, [r7, #19]
 801b878:	e001      	b.n	801b87e <tcp_input+0x5ee>
 801b87a:	2300      	movs	r3, #0
 801b87c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b87e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b882:	f113 0f0d 	cmn.w	r3, #13
 801b886:	f000 8098 	beq.w	801b9ba <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b88a:	4b7a      	ldr	r3, [pc, #488]	; (801ba74 <tcp_input+0x7e4>)
 801b88c:	2200      	movs	r2, #0
 801b88e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b890:	69f8      	ldr	r0, [r7, #28]
 801b892:	f000 f907 	bl	801baa4 <tcp_input_delayed_close>
 801b896:	4603      	mov	r3, r0
 801b898:	2b00      	cmp	r3, #0
 801b89a:	f040 8090 	bne.w	801b9be <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b89e:	4b76      	ldr	r3, [pc, #472]	; (801ba78 <tcp_input+0x7e8>)
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d041      	beq.n	801b92a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b8a6:	69fb      	ldr	r3, [r7, #28]
 801b8a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d006      	beq.n	801b8bc <tcp_input+0x62c>
 801b8ae:	4b73      	ldr	r3, [pc, #460]	; (801ba7c <tcp_input+0x7ec>)
 801b8b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b8b4:	4972      	ldr	r1, [pc, #456]	; (801ba80 <tcp_input+0x7f0>)
 801b8b6:	4873      	ldr	r0, [pc, #460]	; (801ba84 <tcp_input+0x7f4>)
 801b8b8:	f005 ffb0 	bl	802181c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b8bc:	69fb      	ldr	r3, [r7, #28]
 801b8be:	8b5b      	ldrh	r3, [r3, #26]
 801b8c0:	f003 0310 	and.w	r3, r3, #16
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d008      	beq.n	801b8da <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b8c8:	4b6b      	ldr	r3, [pc, #428]	; (801ba78 <tcp_input+0x7e8>)
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f7fd fda9 	bl	8019424 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b8d2:	69f8      	ldr	r0, [r7, #28]
 801b8d4:	f7fe fc3c 	bl	801a150 <tcp_abort>
            goto aborted;
 801b8d8:	e078      	b.n	801b9cc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b8da:	69fb      	ldr	r3, [r7, #28]
 801b8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d00c      	beq.n	801b8fe <tcp_input+0x66e>
 801b8e4:	69fb      	ldr	r3, [r7, #28]
 801b8e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b8ea:	69fb      	ldr	r3, [r7, #28]
 801b8ec:	6918      	ldr	r0, [r3, #16]
 801b8ee:	4b62      	ldr	r3, [pc, #392]	; (801ba78 <tcp_input+0x7e8>)
 801b8f0:	681a      	ldr	r2, [r3, #0]
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	69f9      	ldr	r1, [r7, #28]
 801b8f6:	47a0      	blx	r4
 801b8f8:	4603      	mov	r3, r0
 801b8fa:	74fb      	strb	r3, [r7, #19]
 801b8fc:	e008      	b.n	801b910 <tcp_input+0x680>
 801b8fe:	4b5e      	ldr	r3, [pc, #376]	; (801ba78 <tcp_input+0x7e8>)
 801b900:	681a      	ldr	r2, [r3, #0]
 801b902:	2300      	movs	r3, #0
 801b904:	69f9      	ldr	r1, [r7, #28]
 801b906:	2000      	movs	r0, #0
 801b908:	f7ff f952 	bl	801abb0 <tcp_recv_null>
 801b90c:	4603      	mov	r3, r0
 801b90e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b910:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b914:	f113 0f0d 	cmn.w	r3, #13
 801b918:	d053      	beq.n	801b9c2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b91a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d003      	beq.n	801b92a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b922:	4b55      	ldr	r3, [pc, #340]	; (801ba78 <tcp_input+0x7e8>)
 801b924:	681a      	ldr	r2, [r3, #0]
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b92a:	4b50      	ldr	r3, [pc, #320]	; (801ba6c <tcp_input+0x7dc>)
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	f003 0320 	and.w	r3, r3, #32
 801b932:	2b00      	cmp	r3, #0
 801b934:	d030      	beq.n	801b998 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801b936:	69fb      	ldr	r3, [r7, #28]
 801b938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d009      	beq.n	801b952 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b93e:	69fb      	ldr	r3, [r7, #28]
 801b940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b942:	7b5a      	ldrb	r2, [r3, #13]
 801b944:	69fb      	ldr	r3, [r7, #28]
 801b946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b948:	f042 0220 	orr.w	r2, r2, #32
 801b94c:	b2d2      	uxtb	r2, r2
 801b94e:	735a      	strb	r2, [r3, #13]
 801b950:	e022      	b.n	801b998 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b952:	69fb      	ldr	r3, [r7, #28]
 801b954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b956:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b95a:	d005      	beq.n	801b968 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801b95c:	69fb      	ldr	r3, [r7, #28]
 801b95e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b960:	3301      	adds	r3, #1
 801b962:	b29a      	uxth	r2, r3
 801b964:	69fb      	ldr	r3, [r7, #28]
 801b966:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b968:	69fb      	ldr	r3, [r7, #28]
 801b96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d00b      	beq.n	801b98a <tcp_input+0x6fa>
 801b972:	69fb      	ldr	r3, [r7, #28]
 801b974:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b978:	69fb      	ldr	r3, [r7, #28]
 801b97a:	6918      	ldr	r0, [r3, #16]
 801b97c:	2300      	movs	r3, #0
 801b97e:	2200      	movs	r2, #0
 801b980:	69f9      	ldr	r1, [r7, #28]
 801b982:	47a0      	blx	r4
 801b984:	4603      	mov	r3, r0
 801b986:	74fb      	strb	r3, [r7, #19]
 801b988:	e001      	b.n	801b98e <tcp_input+0x6fe>
 801b98a:	2300      	movs	r3, #0
 801b98c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b98e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b992:	f113 0f0d 	cmn.w	r3, #13
 801b996:	d016      	beq.n	801b9c6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b998:	4b33      	ldr	r3, [pc, #204]	; (801ba68 <tcp_input+0x7d8>)
 801b99a:	2200      	movs	r2, #0
 801b99c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b99e:	69f8      	ldr	r0, [r7, #28]
 801b9a0:	f000 f880 	bl	801baa4 <tcp_input_delayed_close>
 801b9a4:	4603      	mov	r3, r0
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d10f      	bne.n	801b9ca <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b9aa:	69f8      	ldr	r0, [r7, #28]
 801b9ac:	f002 fab8 	bl	801df20 <tcp_output>
 801b9b0:	e00c      	b.n	801b9cc <tcp_input+0x73c>
        goto aborted;
 801b9b2:	bf00      	nop
 801b9b4:	e00a      	b.n	801b9cc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b9b6:	bf00      	nop
 801b9b8:	e008      	b.n	801b9cc <tcp_input+0x73c>
              goto aborted;
 801b9ba:	bf00      	nop
 801b9bc:	e006      	b.n	801b9cc <tcp_input+0x73c>
          goto aborted;
 801b9be:	bf00      	nop
 801b9c0:	e004      	b.n	801b9cc <tcp_input+0x73c>
            goto aborted;
 801b9c2:	bf00      	nop
 801b9c4:	e002      	b.n	801b9cc <tcp_input+0x73c>
              goto aborted;
 801b9c6:	bf00      	nop
 801b9c8:	e000      	b.n	801b9cc <tcp_input+0x73c>
          goto aborted;
 801b9ca:	bf00      	nop
    tcp_input_pcb = NULL;
 801b9cc:	4b26      	ldr	r3, [pc, #152]	; (801ba68 <tcp_input+0x7d8>)
 801b9ce:	2200      	movs	r2, #0
 801b9d0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b9d2:	4b29      	ldr	r3, [pc, #164]	; (801ba78 <tcp_input+0x7e8>)
 801b9d4:	2200      	movs	r2, #0
 801b9d6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b9d8:	4b2b      	ldr	r3, [pc, #172]	; (801ba88 <tcp_input+0x7f8>)
 801b9da:	685b      	ldr	r3, [r3, #4]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d03f      	beq.n	801ba60 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801b9e0:	4b29      	ldr	r3, [pc, #164]	; (801ba88 <tcp_input+0x7f8>)
 801b9e2:	685b      	ldr	r3, [r3, #4]
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	f7fd fd1d 	bl	8019424 <pbuf_free>
      inseg.p = NULL;
 801b9ea:	4b27      	ldr	r3, [pc, #156]	; (801ba88 <tcp_input+0x7f8>)
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b9f0:	e036      	b.n	801ba60 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b9f2:	4b26      	ldr	r3, [pc, #152]	; (801ba8c <tcp_input+0x7fc>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	899b      	ldrh	r3, [r3, #12]
 801b9f8:	b29b      	uxth	r3, r3
 801b9fa:	4618      	mov	r0, r3
 801b9fc:	f7f7 ffe4 	bl	80139c8 <lwip_htons>
 801ba00:	4603      	mov	r3, r0
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	f003 0304 	and.w	r3, r3, #4
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d118      	bne.n	801ba3e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ba0c:	4b20      	ldr	r3, [pc, #128]	; (801ba90 <tcp_input+0x800>)
 801ba0e:	6819      	ldr	r1, [r3, #0]
 801ba10:	4b20      	ldr	r3, [pc, #128]	; (801ba94 <tcp_input+0x804>)
 801ba12:	881b      	ldrh	r3, [r3, #0]
 801ba14:	461a      	mov	r2, r3
 801ba16:	4b20      	ldr	r3, [pc, #128]	; (801ba98 <tcp_input+0x808>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ba1c:	4b1b      	ldr	r3, [pc, #108]	; (801ba8c <tcp_input+0x7fc>)
 801ba1e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ba20:	885b      	ldrh	r3, [r3, #2]
 801ba22:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ba24:	4a19      	ldr	r2, [pc, #100]	; (801ba8c <tcp_input+0x7fc>)
 801ba26:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ba28:	8812      	ldrh	r2, [r2, #0]
 801ba2a:	b292      	uxth	r2, r2
 801ba2c:	9202      	str	r2, [sp, #8]
 801ba2e:	9301      	str	r3, [sp, #4]
 801ba30:	4b1a      	ldr	r3, [pc, #104]	; (801ba9c <tcp_input+0x80c>)
 801ba32:	9300      	str	r3, [sp, #0]
 801ba34:	4b1a      	ldr	r3, [pc, #104]	; (801baa0 <tcp_input+0x810>)
 801ba36:	4602      	mov	r2, r0
 801ba38:	2000      	movs	r0, #0
 801ba3a:	f003 f825 	bl	801ea88 <tcp_rst>
    pbuf_free(p);
 801ba3e:	6878      	ldr	r0, [r7, #4]
 801ba40:	f7fd fcf0 	bl	8019424 <pbuf_free>
  return;
 801ba44:	e00c      	b.n	801ba60 <tcp_input+0x7d0>
    goto dropped;
 801ba46:	bf00      	nop
 801ba48:	e006      	b.n	801ba58 <tcp_input+0x7c8>
    goto dropped;
 801ba4a:	bf00      	nop
 801ba4c:	e004      	b.n	801ba58 <tcp_input+0x7c8>
    goto dropped;
 801ba4e:	bf00      	nop
 801ba50:	e002      	b.n	801ba58 <tcp_input+0x7c8>
      goto dropped;
 801ba52:	bf00      	nop
 801ba54:	e000      	b.n	801ba58 <tcp_input+0x7c8>
      goto dropped;
 801ba56:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ba58:	6878      	ldr	r0, [r7, #4]
 801ba5a:	f7fd fce3 	bl	8019424 <pbuf_free>
 801ba5e:	e000      	b.n	801ba62 <tcp_input+0x7d2>
  return;
 801ba60:	bf00      	nop
}
 801ba62:	3724      	adds	r7, #36	; 0x24
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bd90      	pop	{r4, r7, pc}
 801ba68:	20011f90 	.word	0x20011f90
 801ba6c:	200090d9 	.word	0x200090d9
 801ba70:	20011f7c 	.word	0x20011f7c
 801ba74:	200090d4 	.word	0x200090d4
 801ba78:	200090dc 	.word	0x200090dc
 801ba7c:	0802482c 	.word	0x0802482c
 801ba80:	08024a24 	.word	0x08024a24
 801ba84:	080248bc 	.word	0x080248bc
 801ba88:	200090ac 	.word	0x200090ac
 801ba8c:	200090bc 	.word	0x200090bc
 801ba90:	200090d0 	.word	0x200090d0
 801ba94:	200090d6 	.word	0x200090d6
 801ba98:	200090cc 	.word	0x200090cc
 801ba9c:	2000e850 	.word	0x2000e850
 801baa0:	2000e854 	.word	0x2000e854

0801baa4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b082      	sub	sp, #8
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d106      	bne.n	801bac0 <tcp_input_delayed_close+0x1c>
 801bab2:	4b17      	ldr	r3, [pc, #92]	; (801bb10 <tcp_input_delayed_close+0x6c>)
 801bab4:	f240 225a 	movw	r2, #602	; 0x25a
 801bab8:	4916      	ldr	r1, [pc, #88]	; (801bb14 <tcp_input_delayed_close+0x70>)
 801baba:	4817      	ldr	r0, [pc, #92]	; (801bb18 <tcp_input_delayed_close+0x74>)
 801babc:	f005 feae 	bl	802181c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801bac0:	4b16      	ldr	r3, [pc, #88]	; (801bb1c <tcp_input_delayed_close+0x78>)
 801bac2:	781b      	ldrb	r3, [r3, #0]
 801bac4:	f003 0310 	and.w	r3, r3, #16
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d01c      	beq.n	801bb06 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	8b5b      	ldrh	r3, [r3, #26]
 801bad0:	f003 0310 	and.w	r3, r3, #16
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d10d      	bne.n	801baf4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d008      	beq.n	801baf4 <tcp_input_delayed_close+0x50>
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bae8:	687a      	ldr	r2, [r7, #4]
 801baea:	6912      	ldr	r2, [r2, #16]
 801baec:	f06f 010e 	mvn.w	r1, #14
 801baf0:	4610      	mov	r0, r2
 801baf2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801baf4:	6879      	ldr	r1, [r7, #4]
 801baf6:	480a      	ldr	r0, [pc, #40]	; (801bb20 <tcp_input_delayed_close+0x7c>)
 801baf8:	f7ff fa52 	bl	801afa0 <tcp_pcb_remove>
    tcp_free(pcb);
 801bafc:	6878      	ldr	r0, [r7, #4]
 801bafe:	f7fe f83f 	bl	8019b80 <tcp_free>
    return 1;
 801bb02:	2301      	movs	r3, #1
 801bb04:	e000      	b.n	801bb08 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801bb06:	2300      	movs	r3, #0
}
 801bb08:	4618      	mov	r0, r3
 801bb0a:	3708      	adds	r7, #8
 801bb0c:	46bd      	mov	sp, r7
 801bb0e:	bd80      	pop	{r7, pc}
 801bb10:	0802482c 	.word	0x0802482c
 801bb14:	08024a40 	.word	0x08024a40
 801bb18:	080248bc 	.word	0x080248bc
 801bb1c:	200090d9 	.word	0x200090d9
 801bb20:	20011f7c 	.word	0x20011f7c

0801bb24 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801bb24:	b590      	push	{r4, r7, lr}
 801bb26:	b08b      	sub	sp, #44	; 0x2c
 801bb28:	af04      	add	r7, sp, #16
 801bb2a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801bb2c:	4b6f      	ldr	r3, [pc, #444]	; (801bcec <tcp_listen_input+0x1c8>)
 801bb2e:	781b      	ldrb	r3, [r3, #0]
 801bb30:	f003 0304 	and.w	r3, r3, #4
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	f040 80d2 	bne.w	801bcde <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d106      	bne.n	801bb4e <tcp_listen_input+0x2a>
 801bb40:	4b6b      	ldr	r3, [pc, #428]	; (801bcf0 <tcp_listen_input+0x1cc>)
 801bb42:	f240 2281 	movw	r2, #641	; 0x281
 801bb46:	496b      	ldr	r1, [pc, #428]	; (801bcf4 <tcp_listen_input+0x1d0>)
 801bb48:	486b      	ldr	r0, [pc, #428]	; (801bcf8 <tcp_listen_input+0x1d4>)
 801bb4a:	f005 fe67 	bl	802181c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801bb4e:	4b67      	ldr	r3, [pc, #412]	; (801bcec <tcp_listen_input+0x1c8>)
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	f003 0310 	and.w	r3, r3, #16
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d019      	beq.n	801bb8e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb5a:	4b68      	ldr	r3, [pc, #416]	; (801bcfc <tcp_listen_input+0x1d8>)
 801bb5c:	6819      	ldr	r1, [r3, #0]
 801bb5e:	4b68      	ldr	r3, [pc, #416]	; (801bd00 <tcp_listen_input+0x1dc>)
 801bb60:	881b      	ldrh	r3, [r3, #0]
 801bb62:	461a      	mov	r2, r3
 801bb64:	4b67      	ldr	r3, [pc, #412]	; (801bd04 <tcp_listen_input+0x1e0>)
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bb6a:	4b67      	ldr	r3, [pc, #412]	; (801bd08 <tcp_listen_input+0x1e4>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb6e:	885b      	ldrh	r3, [r3, #2]
 801bb70:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bb72:	4a65      	ldr	r2, [pc, #404]	; (801bd08 <tcp_listen_input+0x1e4>)
 801bb74:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb76:	8812      	ldrh	r2, [r2, #0]
 801bb78:	b292      	uxth	r2, r2
 801bb7a:	9202      	str	r2, [sp, #8]
 801bb7c:	9301      	str	r3, [sp, #4]
 801bb7e:	4b63      	ldr	r3, [pc, #396]	; (801bd0c <tcp_listen_input+0x1e8>)
 801bb80:	9300      	str	r3, [sp, #0]
 801bb82:	4b63      	ldr	r3, [pc, #396]	; (801bd10 <tcp_listen_input+0x1ec>)
 801bb84:	4602      	mov	r2, r0
 801bb86:	6878      	ldr	r0, [r7, #4]
 801bb88:	f002 ff7e 	bl	801ea88 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801bb8c:	e0a9      	b.n	801bce2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801bb8e:	4b57      	ldr	r3, [pc, #348]	; (801bcec <tcp_listen_input+0x1c8>)
 801bb90:	781b      	ldrb	r3, [r3, #0]
 801bb92:	f003 0302 	and.w	r3, r3, #2
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	f000 80a3 	beq.w	801bce2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	7d5b      	ldrb	r3, [r3, #21]
 801bba0:	4618      	mov	r0, r3
 801bba2:	f7ff f929 	bl	801adf8 <tcp_alloc>
 801bba6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801bba8:	697b      	ldr	r3, [r7, #20]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d111      	bne.n	801bbd2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	699b      	ldr	r3, [r3, #24]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d00a      	beq.n	801bbcc <tcp_listen_input+0xa8>
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	699b      	ldr	r3, [r3, #24]
 801bbba:	687a      	ldr	r2, [r7, #4]
 801bbbc:	6910      	ldr	r0, [r2, #16]
 801bbbe:	f04f 32ff 	mov.w	r2, #4294967295
 801bbc2:	2100      	movs	r1, #0
 801bbc4:	4798      	blx	r3
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	73bb      	strb	r3, [r7, #14]
      return;
 801bbca:	e08b      	b.n	801bce4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bbcc:	23f0      	movs	r3, #240	; 0xf0
 801bbce:	73bb      	strb	r3, [r7, #14]
      return;
 801bbd0:	e088      	b.n	801bce4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801bbd2:	4b50      	ldr	r3, [pc, #320]	; (801bd14 <tcp_listen_input+0x1f0>)
 801bbd4:	695a      	ldr	r2, [r3, #20]
 801bbd6:	697b      	ldr	r3, [r7, #20]
 801bbd8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801bbda:	4b4e      	ldr	r3, [pc, #312]	; (801bd14 <tcp_listen_input+0x1f0>)
 801bbdc:	691a      	ldr	r2, [r3, #16]
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	8ada      	ldrh	r2, [r3, #22]
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801bbea:	4b47      	ldr	r3, [pc, #284]	; (801bd08 <tcp_listen_input+0x1e4>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	881b      	ldrh	r3, [r3, #0]
 801bbf0:	b29a      	uxth	r2, r3
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	2203      	movs	r2, #3
 801bbfa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801bbfc:	4b41      	ldr	r3, [pc, #260]	; (801bd04 <tcp_listen_input+0x1e0>)
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	1c5a      	adds	r2, r3, #1
 801bc02:	697b      	ldr	r3, [r7, #20]
 801bc04:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801bc06:	697b      	ldr	r3, [r7, #20]
 801bc08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bc0a:	697b      	ldr	r3, [r7, #20]
 801bc0c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801bc0e:	6978      	ldr	r0, [r7, #20]
 801bc10:	f7ff fa5a 	bl	801b0c8 <tcp_next_iss>
 801bc14:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801bc16:	697b      	ldr	r3, [r7, #20]
 801bc18:	693a      	ldr	r2, [r7, #16]
 801bc1a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801bc1c:	697b      	ldr	r3, [r7, #20]
 801bc1e:	693a      	ldr	r2, [r7, #16]
 801bc20:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801bc22:	697b      	ldr	r3, [r7, #20]
 801bc24:	693a      	ldr	r2, [r7, #16]
 801bc26:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801bc28:	697b      	ldr	r3, [r7, #20]
 801bc2a:	693a      	ldr	r2, [r7, #16]
 801bc2c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801bc2e:	4b35      	ldr	r3, [pc, #212]	; (801bd04 <tcp_listen_input+0x1e0>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	1e5a      	subs	r2, r3, #1
 801bc34:	697b      	ldr	r3, [r7, #20]
 801bc36:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	691a      	ldr	r2, [r3, #16]
 801bc3c:	697b      	ldr	r3, [r7, #20]
 801bc3e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801bc40:	697b      	ldr	r3, [r7, #20]
 801bc42:	687a      	ldr	r2, [r7, #4]
 801bc44:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	7a5b      	ldrb	r3, [r3, #9]
 801bc4a:	f003 030c 	and.w	r3, r3, #12
 801bc4e:	b2da      	uxtb	r2, r3
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	7a1a      	ldrb	r2, [r3, #8]
 801bc58:	697b      	ldr	r3, [r7, #20]
 801bc5a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801bc5c:	4b2e      	ldr	r3, [pc, #184]	; (801bd18 <tcp_listen_input+0x1f4>)
 801bc5e:	681a      	ldr	r2, [r3, #0]
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	60da      	str	r2, [r3, #12]
 801bc64:	4a2c      	ldr	r2, [pc, #176]	; (801bd18 <tcp_listen_input+0x1f4>)
 801bc66:	697b      	ldr	r3, [r7, #20]
 801bc68:	6013      	str	r3, [r2, #0]
 801bc6a:	f003 fa71 	bl	801f150 <tcp_timer_needed>
 801bc6e:	4b2b      	ldr	r3, [pc, #172]	; (801bd1c <tcp_listen_input+0x1f8>)
 801bc70:	2201      	movs	r2, #1
 801bc72:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801bc74:	6978      	ldr	r0, [r7, #20]
 801bc76:	f001 fd8d 	bl	801d794 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801bc7a:	4b23      	ldr	r3, [pc, #140]	; (801bd08 <tcp_listen_input+0x1e4>)
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	89db      	ldrh	r3, [r3, #14]
 801bc80:	b29a      	uxth	r2, r3
 801bc82:	697b      	ldr	r3, [r7, #20]
 801bc84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801bc88:	697b      	ldr	r3, [r7, #20]
 801bc8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801bc94:	697b      	ldr	r3, [r7, #20]
 801bc96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	3304      	adds	r3, #4
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	f7fa ff21 	bl	8016ae4 <ip4_route>
 801bca2:	4601      	mov	r1, r0
 801bca4:	697b      	ldr	r3, [r7, #20]
 801bca6:	3304      	adds	r3, #4
 801bca8:	461a      	mov	r2, r3
 801bcaa:	4620      	mov	r0, r4
 801bcac:	f7ff fa32 	bl	801b114 <tcp_eff_send_mss_netif>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	461a      	mov	r2, r3
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801bcb8:	2112      	movs	r1, #18
 801bcba:	6978      	ldr	r0, [r7, #20]
 801bcbc:	f002 f842 	bl	801dd44 <tcp_enqueue_flags>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801bcc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d004      	beq.n	801bcd6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801bccc:	2100      	movs	r1, #0
 801bcce:	6978      	ldr	r0, [r7, #20]
 801bcd0:	f7fe f980 	bl	8019fd4 <tcp_abandon>
      return;
 801bcd4:	e006      	b.n	801bce4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801bcd6:	6978      	ldr	r0, [r7, #20]
 801bcd8:	f002 f922 	bl	801df20 <tcp_output>
  return;
 801bcdc:	e001      	b.n	801bce2 <tcp_listen_input+0x1be>
    return;
 801bcde:	bf00      	nop
 801bce0:	e000      	b.n	801bce4 <tcp_listen_input+0x1c0>
  return;
 801bce2:	bf00      	nop
}
 801bce4:	371c      	adds	r7, #28
 801bce6:	46bd      	mov	sp, r7
 801bce8:	bd90      	pop	{r4, r7, pc}
 801bcea:	bf00      	nop
 801bcec:	200090d8 	.word	0x200090d8
 801bcf0:	0802482c 	.word	0x0802482c
 801bcf4:	08024a68 	.word	0x08024a68
 801bcf8:	080248bc 	.word	0x080248bc
 801bcfc:	200090d0 	.word	0x200090d0
 801bd00:	200090d6 	.word	0x200090d6
 801bd04:	200090cc 	.word	0x200090cc
 801bd08:	200090bc 	.word	0x200090bc
 801bd0c:	2000e850 	.word	0x2000e850
 801bd10:	2000e854 	.word	0x2000e854
 801bd14:	2000e840 	.word	0x2000e840
 801bd18:	20011f7c 	.word	0x20011f7c
 801bd1c:	20011f78 	.word	0x20011f78

0801bd20 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b086      	sub	sp, #24
 801bd24:	af04      	add	r7, sp, #16
 801bd26:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801bd28:	4b2f      	ldr	r3, [pc, #188]	; (801bde8 <tcp_timewait_input+0xc8>)
 801bd2a:	781b      	ldrb	r3, [r3, #0]
 801bd2c:	f003 0304 	and.w	r3, r3, #4
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d153      	bne.n	801bddc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d106      	bne.n	801bd48 <tcp_timewait_input+0x28>
 801bd3a:	4b2c      	ldr	r3, [pc, #176]	; (801bdec <tcp_timewait_input+0xcc>)
 801bd3c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bd40:	492b      	ldr	r1, [pc, #172]	; (801bdf0 <tcp_timewait_input+0xd0>)
 801bd42:	482c      	ldr	r0, [pc, #176]	; (801bdf4 <tcp_timewait_input+0xd4>)
 801bd44:	f005 fd6a 	bl	802181c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801bd48:	4b27      	ldr	r3, [pc, #156]	; (801bde8 <tcp_timewait_input+0xc8>)
 801bd4a:	781b      	ldrb	r3, [r3, #0]
 801bd4c:	f003 0302 	and.w	r3, r3, #2
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d02a      	beq.n	801bdaa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801bd54:	4b28      	ldr	r3, [pc, #160]	; (801bdf8 <tcp_timewait_input+0xd8>)
 801bd56:	681a      	ldr	r2, [r3, #0]
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd5c:	1ad3      	subs	r3, r2, r3
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	db2d      	blt.n	801bdbe <tcp_timewait_input+0x9e>
 801bd62:	4b25      	ldr	r3, [pc, #148]	; (801bdf8 <tcp_timewait_input+0xd8>)
 801bd64:	681a      	ldr	r2, [r3, #0]
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd6a:	6879      	ldr	r1, [r7, #4]
 801bd6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bd6e:	440b      	add	r3, r1
 801bd70:	1ad3      	subs	r3, r2, r3
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	dc23      	bgt.n	801bdbe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd76:	4b21      	ldr	r3, [pc, #132]	; (801bdfc <tcp_timewait_input+0xdc>)
 801bd78:	6819      	ldr	r1, [r3, #0]
 801bd7a:	4b21      	ldr	r3, [pc, #132]	; (801be00 <tcp_timewait_input+0xe0>)
 801bd7c:	881b      	ldrh	r3, [r3, #0]
 801bd7e:	461a      	mov	r2, r3
 801bd80:	4b1d      	ldr	r3, [pc, #116]	; (801bdf8 <tcp_timewait_input+0xd8>)
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd86:	4b1f      	ldr	r3, [pc, #124]	; (801be04 <tcp_timewait_input+0xe4>)
 801bd88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd8a:	885b      	ldrh	r3, [r3, #2]
 801bd8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd8e:	4a1d      	ldr	r2, [pc, #116]	; (801be04 <tcp_timewait_input+0xe4>)
 801bd90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd92:	8812      	ldrh	r2, [r2, #0]
 801bd94:	b292      	uxth	r2, r2
 801bd96:	9202      	str	r2, [sp, #8]
 801bd98:	9301      	str	r3, [sp, #4]
 801bd9a:	4b1b      	ldr	r3, [pc, #108]	; (801be08 <tcp_timewait_input+0xe8>)
 801bd9c:	9300      	str	r3, [sp, #0]
 801bd9e:	4b1b      	ldr	r3, [pc, #108]	; (801be0c <tcp_timewait_input+0xec>)
 801bda0:	4602      	mov	r2, r0
 801bda2:	6878      	ldr	r0, [r7, #4]
 801bda4:	f002 fe70 	bl	801ea88 <tcp_rst>
      return;
 801bda8:	e01b      	b.n	801bde2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801bdaa:	4b0f      	ldr	r3, [pc, #60]	; (801bde8 <tcp_timewait_input+0xc8>)
 801bdac:	781b      	ldrb	r3, [r3, #0]
 801bdae:	f003 0301 	and.w	r3, r3, #1
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d003      	beq.n	801bdbe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801bdb6:	4b16      	ldr	r3, [pc, #88]	; (801be10 <tcp_timewait_input+0xf0>)
 801bdb8:	681a      	ldr	r2, [r3, #0]
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801bdbe:	4b10      	ldr	r3, [pc, #64]	; (801be00 <tcp_timewait_input+0xe0>)
 801bdc0:	881b      	ldrh	r3, [r3, #0]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d00c      	beq.n	801bde0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	8b5b      	ldrh	r3, [r3, #26]
 801bdca:	f043 0302 	orr.w	r3, r3, #2
 801bdce:	b29a      	uxth	r2, r3
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bdd4:	6878      	ldr	r0, [r7, #4]
 801bdd6:	f002 f8a3 	bl	801df20 <tcp_output>
  }
  return;
 801bdda:	e001      	b.n	801bde0 <tcp_timewait_input+0xc0>
    return;
 801bddc:	bf00      	nop
 801bdde:	e000      	b.n	801bde2 <tcp_timewait_input+0xc2>
  return;
 801bde0:	bf00      	nop
}
 801bde2:	3708      	adds	r7, #8
 801bde4:	46bd      	mov	sp, r7
 801bde6:	bd80      	pop	{r7, pc}
 801bde8:	200090d8 	.word	0x200090d8
 801bdec:	0802482c 	.word	0x0802482c
 801bdf0:	08024a88 	.word	0x08024a88
 801bdf4:	080248bc 	.word	0x080248bc
 801bdf8:	200090cc 	.word	0x200090cc
 801bdfc:	200090d0 	.word	0x200090d0
 801be00:	200090d6 	.word	0x200090d6
 801be04:	200090bc 	.word	0x200090bc
 801be08:	2000e850 	.word	0x2000e850
 801be0c:	2000e854 	.word	0x2000e854
 801be10:	20011f80 	.word	0x20011f80

0801be14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801be14:	b590      	push	{r4, r7, lr}
 801be16:	b08d      	sub	sp, #52	; 0x34
 801be18:	af04      	add	r7, sp, #16
 801be1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801be1c:	2300      	movs	r3, #0
 801be1e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801be20:	2300      	movs	r3, #0
 801be22:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d106      	bne.n	801be38 <tcp_process+0x24>
 801be2a:	4ba5      	ldr	r3, [pc, #660]	; (801c0c0 <tcp_process+0x2ac>)
 801be2c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801be30:	49a4      	ldr	r1, [pc, #656]	; (801c0c4 <tcp_process+0x2b0>)
 801be32:	48a5      	ldr	r0, [pc, #660]	; (801c0c8 <tcp_process+0x2b4>)
 801be34:	f005 fcf2 	bl	802181c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801be38:	4ba4      	ldr	r3, [pc, #656]	; (801c0cc <tcp_process+0x2b8>)
 801be3a:	781b      	ldrb	r3, [r3, #0]
 801be3c:	f003 0304 	and.w	r3, r3, #4
 801be40:	2b00      	cmp	r3, #0
 801be42:	d04e      	beq.n	801bee2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	7d1b      	ldrb	r3, [r3, #20]
 801be48:	2b02      	cmp	r3, #2
 801be4a:	d108      	bne.n	801be5e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801be50:	4b9f      	ldr	r3, [pc, #636]	; (801c0d0 <tcp_process+0x2bc>)
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	429a      	cmp	r2, r3
 801be56:	d123      	bne.n	801bea0 <tcp_process+0x8c>
        acceptable = 1;
 801be58:	2301      	movs	r3, #1
 801be5a:	76fb      	strb	r3, [r7, #27]
 801be5c:	e020      	b.n	801bea0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801be62:	4b9c      	ldr	r3, [pc, #624]	; (801c0d4 <tcp_process+0x2c0>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	429a      	cmp	r2, r3
 801be68:	d102      	bne.n	801be70 <tcp_process+0x5c>
        acceptable = 1;
 801be6a:	2301      	movs	r3, #1
 801be6c:	76fb      	strb	r3, [r7, #27]
 801be6e:	e017      	b.n	801bea0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801be70:	4b98      	ldr	r3, [pc, #608]	; (801c0d4 <tcp_process+0x2c0>)
 801be72:	681a      	ldr	r2, [r3, #0]
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be78:	1ad3      	subs	r3, r2, r3
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	db10      	blt.n	801bea0 <tcp_process+0x8c>
 801be7e:	4b95      	ldr	r3, [pc, #596]	; (801c0d4 <tcp_process+0x2c0>)
 801be80:	681a      	ldr	r2, [r3, #0]
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be86:	6879      	ldr	r1, [r7, #4]
 801be88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801be8a:	440b      	add	r3, r1
 801be8c:	1ad3      	subs	r3, r2, r3
 801be8e:	2b00      	cmp	r3, #0
 801be90:	dc06      	bgt.n	801bea0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	8b5b      	ldrh	r3, [r3, #26]
 801be96:	f043 0302 	orr.w	r3, r3, #2
 801be9a:	b29a      	uxth	r2, r3
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801bea0:	7efb      	ldrb	r3, [r7, #27]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d01b      	beq.n	801bede <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	7d1b      	ldrb	r3, [r3, #20]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d106      	bne.n	801bebc <tcp_process+0xa8>
 801beae:	4b84      	ldr	r3, [pc, #528]	; (801c0c0 <tcp_process+0x2ac>)
 801beb0:	f44f 724e 	mov.w	r2, #824	; 0x338
 801beb4:	4988      	ldr	r1, [pc, #544]	; (801c0d8 <tcp_process+0x2c4>)
 801beb6:	4884      	ldr	r0, [pc, #528]	; (801c0c8 <tcp_process+0x2b4>)
 801beb8:	f005 fcb0 	bl	802181c <iprintf>
      recv_flags |= TF_RESET;
 801bebc:	4b87      	ldr	r3, [pc, #540]	; (801c0dc <tcp_process+0x2c8>)
 801bebe:	781b      	ldrb	r3, [r3, #0]
 801bec0:	f043 0308 	orr.w	r3, r3, #8
 801bec4:	b2da      	uxtb	r2, r3
 801bec6:	4b85      	ldr	r3, [pc, #532]	; (801c0dc <tcp_process+0x2c8>)
 801bec8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	8b5b      	ldrh	r3, [r3, #26]
 801bece:	f023 0301 	bic.w	r3, r3, #1
 801bed2:	b29a      	uxth	r2, r3
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801bed8:	f06f 030d 	mvn.w	r3, #13
 801bedc:	e37a      	b.n	801c5d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801bede:	2300      	movs	r3, #0
 801bee0:	e378      	b.n	801c5d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801bee2:	4b7a      	ldr	r3, [pc, #488]	; (801c0cc <tcp_process+0x2b8>)
 801bee4:	781b      	ldrb	r3, [r3, #0]
 801bee6:	f003 0302 	and.w	r3, r3, #2
 801beea:	2b00      	cmp	r3, #0
 801beec:	d010      	beq.n	801bf10 <tcp_process+0xfc>
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	7d1b      	ldrb	r3, [r3, #20]
 801bef2:	2b02      	cmp	r3, #2
 801bef4:	d00c      	beq.n	801bf10 <tcp_process+0xfc>
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	7d1b      	ldrb	r3, [r3, #20]
 801befa:	2b03      	cmp	r3, #3
 801befc:	d008      	beq.n	801bf10 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	8b5b      	ldrh	r3, [r3, #26]
 801bf02:	f043 0302 	orr.w	r3, r3, #2
 801bf06:	b29a      	uxth	r2, r3
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	e361      	b.n	801c5d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	8b5b      	ldrh	r3, [r3, #26]
 801bf14:	f003 0310 	and.w	r3, r3, #16
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d103      	bne.n	801bf24 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801bf1c:	4b70      	ldr	r3, [pc, #448]	; (801c0e0 <tcp_process+0x2cc>)
 801bf1e:	681a      	ldr	r2, [r3, #0]
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	2200      	movs	r2, #0
 801bf28:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	2200      	movs	r2, #0
 801bf30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801bf34:	6878      	ldr	r0, [r7, #4]
 801bf36:	f001 fc2d 	bl	801d794 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	7d1b      	ldrb	r3, [r3, #20]
 801bf3e:	3b02      	subs	r3, #2
 801bf40:	2b07      	cmp	r3, #7
 801bf42:	f200 8337 	bhi.w	801c5b4 <tcp_process+0x7a0>
 801bf46:	a201      	add	r2, pc, #4	; (adr r2, 801bf4c <tcp_process+0x138>)
 801bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf4c:	0801bf6d 	.word	0x0801bf6d
 801bf50:	0801c19d 	.word	0x0801c19d
 801bf54:	0801c315 	.word	0x0801c315
 801bf58:	0801c33f 	.word	0x0801c33f
 801bf5c:	0801c463 	.word	0x0801c463
 801bf60:	0801c315 	.word	0x0801c315
 801bf64:	0801c4ef 	.word	0x0801c4ef
 801bf68:	0801c57f 	.word	0x0801c57f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801bf6c:	4b57      	ldr	r3, [pc, #348]	; (801c0cc <tcp_process+0x2b8>)
 801bf6e:	781b      	ldrb	r3, [r3, #0]
 801bf70:	f003 0310 	and.w	r3, r3, #16
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	f000 80e4 	beq.w	801c142 <tcp_process+0x32e>
 801bf7a:	4b54      	ldr	r3, [pc, #336]	; (801c0cc <tcp_process+0x2b8>)
 801bf7c:	781b      	ldrb	r3, [r3, #0]
 801bf7e:	f003 0302 	and.w	r3, r3, #2
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	f000 80dd 	beq.w	801c142 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf8c:	1c5a      	adds	r2, r3, #1
 801bf8e:	4b50      	ldr	r3, [pc, #320]	; (801c0d0 <tcp_process+0x2bc>)
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	429a      	cmp	r2, r3
 801bf94:	f040 80d5 	bne.w	801c142 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801bf98:	4b4e      	ldr	r3, [pc, #312]	; (801c0d4 <tcp_process+0x2c0>)
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	1c5a      	adds	r2, r3, #1
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801bfaa:	4b49      	ldr	r3, [pc, #292]	; (801c0d0 <tcp_process+0x2bc>)
 801bfac:	681a      	ldr	r2, [r3, #0]
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801bfb2:	4b4c      	ldr	r3, [pc, #304]	; (801c0e4 <tcp_process+0x2d0>)
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	89db      	ldrh	r3, [r3, #14]
 801bfb8:	b29a      	uxth	r2, r3
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801bfcc:	4b41      	ldr	r3, [pc, #260]	; (801c0d4 <tcp_process+0x2c0>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	1e5a      	subs	r2, r3, #1
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	2204      	movs	r2, #4
 801bfda:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	3304      	adds	r3, #4
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	f7fa fd7d 	bl	8016ae4 <ip4_route>
 801bfea:	4601      	mov	r1, r0
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	3304      	adds	r3, #4
 801bff0:	461a      	mov	r2, r3
 801bff2:	4620      	mov	r0, r4
 801bff4:	f7ff f88e 	bl	801b114 <tcp_eff_send_mss_netif>
 801bff8:	4603      	mov	r3, r0
 801bffa:	461a      	mov	r2, r3
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c004:	009a      	lsls	r2, r3, #2
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c00a:	005b      	lsls	r3, r3, #1
 801c00c:	f241 111c 	movw	r1, #4380	; 0x111c
 801c010:	428b      	cmp	r3, r1
 801c012:	bf38      	it	cc
 801c014:	460b      	movcc	r3, r1
 801c016:	429a      	cmp	r2, r3
 801c018:	d204      	bcs.n	801c024 <tcp_process+0x210>
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c01e:	009b      	lsls	r3, r3, #2
 801c020:	b29b      	uxth	r3, r3
 801c022:	e00d      	b.n	801c040 <tcp_process+0x22c>
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c028:	005b      	lsls	r3, r3, #1
 801c02a:	f241 121c 	movw	r2, #4380	; 0x111c
 801c02e:	4293      	cmp	r3, r2
 801c030:	d904      	bls.n	801c03c <tcp_process+0x228>
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c036:	005b      	lsls	r3, r3, #1
 801c038:	b29b      	uxth	r3, r3
 801c03a:	e001      	b.n	801c040 <tcp_process+0x22c>
 801c03c:	f241 131c 	movw	r3, #4380	; 0x111c
 801c040:	687a      	ldr	r2, [r7, #4]
 801c042:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d106      	bne.n	801c05e <tcp_process+0x24a>
 801c050:	4b1b      	ldr	r3, [pc, #108]	; (801c0c0 <tcp_process+0x2ac>)
 801c052:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801c056:	4924      	ldr	r1, [pc, #144]	; (801c0e8 <tcp_process+0x2d4>)
 801c058:	481b      	ldr	r0, [pc, #108]	; (801c0c8 <tcp_process+0x2b4>)
 801c05a:	f005 fbdf 	bl	802181c <iprintf>
        --pcb->snd_queuelen;
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c064:	3b01      	subs	r3, #1
 801c066:	b29a      	uxth	r2, r3
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c072:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801c074:	69fb      	ldr	r3, [r7, #28]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d111      	bne.n	801c09e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c07e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c080:	69fb      	ldr	r3, [r7, #28]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d106      	bne.n	801c094 <tcp_process+0x280>
 801c086:	4b0e      	ldr	r3, [pc, #56]	; (801c0c0 <tcp_process+0x2ac>)
 801c088:	f44f 725d 	mov.w	r2, #884	; 0x374
 801c08c:	4917      	ldr	r1, [pc, #92]	; (801c0ec <tcp_process+0x2d8>)
 801c08e:	480e      	ldr	r0, [pc, #56]	; (801c0c8 <tcp_process+0x2b4>)
 801c090:	f005 fbc4 	bl	802181c <iprintf>
          pcb->unsent = rseg->next;
 801c094:	69fb      	ldr	r3, [r7, #28]
 801c096:	681a      	ldr	r2, [r3, #0]
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	66da      	str	r2, [r3, #108]	; 0x6c
 801c09c:	e003      	b.n	801c0a6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801c09e:	69fb      	ldr	r3, [r7, #28]
 801c0a0:	681a      	ldr	r2, [r3, #0]
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801c0a6:	69f8      	ldr	r0, [r7, #28]
 801c0a8:	f7fe fd3d 	bl	801ab26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d11d      	bne.n	801c0f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c0ba:	861a      	strh	r2, [r3, #48]	; 0x30
 801c0bc:	e01f      	b.n	801c0fe <tcp_process+0x2ea>
 801c0be:	bf00      	nop
 801c0c0:	0802482c 	.word	0x0802482c
 801c0c4:	08024aa8 	.word	0x08024aa8
 801c0c8:	080248bc 	.word	0x080248bc
 801c0cc:	200090d8 	.word	0x200090d8
 801c0d0:	200090d0 	.word	0x200090d0
 801c0d4:	200090cc 	.word	0x200090cc
 801c0d8:	08024ac4 	.word	0x08024ac4
 801c0dc:	200090d9 	.word	0x200090d9
 801c0e0:	20011f80 	.word	0x20011f80
 801c0e4:	200090bc 	.word	0x200090bc
 801c0e8:	08024ae4 	.word	0x08024ae4
 801c0ec:	08024afc 	.word	0x08024afc
        } else {
          pcb->rtime = 0;
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	2200      	movs	r2, #0
 801c0f4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c104:	2b00      	cmp	r3, #0
 801c106:	d00a      	beq.n	801c11e <tcp_process+0x30a>
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c10e:	687a      	ldr	r2, [r7, #4]
 801c110:	6910      	ldr	r0, [r2, #16]
 801c112:	2200      	movs	r2, #0
 801c114:	6879      	ldr	r1, [r7, #4]
 801c116:	4798      	blx	r3
 801c118:	4603      	mov	r3, r0
 801c11a:	76bb      	strb	r3, [r7, #26]
 801c11c:	e001      	b.n	801c122 <tcp_process+0x30e>
 801c11e:	2300      	movs	r3, #0
 801c120:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801c122:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c126:	f113 0f0d 	cmn.w	r3, #13
 801c12a:	d102      	bne.n	801c132 <tcp_process+0x31e>
          return ERR_ABRT;
 801c12c:	f06f 030c 	mvn.w	r3, #12
 801c130:	e250      	b.n	801c5d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	8b5b      	ldrh	r3, [r3, #26]
 801c136:	f043 0302 	orr.w	r3, r3, #2
 801c13a:	b29a      	uxth	r2, r3
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801c140:	e23a      	b.n	801c5b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801c142:	4b9d      	ldr	r3, [pc, #628]	; (801c3b8 <tcp_process+0x5a4>)
 801c144:	781b      	ldrb	r3, [r3, #0]
 801c146:	f003 0310 	and.w	r3, r3, #16
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	f000 8234 	beq.w	801c5b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c150:	4b9a      	ldr	r3, [pc, #616]	; (801c3bc <tcp_process+0x5a8>)
 801c152:	6819      	ldr	r1, [r3, #0]
 801c154:	4b9a      	ldr	r3, [pc, #616]	; (801c3c0 <tcp_process+0x5ac>)
 801c156:	881b      	ldrh	r3, [r3, #0]
 801c158:	461a      	mov	r2, r3
 801c15a:	4b9a      	ldr	r3, [pc, #616]	; (801c3c4 <tcp_process+0x5b0>)
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c160:	4b99      	ldr	r3, [pc, #612]	; (801c3c8 <tcp_process+0x5b4>)
 801c162:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c164:	885b      	ldrh	r3, [r3, #2]
 801c166:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c168:	4a97      	ldr	r2, [pc, #604]	; (801c3c8 <tcp_process+0x5b4>)
 801c16a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c16c:	8812      	ldrh	r2, [r2, #0]
 801c16e:	b292      	uxth	r2, r2
 801c170:	9202      	str	r2, [sp, #8]
 801c172:	9301      	str	r3, [sp, #4]
 801c174:	4b95      	ldr	r3, [pc, #596]	; (801c3cc <tcp_process+0x5b8>)
 801c176:	9300      	str	r3, [sp, #0]
 801c178:	4b95      	ldr	r3, [pc, #596]	; (801c3d0 <tcp_process+0x5bc>)
 801c17a:	4602      	mov	r2, r0
 801c17c:	6878      	ldr	r0, [r7, #4]
 801c17e:	f002 fc83 	bl	801ea88 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c188:	2b05      	cmp	r3, #5
 801c18a:	f200 8215 	bhi.w	801c5b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	2200      	movs	r2, #0
 801c192:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801c194:	6878      	ldr	r0, [r7, #4]
 801c196:	f002 fa4d 	bl	801e634 <tcp_rexmit_rto>
      break;
 801c19a:	e20d      	b.n	801c5b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801c19c:	4b86      	ldr	r3, [pc, #536]	; (801c3b8 <tcp_process+0x5a4>)
 801c19e:	781b      	ldrb	r3, [r3, #0]
 801c1a0:	f003 0310 	and.w	r3, r3, #16
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	f000 80a1 	beq.w	801c2ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c1aa:	4b84      	ldr	r3, [pc, #528]	; (801c3bc <tcp_process+0x5a8>)
 801c1ac:	681a      	ldr	r2, [r3, #0]
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1b2:	1ad3      	subs	r3, r2, r3
 801c1b4:	3b01      	subs	r3, #1
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	db7e      	blt.n	801c2b8 <tcp_process+0x4a4>
 801c1ba:	4b80      	ldr	r3, [pc, #512]	; (801c3bc <tcp_process+0x5a8>)
 801c1bc:	681a      	ldr	r2, [r3, #0]
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1c2:	1ad3      	subs	r3, r2, r3
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	dc77      	bgt.n	801c2b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	2204      	movs	r2, #4
 801c1cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d102      	bne.n	801c1dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801c1d6:	23fa      	movs	r3, #250	; 0xfa
 801c1d8:	76bb      	strb	r3, [r7, #26]
 801c1da:	e01d      	b.n	801c218 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1e0:	699b      	ldr	r3, [r3, #24]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d106      	bne.n	801c1f4 <tcp_process+0x3e0>
 801c1e6:	4b7b      	ldr	r3, [pc, #492]	; (801c3d4 <tcp_process+0x5c0>)
 801c1e8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801c1ec:	497a      	ldr	r1, [pc, #488]	; (801c3d8 <tcp_process+0x5c4>)
 801c1ee:	487b      	ldr	r0, [pc, #492]	; (801c3dc <tcp_process+0x5c8>)
 801c1f0:	f005 fb14 	bl	802181c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1f8:	699b      	ldr	r3, [r3, #24]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d00a      	beq.n	801c214 <tcp_process+0x400>
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c202:	699b      	ldr	r3, [r3, #24]
 801c204:	687a      	ldr	r2, [r7, #4]
 801c206:	6910      	ldr	r0, [r2, #16]
 801c208:	2200      	movs	r2, #0
 801c20a:	6879      	ldr	r1, [r7, #4]
 801c20c:	4798      	blx	r3
 801c20e:	4603      	mov	r3, r0
 801c210:	76bb      	strb	r3, [r7, #26]
 801c212:	e001      	b.n	801c218 <tcp_process+0x404>
 801c214:	23f0      	movs	r3, #240	; 0xf0
 801c216:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801c218:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d00a      	beq.n	801c236 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801c220:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c224:	f113 0f0d 	cmn.w	r3, #13
 801c228:	d002      	beq.n	801c230 <tcp_process+0x41c>
              tcp_abort(pcb);
 801c22a:	6878      	ldr	r0, [r7, #4]
 801c22c:	f7fd ff90 	bl	801a150 <tcp_abort>
            }
            return ERR_ABRT;
 801c230:	f06f 030c 	mvn.w	r3, #12
 801c234:	e1ce      	b.n	801c5d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801c236:	6878      	ldr	r0, [r7, #4]
 801c238:	f000 fae0 	bl	801c7fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801c23c:	4b68      	ldr	r3, [pc, #416]	; (801c3e0 <tcp_process+0x5cc>)
 801c23e:	881b      	ldrh	r3, [r3, #0]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d005      	beq.n	801c250 <tcp_process+0x43c>
            recv_acked--;
 801c244:	4b66      	ldr	r3, [pc, #408]	; (801c3e0 <tcp_process+0x5cc>)
 801c246:	881b      	ldrh	r3, [r3, #0]
 801c248:	3b01      	subs	r3, #1
 801c24a:	b29a      	uxth	r2, r3
 801c24c:	4b64      	ldr	r3, [pc, #400]	; (801c3e0 <tcp_process+0x5cc>)
 801c24e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c254:	009a      	lsls	r2, r3, #2
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c25a:	005b      	lsls	r3, r3, #1
 801c25c:	f241 111c 	movw	r1, #4380	; 0x111c
 801c260:	428b      	cmp	r3, r1
 801c262:	bf38      	it	cc
 801c264:	460b      	movcc	r3, r1
 801c266:	429a      	cmp	r2, r3
 801c268:	d204      	bcs.n	801c274 <tcp_process+0x460>
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c26e:	009b      	lsls	r3, r3, #2
 801c270:	b29b      	uxth	r3, r3
 801c272:	e00d      	b.n	801c290 <tcp_process+0x47c>
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c278:	005b      	lsls	r3, r3, #1
 801c27a:	f241 121c 	movw	r2, #4380	; 0x111c
 801c27e:	4293      	cmp	r3, r2
 801c280:	d904      	bls.n	801c28c <tcp_process+0x478>
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c286:	005b      	lsls	r3, r3, #1
 801c288:	b29b      	uxth	r3, r3
 801c28a:	e001      	b.n	801c290 <tcp_process+0x47c>
 801c28c:	f241 131c 	movw	r3, #4380	; 0x111c
 801c290:	687a      	ldr	r2, [r7, #4]
 801c292:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801c296:	4b53      	ldr	r3, [pc, #332]	; (801c3e4 <tcp_process+0x5d0>)
 801c298:	781b      	ldrb	r3, [r3, #0]
 801c29a:	f003 0320 	and.w	r3, r3, #32
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d037      	beq.n	801c312 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	8b5b      	ldrh	r3, [r3, #26]
 801c2a6:	f043 0302 	orr.w	r3, r3, #2
 801c2aa:	b29a      	uxth	r2, r3
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	2207      	movs	r2, #7
 801c2b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801c2b6:	e02c      	b.n	801c312 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2b8:	4b40      	ldr	r3, [pc, #256]	; (801c3bc <tcp_process+0x5a8>)
 801c2ba:	6819      	ldr	r1, [r3, #0]
 801c2bc:	4b40      	ldr	r3, [pc, #256]	; (801c3c0 <tcp_process+0x5ac>)
 801c2be:	881b      	ldrh	r3, [r3, #0]
 801c2c0:	461a      	mov	r2, r3
 801c2c2:	4b40      	ldr	r3, [pc, #256]	; (801c3c4 <tcp_process+0x5b0>)
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c2c8:	4b3f      	ldr	r3, [pc, #252]	; (801c3c8 <tcp_process+0x5b4>)
 801c2ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2cc:	885b      	ldrh	r3, [r3, #2]
 801c2ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c2d0:	4a3d      	ldr	r2, [pc, #244]	; (801c3c8 <tcp_process+0x5b4>)
 801c2d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2d4:	8812      	ldrh	r2, [r2, #0]
 801c2d6:	b292      	uxth	r2, r2
 801c2d8:	9202      	str	r2, [sp, #8]
 801c2da:	9301      	str	r3, [sp, #4]
 801c2dc:	4b3b      	ldr	r3, [pc, #236]	; (801c3cc <tcp_process+0x5b8>)
 801c2de:	9300      	str	r3, [sp, #0]
 801c2e0:	4b3b      	ldr	r3, [pc, #236]	; (801c3d0 <tcp_process+0x5bc>)
 801c2e2:	4602      	mov	r2, r0
 801c2e4:	6878      	ldr	r0, [r7, #4]
 801c2e6:	f002 fbcf 	bl	801ea88 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801c2ea:	e167      	b.n	801c5bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c2ec:	4b32      	ldr	r3, [pc, #200]	; (801c3b8 <tcp_process+0x5a4>)
 801c2ee:	781b      	ldrb	r3, [r3, #0]
 801c2f0:	f003 0302 	and.w	r3, r3, #2
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	f000 8161 	beq.w	801c5bc <tcp_process+0x7a8>
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2fe:	1e5a      	subs	r2, r3, #1
 801c300:	4b30      	ldr	r3, [pc, #192]	; (801c3c4 <tcp_process+0x5b0>)
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	429a      	cmp	r2, r3
 801c306:	f040 8159 	bne.w	801c5bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	f002 f9b4 	bl	801e678 <tcp_rexmit>
      break;
 801c310:	e154      	b.n	801c5bc <tcp_process+0x7a8>
 801c312:	e153      	b.n	801c5bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801c314:	6878      	ldr	r0, [r7, #4]
 801c316:	f000 fa71 	bl	801c7fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801c31a:	4b32      	ldr	r3, [pc, #200]	; (801c3e4 <tcp_process+0x5d0>)
 801c31c:	781b      	ldrb	r3, [r3, #0]
 801c31e:	f003 0320 	and.w	r3, r3, #32
 801c322:	2b00      	cmp	r3, #0
 801c324:	f000 814c 	beq.w	801c5c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	8b5b      	ldrh	r3, [r3, #26]
 801c32c:	f043 0302 	orr.w	r3, r3, #2
 801c330:	b29a      	uxth	r2, r3
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	2207      	movs	r2, #7
 801c33a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c33c:	e140      	b.n	801c5c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801c33e:	6878      	ldr	r0, [r7, #4]
 801c340:	f000 fa5c 	bl	801c7fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c344:	4b27      	ldr	r3, [pc, #156]	; (801c3e4 <tcp_process+0x5d0>)
 801c346:	781b      	ldrb	r3, [r3, #0]
 801c348:	f003 0320 	and.w	r3, r3, #32
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d071      	beq.n	801c434 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c350:	4b19      	ldr	r3, [pc, #100]	; (801c3b8 <tcp_process+0x5a4>)
 801c352:	781b      	ldrb	r3, [r3, #0]
 801c354:	f003 0310 	and.w	r3, r3, #16
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d060      	beq.n	801c41e <tcp_process+0x60a>
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c360:	4b16      	ldr	r3, [pc, #88]	; (801c3bc <tcp_process+0x5a8>)
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	429a      	cmp	r2, r3
 801c366:	d15a      	bne.n	801c41e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d156      	bne.n	801c41e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	8b5b      	ldrh	r3, [r3, #26]
 801c374:	f043 0302 	orr.w	r3, r3, #2
 801c378:	b29a      	uxth	r2, r3
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801c37e:	6878      	ldr	r0, [r7, #4]
 801c380:	f7fe fdbe 	bl	801af00 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c384:	4b18      	ldr	r3, [pc, #96]	; (801c3e8 <tcp_process+0x5d4>)
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	687a      	ldr	r2, [r7, #4]
 801c38a:	429a      	cmp	r2, r3
 801c38c:	d105      	bne.n	801c39a <tcp_process+0x586>
 801c38e:	4b16      	ldr	r3, [pc, #88]	; (801c3e8 <tcp_process+0x5d4>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	68db      	ldr	r3, [r3, #12]
 801c394:	4a14      	ldr	r2, [pc, #80]	; (801c3e8 <tcp_process+0x5d4>)
 801c396:	6013      	str	r3, [r2, #0]
 801c398:	e02e      	b.n	801c3f8 <tcp_process+0x5e4>
 801c39a:	4b13      	ldr	r3, [pc, #76]	; (801c3e8 <tcp_process+0x5d4>)
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	617b      	str	r3, [r7, #20]
 801c3a0:	e027      	b.n	801c3f2 <tcp_process+0x5de>
 801c3a2:	697b      	ldr	r3, [r7, #20]
 801c3a4:	68db      	ldr	r3, [r3, #12]
 801c3a6:	687a      	ldr	r2, [r7, #4]
 801c3a8:	429a      	cmp	r2, r3
 801c3aa:	d11f      	bne.n	801c3ec <tcp_process+0x5d8>
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	68da      	ldr	r2, [r3, #12]
 801c3b0:	697b      	ldr	r3, [r7, #20]
 801c3b2:	60da      	str	r2, [r3, #12]
 801c3b4:	e020      	b.n	801c3f8 <tcp_process+0x5e4>
 801c3b6:	bf00      	nop
 801c3b8:	200090d8 	.word	0x200090d8
 801c3bc:	200090d0 	.word	0x200090d0
 801c3c0:	200090d6 	.word	0x200090d6
 801c3c4:	200090cc 	.word	0x200090cc
 801c3c8:	200090bc 	.word	0x200090bc
 801c3cc:	2000e850 	.word	0x2000e850
 801c3d0:	2000e854 	.word	0x2000e854
 801c3d4:	0802482c 	.word	0x0802482c
 801c3d8:	08024b10 	.word	0x08024b10
 801c3dc:	080248bc 	.word	0x080248bc
 801c3e0:	200090d4 	.word	0x200090d4
 801c3e4:	200090d9 	.word	0x200090d9
 801c3e8:	20011f7c 	.word	0x20011f7c
 801c3ec:	697b      	ldr	r3, [r7, #20]
 801c3ee:	68db      	ldr	r3, [r3, #12]
 801c3f0:	617b      	str	r3, [r7, #20]
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d1d4      	bne.n	801c3a2 <tcp_process+0x58e>
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	60da      	str	r2, [r3, #12]
 801c3fe:	4b77      	ldr	r3, [pc, #476]	; (801c5dc <tcp_process+0x7c8>)
 801c400:	2201      	movs	r2, #1
 801c402:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	220a      	movs	r2, #10
 801c408:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c40a:	4b75      	ldr	r3, [pc, #468]	; (801c5e0 <tcp_process+0x7cc>)
 801c40c:	681a      	ldr	r2, [r3, #0]
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	60da      	str	r2, [r3, #12]
 801c412:	4a73      	ldr	r2, [pc, #460]	; (801c5e0 <tcp_process+0x7cc>)
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	6013      	str	r3, [r2, #0]
 801c418:	f002 fe9a 	bl	801f150 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c41c:	e0d2      	b.n	801c5c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	8b5b      	ldrh	r3, [r3, #26]
 801c422:	f043 0302 	orr.w	r3, r3, #2
 801c426:	b29a      	uxth	r2, r3
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	2208      	movs	r2, #8
 801c430:	751a      	strb	r2, [r3, #20]
      break;
 801c432:	e0c7      	b.n	801c5c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c434:	4b6b      	ldr	r3, [pc, #428]	; (801c5e4 <tcp_process+0x7d0>)
 801c436:	781b      	ldrb	r3, [r3, #0]
 801c438:	f003 0310 	and.w	r3, r3, #16
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	f000 80c1 	beq.w	801c5c4 <tcp_process+0x7b0>
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c446:	4b68      	ldr	r3, [pc, #416]	; (801c5e8 <tcp_process+0x7d4>)
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	429a      	cmp	r2, r3
 801c44c:	f040 80ba 	bne.w	801c5c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c454:	2b00      	cmp	r3, #0
 801c456:	f040 80b5 	bne.w	801c5c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	2206      	movs	r2, #6
 801c45e:	751a      	strb	r2, [r3, #20]
      break;
 801c460:	e0b0      	b.n	801c5c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801c462:	6878      	ldr	r0, [r7, #4]
 801c464:	f000 f9ca 	bl	801c7fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c468:	4b60      	ldr	r3, [pc, #384]	; (801c5ec <tcp_process+0x7d8>)
 801c46a:	781b      	ldrb	r3, [r3, #0]
 801c46c:	f003 0320 	and.w	r3, r3, #32
 801c470:	2b00      	cmp	r3, #0
 801c472:	f000 80a9 	beq.w	801c5c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	8b5b      	ldrh	r3, [r3, #26]
 801c47a:	f043 0302 	orr.w	r3, r3, #2
 801c47e:	b29a      	uxth	r2, r3
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801c484:	6878      	ldr	r0, [r7, #4]
 801c486:	f7fe fd3b 	bl	801af00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c48a:	4b59      	ldr	r3, [pc, #356]	; (801c5f0 <tcp_process+0x7dc>)
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	687a      	ldr	r2, [r7, #4]
 801c490:	429a      	cmp	r2, r3
 801c492:	d105      	bne.n	801c4a0 <tcp_process+0x68c>
 801c494:	4b56      	ldr	r3, [pc, #344]	; (801c5f0 <tcp_process+0x7dc>)
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	68db      	ldr	r3, [r3, #12]
 801c49a:	4a55      	ldr	r2, [pc, #340]	; (801c5f0 <tcp_process+0x7dc>)
 801c49c:	6013      	str	r3, [r2, #0]
 801c49e:	e013      	b.n	801c4c8 <tcp_process+0x6b4>
 801c4a0:	4b53      	ldr	r3, [pc, #332]	; (801c5f0 <tcp_process+0x7dc>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	613b      	str	r3, [r7, #16]
 801c4a6:	e00c      	b.n	801c4c2 <tcp_process+0x6ae>
 801c4a8:	693b      	ldr	r3, [r7, #16]
 801c4aa:	68db      	ldr	r3, [r3, #12]
 801c4ac:	687a      	ldr	r2, [r7, #4]
 801c4ae:	429a      	cmp	r2, r3
 801c4b0:	d104      	bne.n	801c4bc <tcp_process+0x6a8>
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	68da      	ldr	r2, [r3, #12]
 801c4b6:	693b      	ldr	r3, [r7, #16]
 801c4b8:	60da      	str	r2, [r3, #12]
 801c4ba:	e005      	b.n	801c4c8 <tcp_process+0x6b4>
 801c4bc:	693b      	ldr	r3, [r7, #16]
 801c4be:	68db      	ldr	r3, [r3, #12]
 801c4c0:	613b      	str	r3, [r7, #16]
 801c4c2:	693b      	ldr	r3, [r7, #16]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d1ef      	bne.n	801c4a8 <tcp_process+0x694>
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	60da      	str	r2, [r3, #12]
 801c4ce:	4b43      	ldr	r3, [pc, #268]	; (801c5dc <tcp_process+0x7c8>)
 801c4d0:	2201      	movs	r2, #1
 801c4d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	220a      	movs	r2, #10
 801c4d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c4da:	4b41      	ldr	r3, [pc, #260]	; (801c5e0 <tcp_process+0x7cc>)
 801c4dc:	681a      	ldr	r2, [r3, #0]
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	60da      	str	r2, [r3, #12]
 801c4e2:	4a3f      	ldr	r2, [pc, #252]	; (801c5e0 <tcp_process+0x7cc>)
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	6013      	str	r3, [r2, #0]
 801c4e8:	f002 fe32 	bl	801f150 <tcp_timer_needed>
      }
      break;
 801c4ec:	e06c      	b.n	801c5c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801c4ee:	6878      	ldr	r0, [r7, #4]
 801c4f0:	f000 f984 	bl	801c7fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c4f4:	4b3b      	ldr	r3, [pc, #236]	; (801c5e4 <tcp_process+0x7d0>)
 801c4f6:	781b      	ldrb	r3, [r3, #0]
 801c4f8:	f003 0310 	and.w	r3, r3, #16
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d065      	beq.n	801c5cc <tcp_process+0x7b8>
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c504:	4b38      	ldr	r3, [pc, #224]	; (801c5e8 <tcp_process+0x7d4>)
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	429a      	cmp	r2, r3
 801c50a:	d15f      	bne.n	801c5cc <tcp_process+0x7b8>
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c510:	2b00      	cmp	r3, #0
 801c512:	d15b      	bne.n	801c5cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801c514:	6878      	ldr	r0, [r7, #4]
 801c516:	f7fe fcf3 	bl	801af00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c51a:	4b35      	ldr	r3, [pc, #212]	; (801c5f0 <tcp_process+0x7dc>)
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	687a      	ldr	r2, [r7, #4]
 801c520:	429a      	cmp	r2, r3
 801c522:	d105      	bne.n	801c530 <tcp_process+0x71c>
 801c524:	4b32      	ldr	r3, [pc, #200]	; (801c5f0 <tcp_process+0x7dc>)
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	68db      	ldr	r3, [r3, #12]
 801c52a:	4a31      	ldr	r2, [pc, #196]	; (801c5f0 <tcp_process+0x7dc>)
 801c52c:	6013      	str	r3, [r2, #0]
 801c52e:	e013      	b.n	801c558 <tcp_process+0x744>
 801c530:	4b2f      	ldr	r3, [pc, #188]	; (801c5f0 <tcp_process+0x7dc>)
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	60fb      	str	r3, [r7, #12]
 801c536:	e00c      	b.n	801c552 <tcp_process+0x73e>
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	68db      	ldr	r3, [r3, #12]
 801c53c:	687a      	ldr	r2, [r7, #4]
 801c53e:	429a      	cmp	r2, r3
 801c540:	d104      	bne.n	801c54c <tcp_process+0x738>
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	68da      	ldr	r2, [r3, #12]
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	60da      	str	r2, [r3, #12]
 801c54a:	e005      	b.n	801c558 <tcp_process+0x744>
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	68db      	ldr	r3, [r3, #12]
 801c550:	60fb      	str	r3, [r7, #12]
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d1ef      	bne.n	801c538 <tcp_process+0x724>
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	2200      	movs	r2, #0
 801c55c:	60da      	str	r2, [r3, #12]
 801c55e:	4b1f      	ldr	r3, [pc, #124]	; (801c5dc <tcp_process+0x7c8>)
 801c560:	2201      	movs	r2, #1
 801c562:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	220a      	movs	r2, #10
 801c568:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c56a:	4b1d      	ldr	r3, [pc, #116]	; (801c5e0 <tcp_process+0x7cc>)
 801c56c:	681a      	ldr	r2, [r3, #0]
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	60da      	str	r2, [r3, #12]
 801c572:	4a1b      	ldr	r2, [pc, #108]	; (801c5e0 <tcp_process+0x7cc>)
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	6013      	str	r3, [r2, #0]
 801c578:	f002 fdea 	bl	801f150 <tcp_timer_needed>
      }
      break;
 801c57c:	e026      	b.n	801c5cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c57e:	6878      	ldr	r0, [r7, #4]
 801c580:	f000 f93c 	bl	801c7fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c584:	4b17      	ldr	r3, [pc, #92]	; (801c5e4 <tcp_process+0x7d0>)
 801c586:	781b      	ldrb	r3, [r3, #0]
 801c588:	f003 0310 	and.w	r3, r3, #16
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d01f      	beq.n	801c5d0 <tcp_process+0x7bc>
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c594:	4b14      	ldr	r3, [pc, #80]	; (801c5e8 <tcp_process+0x7d4>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	429a      	cmp	r2, r3
 801c59a:	d119      	bne.n	801c5d0 <tcp_process+0x7bc>
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d115      	bne.n	801c5d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c5a4:	4b11      	ldr	r3, [pc, #68]	; (801c5ec <tcp_process+0x7d8>)
 801c5a6:	781b      	ldrb	r3, [r3, #0]
 801c5a8:	f043 0310 	orr.w	r3, r3, #16
 801c5ac:	b2da      	uxtb	r2, r3
 801c5ae:	4b0f      	ldr	r3, [pc, #60]	; (801c5ec <tcp_process+0x7d8>)
 801c5b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c5b2:	e00d      	b.n	801c5d0 <tcp_process+0x7bc>
    default:
      break;
 801c5b4:	bf00      	nop
 801c5b6:	e00c      	b.n	801c5d2 <tcp_process+0x7be>
      break;
 801c5b8:	bf00      	nop
 801c5ba:	e00a      	b.n	801c5d2 <tcp_process+0x7be>
      break;
 801c5bc:	bf00      	nop
 801c5be:	e008      	b.n	801c5d2 <tcp_process+0x7be>
      break;
 801c5c0:	bf00      	nop
 801c5c2:	e006      	b.n	801c5d2 <tcp_process+0x7be>
      break;
 801c5c4:	bf00      	nop
 801c5c6:	e004      	b.n	801c5d2 <tcp_process+0x7be>
      break;
 801c5c8:	bf00      	nop
 801c5ca:	e002      	b.n	801c5d2 <tcp_process+0x7be>
      break;
 801c5cc:	bf00      	nop
 801c5ce:	e000      	b.n	801c5d2 <tcp_process+0x7be>
      break;
 801c5d0:	bf00      	nop
  }
  return ERR_OK;
 801c5d2:	2300      	movs	r3, #0
}
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	3724      	adds	r7, #36	; 0x24
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	bd90      	pop	{r4, r7, pc}
 801c5dc:	20011f78 	.word	0x20011f78
 801c5e0:	20011f8c 	.word	0x20011f8c
 801c5e4:	200090d8 	.word	0x200090d8
 801c5e8:	200090d0 	.word	0x200090d0
 801c5ec:	200090d9 	.word	0x200090d9
 801c5f0:	20011f7c 	.word	0x20011f7c

0801c5f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c5f4:	b590      	push	{r4, r7, lr}
 801c5f6:	b085      	sub	sp, #20
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	6078      	str	r0, [r7, #4]
 801c5fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d106      	bne.n	801c612 <tcp_oos_insert_segment+0x1e>
 801c604:	4b3b      	ldr	r3, [pc, #236]	; (801c6f4 <tcp_oos_insert_segment+0x100>)
 801c606:	f240 421f 	movw	r2, #1055	; 0x41f
 801c60a:	493b      	ldr	r1, [pc, #236]	; (801c6f8 <tcp_oos_insert_segment+0x104>)
 801c60c:	483b      	ldr	r0, [pc, #236]	; (801c6fc <tcp_oos_insert_segment+0x108>)
 801c60e:	f005 f905 	bl	802181c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	68db      	ldr	r3, [r3, #12]
 801c616:	899b      	ldrh	r3, [r3, #12]
 801c618:	b29b      	uxth	r3, r3
 801c61a:	4618      	mov	r0, r3
 801c61c:	f7f7 f9d4 	bl	80139c8 <lwip_htons>
 801c620:	4603      	mov	r3, r0
 801c622:	b2db      	uxtb	r3, r3
 801c624:	f003 0301 	and.w	r3, r3, #1
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d028      	beq.n	801c67e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c62c:	6838      	ldr	r0, [r7, #0]
 801c62e:	f7fe fa65 	bl	801aafc <tcp_segs_free>
    next = NULL;
 801c632:	2300      	movs	r3, #0
 801c634:	603b      	str	r3, [r7, #0]
 801c636:	e056      	b.n	801c6e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c638:	683b      	ldr	r3, [r7, #0]
 801c63a:	68db      	ldr	r3, [r3, #12]
 801c63c:	899b      	ldrh	r3, [r3, #12]
 801c63e:	b29b      	uxth	r3, r3
 801c640:	4618      	mov	r0, r3
 801c642:	f7f7 f9c1 	bl	80139c8 <lwip_htons>
 801c646:	4603      	mov	r3, r0
 801c648:	b2db      	uxtb	r3, r3
 801c64a:	f003 0301 	and.w	r3, r3, #1
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d00d      	beq.n	801c66e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	68db      	ldr	r3, [r3, #12]
 801c656:	899b      	ldrh	r3, [r3, #12]
 801c658:	b29c      	uxth	r4, r3
 801c65a:	2001      	movs	r0, #1
 801c65c:	f7f7 f9b4 	bl	80139c8 <lwip_htons>
 801c660:	4603      	mov	r3, r0
 801c662:	461a      	mov	r2, r3
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	68db      	ldr	r3, [r3, #12]
 801c668:	4322      	orrs	r2, r4
 801c66a:	b292      	uxth	r2, r2
 801c66c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c66e:	683b      	ldr	r3, [r7, #0]
 801c670:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c672:	683b      	ldr	r3, [r7, #0]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c678:	68f8      	ldr	r0, [r7, #12]
 801c67a:	f7fe fa54 	bl	801ab26 <tcp_seg_free>
    while (next &&
 801c67e:	683b      	ldr	r3, [r7, #0]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d00e      	beq.n	801c6a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	891b      	ldrh	r3, [r3, #8]
 801c688:	461a      	mov	r2, r3
 801c68a:	4b1d      	ldr	r3, [pc, #116]	; (801c700 <tcp_oos_insert_segment+0x10c>)
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	441a      	add	r2, r3
 801c690:	683b      	ldr	r3, [r7, #0]
 801c692:	68db      	ldr	r3, [r3, #12]
 801c694:	685b      	ldr	r3, [r3, #4]
 801c696:	6839      	ldr	r1, [r7, #0]
 801c698:	8909      	ldrh	r1, [r1, #8]
 801c69a:	440b      	add	r3, r1
 801c69c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	daca      	bge.n	801c638 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c6a2:	683b      	ldr	r3, [r7, #0]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d01e      	beq.n	801c6e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	891b      	ldrh	r3, [r3, #8]
 801c6ac:	461a      	mov	r2, r3
 801c6ae:	4b14      	ldr	r3, [pc, #80]	; (801c700 <tcp_oos_insert_segment+0x10c>)
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	441a      	add	r2, r3
 801c6b4:	683b      	ldr	r3, [r7, #0]
 801c6b6:	68db      	ldr	r3, [r3, #12]
 801c6b8:	685b      	ldr	r3, [r3, #4]
 801c6ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	dd12      	ble.n	801c6e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c6c0:	683b      	ldr	r3, [r7, #0]
 801c6c2:	68db      	ldr	r3, [r3, #12]
 801c6c4:	685b      	ldr	r3, [r3, #4]
 801c6c6:	b29a      	uxth	r2, r3
 801c6c8:	4b0d      	ldr	r3, [pc, #52]	; (801c700 <tcp_oos_insert_segment+0x10c>)
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	b29b      	uxth	r3, r3
 801c6ce:	1ad3      	subs	r3, r2, r3
 801c6d0:	b29a      	uxth	r2, r3
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	685a      	ldr	r2, [r3, #4]
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	891b      	ldrh	r3, [r3, #8]
 801c6de:	4619      	mov	r1, r3
 801c6e0:	4610      	mov	r0, r2
 801c6e2:	f7fc fd19 	bl	8019118 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	683a      	ldr	r2, [r7, #0]
 801c6ea:	601a      	str	r2, [r3, #0]
}
 801c6ec:	bf00      	nop
 801c6ee:	3714      	adds	r7, #20
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	bd90      	pop	{r4, r7, pc}
 801c6f4:	0802482c 	.word	0x0802482c
 801c6f8:	08024b30 	.word	0x08024b30
 801c6fc:	080248bc 	.word	0x080248bc
 801c700:	200090cc 	.word	0x200090cc

0801c704 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c704:	b5b0      	push	{r4, r5, r7, lr}
 801c706:	b086      	sub	sp, #24
 801c708:	af00      	add	r7, sp, #0
 801c70a:	60f8      	str	r0, [r7, #12]
 801c70c:	60b9      	str	r1, [r7, #8]
 801c70e:	607a      	str	r2, [r7, #4]
 801c710:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c712:	e03e      	b.n	801c792 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c714:	68bb      	ldr	r3, [r7, #8]
 801c716:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c71e:	697b      	ldr	r3, [r7, #20]
 801c720:	685b      	ldr	r3, [r3, #4]
 801c722:	4618      	mov	r0, r3
 801c724:	f7fc ff0c 	bl	8019540 <pbuf_clen>
 801c728:	4603      	mov	r3, r0
 801c72a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c732:	8a7a      	ldrh	r2, [r7, #18]
 801c734:	429a      	cmp	r2, r3
 801c736:	d906      	bls.n	801c746 <tcp_free_acked_segments+0x42>
 801c738:	4b2a      	ldr	r3, [pc, #168]	; (801c7e4 <tcp_free_acked_segments+0xe0>)
 801c73a:	f240 4257 	movw	r2, #1111	; 0x457
 801c73e:	492a      	ldr	r1, [pc, #168]	; (801c7e8 <tcp_free_acked_segments+0xe4>)
 801c740:	482a      	ldr	r0, [pc, #168]	; (801c7ec <tcp_free_acked_segments+0xe8>)
 801c742:	f005 f86b 	bl	802181c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c74c:	8a7b      	ldrh	r3, [r7, #18]
 801c74e:	1ad3      	subs	r3, r2, r3
 801c750:	b29a      	uxth	r2, r3
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	891a      	ldrh	r2, [r3, #8]
 801c75c:	4b24      	ldr	r3, [pc, #144]	; (801c7f0 <tcp_free_acked_segments+0xec>)
 801c75e:	881b      	ldrh	r3, [r3, #0]
 801c760:	4413      	add	r3, r2
 801c762:	b29a      	uxth	r2, r3
 801c764:	4b22      	ldr	r3, [pc, #136]	; (801c7f0 <tcp_free_acked_segments+0xec>)
 801c766:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c768:	6978      	ldr	r0, [r7, #20]
 801c76a:	f7fe f9dc 	bl	801ab26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c774:	2b00      	cmp	r3, #0
 801c776:	d00c      	beq.n	801c792 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c778:	68bb      	ldr	r3, [r7, #8]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d109      	bne.n	801c792 <tcp_free_acked_segments+0x8e>
 801c77e:	683b      	ldr	r3, [r7, #0]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d106      	bne.n	801c792 <tcp_free_acked_segments+0x8e>
 801c784:	4b17      	ldr	r3, [pc, #92]	; (801c7e4 <tcp_free_acked_segments+0xe0>)
 801c786:	f240 4261 	movw	r2, #1121	; 0x461
 801c78a:	491a      	ldr	r1, [pc, #104]	; (801c7f4 <tcp_free_acked_segments+0xf0>)
 801c78c:	4817      	ldr	r0, [pc, #92]	; (801c7ec <tcp_free_acked_segments+0xe8>)
 801c78e:	f005 f845 	bl	802181c <iprintf>
  while (seg_list != NULL &&
 801c792:	68bb      	ldr	r3, [r7, #8]
 801c794:	2b00      	cmp	r3, #0
 801c796:	d020      	beq.n	801c7da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c798:	68bb      	ldr	r3, [r7, #8]
 801c79a:	68db      	ldr	r3, [r3, #12]
 801c79c:	685b      	ldr	r3, [r3, #4]
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f7f7 f927 	bl	80139f2 <lwip_htonl>
 801c7a4:	4604      	mov	r4, r0
 801c7a6:	68bb      	ldr	r3, [r7, #8]
 801c7a8:	891b      	ldrh	r3, [r3, #8]
 801c7aa:	461d      	mov	r5, r3
 801c7ac:	68bb      	ldr	r3, [r7, #8]
 801c7ae:	68db      	ldr	r3, [r3, #12]
 801c7b0:	899b      	ldrh	r3, [r3, #12]
 801c7b2:	b29b      	uxth	r3, r3
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	f7f7 f907 	bl	80139c8 <lwip_htons>
 801c7ba:	4603      	mov	r3, r0
 801c7bc:	b2db      	uxtb	r3, r3
 801c7be:	f003 0303 	and.w	r3, r3, #3
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d001      	beq.n	801c7ca <tcp_free_acked_segments+0xc6>
 801c7c6:	2301      	movs	r3, #1
 801c7c8:	e000      	b.n	801c7cc <tcp_free_acked_segments+0xc8>
 801c7ca:	2300      	movs	r3, #0
 801c7cc:	442b      	add	r3, r5
 801c7ce:	18e2      	adds	r2, r4, r3
 801c7d0:	4b09      	ldr	r3, [pc, #36]	; (801c7f8 <tcp_free_acked_segments+0xf4>)
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	dd9c      	ble.n	801c714 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c7da:	68bb      	ldr	r3, [r7, #8]
}
 801c7dc:	4618      	mov	r0, r3
 801c7de:	3718      	adds	r7, #24
 801c7e0:	46bd      	mov	sp, r7
 801c7e2:	bdb0      	pop	{r4, r5, r7, pc}
 801c7e4:	0802482c 	.word	0x0802482c
 801c7e8:	08024b58 	.word	0x08024b58
 801c7ec:	080248bc 	.word	0x080248bc
 801c7f0:	200090d4 	.word	0x200090d4
 801c7f4:	08024b80 	.word	0x08024b80
 801c7f8:	200090d0 	.word	0x200090d0

0801c7fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c7fc:	b5b0      	push	{r4, r5, r7, lr}
 801c7fe:	b094      	sub	sp, #80	; 0x50
 801c800:	af00      	add	r7, sp, #0
 801c802:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c804:	2300      	movs	r3, #0
 801c806:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d106      	bne.n	801c81c <tcp_receive+0x20>
 801c80e:	4ba6      	ldr	r3, [pc, #664]	; (801caa8 <tcp_receive+0x2ac>)
 801c810:	f240 427b 	movw	r2, #1147	; 0x47b
 801c814:	49a5      	ldr	r1, [pc, #660]	; (801caac <tcp_receive+0x2b0>)
 801c816:	48a6      	ldr	r0, [pc, #664]	; (801cab0 <tcp_receive+0x2b4>)
 801c818:	f005 f800 	bl	802181c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	7d1b      	ldrb	r3, [r3, #20]
 801c820:	2b03      	cmp	r3, #3
 801c822:	d806      	bhi.n	801c832 <tcp_receive+0x36>
 801c824:	4ba0      	ldr	r3, [pc, #640]	; (801caa8 <tcp_receive+0x2ac>)
 801c826:	f240 427c 	movw	r2, #1148	; 0x47c
 801c82a:	49a2      	ldr	r1, [pc, #648]	; (801cab4 <tcp_receive+0x2b8>)
 801c82c:	48a0      	ldr	r0, [pc, #640]	; (801cab0 <tcp_receive+0x2b4>)
 801c82e:	f004 fff5 	bl	802181c <iprintf>

  if (flags & TCP_ACK) {
 801c832:	4ba1      	ldr	r3, [pc, #644]	; (801cab8 <tcp_receive+0x2bc>)
 801c834:	781b      	ldrb	r3, [r3, #0]
 801c836:	f003 0310 	and.w	r3, r3, #16
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	f000 8263 	beq.w	801cd06 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c846:	461a      	mov	r2, r3
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c84c:	4413      	add	r3, r2
 801c84e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c854:	4b99      	ldr	r3, [pc, #612]	; (801cabc <tcp_receive+0x2c0>)
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	1ad3      	subs	r3, r2, r3
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	db1b      	blt.n	801c896 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c862:	4b96      	ldr	r3, [pc, #600]	; (801cabc <tcp_receive+0x2c0>)
 801c864:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c866:	429a      	cmp	r2, r3
 801c868:	d106      	bne.n	801c878 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c86e:	4b94      	ldr	r3, [pc, #592]	; (801cac0 <tcp_receive+0x2c4>)
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	1ad3      	subs	r3, r2, r3
 801c874:	2b00      	cmp	r3, #0
 801c876:	db0e      	blt.n	801c896 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c87c:	4b90      	ldr	r3, [pc, #576]	; (801cac0 <tcp_receive+0x2c4>)
 801c87e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c880:	429a      	cmp	r2, r3
 801c882:	d125      	bne.n	801c8d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c884:	4b8f      	ldr	r3, [pc, #572]	; (801cac4 <tcp_receive+0x2c8>)
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	89db      	ldrh	r3, [r3, #14]
 801c88a:	b29a      	uxth	r2, r3
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c892:	429a      	cmp	r2, r3
 801c894:	d91c      	bls.n	801c8d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c896:	4b8b      	ldr	r3, [pc, #556]	; (801cac4 <tcp_receive+0x2c8>)
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	89db      	ldrh	r3, [r3, #14]
 801c89c:	b29a      	uxth	r2, r3
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c8b0:	429a      	cmp	r2, r3
 801c8b2:	d205      	bcs.n	801c8c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c8c0:	4b7e      	ldr	r3, [pc, #504]	; (801cabc <tcp_receive+0x2c0>)
 801c8c2:	681a      	ldr	r2, [r3, #0]
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c8c8:	4b7d      	ldr	r3, [pc, #500]	; (801cac0 <tcp_receive+0x2c4>)
 801c8ca:	681a      	ldr	r2, [r3, #0]
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c8d0:	4b7b      	ldr	r3, [pc, #492]	; (801cac0 <tcp_receive+0x2c4>)
 801c8d2:	681a      	ldr	r2, [r3, #0]
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c8d8:	1ad3      	subs	r3, r2, r3
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	dc58      	bgt.n	801c990 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c8de:	4b7a      	ldr	r3, [pc, #488]	; (801cac8 <tcp_receive+0x2cc>)
 801c8e0:	881b      	ldrh	r3, [r3, #0]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d14b      	bne.n	801c97e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8ea:	687a      	ldr	r2, [r7, #4]
 801c8ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c8f0:	4413      	add	r3, r2
 801c8f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c8f4:	429a      	cmp	r2, r3
 801c8f6:	d142      	bne.n	801c97e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	db3d      	blt.n	801c97e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c906:	4b6e      	ldr	r3, [pc, #440]	; (801cac0 <tcp_receive+0x2c4>)
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	429a      	cmp	r2, r3
 801c90c:	d137      	bne.n	801c97e <tcp_receive+0x182>
              found_dupack = 1;
 801c90e:	2301      	movs	r3, #1
 801c910:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c918:	2bff      	cmp	r3, #255	; 0xff
 801c91a:	d007      	beq.n	801c92c <tcp_receive+0x130>
                ++pcb->dupacks;
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c922:	3301      	adds	r3, #1
 801c924:	b2da      	uxtb	r2, r3
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c932:	2b03      	cmp	r3, #3
 801c934:	d91b      	bls.n	801c96e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c940:	4413      	add	r3, r2
 801c942:	b29a      	uxth	r2, r3
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c94a:	429a      	cmp	r2, r3
 801c94c:	d30a      	bcc.n	801c964 <tcp_receive+0x168>
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c958:	4413      	add	r3, r2
 801c95a:	b29a      	uxth	r2, r3
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c962:	e004      	b.n	801c96e <tcp_receive+0x172>
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c96a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c974:	2b02      	cmp	r3, #2
 801c976:	d902      	bls.n	801c97e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c978:	6878      	ldr	r0, [r7, #4]
 801c97a:	f001 fee9 	bl	801e750 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c980:	2b00      	cmp	r3, #0
 801c982:	f040 8160 	bne.w	801cc46 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	2200      	movs	r2, #0
 801c98a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c98e:	e15a      	b.n	801cc46 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c990:	4b4b      	ldr	r3, [pc, #300]	; (801cac0 <tcp_receive+0x2c4>)
 801c992:	681a      	ldr	r2, [r3, #0]
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c998:	1ad3      	subs	r3, r2, r3
 801c99a:	3b01      	subs	r3, #1
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	f2c0 814d 	blt.w	801cc3c <tcp_receive+0x440>
 801c9a2:	4b47      	ldr	r3, [pc, #284]	; (801cac0 <tcp_receive+0x2c4>)
 801c9a4:	681a      	ldr	r2, [r3, #0]
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c9aa:	1ad3      	subs	r3, r2, r3
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	f300 8145 	bgt.w	801cc3c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	8b5b      	ldrh	r3, [r3, #26]
 801c9b6:	f003 0304 	and.w	r3, r3, #4
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d010      	beq.n	801c9e0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	8b5b      	ldrh	r3, [r3, #26]
 801c9c2:	f023 0304 	bic.w	r3, r3, #4
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	2200      	movs	r2, #0
 801c9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c9ee:	10db      	asrs	r3, r3, #3
 801c9f0:	b21b      	sxth	r3, r3
 801c9f2:	b29a      	uxth	r2, r3
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c9fa:	b29b      	uxth	r3, r3
 801c9fc:	4413      	add	r3, r2
 801c9fe:	b29b      	uxth	r3, r3
 801ca00:	b21a      	sxth	r2, r3
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801ca08:	4b2d      	ldr	r3, [pc, #180]	; (801cac0 <tcp_receive+0x2c4>)
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	b29a      	uxth	r2, r3
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca12:	b29b      	uxth	r3, r3
 801ca14:	1ad3      	subs	r3, r2, r3
 801ca16:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	2200      	movs	r2, #0
 801ca1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801ca20:	4b27      	ldr	r3, [pc, #156]	; (801cac0 <tcp_receive+0x2c4>)
 801ca22:	681a      	ldr	r2, [r3, #0]
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	7d1b      	ldrb	r3, [r3, #20]
 801ca2c:	2b03      	cmp	r3, #3
 801ca2e:	f240 8096 	bls.w	801cb5e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ca3e:	429a      	cmp	r2, r3
 801ca40:	d244      	bcs.n	801cacc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	8b5b      	ldrh	r3, [r3, #26]
 801ca46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d001      	beq.n	801ca52 <tcp_receive+0x256>
 801ca4e:	2301      	movs	r3, #1
 801ca50:	e000      	b.n	801ca54 <tcp_receive+0x258>
 801ca52:	2302      	movs	r3, #2
 801ca54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801ca58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ca5c:	b29a      	uxth	r2, r3
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca62:	fb12 f303 	smulbb	r3, r2, r3
 801ca66:	b29b      	uxth	r3, r3
 801ca68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca6a:	4293      	cmp	r3, r2
 801ca6c:	bf28      	it	cs
 801ca6e:	4613      	movcs	r3, r2
 801ca70:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ca78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ca7a:	4413      	add	r3, r2
 801ca7c:	b29a      	uxth	r2, r3
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ca84:	429a      	cmp	r2, r3
 801ca86:	d309      	bcc.n	801ca9c <tcp_receive+0x2a0>
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ca8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ca90:	4413      	add	r3, r2
 801ca92:	b29a      	uxth	r2, r3
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ca9a:	e060      	b.n	801cb5e <tcp_receive+0x362>
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801caa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801caa6:	e05a      	b.n	801cb5e <tcp_receive+0x362>
 801caa8:	0802482c 	.word	0x0802482c
 801caac:	08024ba0 	.word	0x08024ba0
 801cab0:	080248bc 	.word	0x080248bc
 801cab4:	08024bbc 	.word	0x08024bbc
 801cab8:	200090d8 	.word	0x200090d8
 801cabc:	200090cc 	.word	0x200090cc
 801cac0:	200090d0 	.word	0x200090d0
 801cac4:	200090bc 	.word	0x200090bc
 801cac8:	200090d6 	.word	0x200090d6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cad4:	4413      	add	r3, r2
 801cad6:	b29a      	uxth	r2, r3
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801cade:	429a      	cmp	r2, r3
 801cae0:	d309      	bcc.n	801caf6 <tcp_receive+0x2fa>
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cae8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801caea:	4413      	add	r3, r2
 801caec:	b29a      	uxth	r2, r3
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801caf4:	e004      	b.n	801cb00 <tcp_receive+0x304>
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cafc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cb0c:	429a      	cmp	r2, r3
 801cb0e:	d326      	bcc.n	801cb5e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cb1c:	1ad3      	subs	r3, r2, r3
 801cb1e:	b29a      	uxth	r2, r3
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb30:	4413      	add	r3, r2
 801cb32:	b29a      	uxth	r2, r3
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cb3a:	429a      	cmp	r2, r3
 801cb3c:	d30a      	bcc.n	801cb54 <tcp_receive+0x358>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb48:	4413      	add	r3, r2
 801cb4a:	b29a      	uxth	r2, r3
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cb52:	e004      	b.n	801cb5e <tcp_receive+0x362>
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb66:	4a98      	ldr	r2, [pc, #608]	; (801cdc8 <tcp_receive+0x5cc>)
 801cb68:	6878      	ldr	r0, [r7, #4]
 801cb6a:	f7ff fdcb 	bl	801c704 <tcp_free_acked_segments>
 801cb6e:	4602      	mov	r2, r0
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb7c:	4a93      	ldr	r2, [pc, #588]	; (801cdcc <tcp_receive+0x5d0>)
 801cb7e:	6878      	ldr	r0, [r7, #4]
 801cb80:	f7ff fdc0 	bl	801c704 <tcp_free_acked_segments>
 801cb84:	4602      	mov	r2, r0
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d104      	bne.n	801cb9c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb98:	861a      	strh	r2, [r3, #48]	; 0x30
 801cb9a:	e002      	b.n	801cba2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	2200      	movs	r2, #0
 801cba0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	2200      	movs	r2, #0
 801cba6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d103      	bne.n	801cbb8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	2200      	movs	r2, #0
 801cbb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801cbbe:	4b84      	ldr	r3, [pc, #528]	; (801cdd0 <tcp_receive+0x5d4>)
 801cbc0:	881b      	ldrh	r3, [r3, #0]
 801cbc2:	4413      	add	r3, r2
 801cbc4:	b29a      	uxth	r2, r3
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	8b5b      	ldrh	r3, [r3, #26]
 801cbd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d035      	beq.n	801cc44 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d118      	bne.n	801cc12 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d00c      	beq.n	801cc02 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cbf0:	68db      	ldr	r3, [r3, #12]
 801cbf2:	685b      	ldr	r3, [r3, #4]
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f7f6 fefc 	bl	80139f2 <lwip_htonl>
 801cbfa:	4603      	mov	r3, r0
 801cbfc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	dc20      	bgt.n	801cc44 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	8b5b      	ldrh	r3, [r3, #26]
 801cc06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cc0a:	b29a      	uxth	r2, r3
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cc10:	e018      	b.n	801cc44 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc1a:	68db      	ldr	r3, [r3, #12]
 801cc1c:	685b      	ldr	r3, [r3, #4]
 801cc1e:	4618      	mov	r0, r3
 801cc20:	f7f6 fee7 	bl	80139f2 <lwip_htonl>
 801cc24:	4603      	mov	r3, r0
 801cc26:	1ae3      	subs	r3, r4, r3
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	dc0b      	bgt.n	801cc44 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	8b5b      	ldrh	r3, [r3, #26]
 801cc30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cc34:	b29a      	uxth	r2, r3
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cc3a:	e003      	b.n	801cc44 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801cc3c:	6878      	ldr	r0, [r7, #4]
 801cc3e:	f001 ff75 	bl	801eb2c <tcp_send_empty_ack>
 801cc42:	e000      	b.n	801cc46 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cc44:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d05b      	beq.n	801cd06 <tcp_receive+0x50a>
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cc52:	4b60      	ldr	r3, [pc, #384]	; (801cdd4 <tcp_receive+0x5d8>)
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	1ad3      	subs	r3, r2, r3
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	da54      	bge.n	801cd06 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801cc5c:	4b5e      	ldr	r3, [pc, #376]	; (801cdd8 <tcp_receive+0x5dc>)
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	b29a      	uxth	r2, r3
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc66:	b29b      	uxth	r3, r3
 801cc68:	1ad3      	subs	r3, r2, r3
 801cc6a:	b29b      	uxth	r3, r3
 801cc6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801cc70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cc7a:	10db      	asrs	r3, r3, #3
 801cc7c:	b21b      	sxth	r3, r3
 801cc7e:	b29b      	uxth	r3, r3
 801cc80:	1ad3      	subs	r3, r2, r3
 801cc82:	b29b      	uxth	r3, r3
 801cc84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cc8e:	b29a      	uxth	r2, r3
 801cc90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801cc94:	4413      	add	r3, r2
 801cc96:	b29b      	uxth	r3, r3
 801cc98:	b21a      	sxth	r2, r3
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801cc9e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	da05      	bge.n	801ccb2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801cca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ccaa:	425b      	negs	r3, r3
 801ccac:	b29b      	uxth	r3, r3
 801ccae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801ccb2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ccbc:	109b      	asrs	r3, r3, #2
 801ccbe:	b21b      	sxth	r3, r3
 801ccc0:	b29b      	uxth	r3, r3
 801ccc2:	1ad3      	subs	r3, r2, r3
 801ccc4:	b29b      	uxth	r3, r3
 801ccc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ccd0:	b29a      	uxth	r2, r3
 801ccd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ccd6:	4413      	add	r3, r2
 801ccd8:	b29b      	uxth	r3, r3
 801ccda:	b21a      	sxth	r2, r3
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cce6:	10db      	asrs	r3, r3, #3
 801cce8:	b21b      	sxth	r3, r3
 801ccea:	b29a      	uxth	r2, r3
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ccf2:	b29b      	uxth	r3, r3
 801ccf4:	4413      	add	r3, r2
 801ccf6:	b29b      	uxth	r3, r3
 801ccf8:	b21a      	sxth	r2, r3
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	2200      	movs	r2, #0
 801cd04:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cd06:	4b35      	ldr	r3, [pc, #212]	; (801cddc <tcp_receive+0x5e0>)
 801cd08:	881b      	ldrh	r3, [r3, #0]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	f000 84e1 	beq.w	801d6d2 <tcp_receive+0xed6>
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	7d1b      	ldrb	r3, [r3, #20]
 801cd14:	2b06      	cmp	r3, #6
 801cd16:	f200 84dc 	bhi.w	801d6d2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cd1e:	4b30      	ldr	r3, [pc, #192]	; (801cde0 <tcp_receive+0x5e4>)
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	1ad3      	subs	r3, r2, r3
 801cd24:	3b01      	subs	r3, #1
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	f2c0 808e 	blt.w	801ce48 <tcp_receive+0x64c>
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cd30:	4b2a      	ldr	r3, [pc, #168]	; (801cddc <tcp_receive+0x5e0>)
 801cd32:	881b      	ldrh	r3, [r3, #0]
 801cd34:	4619      	mov	r1, r3
 801cd36:	4b2a      	ldr	r3, [pc, #168]	; (801cde0 <tcp_receive+0x5e4>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	440b      	add	r3, r1
 801cd3c:	1ad3      	subs	r3, r2, r3
 801cd3e:	3301      	adds	r3, #1
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	f300 8081 	bgt.w	801ce48 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801cd46:	4b27      	ldr	r3, [pc, #156]	; (801cde4 <tcp_receive+0x5e8>)
 801cd48:	685b      	ldr	r3, [r3, #4]
 801cd4a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cd50:	4b23      	ldr	r3, [pc, #140]	; (801cde0 <tcp_receive+0x5e4>)
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	1ad3      	subs	r3, r2, r3
 801cd56:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801cd58:	4b22      	ldr	r3, [pc, #136]	; (801cde4 <tcp_receive+0x5e8>)
 801cd5a:	685b      	ldr	r3, [r3, #4]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d106      	bne.n	801cd6e <tcp_receive+0x572>
 801cd60:	4b21      	ldr	r3, [pc, #132]	; (801cde8 <tcp_receive+0x5ec>)
 801cd62:	f240 5294 	movw	r2, #1428	; 0x594
 801cd66:	4921      	ldr	r1, [pc, #132]	; (801cdec <tcp_receive+0x5f0>)
 801cd68:	4821      	ldr	r0, [pc, #132]	; (801cdf0 <tcp_receive+0x5f4>)
 801cd6a:	f004 fd57 	bl	802181c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cd74:	4293      	cmp	r3, r2
 801cd76:	d906      	bls.n	801cd86 <tcp_receive+0x58a>
 801cd78:	4b1b      	ldr	r3, [pc, #108]	; (801cde8 <tcp_receive+0x5ec>)
 801cd7a:	f240 5295 	movw	r2, #1429	; 0x595
 801cd7e:	491d      	ldr	r1, [pc, #116]	; (801cdf4 <tcp_receive+0x5f8>)
 801cd80:	481b      	ldr	r0, [pc, #108]	; (801cdf0 <tcp_receive+0x5f4>)
 801cd82:	f004 fd4b 	bl	802181c <iprintf>
      off = (u16_t)off32;
 801cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801cd8c:	4b15      	ldr	r3, [pc, #84]	; (801cde4 <tcp_receive+0x5e8>)
 801cd8e:	685b      	ldr	r3, [r3, #4]
 801cd90:	891b      	ldrh	r3, [r3, #8]
 801cd92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cd96:	429a      	cmp	r2, r3
 801cd98:	d906      	bls.n	801cda8 <tcp_receive+0x5ac>
 801cd9a:	4b13      	ldr	r3, [pc, #76]	; (801cde8 <tcp_receive+0x5ec>)
 801cd9c:	f240 5297 	movw	r2, #1431	; 0x597
 801cda0:	4915      	ldr	r1, [pc, #84]	; (801cdf8 <tcp_receive+0x5fc>)
 801cda2:	4813      	ldr	r0, [pc, #76]	; (801cdf0 <tcp_receive+0x5f4>)
 801cda4:	f004 fd3a 	bl	802181c <iprintf>
      inseg.len -= off;
 801cda8:	4b0e      	ldr	r3, [pc, #56]	; (801cde4 <tcp_receive+0x5e8>)
 801cdaa:	891a      	ldrh	r2, [r3, #8]
 801cdac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cdb0:	1ad3      	subs	r3, r2, r3
 801cdb2:	b29a      	uxth	r2, r3
 801cdb4:	4b0b      	ldr	r3, [pc, #44]	; (801cde4 <tcp_receive+0x5e8>)
 801cdb6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cdb8:	4b0a      	ldr	r3, [pc, #40]	; (801cde4 <tcp_receive+0x5e8>)
 801cdba:	685b      	ldr	r3, [r3, #4]
 801cdbc:	891a      	ldrh	r2, [r3, #8]
 801cdbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cdc2:	1ad3      	subs	r3, r2, r3
 801cdc4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801cdc6:	e029      	b.n	801ce1c <tcp_receive+0x620>
 801cdc8:	08024bd8 	.word	0x08024bd8
 801cdcc:	08024be0 	.word	0x08024be0
 801cdd0:	200090d4 	.word	0x200090d4
 801cdd4:	200090d0 	.word	0x200090d0
 801cdd8:	20011f80 	.word	0x20011f80
 801cddc:	200090d6 	.word	0x200090d6
 801cde0:	200090cc 	.word	0x200090cc
 801cde4:	200090ac 	.word	0x200090ac
 801cde8:	0802482c 	.word	0x0802482c
 801cdec:	08024be8 	.word	0x08024be8
 801cdf0:	080248bc 	.word	0x080248bc
 801cdf4:	08024bf8 	.word	0x08024bf8
 801cdf8:	08024c08 	.word	0x08024c08
        off -= p->len;
 801cdfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdfe:	895b      	ldrh	r3, [r3, #10]
 801ce00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ce04:	1ad3      	subs	r3, r2, r3
 801ce06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801ce0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ce0e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ce10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce12:	2200      	movs	r2, #0
 801ce14:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ce16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801ce1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce1e:	895b      	ldrh	r3, [r3, #10]
 801ce20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ce24:	429a      	cmp	r2, r3
 801ce26:	d8e9      	bhi.n	801cdfc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ce28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ce2c:	4619      	mov	r1, r3
 801ce2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ce30:	f7fc fa72 	bl	8019318 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce38:	4a91      	ldr	r2, [pc, #580]	; (801d080 <tcp_receive+0x884>)
 801ce3a:	6013      	str	r3, [r2, #0]
 801ce3c:	4b91      	ldr	r3, [pc, #580]	; (801d084 <tcp_receive+0x888>)
 801ce3e:	68db      	ldr	r3, [r3, #12]
 801ce40:	4a8f      	ldr	r2, [pc, #572]	; (801d080 <tcp_receive+0x884>)
 801ce42:	6812      	ldr	r2, [r2, #0]
 801ce44:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ce46:	e00d      	b.n	801ce64 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801ce48:	4b8d      	ldr	r3, [pc, #564]	; (801d080 <tcp_receive+0x884>)
 801ce4a:	681a      	ldr	r2, [r3, #0]
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce50:	1ad3      	subs	r3, r2, r3
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	da06      	bge.n	801ce64 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	8b5b      	ldrh	r3, [r3, #26]
 801ce5a:	f043 0302 	orr.w	r3, r3, #2
 801ce5e:	b29a      	uxth	r2, r3
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ce64:	4b86      	ldr	r3, [pc, #536]	; (801d080 <tcp_receive+0x884>)
 801ce66:	681a      	ldr	r2, [r3, #0]
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce6c:	1ad3      	subs	r3, r2, r3
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	f2c0 842a 	blt.w	801d6c8 <tcp_receive+0xecc>
 801ce74:	4b82      	ldr	r3, [pc, #520]	; (801d080 <tcp_receive+0x884>)
 801ce76:	681a      	ldr	r2, [r3, #0]
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce7c:	6879      	ldr	r1, [r7, #4]
 801ce7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ce80:	440b      	add	r3, r1
 801ce82:	1ad3      	subs	r3, r2, r3
 801ce84:	3301      	adds	r3, #1
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	f300 841e 	bgt.w	801d6c8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ce90:	4b7b      	ldr	r3, [pc, #492]	; (801d080 <tcp_receive+0x884>)
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	429a      	cmp	r2, r3
 801ce96:	f040 829a 	bne.w	801d3ce <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801ce9a:	4b7a      	ldr	r3, [pc, #488]	; (801d084 <tcp_receive+0x888>)
 801ce9c:	891c      	ldrh	r4, [r3, #8]
 801ce9e:	4b79      	ldr	r3, [pc, #484]	; (801d084 <tcp_receive+0x888>)
 801cea0:	68db      	ldr	r3, [r3, #12]
 801cea2:	899b      	ldrh	r3, [r3, #12]
 801cea4:	b29b      	uxth	r3, r3
 801cea6:	4618      	mov	r0, r3
 801cea8:	f7f6 fd8e 	bl	80139c8 <lwip_htons>
 801ceac:	4603      	mov	r3, r0
 801ceae:	b2db      	uxtb	r3, r3
 801ceb0:	f003 0303 	and.w	r3, r3, #3
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d001      	beq.n	801cebc <tcp_receive+0x6c0>
 801ceb8:	2301      	movs	r3, #1
 801ceba:	e000      	b.n	801cebe <tcp_receive+0x6c2>
 801cebc:	2300      	movs	r3, #0
 801cebe:	4423      	add	r3, r4
 801cec0:	b29a      	uxth	r2, r3
 801cec2:	4b71      	ldr	r3, [pc, #452]	; (801d088 <tcp_receive+0x88c>)
 801cec4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ceca:	4b6f      	ldr	r3, [pc, #444]	; (801d088 <tcp_receive+0x88c>)
 801cecc:	881b      	ldrh	r3, [r3, #0]
 801cece:	429a      	cmp	r2, r3
 801ced0:	d275      	bcs.n	801cfbe <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ced2:	4b6c      	ldr	r3, [pc, #432]	; (801d084 <tcp_receive+0x888>)
 801ced4:	68db      	ldr	r3, [r3, #12]
 801ced6:	899b      	ldrh	r3, [r3, #12]
 801ced8:	b29b      	uxth	r3, r3
 801ceda:	4618      	mov	r0, r3
 801cedc:	f7f6 fd74 	bl	80139c8 <lwip_htons>
 801cee0:	4603      	mov	r3, r0
 801cee2:	b2db      	uxtb	r3, r3
 801cee4:	f003 0301 	and.w	r3, r3, #1
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d01f      	beq.n	801cf2c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ceec:	4b65      	ldr	r3, [pc, #404]	; (801d084 <tcp_receive+0x888>)
 801ceee:	68db      	ldr	r3, [r3, #12]
 801cef0:	899b      	ldrh	r3, [r3, #12]
 801cef2:	b29b      	uxth	r3, r3
 801cef4:	b21b      	sxth	r3, r3
 801cef6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cefa:	b21c      	sxth	r4, r3
 801cefc:	4b61      	ldr	r3, [pc, #388]	; (801d084 <tcp_receive+0x888>)
 801cefe:	68db      	ldr	r3, [r3, #12]
 801cf00:	899b      	ldrh	r3, [r3, #12]
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	4618      	mov	r0, r3
 801cf06:	f7f6 fd5f 	bl	80139c8 <lwip_htons>
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	b2db      	uxtb	r3, r3
 801cf0e:	b29b      	uxth	r3, r3
 801cf10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801cf14:	b29b      	uxth	r3, r3
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7f6 fd56 	bl	80139c8 <lwip_htons>
 801cf1c:	4603      	mov	r3, r0
 801cf1e:	b21b      	sxth	r3, r3
 801cf20:	4323      	orrs	r3, r4
 801cf22:	b21a      	sxth	r2, r3
 801cf24:	4b57      	ldr	r3, [pc, #348]	; (801d084 <tcp_receive+0x888>)
 801cf26:	68db      	ldr	r3, [r3, #12]
 801cf28:	b292      	uxth	r2, r2
 801cf2a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cf30:	4b54      	ldr	r3, [pc, #336]	; (801d084 <tcp_receive+0x888>)
 801cf32:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cf34:	4b53      	ldr	r3, [pc, #332]	; (801d084 <tcp_receive+0x888>)
 801cf36:	68db      	ldr	r3, [r3, #12]
 801cf38:	899b      	ldrh	r3, [r3, #12]
 801cf3a:	b29b      	uxth	r3, r3
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7f6 fd43 	bl	80139c8 <lwip_htons>
 801cf42:	4603      	mov	r3, r0
 801cf44:	b2db      	uxtb	r3, r3
 801cf46:	f003 0302 	and.w	r3, r3, #2
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d005      	beq.n	801cf5a <tcp_receive+0x75e>
            inseg.len -= 1;
 801cf4e:	4b4d      	ldr	r3, [pc, #308]	; (801d084 <tcp_receive+0x888>)
 801cf50:	891b      	ldrh	r3, [r3, #8]
 801cf52:	3b01      	subs	r3, #1
 801cf54:	b29a      	uxth	r2, r3
 801cf56:	4b4b      	ldr	r3, [pc, #300]	; (801d084 <tcp_receive+0x888>)
 801cf58:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801cf5a:	4b4a      	ldr	r3, [pc, #296]	; (801d084 <tcp_receive+0x888>)
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	4a49      	ldr	r2, [pc, #292]	; (801d084 <tcp_receive+0x888>)
 801cf60:	8912      	ldrh	r2, [r2, #8]
 801cf62:	4611      	mov	r1, r2
 801cf64:	4618      	mov	r0, r3
 801cf66:	f7fc f8d7 	bl	8019118 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801cf6a:	4b46      	ldr	r3, [pc, #280]	; (801d084 <tcp_receive+0x888>)
 801cf6c:	891c      	ldrh	r4, [r3, #8]
 801cf6e:	4b45      	ldr	r3, [pc, #276]	; (801d084 <tcp_receive+0x888>)
 801cf70:	68db      	ldr	r3, [r3, #12]
 801cf72:	899b      	ldrh	r3, [r3, #12]
 801cf74:	b29b      	uxth	r3, r3
 801cf76:	4618      	mov	r0, r3
 801cf78:	f7f6 fd26 	bl	80139c8 <lwip_htons>
 801cf7c:	4603      	mov	r3, r0
 801cf7e:	b2db      	uxtb	r3, r3
 801cf80:	f003 0303 	and.w	r3, r3, #3
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d001      	beq.n	801cf8c <tcp_receive+0x790>
 801cf88:	2301      	movs	r3, #1
 801cf8a:	e000      	b.n	801cf8e <tcp_receive+0x792>
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	4423      	add	r3, r4
 801cf90:	b29a      	uxth	r2, r3
 801cf92:	4b3d      	ldr	r3, [pc, #244]	; (801d088 <tcp_receive+0x88c>)
 801cf94:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cf96:	4b3c      	ldr	r3, [pc, #240]	; (801d088 <tcp_receive+0x88c>)
 801cf98:	881b      	ldrh	r3, [r3, #0]
 801cf9a:	461a      	mov	r2, r3
 801cf9c:	4b38      	ldr	r3, [pc, #224]	; (801d080 <tcp_receive+0x884>)
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	441a      	add	r2, r3
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfa6:	6879      	ldr	r1, [r7, #4]
 801cfa8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cfaa:	440b      	add	r3, r1
 801cfac:	429a      	cmp	r2, r3
 801cfae:	d006      	beq.n	801cfbe <tcp_receive+0x7c2>
 801cfb0:	4b36      	ldr	r3, [pc, #216]	; (801d08c <tcp_receive+0x890>)
 801cfb2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801cfb6:	4936      	ldr	r1, [pc, #216]	; (801d090 <tcp_receive+0x894>)
 801cfb8:	4836      	ldr	r0, [pc, #216]	; (801d094 <tcp_receive+0x898>)
 801cfba:	f004 fc2f 	bl	802181c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	f000 80e7 	beq.w	801d196 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cfc8:	4b2e      	ldr	r3, [pc, #184]	; (801d084 <tcp_receive+0x888>)
 801cfca:	68db      	ldr	r3, [r3, #12]
 801cfcc:	899b      	ldrh	r3, [r3, #12]
 801cfce:	b29b      	uxth	r3, r3
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7f6 fcf9 	bl	80139c8 <lwip_htons>
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	b2db      	uxtb	r3, r3
 801cfda:	f003 0301 	and.w	r3, r3, #1
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d010      	beq.n	801d004 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801cfe2:	e00a      	b.n	801cffa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfe8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfee:	681a      	ldr	r2, [r3, #0]
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801cff4:	68f8      	ldr	r0, [r7, #12]
 801cff6:	f7fd fd96 	bl	801ab26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d1f0      	bne.n	801cfe4 <tcp_receive+0x7e8>
 801d002:	e0c8      	b.n	801d196 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d008:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801d00a:	e052      	b.n	801d0b2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d00e:	68db      	ldr	r3, [r3, #12]
 801d010:	899b      	ldrh	r3, [r3, #12]
 801d012:	b29b      	uxth	r3, r3
 801d014:	4618      	mov	r0, r3
 801d016:	f7f6 fcd7 	bl	80139c8 <lwip_htons>
 801d01a:	4603      	mov	r3, r0
 801d01c:	b2db      	uxtb	r3, r3
 801d01e:	f003 0301 	and.w	r3, r3, #1
 801d022:	2b00      	cmp	r3, #0
 801d024:	d03d      	beq.n	801d0a2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d026:	4b17      	ldr	r3, [pc, #92]	; (801d084 <tcp_receive+0x888>)
 801d028:	68db      	ldr	r3, [r3, #12]
 801d02a:	899b      	ldrh	r3, [r3, #12]
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	4618      	mov	r0, r3
 801d030:	f7f6 fcca 	bl	80139c8 <lwip_htons>
 801d034:	4603      	mov	r3, r0
 801d036:	b2db      	uxtb	r3, r3
 801d038:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d130      	bne.n	801d0a2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d040:	4b10      	ldr	r3, [pc, #64]	; (801d084 <tcp_receive+0x888>)
 801d042:	68db      	ldr	r3, [r3, #12]
 801d044:	899b      	ldrh	r3, [r3, #12]
 801d046:	b29c      	uxth	r4, r3
 801d048:	2001      	movs	r0, #1
 801d04a:	f7f6 fcbd 	bl	80139c8 <lwip_htons>
 801d04e:	4603      	mov	r3, r0
 801d050:	461a      	mov	r2, r3
 801d052:	4b0c      	ldr	r3, [pc, #48]	; (801d084 <tcp_receive+0x888>)
 801d054:	68db      	ldr	r3, [r3, #12]
 801d056:	4322      	orrs	r2, r4
 801d058:	b292      	uxth	r2, r2
 801d05a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d05c:	4b09      	ldr	r3, [pc, #36]	; (801d084 <tcp_receive+0x888>)
 801d05e:	891c      	ldrh	r4, [r3, #8]
 801d060:	4b08      	ldr	r3, [pc, #32]	; (801d084 <tcp_receive+0x888>)
 801d062:	68db      	ldr	r3, [r3, #12]
 801d064:	899b      	ldrh	r3, [r3, #12]
 801d066:	b29b      	uxth	r3, r3
 801d068:	4618      	mov	r0, r3
 801d06a:	f7f6 fcad 	bl	80139c8 <lwip_htons>
 801d06e:	4603      	mov	r3, r0
 801d070:	b2db      	uxtb	r3, r3
 801d072:	f003 0303 	and.w	r3, r3, #3
 801d076:	2b00      	cmp	r3, #0
 801d078:	d00e      	beq.n	801d098 <tcp_receive+0x89c>
 801d07a:	2301      	movs	r3, #1
 801d07c:	e00d      	b.n	801d09a <tcp_receive+0x89e>
 801d07e:	bf00      	nop
 801d080:	200090cc 	.word	0x200090cc
 801d084:	200090ac 	.word	0x200090ac
 801d088:	200090d6 	.word	0x200090d6
 801d08c:	0802482c 	.word	0x0802482c
 801d090:	08024c18 	.word	0x08024c18
 801d094:	080248bc 	.word	0x080248bc
 801d098:	2300      	movs	r3, #0
 801d09a:	4423      	add	r3, r4
 801d09c:	b29a      	uxth	r2, r3
 801d09e:	4b98      	ldr	r3, [pc, #608]	; (801d300 <tcp_receive+0xb04>)
 801d0a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801d0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 801d0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801d0ac:	6938      	ldr	r0, [r7, #16]
 801d0ae:	f7fd fd3a 	bl	801ab26 <tcp_seg_free>
            while (next &&
 801d0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d00e      	beq.n	801d0d6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d0b8:	4b91      	ldr	r3, [pc, #580]	; (801d300 <tcp_receive+0xb04>)
 801d0ba:	881b      	ldrh	r3, [r3, #0]
 801d0bc:	461a      	mov	r2, r3
 801d0be:	4b91      	ldr	r3, [pc, #580]	; (801d304 <tcp_receive+0xb08>)
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	441a      	add	r2, r3
 801d0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0c6:	68db      	ldr	r3, [r3, #12]
 801d0c8:	685b      	ldr	r3, [r3, #4]
 801d0ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d0cc:	8909      	ldrh	r1, [r1, #8]
 801d0ce:	440b      	add	r3, r1
 801d0d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	da9a      	bge.n	801d00c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801d0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d059      	beq.n	801d190 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801d0dc:	4b88      	ldr	r3, [pc, #544]	; (801d300 <tcp_receive+0xb04>)
 801d0de:	881b      	ldrh	r3, [r3, #0]
 801d0e0:	461a      	mov	r2, r3
 801d0e2:	4b88      	ldr	r3, [pc, #544]	; (801d304 <tcp_receive+0xb08>)
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	441a      	add	r2, r3
 801d0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0ea:	68db      	ldr	r3, [r3, #12]
 801d0ec:	685b      	ldr	r3, [r3, #4]
 801d0ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	dd4d      	ble.n	801d190 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0f6:	68db      	ldr	r3, [r3, #12]
 801d0f8:	685b      	ldr	r3, [r3, #4]
 801d0fa:	b29a      	uxth	r2, r3
 801d0fc:	4b81      	ldr	r3, [pc, #516]	; (801d304 <tcp_receive+0xb08>)
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	b29b      	uxth	r3, r3
 801d102:	1ad3      	subs	r3, r2, r3
 801d104:	b29a      	uxth	r2, r3
 801d106:	4b80      	ldr	r3, [pc, #512]	; (801d308 <tcp_receive+0xb0c>)
 801d108:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d10a:	4b7f      	ldr	r3, [pc, #508]	; (801d308 <tcp_receive+0xb0c>)
 801d10c:	68db      	ldr	r3, [r3, #12]
 801d10e:	899b      	ldrh	r3, [r3, #12]
 801d110:	b29b      	uxth	r3, r3
 801d112:	4618      	mov	r0, r3
 801d114:	f7f6 fc58 	bl	80139c8 <lwip_htons>
 801d118:	4603      	mov	r3, r0
 801d11a:	b2db      	uxtb	r3, r3
 801d11c:	f003 0302 	and.w	r3, r3, #2
 801d120:	2b00      	cmp	r3, #0
 801d122:	d005      	beq.n	801d130 <tcp_receive+0x934>
                inseg.len -= 1;
 801d124:	4b78      	ldr	r3, [pc, #480]	; (801d308 <tcp_receive+0xb0c>)
 801d126:	891b      	ldrh	r3, [r3, #8]
 801d128:	3b01      	subs	r3, #1
 801d12a:	b29a      	uxth	r2, r3
 801d12c:	4b76      	ldr	r3, [pc, #472]	; (801d308 <tcp_receive+0xb0c>)
 801d12e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801d130:	4b75      	ldr	r3, [pc, #468]	; (801d308 <tcp_receive+0xb0c>)
 801d132:	685b      	ldr	r3, [r3, #4]
 801d134:	4a74      	ldr	r2, [pc, #464]	; (801d308 <tcp_receive+0xb0c>)
 801d136:	8912      	ldrh	r2, [r2, #8]
 801d138:	4611      	mov	r1, r2
 801d13a:	4618      	mov	r0, r3
 801d13c:	f7fb ffec 	bl	8019118 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d140:	4b71      	ldr	r3, [pc, #452]	; (801d308 <tcp_receive+0xb0c>)
 801d142:	891c      	ldrh	r4, [r3, #8]
 801d144:	4b70      	ldr	r3, [pc, #448]	; (801d308 <tcp_receive+0xb0c>)
 801d146:	68db      	ldr	r3, [r3, #12]
 801d148:	899b      	ldrh	r3, [r3, #12]
 801d14a:	b29b      	uxth	r3, r3
 801d14c:	4618      	mov	r0, r3
 801d14e:	f7f6 fc3b 	bl	80139c8 <lwip_htons>
 801d152:	4603      	mov	r3, r0
 801d154:	b2db      	uxtb	r3, r3
 801d156:	f003 0303 	and.w	r3, r3, #3
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d001      	beq.n	801d162 <tcp_receive+0x966>
 801d15e:	2301      	movs	r3, #1
 801d160:	e000      	b.n	801d164 <tcp_receive+0x968>
 801d162:	2300      	movs	r3, #0
 801d164:	4423      	add	r3, r4
 801d166:	b29a      	uxth	r2, r3
 801d168:	4b65      	ldr	r3, [pc, #404]	; (801d300 <tcp_receive+0xb04>)
 801d16a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d16c:	4b64      	ldr	r3, [pc, #400]	; (801d300 <tcp_receive+0xb04>)
 801d16e:	881b      	ldrh	r3, [r3, #0]
 801d170:	461a      	mov	r2, r3
 801d172:	4b64      	ldr	r3, [pc, #400]	; (801d304 <tcp_receive+0xb08>)
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	441a      	add	r2, r3
 801d178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d17a:	68db      	ldr	r3, [r3, #12]
 801d17c:	685b      	ldr	r3, [r3, #4]
 801d17e:	429a      	cmp	r2, r3
 801d180:	d006      	beq.n	801d190 <tcp_receive+0x994>
 801d182:	4b62      	ldr	r3, [pc, #392]	; (801d30c <tcp_receive+0xb10>)
 801d184:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d188:	4961      	ldr	r1, [pc, #388]	; (801d310 <tcp_receive+0xb14>)
 801d18a:	4862      	ldr	r0, [pc, #392]	; (801d314 <tcp_receive+0xb18>)
 801d18c:	f004 fb46 	bl	802181c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d194:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801d196:	4b5a      	ldr	r3, [pc, #360]	; (801d300 <tcp_receive+0xb04>)
 801d198:	881b      	ldrh	r3, [r3, #0]
 801d19a:	461a      	mov	r2, r3
 801d19c:	4b59      	ldr	r3, [pc, #356]	; (801d304 <tcp_receive+0xb08>)
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	441a      	add	r2, r3
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d1aa:	4b55      	ldr	r3, [pc, #340]	; (801d300 <tcp_receive+0xb04>)
 801d1ac:	881b      	ldrh	r3, [r3, #0]
 801d1ae:	429a      	cmp	r2, r3
 801d1b0:	d206      	bcs.n	801d1c0 <tcp_receive+0x9c4>
 801d1b2:	4b56      	ldr	r3, [pc, #344]	; (801d30c <tcp_receive+0xb10>)
 801d1b4:	f240 6207 	movw	r2, #1543	; 0x607
 801d1b8:	4957      	ldr	r1, [pc, #348]	; (801d318 <tcp_receive+0xb1c>)
 801d1ba:	4856      	ldr	r0, [pc, #344]	; (801d314 <tcp_receive+0xb18>)
 801d1bc:	f004 fb2e 	bl	802181c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d1c4:	4b4e      	ldr	r3, [pc, #312]	; (801d300 <tcp_receive+0xb04>)
 801d1c6:	881b      	ldrh	r3, [r3, #0]
 801d1c8:	1ad3      	subs	r3, r2, r3
 801d1ca:	b29a      	uxth	r2, r3
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801d1d0:	6878      	ldr	r0, [r7, #4]
 801d1d2:	f7fc ffc9 	bl	801a168 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801d1d6:	4b4c      	ldr	r3, [pc, #304]	; (801d308 <tcp_receive+0xb0c>)
 801d1d8:	685b      	ldr	r3, [r3, #4]
 801d1da:	891b      	ldrh	r3, [r3, #8]
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d006      	beq.n	801d1ee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801d1e0:	4b49      	ldr	r3, [pc, #292]	; (801d308 <tcp_receive+0xb0c>)
 801d1e2:	685b      	ldr	r3, [r3, #4]
 801d1e4:	4a4d      	ldr	r2, [pc, #308]	; (801d31c <tcp_receive+0xb20>)
 801d1e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801d1e8:	4b47      	ldr	r3, [pc, #284]	; (801d308 <tcp_receive+0xb0c>)
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d1ee:	4b46      	ldr	r3, [pc, #280]	; (801d308 <tcp_receive+0xb0c>)
 801d1f0:	68db      	ldr	r3, [r3, #12]
 801d1f2:	899b      	ldrh	r3, [r3, #12]
 801d1f4:	b29b      	uxth	r3, r3
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7f6 fbe6 	bl	80139c8 <lwip_htons>
 801d1fc:	4603      	mov	r3, r0
 801d1fe:	b2db      	uxtb	r3, r3
 801d200:	f003 0301 	and.w	r3, r3, #1
 801d204:	2b00      	cmp	r3, #0
 801d206:	f000 80b8 	beq.w	801d37a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801d20a:	4b45      	ldr	r3, [pc, #276]	; (801d320 <tcp_receive+0xb24>)
 801d20c:	781b      	ldrb	r3, [r3, #0]
 801d20e:	f043 0320 	orr.w	r3, r3, #32
 801d212:	b2da      	uxtb	r2, r3
 801d214:	4b42      	ldr	r3, [pc, #264]	; (801d320 <tcp_receive+0xb24>)
 801d216:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801d218:	e0af      	b.n	801d37a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d21e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d224:	68db      	ldr	r3, [r3, #12]
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	4a36      	ldr	r2, [pc, #216]	; (801d304 <tcp_receive+0xb08>)
 801d22a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d22c:	68bb      	ldr	r3, [r7, #8]
 801d22e:	891b      	ldrh	r3, [r3, #8]
 801d230:	461c      	mov	r4, r3
 801d232:	68bb      	ldr	r3, [r7, #8]
 801d234:	68db      	ldr	r3, [r3, #12]
 801d236:	899b      	ldrh	r3, [r3, #12]
 801d238:	b29b      	uxth	r3, r3
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7f6 fbc4 	bl	80139c8 <lwip_htons>
 801d240:	4603      	mov	r3, r0
 801d242:	b2db      	uxtb	r3, r3
 801d244:	f003 0303 	and.w	r3, r3, #3
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d001      	beq.n	801d250 <tcp_receive+0xa54>
 801d24c:	2301      	movs	r3, #1
 801d24e:	e000      	b.n	801d252 <tcp_receive+0xa56>
 801d250:	2300      	movs	r3, #0
 801d252:	191a      	adds	r2, r3, r4
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d258:	441a      	add	r2, r3
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d262:	461c      	mov	r4, r3
 801d264:	68bb      	ldr	r3, [r7, #8]
 801d266:	891b      	ldrh	r3, [r3, #8]
 801d268:	461d      	mov	r5, r3
 801d26a:	68bb      	ldr	r3, [r7, #8]
 801d26c:	68db      	ldr	r3, [r3, #12]
 801d26e:	899b      	ldrh	r3, [r3, #12]
 801d270:	b29b      	uxth	r3, r3
 801d272:	4618      	mov	r0, r3
 801d274:	f7f6 fba8 	bl	80139c8 <lwip_htons>
 801d278:	4603      	mov	r3, r0
 801d27a:	b2db      	uxtb	r3, r3
 801d27c:	f003 0303 	and.w	r3, r3, #3
 801d280:	2b00      	cmp	r3, #0
 801d282:	d001      	beq.n	801d288 <tcp_receive+0xa8c>
 801d284:	2301      	movs	r3, #1
 801d286:	e000      	b.n	801d28a <tcp_receive+0xa8e>
 801d288:	2300      	movs	r3, #0
 801d28a:	442b      	add	r3, r5
 801d28c:	429c      	cmp	r4, r3
 801d28e:	d206      	bcs.n	801d29e <tcp_receive+0xaa2>
 801d290:	4b1e      	ldr	r3, [pc, #120]	; (801d30c <tcp_receive+0xb10>)
 801d292:	f240 622b 	movw	r2, #1579	; 0x62b
 801d296:	4923      	ldr	r1, [pc, #140]	; (801d324 <tcp_receive+0xb28>)
 801d298:	481e      	ldr	r0, [pc, #120]	; (801d314 <tcp_receive+0xb18>)
 801d29a:	f004 fabf 	bl	802181c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d29e:	68bb      	ldr	r3, [r7, #8]
 801d2a0:	891b      	ldrh	r3, [r3, #8]
 801d2a2:	461c      	mov	r4, r3
 801d2a4:	68bb      	ldr	r3, [r7, #8]
 801d2a6:	68db      	ldr	r3, [r3, #12]
 801d2a8:	899b      	ldrh	r3, [r3, #12]
 801d2aa:	b29b      	uxth	r3, r3
 801d2ac:	4618      	mov	r0, r3
 801d2ae:	f7f6 fb8b 	bl	80139c8 <lwip_htons>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	b2db      	uxtb	r3, r3
 801d2b6:	f003 0303 	and.w	r3, r3, #3
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d001      	beq.n	801d2c2 <tcp_receive+0xac6>
 801d2be:	2301      	movs	r3, #1
 801d2c0:	e000      	b.n	801d2c4 <tcp_receive+0xac8>
 801d2c2:	2300      	movs	r3, #0
 801d2c4:	1919      	adds	r1, r3, r4
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d2ca:	b28b      	uxth	r3, r1
 801d2cc:	1ad3      	subs	r3, r2, r3
 801d2ce:	b29a      	uxth	r2, r3
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801d2d4:	6878      	ldr	r0, [r7, #4]
 801d2d6:	f7fc ff47 	bl	801a168 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801d2da:	68bb      	ldr	r3, [r7, #8]
 801d2dc:	685b      	ldr	r3, [r3, #4]
 801d2de:	891b      	ldrh	r3, [r3, #8]
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d028      	beq.n	801d336 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801d2e4:	4b0d      	ldr	r3, [pc, #52]	; (801d31c <tcp_receive+0xb20>)
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d01d      	beq.n	801d328 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801d2ec:	4b0b      	ldr	r3, [pc, #44]	; (801d31c <tcp_receive+0xb20>)
 801d2ee:	681a      	ldr	r2, [r3, #0]
 801d2f0:	68bb      	ldr	r3, [r7, #8]
 801d2f2:	685b      	ldr	r3, [r3, #4]
 801d2f4:	4619      	mov	r1, r3
 801d2f6:	4610      	mov	r0, r2
 801d2f8:	f7fc f962 	bl	80195c0 <pbuf_cat>
 801d2fc:	e018      	b.n	801d330 <tcp_receive+0xb34>
 801d2fe:	bf00      	nop
 801d300:	200090d6 	.word	0x200090d6
 801d304:	200090cc 	.word	0x200090cc
 801d308:	200090ac 	.word	0x200090ac
 801d30c:	0802482c 	.word	0x0802482c
 801d310:	08024c50 	.word	0x08024c50
 801d314:	080248bc 	.word	0x080248bc
 801d318:	08024c8c 	.word	0x08024c8c
 801d31c:	200090dc 	.word	0x200090dc
 801d320:	200090d9 	.word	0x200090d9
 801d324:	08024cac 	.word	0x08024cac
            } else {
              recv_data = cseg->p;
 801d328:	68bb      	ldr	r3, [r7, #8]
 801d32a:	685b      	ldr	r3, [r3, #4]
 801d32c:	4a70      	ldr	r2, [pc, #448]	; (801d4f0 <tcp_receive+0xcf4>)
 801d32e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801d330:	68bb      	ldr	r3, [r7, #8]
 801d332:	2200      	movs	r2, #0
 801d334:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d336:	68bb      	ldr	r3, [r7, #8]
 801d338:	68db      	ldr	r3, [r3, #12]
 801d33a:	899b      	ldrh	r3, [r3, #12]
 801d33c:	b29b      	uxth	r3, r3
 801d33e:	4618      	mov	r0, r3
 801d340:	f7f6 fb42 	bl	80139c8 <lwip_htons>
 801d344:	4603      	mov	r3, r0
 801d346:	b2db      	uxtb	r3, r3
 801d348:	f003 0301 	and.w	r3, r3, #1
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d00d      	beq.n	801d36c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801d350:	4b68      	ldr	r3, [pc, #416]	; (801d4f4 <tcp_receive+0xcf8>)
 801d352:	781b      	ldrb	r3, [r3, #0]
 801d354:	f043 0320 	orr.w	r3, r3, #32
 801d358:	b2da      	uxtb	r2, r3
 801d35a:	4b66      	ldr	r3, [pc, #408]	; (801d4f4 <tcp_receive+0xcf8>)
 801d35c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	7d1b      	ldrb	r3, [r3, #20]
 801d362:	2b04      	cmp	r3, #4
 801d364:	d102      	bne.n	801d36c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	2207      	movs	r2, #7
 801d36a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801d36c:	68bb      	ldr	r3, [r7, #8]
 801d36e:	681a      	ldr	r2, [r3, #0]
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801d374:	68b8      	ldr	r0, [r7, #8]
 801d376:	f7fd fbd6 	bl	801ab26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d008      	beq.n	801d394 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d386:	68db      	ldr	r3, [r3, #12]
 801d388:	685a      	ldr	r2, [r3, #4]
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801d38e:	429a      	cmp	r2, r3
 801d390:	f43f af43 	beq.w	801d21a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	8b5b      	ldrh	r3, [r3, #26]
 801d398:	f003 0301 	and.w	r3, r3, #1
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d00e      	beq.n	801d3be <tcp_receive+0xbc2>
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	8b5b      	ldrh	r3, [r3, #26]
 801d3a4:	f023 0301 	bic.w	r3, r3, #1
 801d3a8:	b29a      	uxth	r2, r3
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	835a      	strh	r2, [r3, #26]
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	8b5b      	ldrh	r3, [r3, #26]
 801d3b2:	f043 0302 	orr.w	r3, r3, #2
 801d3b6:	b29a      	uxth	r2, r3
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d3bc:	e188      	b.n	801d6d0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	8b5b      	ldrh	r3, [r3, #26]
 801d3c2:	f043 0301 	orr.w	r3, r3, #1
 801d3c6:	b29a      	uxth	r2, r3
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d3cc:	e180      	b.n	801d6d0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d106      	bne.n	801d3e4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d3d6:	4848      	ldr	r0, [pc, #288]	; (801d4f8 <tcp_receive+0xcfc>)
 801d3d8:	f7fd fbbe 	bl	801ab58 <tcp_seg_copy>
 801d3dc:	4602      	mov	r2, r0
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	675a      	str	r2, [r3, #116]	; 0x74
 801d3e2:	e16d      	b.n	801d6c0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3ec:	63bb      	str	r3, [r7, #56]	; 0x38
 801d3ee:	e157      	b.n	801d6a0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3f2:	68db      	ldr	r3, [r3, #12]
 801d3f4:	685a      	ldr	r2, [r3, #4]
 801d3f6:	4b41      	ldr	r3, [pc, #260]	; (801d4fc <tcp_receive+0xd00>)
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	429a      	cmp	r2, r3
 801d3fc:	d11d      	bne.n	801d43a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d3fe:	4b3e      	ldr	r3, [pc, #248]	; (801d4f8 <tcp_receive+0xcfc>)
 801d400:	891a      	ldrh	r2, [r3, #8]
 801d402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d404:	891b      	ldrh	r3, [r3, #8]
 801d406:	429a      	cmp	r2, r3
 801d408:	f240 814f 	bls.w	801d6aa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d40c:	483a      	ldr	r0, [pc, #232]	; (801d4f8 <tcp_receive+0xcfc>)
 801d40e:	f7fd fba3 	bl	801ab58 <tcp_seg_copy>
 801d412:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d414:	697b      	ldr	r3, [r7, #20]
 801d416:	2b00      	cmp	r3, #0
 801d418:	f000 8149 	beq.w	801d6ae <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801d41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d003      	beq.n	801d42a <tcp_receive+0xc2e>
                    prev->next = cseg;
 801d422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d424:	697a      	ldr	r2, [r7, #20]
 801d426:	601a      	str	r2, [r3, #0]
 801d428:	e002      	b.n	801d430 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	697a      	ldr	r2, [r7, #20]
 801d42e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d432:	6978      	ldr	r0, [r7, #20]
 801d434:	f7ff f8de 	bl	801c5f4 <tcp_oos_insert_segment>
                }
                break;
 801d438:	e139      	b.n	801d6ae <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d117      	bne.n	801d470 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d440:	4b2e      	ldr	r3, [pc, #184]	; (801d4fc <tcp_receive+0xd00>)
 801d442:	681a      	ldr	r2, [r3, #0]
 801d444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d446:	68db      	ldr	r3, [r3, #12]
 801d448:	685b      	ldr	r3, [r3, #4]
 801d44a:	1ad3      	subs	r3, r2, r3
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	da57      	bge.n	801d500 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d450:	4829      	ldr	r0, [pc, #164]	; (801d4f8 <tcp_receive+0xcfc>)
 801d452:	f7fd fb81 	bl	801ab58 <tcp_seg_copy>
 801d456:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d458:	69bb      	ldr	r3, [r7, #24]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	f000 8129 	beq.w	801d6b2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	69ba      	ldr	r2, [r7, #24]
 801d464:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d468:	69b8      	ldr	r0, [r7, #24]
 801d46a:	f7ff f8c3 	bl	801c5f4 <tcp_oos_insert_segment>
                  }
                  break;
 801d46e:	e120      	b.n	801d6b2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d470:	4b22      	ldr	r3, [pc, #136]	; (801d4fc <tcp_receive+0xd00>)
 801d472:	681a      	ldr	r2, [r3, #0]
 801d474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d476:	68db      	ldr	r3, [r3, #12]
 801d478:	685b      	ldr	r3, [r3, #4]
 801d47a:	1ad3      	subs	r3, r2, r3
 801d47c:	3b01      	subs	r3, #1
 801d47e:	2b00      	cmp	r3, #0
 801d480:	db3e      	blt.n	801d500 <tcp_receive+0xd04>
 801d482:	4b1e      	ldr	r3, [pc, #120]	; (801d4fc <tcp_receive+0xd00>)
 801d484:	681a      	ldr	r2, [r3, #0]
 801d486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d488:	68db      	ldr	r3, [r3, #12]
 801d48a:	685b      	ldr	r3, [r3, #4]
 801d48c:	1ad3      	subs	r3, r2, r3
 801d48e:	3301      	adds	r3, #1
 801d490:	2b00      	cmp	r3, #0
 801d492:	dc35      	bgt.n	801d500 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d494:	4818      	ldr	r0, [pc, #96]	; (801d4f8 <tcp_receive+0xcfc>)
 801d496:	f7fd fb5f 	bl	801ab58 <tcp_seg_copy>
 801d49a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801d49c:	69fb      	ldr	r3, [r7, #28]
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	f000 8109 	beq.w	801d6b6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4a6:	68db      	ldr	r3, [r3, #12]
 801d4a8:	685b      	ldr	r3, [r3, #4]
 801d4aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d4ac:	8912      	ldrh	r2, [r2, #8]
 801d4ae:	441a      	add	r2, r3
 801d4b0:	4b12      	ldr	r3, [pc, #72]	; (801d4fc <tcp_receive+0xd00>)
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	1ad3      	subs	r3, r2, r3
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	dd12      	ble.n	801d4e0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d4ba:	4b10      	ldr	r3, [pc, #64]	; (801d4fc <tcp_receive+0xd00>)
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	b29a      	uxth	r2, r3
 801d4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4c2:	68db      	ldr	r3, [r3, #12]
 801d4c4:	685b      	ldr	r3, [r3, #4]
 801d4c6:	b29b      	uxth	r3, r3
 801d4c8:	1ad3      	subs	r3, r2, r3
 801d4ca:	b29a      	uxth	r2, r3
 801d4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d2:	685a      	ldr	r2, [r3, #4]
 801d4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d6:	891b      	ldrh	r3, [r3, #8]
 801d4d8:	4619      	mov	r1, r3
 801d4da:	4610      	mov	r0, r2
 801d4dc:	f7fb fe1c 	bl	8019118 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801d4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4e2:	69fa      	ldr	r2, [r7, #28]
 801d4e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801d4e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d4e8:	69f8      	ldr	r0, [r7, #28]
 801d4ea:	f7ff f883 	bl	801c5f4 <tcp_oos_insert_segment>
                  }
                  break;
 801d4ee:	e0e2      	b.n	801d6b6 <tcp_receive+0xeba>
 801d4f0:	200090dc 	.word	0x200090dc
 801d4f4:	200090d9 	.word	0x200090d9
 801d4f8:	200090ac 	.word	0x200090ac
 801d4fc:	200090cc 	.word	0x200090cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801d500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d502:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	2b00      	cmp	r3, #0
 801d50a:	f040 80c6 	bne.w	801d69a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d50e:	4b80      	ldr	r3, [pc, #512]	; (801d710 <tcp_receive+0xf14>)
 801d510:	681a      	ldr	r2, [r3, #0]
 801d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d514:	68db      	ldr	r3, [r3, #12]
 801d516:	685b      	ldr	r3, [r3, #4]
 801d518:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	f340 80bd 	ble.w	801d69a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d522:	68db      	ldr	r3, [r3, #12]
 801d524:	899b      	ldrh	r3, [r3, #12]
 801d526:	b29b      	uxth	r3, r3
 801d528:	4618      	mov	r0, r3
 801d52a:	f7f6 fa4d 	bl	80139c8 <lwip_htons>
 801d52e:	4603      	mov	r3, r0
 801d530:	b2db      	uxtb	r3, r3
 801d532:	f003 0301 	and.w	r3, r3, #1
 801d536:	2b00      	cmp	r3, #0
 801d538:	f040 80bf 	bne.w	801d6ba <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d53c:	4875      	ldr	r0, [pc, #468]	; (801d714 <tcp_receive+0xf18>)
 801d53e:	f7fd fb0b 	bl	801ab58 <tcp_seg_copy>
 801d542:	4602      	mov	r2, r0
 801d544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d546:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	f000 80b6 	beq.w	801d6be <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d554:	68db      	ldr	r3, [r3, #12]
 801d556:	685b      	ldr	r3, [r3, #4]
 801d558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d55a:	8912      	ldrh	r2, [r2, #8]
 801d55c:	441a      	add	r2, r3
 801d55e:	4b6c      	ldr	r3, [pc, #432]	; (801d710 <tcp_receive+0xf14>)
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	1ad3      	subs	r3, r2, r3
 801d564:	2b00      	cmp	r3, #0
 801d566:	dd12      	ble.n	801d58e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d568:	4b69      	ldr	r3, [pc, #420]	; (801d710 <tcp_receive+0xf14>)
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	b29a      	uxth	r2, r3
 801d56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d570:	68db      	ldr	r3, [r3, #12]
 801d572:	685b      	ldr	r3, [r3, #4]
 801d574:	b29b      	uxth	r3, r3
 801d576:	1ad3      	subs	r3, r2, r3
 801d578:	b29a      	uxth	r2, r3
 801d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d57c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d580:	685a      	ldr	r2, [r3, #4]
 801d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d584:	891b      	ldrh	r3, [r3, #8]
 801d586:	4619      	mov	r1, r3
 801d588:	4610      	mov	r0, r2
 801d58a:	f7fb fdc5 	bl	8019118 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d58e:	4b62      	ldr	r3, [pc, #392]	; (801d718 <tcp_receive+0xf1c>)
 801d590:	881b      	ldrh	r3, [r3, #0]
 801d592:	461a      	mov	r2, r3
 801d594:	4b5e      	ldr	r3, [pc, #376]	; (801d710 <tcp_receive+0xf14>)
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	441a      	add	r2, r3
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d59e:	6879      	ldr	r1, [r7, #4]
 801d5a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d5a2:	440b      	add	r3, r1
 801d5a4:	1ad3      	subs	r3, r2, r3
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	f340 8089 	ble.w	801d6be <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	68db      	ldr	r3, [r3, #12]
 801d5b2:	899b      	ldrh	r3, [r3, #12]
 801d5b4:	b29b      	uxth	r3, r3
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	f7f6 fa06 	bl	80139c8 <lwip_htons>
 801d5bc:	4603      	mov	r3, r0
 801d5be:	b2db      	uxtb	r3, r3
 801d5c0:	f003 0301 	and.w	r3, r3, #1
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d022      	beq.n	801d60e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5ca:	681b      	ldr	r3, [r3, #0]
 801d5cc:	68db      	ldr	r3, [r3, #12]
 801d5ce:	899b      	ldrh	r3, [r3, #12]
 801d5d0:	b29b      	uxth	r3, r3
 801d5d2:	b21b      	sxth	r3, r3
 801d5d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d5d8:	b21c      	sxth	r4, r3
 801d5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	68db      	ldr	r3, [r3, #12]
 801d5e0:	899b      	ldrh	r3, [r3, #12]
 801d5e2:	b29b      	uxth	r3, r3
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	f7f6 f9ef 	bl	80139c8 <lwip_htons>
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	b2db      	uxtb	r3, r3
 801d5ee:	b29b      	uxth	r3, r3
 801d5f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d5f4:	b29b      	uxth	r3, r3
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	f7f6 f9e6 	bl	80139c8 <lwip_htons>
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	b21b      	sxth	r3, r3
 801d600:	4323      	orrs	r3, r4
 801d602:	b21a      	sxth	r2, r3
 801d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	68db      	ldr	r3, [r3, #12]
 801d60a:	b292      	uxth	r2, r2
 801d60c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d612:	b29a      	uxth	r2, r3
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d618:	4413      	add	r3, r2
 801d61a:	b299      	uxth	r1, r3
 801d61c:	4b3c      	ldr	r3, [pc, #240]	; (801d710 <tcp_receive+0xf14>)
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	b29a      	uxth	r2, r3
 801d622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	1a8a      	subs	r2, r1, r2
 801d628:	b292      	uxth	r2, r2
 801d62a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	685a      	ldr	r2, [r3, #4]
 801d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	891b      	ldrh	r3, [r3, #8]
 801d638:	4619      	mov	r1, r3
 801d63a:	4610      	mov	r0, r2
 801d63c:	f7fb fd6c 	bl	8019118 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	891c      	ldrh	r4, [r3, #8]
 801d646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	68db      	ldr	r3, [r3, #12]
 801d64c:	899b      	ldrh	r3, [r3, #12]
 801d64e:	b29b      	uxth	r3, r3
 801d650:	4618      	mov	r0, r3
 801d652:	f7f6 f9b9 	bl	80139c8 <lwip_htons>
 801d656:	4603      	mov	r3, r0
 801d658:	b2db      	uxtb	r3, r3
 801d65a:	f003 0303 	and.w	r3, r3, #3
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d001      	beq.n	801d666 <tcp_receive+0xe6a>
 801d662:	2301      	movs	r3, #1
 801d664:	e000      	b.n	801d668 <tcp_receive+0xe6c>
 801d666:	2300      	movs	r3, #0
 801d668:	4423      	add	r3, r4
 801d66a:	b29a      	uxth	r2, r3
 801d66c:	4b2a      	ldr	r3, [pc, #168]	; (801d718 <tcp_receive+0xf1c>)
 801d66e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d670:	4b29      	ldr	r3, [pc, #164]	; (801d718 <tcp_receive+0xf1c>)
 801d672:	881b      	ldrh	r3, [r3, #0]
 801d674:	461a      	mov	r2, r3
 801d676:	4b26      	ldr	r3, [pc, #152]	; (801d710 <tcp_receive+0xf14>)
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	441a      	add	r2, r3
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d680:	6879      	ldr	r1, [r7, #4]
 801d682:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d684:	440b      	add	r3, r1
 801d686:	429a      	cmp	r2, r3
 801d688:	d019      	beq.n	801d6be <tcp_receive+0xec2>
 801d68a:	4b24      	ldr	r3, [pc, #144]	; (801d71c <tcp_receive+0xf20>)
 801d68c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d690:	4923      	ldr	r1, [pc, #140]	; (801d720 <tcp_receive+0xf24>)
 801d692:	4824      	ldr	r0, [pc, #144]	; (801d724 <tcp_receive+0xf28>)
 801d694:	f004 f8c2 	bl	802181c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d698:	e011      	b.n	801d6be <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	63bb      	str	r3, [r7, #56]	; 0x38
 801d6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	f47f aea4 	bne.w	801d3f0 <tcp_receive+0xbf4>
 801d6a8:	e00a      	b.n	801d6c0 <tcp_receive+0xec4>
                break;
 801d6aa:	bf00      	nop
 801d6ac:	e008      	b.n	801d6c0 <tcp_receive+0xec4>
                break;
 801d6ae:	bf00      	nop
 801d6b0:	e006      	b.n	801d6c0 <tcp_receive+0xec4>
                  break;
 801d6b2:	bf00      	nop
 801d6b4:	e004      	b.n	801d6c0 <tcp_receive+0xec4>
                  break;
 801d6b6:	bf00      	nop
 801d6b8:	e002      	b.n	801d6c0 <tcp_receive+0xec4>
                  break;
 801d6ba:	bf00      	nop
 801d6bc:	e000      	b.n	801d6c0 <tcp_receive+0xec4>
                break;
 801d6be:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d6c0:	6878      	ldr	r0, [r7, #4]
 801d6c2:	f001 fa33 	bl	801eb2c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d6c6:	e003      	b.n	801d6d0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d6c8:	6878      	ldr	r0, [r7, #4]
 801d6ca:	f001 fa2f 	bl	801eb2c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d6ce:	e01a      	b.n	801d706 <tcp_receive+0xf0a>
 801d6d0:	e019      	b.n	801d706 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d6d2:	4b0f      	ldr	r3, [pc, #60]	; (801d710 <tcp_receive+0xf14>)
 801d6d4:	681a      	ldr	r2, [r3, #0]
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6da:	1ad3      	subs	r3, r2, r3
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	db0a      	blt.n	801d6f6 <tcp_receive+0xefa>
 801d6e0:	4b0b      	ldr	r3, [pc, #44]	; (801d710 <tcp_receive+0xf14>)
 801d6e2:	681a      	ldr	r2, [r3, #0]
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6e8:	6879      	ldr	r1, [r7, #4]
 801d6ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d6ec:	440b      	add	r3, r1
 801d6ee:	1ad3      	subs	r3, r2, r3
 801d6f0:	3301      	adds	r3, #1
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	dd07      	ble.n	801d706 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	8b5b      	ldrh	r3, [r3, #26]
 801d6fa:	f043 0302 	orr.w	r3, r3, #2
 801d6fe:	b29a      	uxth	r2, r3
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d704:	e7ff      	b.n	801d706 <tcp_receive+0xf0a>
 801d706:	bf00      	nop
 801d708:	3750      	adds	r7, #80	; 0x50
 801d70a:	46bd      	mov	sp, r7
 801d70c:	bdb0      	pop	{r4, r5, r7, pc}
 801d70e:	bf00      	nop
 801d710:	200090cc 	.word	0x200090cc
 801d714:	200090ac 	.word	0x200090ac
 801d718:	200090d6 	.word	0x200090d6
 801d71c:	0802482c 	.word	0x0802482c
 801d720:	08024c18 	.word	0x08024c18
 801d724:	080248bc 	.word	0x080248bc

0801d728 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d728:	b480      	push	{r7}
 801d72a:	b083      	sub	sp, #12
 801d72c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d72e:	4b15      	ldr	r3, [pc, #84]	; (801d784 <tcp_get_next_optbyte+0x5c>)
 801d730:	881b      	ldrh	r3, [r3, #0]
 801d732:	1c5a      	adds	r2, r3, #1
 801d734:	b291      	uxth	r1, r2
 801d736:	4a13      	ldr	r2, [pc, #76]	; (801d784 <tcp_get_next_optbyte+0x5c>)
 801d738:	8011      	strh	r1, [r2, #0]
 801d73a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d73c:	4b12      	ldr	r3, [pc, #72]	; (801d788 <tcp_get_next_optbyte+0x60>)
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	2b00      	cmp	r3, #0
 801d742:	d004      	beq.n	801d74e <tcp_get_next_optbyte+0x26>
 801d744:	4b11      	ldr	r3, [pc, #68]	; (801d78c <tcp_get_next_optbyte+0x64>)
 801d746:	881b      	ldrh	r3, [r3, #0]
 801d748:	88fa      	ldrh	r2, [r7, #6]
 801d74a:	429a      	cmp	r2, r3
 801d74c:	d208      	bcs.n	801d760 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d74e:	4b10      	ldr	r3, [pc, #64]	; (801d790 <tcp_get_next_optbyte+0x68>)
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	3314      	adds	r3, #20
 801d754:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d756:	88fb      	ldrh	r3, [r7, #6]
 801d758:	683a      	ldr	r2, [r7, #0]
 801d75a:	4413      	add	r3, r2
 801d75c:	781b      	ldrb	r3, [r3, #0]
 801d75e:	e00b      	b.n	801d778 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d760:	88fb      	ldrh	r3, [r7, #6]
 801d762:	b2da      	uxtb	r2, r3
 801d764:	4b09      	ldr	r3, [pc, #36]	; (801d78c <tcp_get_next_optbyte+0x64>)
 801d766:	881b      	ldrh	r3, [r3, #0]
 801d768:	b2db      	uxtb	r3, r3
 801d76a:	1ad3      	subs	r3, r2, r3
 801d76c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d76e:	4b06      	ldr	r3, [pc, #24]	; (801d788 <tcp_get_next_optbyte+0x60>)
 801d770:	681a      	ldr	r2, [r3, #0]
 801d772:	797b      	ldrb	r3, [r7, #5]
 801d774:	4413      	add	r3, r2
 801d776:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d778:	4618      	mov	r0, r3
 801d77a:	370c      	adds	r7, #12
 801d77c:	46bd      	mov	sp, r7
 801d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d782:	4770      	bx	lr
 801d784:	200090c8 	.word	0x200090c8
 801d788:	200090c4 	.word	0x200090c4
 801d78c:	200090c2 	.word	0x200090c2
 801d790:	200090bc 	.word	0x200090bc

0801d794 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d794:	b580      	push	{r7, lr}
 801d796:	b084      	sub	sp, #16
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d106      	bne.n	801d7b0 <tcp_parseopt+0x1c>
 801d7a2:	4b32      	ldr	r3, [pc, #200]	; (801d86c <tcp_parseopt+0xd8>)
 801d7a4:	f240 727d 	movw	r2, #1917	; 0x77d
 801d7a8:	4931      	ldr	r1, [pc, #196]	; (801d870 <tcp_parseopt+0xdc>)
 801d7aa:	4832      	ldr	r0, [pc, #200]	; (801d874 <tcp_parseopt+0xe0>)
 801d7ac:	f004 f836 	bl	802181c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d7b0:	4b31      	ldr	r3, [pc, #196]	; (801d878 <tcp_parseopt+0xe4>)
 801d7b2:	881b      	ldrh	r3, [r3, #0]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d055      	beq.n	801d864 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d7b8:	4b30      	ldr	r3, [pc, #192]	; (801d87c <tcp_parseopt+0xe8>)
 801d7ba:	2200      	movs	r2, #0
 801d7bc:	801a      	strh	r2, [r3, #0]
 801d7be:	e045      	b.n	801d84c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d7c0:	f7ff ffb2 	bl	801d728 <tcp_get_next_optbyte>
 801d7c4:	4603      	mov	r3, r0
 801d7c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d7c8:	7bfb      	ldrb	r3, [r7, #15]
 801d7ca:	2b02      	cmp	r3, #2
 801d7cc:	d006      	beq.n	801d7dc <tcp_parseopt+0x48>
 801d7ce:	2b02      	cmp	r3, #2
 801d7d0:	dc2b      	bgt.n	801d82a <tcp_parseopt+0x96>
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d041      	beq.n	801d85a <tcp_parseopt+0xc6>
 801d7d6:	2b01      	cmp	r3, #1
 801d7d8:	d127      	bne.n	801d82a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d7da:	e037      	b.n	801d84c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d7dc:	f7ff ffa4 	bl	801d728 <tcp_get_next_optbyte>
 801d7e0:	4603      	mov	r3, r0
 801d7e2:	2b04      	cmp	r3, #4
 801d7e4:	d13b      	bne.n	801d85e <tcp_parseopt+0xca>
 801d7e6:	4b25      	ldr	r3, [pc, #148]	; (801d87c <tcp_parseopt+0xe8>)
 801d7e8:	881b      	ldrh	r3, [r3, #0]
 801d7ea:	3301      	adds	r3, #1
 801d7ec:	4a22      	ldr	r2, [pc, #136]	; (801d878 <tcp_parseopt+0xe4>)
 801d7ee:	8812      	ldrh	r2, [r2, #0]
 801d7f0:	4293      	cmp	r3, r2
 801d7f2:	da34      	bge.n	801d85e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d7f4:	f7ff ff98 	bl	801d728 <tcp_get_next_optbyte>
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	021b      	lsls	r3, r3, #8
 801d7fe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d800:	f7ff ff92 	bl	801d728 <tcp_get_next_optbyte>
 801d804:	4603      	mov	r3, r0
 801d806:	b29a      	uxth	r2, r3
 801d808:	89bb      	ldrh	r3, [r7, #12]
 801d80a:	4313      	orrs	r3, r2
 801d80c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d80e:	89bb      	ldrh	r3, [r7, #12]
 801d810:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d814:	d804      	bhi.n	801d820 <tcp_parseopt+0x8c>
 801d816:	89bb      	ldrh	r3, [r7, #12]
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d001      	beq.n	801d820 <tcp_parseopt+0x8c>
 801d81c:	89ba      	ldrh	r2, [r7, #12]
 801d81e:	e001      	b.n	801d824 <tcp_parseopt+0x90>
 801d820:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d828:	e010      	b.n	801d84c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d82a:	f7ff ff7d 	bl	801d728 <tcp_get_next_optbyte>
 801d82e:	4603      	mov	r3, r0
 801d830:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d832:	7afb      	ldrb	r3, [r7, #11]
 801d834:	2b01      	cmp	r3, #1
 801d836:	d914      	bls.n	801d862 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d838:	7afb      	ldrb	r3, [r7, #11]
 801d83a:	b29a      	uxth	r2, r3
 801d83c:	4b0f      	ldr	r3, [pc, #60]	; (801d87c <tcp_parseopt+0xe8>)
 801d83e:	881b      	ldrh	r3, [r3, #0]
 801d840:	4413      	add	r3, r2
 801d842:	b29b      	uxth	r3, r3
 801d844:	3b02      	subs	r3, #2
 801d846:	b29a      	uxth	r2, r3
 801d848:	4b0c      	ldr	r3, [pc, #48]	; (801d87c <tcp_parseopt+0xe8>)
 801d84a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d84c:	4b0b      	ldr	r3, [pc, #44]	; (801d87c <tcp_parseopt+0xe8>)
 801d84e:	881a      	ldrh	r2, [r3, #0]
 801d850:	4b09      	ldr	r3, [pc, #36]	; (801d878 <tcp_parseopt+0xe4>)
 801d852:	881b      	ldrh	r3, [r3, #0]
 801d854:	429a      	cmp	r2, r3
 801d856:	d3b3      	bcc.n	801d7c0 <tcp_parseopt+0x2c>
 801d858:	e004      	b.n	801d864 <tcp_parseopt+0xd0>
          return;
 801d85a:	bf00      	nop
 801d85c:	e002      	b.n	801d864 <tcp_parseopt+0xd0>
            return;
 801d85e:	bf00      	nop
 801d860:	e000      	b.n	801d864 <tcp_parseopt+0xd0>
            return;
 801d862:	bf00      	nop
      }
    }
  }
}
 801d864:	3710      	adds	r7, #16
 801d866:	46bd      	mov	sp, r7
 801d868:	bd80      	pop	{r7, pc}
 801d86a:	bf00      	nop
 801d86c:	0802482c 	.word	0x0802482c
 801d870:	08024cd4 	.word	0x08024cd4
 801d874:	080248bc 	.word	0x080248bc
 801d878:	200090c0 	.word	0x200090c0
 801d87c:	200090c8 	.word	0x200090c8

0801d880 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d880:	b480      	push	{r7}
 801d882:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d884:	4b05      	ldr	r3, [pc, #20]	; (801d89c <tcp_trigger_input_pcb_close+0x1c>)
 801d886:	781b      	ldrb	r3, [r3, #0]
 801d888:	f043 0310 	orr.w	r3, r3, #16
 801d88c:	b2da      	uxtb	r2, r3
 801d88e:	4b03      	ldr	r3, [pc, #12]	; (801d89c <tcp_trigger_input_pcb_close+0x1c>)
 801d890:	701a      	strb	r2, [r3, #0]
}
 801d892:	bf00      	nop
 801d894:	46bd      	mov	sp, r7
 801d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d89a:	4770      	bx	lr
 801d89c:	200090d9 	.word	0x200090d9

0801d8a0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d8a0:	b580      	push	{r7, lr}
 801d8a2:	b084      	sub	sp, #16
 801d8a4:	af00      	add	r7, sp, #0
 801d8a6:	60f8      	str	r0, [r7, #12]
 801d8a8:	60b9      	str	r1, [r7, #8]
 801d8aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d00a      	beq.n	801d8c8 <tcp_route+0x28>
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	7a1b      	ldrb	r3, [r3, #8]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d006      	beq.n	801d8c8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	7a1b      	ldrb	r3, [r3, #8]
 801d8be:	4618      	mov	r0, r3
 801d8c0:	f7fb fa22 	bl	8018d08 <netif_get_by_index>
 801d8c4:	4603      	mov	r3, r0
 801d8c6:	e003      	b.n	801d8d0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d8c8:	6878      	ldr	r0, [r7, #4]
 801d8ca:	f7f9 f90b 	bl	8016ae4 <ip4_route>
 801d8ce:	4603      	mov	r3, r0
  }
}
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	3710      	adds	r7, #16
 801d8d4:	46bd      	mov	sp, r7
 801d8d6:	bd80      	pop	{r7, pc}

0801d8d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d8d8:	b590      	push	{r4, r7, lr}
 801d8da:	b087      	sub	sp, #28
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	60f8      	str	r0, [r7, #12]
 801d8e0:	60b9      	str	r1, [r7, #8]
 801d8e2:	603b      	str	r3, [r7, #0]
 801d8e4:	4613      	mov	r3, r2
 801d8e6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d105      	bne.n	801d8fa <tcp_create_segment+0x22>
 801d8ee:	4b44      	ldr	r3, [pc, #272]	; (801da00 <tcp_create_segment+0x128>)
 801d8f0:	22a3      	movs	r2, #163	; 0xa3
 801d8f2:	4944      	ldr	r1, [pc, #272]	; (801da04 <tcp_create_segment+0x12c>)
 801d8f4:	4844      	ldr	r0, [pc, #272]	; (801da08 <tcp_create_segment+0x130>)
 801d8f6:	f003 ff91 	bl	802181c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d8fa:	68bb      	ldr	r3, [r7, #8]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d105      	bne.n	801d90c <tcp_create_segment+0x34>
 801d900:	4b3f      	ldr	r3, [pc, #252]	; (801da00 <tcp_create_segment+0x128>)
 801d902:	22a4      	movs	r2, #164	; 0xa4
 801d904:	4941      	ldr	r1, [pc, #260]	; (801da0c <tcp_create_segment+0x134>)
 801d906:	4840      	ldr	r0, [pc, #256]	; (801da08 <tcp_create_segment+0x130>)
 801d908:	f003 ff88 	bl	802181c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d90c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d910:	009b      	lsls	r3, r3, #2
 801d912:	b2db      	uxtb	r3, r3
 801d914:	f003 0304 	and.w	r3, r3, #4
 801d918:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d91a:	2003      	movs	r0, #3
 801d91c:	f7fa fe80 	bl	8018620 <memp_malloc>
 801d920:	6138      	str	r0, [r7, #16]
 801d922:	693b      	ldr	r3, [r7, #16]
 801d924:	2b00      	cmp	r3, #0
 801d926:	d104      	bne.n	801d932 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d928:	68b8      	ldr	r0, [r7, #8]
 801d92a:	f7fb fd7b 	bl	8019424 <pbuf_free>
    return NULL;
 801d92e:	2300      	movs	r3, #0
 801d930:	e061      	b.n	801d9f6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d932:	693b      	ldr	r3, [r7, #16]
 801d934:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d938:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d93a:	693b      	ldr	r3, [r7, #16]
 801d93c:	2200      	movs	r2, #0
 801d93e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d940:	693b      	ldr	r3, [r7, #16]
 801d942:	68ba      	ldr	r2, [r7, #8]
 801d944:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d946:	68bb      	ldr	r3, [r7, #8]
 801d948:	891a      	ldrh	r2, [r3, #8]
 801d94a:	7dfb      	ldrb	r3, [r7, #23]
 801d94c:	b29b      	uxth	r3, r3
 801d94e:	429a      	cmp	r2, r3
 801d950:	d205      	bcs.n	801d95e <tcp_create_segment+0x86>
 801d952:	4b2b      	ldr	r3, [pc, #172]	; (801da00 <tcp_create_segment+0x128>)
 801d954:	22b0      	movs	r2, #176	; 0xb0
 801d956:	492e      	ldr	r1, [pc, #184]	; (801da10 <tcp_create_segment+0x138>)
 801d958:	482b      	ldr	r0, [pc, #172]	; (801da08 <tcp_create_segment+0x130>)
 801d95a:	f003 ff5f 	bl	802181c <iprintf>
  seg->len = p->tot_len - optlen;
 801d95e:	68bb      	ldr	r3, [r7, #8]
 801d960:	891a      	ldrh	r2, [r3, #8]
 801d962:	7dfb      	ldrb	r3, [r7, #23]
 801d964:	b29b      	uxth	r3, r3
 801d966:	1ad3      	subs	r3, r2, r3
 801d968:	b29a      	uxth	r2, r3
 801d96a:	693b      	ldr	r3, [r7, #16]
 801d96c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d96e:	2114      	movs	r1, #20
 801d970:	68b8      	ldr	r0, [r7, #8]
 801d972:	f7fb fcc1 	bl	80192f8 <pbuf_add_header>
 801d976:	4603      	mov	r3, r0
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d004      	beq.n	801d986 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d97c:	6938      	ldr	r0, [r7, #16]
 801d97e:	f7fd f8d2 	bl	801ab26 <tcp_seg_free>
    return NULL;
 801d982:	2300      	movs	r3, #0
 801d984:	e037      	b.n	801d9f6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d986:	693b      	ldr	r3, [r7, #16]
 801d988:	685b      	ldr	r3, [r3, #4]
 801d98a:	685a      	ldr	r2, [r3, #4]
 801d98c:	693b      	ldr	r3, [r7, #16]
 801d98e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	8ada      	ldrh	r2, [r3, #22]
 801d994:	693b      	ldr	r3, [r7, #16]
 801d996:	68dc      	ldr	r4, [r3, #12]
 801d998:	4610      	mov	r0, r2
 801d99a:	f7f6 f815 	bl	80139c8 <lwip_htons>
 801d99e:	4603      	mov	r3, r0
 801d9a0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	8b1a      	ldrh	r2, [r3, #24]
 801d9a6:	693b      	ldr	r3, [r7, #16]
 801d9a8:	68dc      	ldr	r4, [r3, #12]
 801d9aa:	4610      	mov	r0, r2
 801d9ac:	f7f6 f80c 	bl	80139c8 <lwip_htons>
 801d9b0:	4603      	mov	r3, r0
 801d9b2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d9b4:	693b      	ldr	r3, [r7, #16]
 801d9b6:	68dc      	ldr	r4, [r3, #12]
 801d9b8:	6838      	ldr	r0, [r7, #0]
 801d9ba:	f7f6 f81a 	bl	80139f2 <lwip_htonl>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d9c2:	7dfb      	ldrb	r3, [r7, #23]
 801d9c4:	089b      	lsrs	r3, r3, #2
 801d9c6:	b2db      	uxtb	r3, r3
 801d9c8:	b29b      	uxth	r3, r3
 801d9ca:	3305      	adds	r3, #5
 801d9cc:	b29b      	uxth	r3, r3
 801d9ce:	031b      	lsls	r3, r3, #12
 801d9d0:	b29a      	uxth	r2, r3
 801d9d2:	79fb      	ldrb	r3, [r7, #7]
 801d9d4:	b29b      	uxth	r3, r3
 801d9d6:	4313      	orrs	r3, r2
 801d9d8:	b29a      	uxth	r2, r3
 801d9da:	693b      	ldr	r3, [r7, #16]
 801d9dc:	68dc      	ldr	r4, [r3, #12]
 801d9de:	4610      	mov	r0, r2
 801d9e0:	f7f5 fff2 	bl	80139c8 <lwip_htons>
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d9e8:	693b      	ldr	r3, [r7, #16]
 801d9ea:	68db      	ldr	r3, [r3, #12]
 801d9ec:	2200      	movs	r2, #0
 801d9ee:	749a      	strb	r2, [r3, #18]
 801d9f0:	2200      	movs	r2, #0
 801d9f2:	74da      	strb	r2, [r3, #19]
  return seg;
 801d9f4:	693b      	ldr	r3, [r7, #16]
}
 801d9f6:	4618      	mov	r0, r3
 801d9f8:	371c      	adds	r7, #28
 801d9fa:	46bd      	mov	sp, r7
 801d9fc:	bd90      	pop	{r4, r7, pc}
 801d9fe:	bf00      	nop
 801da00:	08024cf0 	.word	0x08024cf0
 801da04:	08024d6c 	.word	0x08024d6c
 801da08:	08024d8c 	.word	0x08024d8c
 801da0c:	08024db4 	.word	0x08024db4
 801da10:	08024dd8 	.word	0x08024dd8

0801da14 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801da14:	b590      	push	{r4, r7, lr}
 801da16:	b08b      	sub	sp, #44	; 0x2c
 801da18:	af02      	add	r7, sp, #8
 801da1a:	6078      	str	r0, [r7, #4]
 801da1c:	460b      	mov	r3, r1
 801da1e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801da20:	2300      	movs	r3, #0
 801da22:	61fb      	str	r3, [r7, #28]
 801da24:	2300      	movs	r3, #0
 801da26:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801da28:	2300      	movs	r3, #0
 801da2a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d106      	bne.n	801da40 <tcp_split_unsent_seg+0x2c>
 801da32:	4b95      	ldr	r3, [pc, #596]	; (801dc88 <tcp_split_unsent_seg+0x274>)
 801da34:	f240 324b 	movw	r2, #843	; 0x34b
 801da38:	4994      	ldr	r1, [pc, #592]	; (801dc8c <tcp_split_unsent_seg+0x278>)
 801da3a:	4895      	ldr	r0, [pc, #596]	; (801dc90 <tcp_split_unsent_seg+0x27c>)
 801da3c:	f003 feee 	bl	802181c <iprintf>

  useg = pcb->unsent;
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801da44:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801da46:	697b      	ldr	r3, [r7, #20]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d102      	bne.n	801da52 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801da4c:	f04f 33ff 	mov.w	r3, #4294967295
 801da50:	e116      	b.n	801dc80 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801da52:	887b      	ldrh	r3, [r7, #2]
 801da54:	2b00      	cmp	r3, #0
 801da56:	d109      	bne.n	801da6c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801da58:	4b8b      	ldr	r3, [pc, #556]	; (801dc88 <tcp_split_unsent_seg+0x274>)
 801da5a:	f240 3253 	movw	r2, #851	; 0x353
 801da5e:	498d      	ldr	r1, [pc, #564]	; (801dc94 <tcp_split_unsent_seg+0x280>)
 801da60:	488b      	ldr	r0, [pc, #556]	; (801dc90 <tcp_split_unsent_seg+0x27c>)
 801da62:	f003 fedb 	bl	802181c <iprintf>
    return ERR_VAL;
 801da66:	f06f 0305 	mvn.w	r3, #5
 801da6a:	e109      	b.n	801dc80 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801da6c:	697b      	ldr	r3, [r7, #20]
 801da6e:	891b      	ldrh	r3, [r3, #8]
 801da70:	887a      	ldrh	r2, [r7, #2]
 801da72:	429a      	cmp	r2, r3
 801da74:	d301      	bcc.n	801da7a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801da76:	2300      	movs	r3, #0
 801da78:	e102      	b.n	801dc80 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801da7e:	887a      	ldrh	r2, [r7, #2]
 801da80:	429a      	cmp	r2, r3
 801da82:	d906      	bls.n	801da92 <tcp_split_unsent_seg+0x7e>
 801da84:	4b80      	ldr	r3, [pc, #512]	; (801dc88 <tcp_split_unsent_seg+0x274>)
 801da86:	f240 325b 	movw	r2, #859	; 0x35b
 801da8a:	4983      	ldr	r1, [pc, #524]	; (801dc98 <tcp_split_unsent_seg+0x284>)
 801da8c:	4880      	ldr	r0, [pc, #512]	; (801dc90 <tcp_split_unsent_seg+0x27c>)
 801da8e:	f003 fec5 	bl	802181c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801da92:	697b      	ldr	r3, [r7, #20]
 801da94:	891b      	ldrh	r3, [r3, #8]
 801da96:	2b00      	cmp	r3, #0
 801da98:	d106      	bne.n	801daa8 <tcp_split_unsent_seg+0x94>
 801da9a:	4b7b      	ldr	r3, [pc, #492]	; (801dc88 <tcp_split_unsent_seg+0x274>)
 801da9c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801daa0:	497e      	ldr	r1, [pc, #504]	; (801dc9c <tcp_split_unsent_seg+0x288>)
 801daa2:	487b      	ldr	r0, [pc, #492]	; (801dc90 <tcp_split_unsent_seg+0x27c>)
 801daa4:	f003 feba 	bl	802181c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801daa8:	697b      	ldr	r3, [r7, #20]
 801daaa:	7a9b      	ldrb	r3, [r3, #10]
 801daac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801daae:	7bfb      	ldrb	r3, [r7, #15]
 801dab0:	009b      	lsls	r3, r3, #2
 801dab2:	b2db      	uxtb	r3, r3
 801dab4:	f003 0304 	and.w	r3, r3, #4
 801dab8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801daba:	697b      	ldr	r3, [r7, #20]
 801dabc:	891a      	ldrh	r2, [r3, #8]
 801dabe:	887b      	ldrh	r3, [r7, #2]
 801dac0:	1ad3      	subs	r3, r2, r3
 801dac2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801dac4:	7bbb      	ldrb	r3, [r7, #14]
 801dac6:	b29a      	uxth	r2, r3
 801dac8:	89bb      	ldrh	r3, [r7, #12]
 801daca:	4413      	add	r3, r2
 801dacc:	b29b      	uxth	r3, r3
 801dace:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dad2:	4619      	mov	r1, r3
 801dad4:	2036      	movs	r0, #54	; 0x36
 801dad6:	f7fb f9c1 	bl	8018e5c <pbuf_alloc>
 801dada:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801dadc:	693b      	ldr	r3, [r7, #16]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	f000 80b7 	beq.w	801dc52 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801dae4:	697b      	ldr	r3, [r7, #20]
 801dae6:	685b      	ldr	r3, [r3, #4]
 801dae8:	891a      	ldrh	r2, [r3, #8]
 801daea:	697b      	ldr	r3, [r7, #20]
 801daec:	891b      	ldrh	r3, [r3, #8]
 801daee:	1ad3      	subs	r3, r2, r3
 801daf0:	b29a      	uxth	r2, r3
 801daf2:	887b      	ldrh	r3, [r7, #2]
 801daf4:	4413      	add	r3, r2
 801daf6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801daf8:	697b      	ldr	r3, [r7, #20]
 801dafa:	6858      	ldr	r0, [r3, #4]
 801dafc:	693b      	ldr	r3, [r7, #16]
 801dafe:	685a      	ldr	r2, [r3, #4]
 801db00:	7bbb      	ldrb	r3, [r7, #14]
 801db02:	18d1      	adds	r1, r2, r3
 801db04:	897b      	ldrh	r3, [r7, #10]
 801db06:	89ba      	ldrh	r2, [r7, #12]
 801db08:	f7fb fe92 	bl	8019830 <pbuf_copy_partial>
 801db0c:	4603      	mov	r3, r0
 801db0e:	461a      	mov	r2, r3
 801db10:	89bb      	ldrh	r3, [r7, #12]
 801db12:	4293      	cmp	r3, r2
 801db14:	f040 809f 	bne.w	801dc56 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801db18:	697b      	ldr	r3, [r7, #20]
 801db1a:	68db      	ldr	r3, [r3, #12]
 801db1c:	899b      	ldrh	r3, [r3, #12]
 801db1e:	b29b      	uxth	r3, r3
 801db20:	4618      	mov	r0, r3
 801db22:	f7f5 ff51 	bl	80139c8 <lwip_htons>
 801db26:	4603      	mov	r3, r0
 801db28:	b2db      	uxtb	r3, r3
 801db2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801db2e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801db30:	2300      	movs	r3, #0
 801db32:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801db34:	7efb      	ldrb	r3, [r7, #27]
 801db36:	f003 0308 	and.w	r3, r3, #8
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d007      	beq.n	801db4e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801db3e:	7efb      	ldrb	r3, [r7, #27]
 801db40:	f023 0308 	bic.w	r3, r3, #8
 801db44:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801db46:	7ebb      	ldrb	r3, [r7, #26]
 801db48:	f043 0308 	orr.w	r3, r3, #8
 801db4c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801db4e:	7efb      	ldrb	r3, [r7, #27]
 801db50:	f003 0301 	and.w	r3, r3, #1
 801db54:	2b00      	cmp	r3, #0
 801db56:	d007      	beq.n	801db68 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801db58:	7efb      	ldrb	r3, [r7, #27]
 801db5a:	f023 0301 	bic.w	r3, r3, #1
 801db5e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801db60:	7ebb      	ldrb	r3, [r7, #26]
 801db62:	f043 0301 	orr.w	r3, r3, #1
 801db66:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801db68:	697b      	ldr	r3, [r7, #20]
 801db6a:	68db      	ldr	r3, [r3, #12]
 801db6c:	685b      	ldr	r3, [r3, #4]
 801db6e:	4618      	mov	r0, r3
 801db70:	f7f5 ff3f 	bl	80139f2 <lwip_htonl>
 801db74:	4602      	mov	r2, r0
 801db76:	887b      	ldrh	r3, [r7, #2]
 801db78:	18d1      	adds	r1, r2, r3
 801db7a:	7eba      	ldrb	r2, [r7, #26]
 801db7c:	7bfb      	ldrb	r3, [r7, #15]
 801db7e:	9300      	str	r3, [sp, #0]
 801db80:	460b      	mov	r3, r1
 801db82:	6939      	ldr	r1, [r7, #16]
 801db84:	6878      	ldr	r0, [r7, #4]
 801db86:	f7ff fea7 	bl	801d8d8 <tcp_create_segment>
 801db8a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801db8c:	69fb      	ldr	r3, [r7, #28]
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d063      	beq.n	801dc5a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801db92:	697b      	ldr	r3, [r7, #20]
 801db94:	685b      	ldr	r3, [r3, #4]
 801db96:	4618      	mov	r0, r3
 801db98:	f7fb fcd2 	bl	8019540 <pbuf_clen>
 801db9c:	4603      	mov	r3, r0
 801db9e:	461a      	mov	r2, r3
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dba6:	1a9b      	subs	r3, r3, r2
 801dba8:	b29a      	uxth	r2, r3
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dbb0:	697b      	ldr	r3, [r7, #20]
 801dbb2:	6858      	ldr	r0, [r3, #4]
 801dbb4:	697b      	ldr	r3, [r7, #20]
 801dbb6:	685b      	ldr	r3, [r3, #4]
 801dbb8:	891a      	ldrh	r2, [r3, #8]
 801dbba:	89bb      	ldrh	r3, [r7, #12]
 801dbbc:	1ad3      	subs	r3, r2, r3
 801dbbe:	b29b      	uxth	r3, r3
 801dbc0:	4619      	mov	r1, r3
 801dbc2:	f7fb faa9 	bl	8019118 <pbuf_realloc>
  useg->len -= remainder;
 801dbc6:	697b      	ldr	r3, [r7, #20]
 801dbc8:	891a      	ldrh	r2, [r3, #8]
 801dbca:	89bb      	ldrh	r3, [r7, #12]
 801dbcc:	1ad3      	subs	r3, r2, r3
 801dbce:	b29a      	uxth	r2, r3
 801dbd0:	697b      	ldr	r3, [r7, #20]
 801dbd2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801dbd4:	697b      	ldr	r3, [r7, #20]
 801dbd6:	68db      	ldr	r3, [r3, #12]
 801dbd8:	899b      	ldrh	r3, [r3, #12]
 801dbda:	b29c      	uxth	r4, r3
 801dbdc:	7efb      	ldrb	r3, [r7, #27]
 801dbde:	b29b      	uxth	r3, r3
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	f7f5 fef1 	bl	80139c8 <lwip_htons>
 801dbe6:	4603      	mov	r3, r0
 801dbe8:	461a      	mov	r2, r3
 801dbea:	697b      	ldr	r3, [r7, #20]
 801dbec:	68db      	ldr	r3, [r3, #12]
 801dbee:	4322      	orrs	r2, r4
 801dbf0:	b292      	uxth	r2, r2
 801dbf2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801dbf4:	697b      	ldr	r3, [r7, #20]
 801dbf6:	685b      	ldr	r3, [r3, #4]
 801dbf8:	4618      	mov	r0, r3
 801dbfa:	f7fb fca1 	bl	8019540 <pbuf_clen>
 801dbfe:	4603      	mov	r3, r0
 801dc00:	461a      	mov	r2, r3
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dc08:	4413      	add	r3, r2
 801dc0a:	b29a      	uxth	r2, r3
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801dc12:	69fb      	ldr	r3, [r7, #28]
 801dc14:	685b      	ldr	r3, [r3, #4]
 801dc16:	4618      	mov	r0, r3
 801dc18:	f7fb fc92 	bl	8019540 <pbuf_clen>
 801dc1c:	4603      	mov	r3, r0
 801dc1e:	461a      	mov	r2, r3
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dc26:	4413      	add	r3, r2
 801dc28:	b29a      	uxth	r2, r3
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801dc30:	697b      	ldr	r3, [r7, #20]
 801dc32:	681a      	ldr	r2, [r3, #0]
 801dc34:	69fb      	ldr	r3, [r7, #28]
 801dc36:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801dc38:	697b      	ldr	r3, [r7, #20]
 801dc3a:	69fa      	ldr	r2, [r7, #28]
 801dc3c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801dc3e:	69fb      	ldr	r3, [r7, #28]
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d103      	bne.n	801dc4e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	2200      	movs	r2, #0
 801dc4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801dc4e:	2300      	movs	r3, #0
 801dc50:	e016      	b.n	801dc80 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801dc52:	bf00      	nop
 801dc54:	e002      	b.n	801dc5c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801dc56:	bf00      	nop
 801dc58:	e000      	b.n	801dc5c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801dc5a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801dc5c:	69fb      	ldr	r3, [r7, #28]
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	d006      	beq.n	801dc70 <tcp_split_unsent_seg+0x25c>
 801dc62:	4b09      	ldr	r3, [pc, #36]	; (801dc88 <tcp_split_unsent_seg+0x274>)
 801dc64:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801dc68:	490d      	ldr	r1, [pc, #52]	; (801dca0 <tcp_split_unsent_seg+0x28c>)
 801dc6a:	4809      	ldr	r0, [pc, #36]	; (801dc90 <tcp_split_unsent_seg+0x27c>)
 801dc6c:	f003 fdd6 	bl	802181c <iprintf>
  if (p != NULL) {
 801dc70:	693b      	ldr	r3, [r7, #16]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d002      	beq.n	801dc7c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801dc76:	6938      	ldr	r0, [r7, #16]
 801dc78:	f7fb fbd4 	bl	8019424 <pbuf_free>
  }

  return ERR_MEM;
 801dc7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801dc80:	4618      	mov	r0, r3
 801dc82:	3724      	adds	r7, #36	; 0x24
 801dc84:	46bd      	mov	sp, r7
 801dc86:	bd90      	pop	{r4, r7, pc}
 801dc88:	08024cf0 	.word	0x08024cf0
 801dc8c:	080250cc 	.word	0x080250cc
 801dc90:	08024d8c 	.word	0x08024d8c
 801dc94:	080250f0 	.word	0x080250f0
 801dc98:	08025114 	.word	0x08025114
 801dc9c:	08025124 	.word	0x08025124
 801dca0:	08025134 	.word	0x08025134

0801dca4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801dca4:	b590      	push	{r4, r7, lr}
 801dca6:	b085      	sub	sp, #20
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d106      	bne.n	801dcc0 <tcp_send_fin+0x1c>
 801dcb2:	4b21      	ldr	r3, [pc, #132]	; (801dd38 <tcp_send_fin+0x94>)
 801dcb4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801dcb8:	4920      	ldr	r1, [pc, #128]	; (801dd3c <tcp_send_fin+0x98>)
 801dcba:	4821      	ldr	r0, [pc, #132]	; (801dd40 <tcp_send_fin+0x9c>)
 801dcbc:	f003 fdae 	bl	802181c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d02e      	beq.n	801dd26 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dccc:	60fb      	str	r3, [r7, #12]
 801dcce:	e002      	b.n	801dcd6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	d1f8      	bne.n	801dcd0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	68db      	ldr	r3, [r3, #12]
 801dce2:	899b      	ldrh	r3, [r3, #12]
 801dce4:	b29b      	uxth	r3, r3
 801dce6:	4618      	mov	r0, r3
 801dce8:	f7f5 fe6e 	bl	80139c8 <lwip_htons>
 801dcec:	4603      	mov	r3, r0
 801dcee:	b2db      	uxtb	r3, r3
 801dcf0:	f003 0307 	and.w	r3, r3, #7
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d116      	bne.n	801dd26 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801dcf8:	68fb      	ldr	r3, [r7, #12]
 801dcfa:	68db      	ldr	r3, [r3, #12]
 801dcfc:	899b      	ldrh	r3, [r3, #12]
 801dcfe:	b29c      	uxth	r4, r3
 801dd00:	2001      	movs	r0, #1
 801dd02:	f7f5 fe61 	bl	80139c8 <lwip_htons>
 801dd06:	4603      	mov	r3, r0
 801dd08:	461a      	mov	r2, r3
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	68db      	ldr	r3, [r3, #12]
 801dd0e:	4322      	orrs	r2, r4
 801dd10:	b292      	uxth	r2, r2
 801dd12:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	8b5b      	ldrh	r3, [r3, #26]
 801dd18:	f043 0320 	orr.w	r3, r3, #32
 801dd1c:	b29a      	uxth	r2, r3
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801dd22:	2300      	movs	r3, #0
 801dd24:	e004      	b.n	801dd30 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801dd26:	2101      	movs	r1, #1
 801dd28:	6878      	ldr	r0, [r7, #4]
 801dd2a:	f000 f80b 	bl	801dd44 <tcp_enqueue_flags>
 801dd2e:	4603      	mov	r3, r0
}
 801dd30:	4618      	mov	r0, r3
 801dd32:	3714      	adds	r7, #20
 801dd34:	46bd      	mov	sp, r7
 801dd36:	bd90      	pop	{r4, r7, pc}
 801dd38:	08024cf0 	.word	0x08024cf0
 801dd3c:	08025140 	.word	0x08025140
 801dd40:	08024d8c 	.word	0x08024d8c

0801dd44 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b08a      	sub	sp, #40	; 0x28
 801dd48:	af02      	add	r7, sp, #8
 801dd4a:	6078      	str	r0, [r7, #4]
 801dd4c:	460b      	mov	r3, r1
 801dd4e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801dd50:	2300      	movs	r3, #0
 801dd52:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801dd54:	2300      	movs	r3, #0
 801dd56:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801dd58:	78fb      	ldrb	r3, [r7, #3]
 801dd5a:	f003 0303 	and.w	r3, r3, #3
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d106      	bne.n	801dd70 <tcp_enqueue_flags+0x2c>
 801dd62:	4b67      	ldr	r3, [pc, #412]	; (801df00 <tcp_enqueue_flags+0x1bc>)
 801dd64:	f240 4211 	movw	r2, #1041	; 0x411
 801dd68:	4966      	ldr	r1, [pc, #408]	; (801df04 <tcp_enqueue_flags+0x1c0>)
 801dd6a:	4867      	ldr	r0, [pc, #412]	; (801df08 <tcp_enqueue_flags+0x1c4>)
 801dd6c:	f003 fd56 	bl	802181c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d106      	bne.n	801dd84 <tcp_enqueue_flags+0x40>
 801dd76:	4b62      	ldr	r3, [pc, #392]	; (801df00 <tcp_enqueue_flags+0x1bc>)
 801dd78:	f240 4213 	movw	r2, #1043	; 0x413
 801dd7c:	4963      	ldr	r1, [pc, #396]	; (801df0c <tcp_enqueue_flags+0x1c8>)
 801dd7e:	4862      	ldr	r0, [pc, #392]	; (801df08 <tcp_enqueue_flags+0x1c4>)
 801dd80:	f003 fd4c 	bl	802181c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801dd84:	78fb      	ldrb	r3, [r7, #3]
 801dd86:	f003 0302 	and.w	r3, r3, #2
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d001      	beq.n	801dd92 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801dd8e:	2301      	movs	r3, #1
 801dd90:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801dd92:	7ffb      	ldrb	r3, [r7, #31]
 801dd94:	009b      	lsls	r3, r3, #2
 801dd96:	b2db      	uxtb	r3, r3
 801dd98:	f003 0304 	and.w	r3, r3, #4
 801dd9c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801dd9e:	7dfb      	ldrb	r3, [r7, #23]
 801dda0:	b29b      	uxth	r3, r3
 801dda2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dda6:	4619      	mov	r1, r3
 801dda8:	2036      	movs	r0, #54	; 0x36
 801ddaa:	f7fb f857 	bl	8018e5c <pbuf_alloc>
 801ddae:	6138      	str	r0, [r7, #16]
 801ddb0:	693b      	ldr	r3, [r7, #16]
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d109      	bne.n	801ddca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	8b5b      	ldrh	r3, [r3, #26]
 801ddba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddbe:	b29a      	uxth	r2, r3
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ddc4:	f04f 33ff 	mov.w	r3, #4294967295
 801ddc8:	e095      	b.n	801def6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ddca:	693b      	ldr	r3, [r7, #16]
 801ddcc:	895a      	ldrh	r2, [r3, #10]
 801ddce:	7dfb      	ldrb	r3, [r7, #23]
 801ddd0:	b29b      	uxth	r3, r3
 801ddd2:	429a      	cmp	r2, r3
 801ddd4:	d206      	bcs.n	801dde4 <tcp_enqueue_flags+0xa0>
 801ddd6:	4b4a      	ldr	r3, [pc, #296]	; (801df00 <tcp_enqueue_flags+0x1bc>)
 801ddd8:	f240 4239 	movw	r2, #1081	; 0x439
 801dddc:	494c      	ldr	r1, [pc, #304]	; (801df10 <tcp_enqueue_flags+0x1cc>)
 801ddde:	484a      	ldr	r0, [pc, #296]	; (801df08 <tcp_enqueue_flags+0x1c4>)
 801dde0:	f003 fd1c 	bl	802181c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801dde8:	78fa      	ldrb	r2, [r7, #3]
 801ddea:	7ffb      	ldrb	r3, [r7, #31]
 801ddec:	9300      	str	r3, [sp, #0]
 801ddee:	460b      	mov	r3, r1
 801ddf0:	6939      	ldr	r1, [r7, #16]
 801ddf2:	6878      	ldr	r0, [r7, #4]
 801ddf4:	f7ff fd70 	bl	801d8d8 <tcp_create_segment>
 801ddf8:	60f8      	str	r0, [r7, #12]
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	d109      	bne.n	801de14 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	8b5b      	ldrh	r3, [r3, #26]
 801de04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de08:	b29a      	uxth	r2, r3
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801de0e:	f04f 33ff 	mov.w	r3, #4294967295
 801de12:	e070      	b.n	801def6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	68db      	ldr	r3, [r3, #12]
 801de18:	f003 0303 	and.w	r3, r3, #3
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d006      	beq.n	801de2e <tcp_enqueue_flags+0xea>
 801de20:	4b37      	ldr	r3, [pc, #220]	; (801df00 <tcp_enqueue_flags+0x1bc>)
 801de22:	f240 4242 	movw	r2, #1090	; 0x442
 801de26:	493b      	ldr	r1, [pc, #236]	; (801df14 <tcp_enqueue_flags+0x1d0>)
 801de28:	4837      	ldr	r0, [pc, #220]	; (801df08 <tcp_enqueue_flags+0x1c4>)
 801de2a:	f003 fcf7 	bl	802181c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	891b      	ldrh	r3, [r3, #8]
 801de32:	2b00      	cmp	r3, #0
 801de34:	d006      	beq.n	801de44 <tcp_enqueue_flags+0x100>
 801de36:	4b32      	ldr	r3, [pc, #200]	; (801df00 <tcp_enqueue_flags+0x1bc>)
 801de38:	f240 4243 	movw	r2, #1091	; 0x443
 801de3c:	4936      	ldr	r1, [pc, #216]	; (801df18 <tcp_enqueue_flags+0x1d4>)
 801de3e:	4832      	ldr	r0, [pc, #200]	; (801df08 <tcp_enqueue_flags+0x1c4>)
 801de40:	f003 fcec 	bl	802181c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d103      	bne.n	801de54 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	68fa      	ldr	r2, [r7, #12]
 801de50:	66da      	str	r2, [r3, #108]	; 0x6c
 801de52:	e00d      	b.n	801de70 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801de58:	61bb      	str	r3, [r7, #24]
 801de5a:	e002      	b.n	801de62 <tcp_enqueue_flags+0x11e>
 801de5c:	69bb      	ldr	r3, [r7, #24]
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	61bb      	str	r3, [r7, #24]
 801de62:	69bb      	ldr	r3, [r7, #24]
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	2b00      	cmp	r3, #0
 801de68:	d1f8      	bne.n	801de5c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801de6a:	69bb      	ldr	r3, [r7, #24]
 801de6c:	68fa      	ldr	r2, [r7, #12]
 801de6e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	2200      	movs	r2, #0
 801de74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801de78:	78fb      	ldrb	r3, [r7, #3]
 801de7a:	f003 0302 	and.w	r3, r3, #2
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d104      	bne.n	801de8c <tcp_enqueue_flags+0x148>
 801de82:	78fb      	ldrb	r3, [r7, #3]
 801de84:	f003 0301 	and.w	r3, r3, #1
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d004      	beq.n	801de96 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801de90:	1c5a      	adds	r2, r3, #1
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801de96:	78fb      	ldrb	r3, [r7, #3]
 801de98:	f003 0301 	and.w	r3, r3, #1
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d006      	beq.n	801deae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	8b5b      	ldrh	r3, [r3, #26]
 801dea4:	f043 0320 	orr.w	r3, r3, #32
 801dea8:	b29a      	uxth	r2, r3
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	685b      	ldr	r3, [r3, #4]
 801deb2:	4618      	mov	r0, r3
 801deb4:	f7fb fb44 	bl	8019540 <pbuf_clen>
 801deb8:	4603      	mov	r3, r0
 801deba:	461a      	mov	r2, r3
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dec2:	4413      	add	r3, r2
 801dec4:	b29a      	uxth	r2, r3
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d00e      	beq.n	801def4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d10a      	bne.n	801def4 <tcp_enqueue_flags+0x1b0>
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d106      	bne.n	801def4 <tcp_enqueue_flags+0x1b0>
 801dee6:	4b06      	ldr	r3, [pc, #24]	; (801df00 <tcp_enqueue_flags+0x1bc>)
 801dee8:	f240 4265 	movw	r2, #1125	; 0x465
 801deec:	490b      	ldr	r1, [pc, #44]	; (801df1c <tcp_enqueue_flags+0x1d8>)
 801deee:	4806      	ldr	r0, [pc, #24]	; (801df08 <tcp_enqueue_flags+0x1c4>)
 801def0:	f003 fc94 	bl	802181c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801def4:	2300      	movs	r3, #0
}
 801def6:	4618      	mov	r0, r3
 801def8:	3720      	adds	r7, #32
 801defa:	46bd      	mov	sp, r7
 801defc:	bd80      	pop	{r7, pc}
 801defe:	bf00      	nop
 801df00:	08024cf0 	.word	0x08024cf0
 801df04:	0802515c 	.word	0x0802515c
 801df08:	08024d8c 	.word	0x08024d8c
 801df0c:	080251b4 	.word	0x080251b4
 801df10:	080251d4 	.word	0x080251d4
 801df14:	08025210 	.word	0x08025210
 801df18:	08025228 	.word	0x08025228
 801df1c:	08025254 	.word	0x08025254

0801df20 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801df20:	b5b0      	push	{r4, r5, r7, lr}
 801df22:	b08a      	sub	sp, #40	; 0x28
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d106      	bne.n	801df3c <tcp_output+0x1c>
 801df2e:	4b9e      	ldr	r3, [pc, #632]	; (801e1a8 <tcp_output+0x288>)
 801df30:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801df34:	499d      	ldr	r1, [pc, #628]	; (801e1ac <tcp_output+0x28c>)
 801df36:	489e      	ldr	r0, [pc, #632]	; (801e1b0 <tcp_output+0x290>)
 801df38:	f003 fc70 	bl	802181c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	7d1b      	ldrb	r3, [r3, #20]
 801df40:	2b01      	cmp	r3, #1
 801df42:	d106      	bne.n	801df52 <tcp_output+0x32>
 801df44:	4b98      	ldr	r3, [pc, #608]	; (801e1a8 <tcp_output+0x288>)
 801df46:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801df4a:	499a      	ldr	r1, [pc, #616]	; (801e1b4 <tcp_output+0x294>)
 801df4c:	4898      	ldr	r0, [pc, #608]	; (801e1b0 <tcp_output+0x290>)
 801df4e:	f003 fc65 	bl	802181c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801df52:	4b99      	ldr	r3, [pc, #612]	; (801e1b8 <tcp_output+0x298>)
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	687a      	ldr	r2, [r7, #4]
 801df58:	429a      	cmp	r2, r3
 801df5a:	d101      	bne.n	801df60 <tcp_output+0x40>
    return ERR_OK;
 801df5c:	2300      	movs	r3, #0
 801df5e:	e1ce      	b.n	801e2fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801df6c:	4293      	cmp	r3, r2
 801df6e:	bf28      	it	cs
 801df70:	4613      	movcs	r3, r2
 801df72:	b29b      	uxth	r3, r3
 801df74:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d10b      	bne.n	801df9a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	8b5b      	ldrh	r3, [r3, #26]
 801df86:	f003 0302 	and.w	r3, r3, #2
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	f000 81aa 	beq.w	801e2e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801df90:	6878      	ldr	r0, [r7, #4]
 801df92:	f000 fdcb 	bl	801eb2c <tcp_send_empty_ack>
 801df96:	4603      	mov	r3, r0
 801df98:	e1b1      	b.n	801e2fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801df9a:	6879      	ldr	r1, [r7, #4]
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	3304      	adds	r3, #4
 801dfa0:	461a      	mov	r2, r3
 801dfa2:	6878      	ldr	r0, [r7, #4]
 801dfa4:	f7ff fc7c 	bl	801d8a0 <tcp_route>
 801dfa8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801dfaa:	697b      	ldr	r3, [r7, #20]
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d102      	bne.n	801dfb6 <tcp_output+0x96>
    return ERR_RTE;
 801dfb0:	f06f 0303 	mvn.w	r3, #3
 801dfb4:	e1a3      	b.n	801e2fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d003      	beq.n	801dfc4 <tcp_output+0xa4>
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d111      	bne.n	801dfe8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801dfc4:	697b      	ldr	r3, [r7, #20]
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d002      	beq.n	801dfd0 <tcp_output+0xb0>
 801dfca:	697b      	ldr	r3, [r7, #20]
 801dfcc:	3304      	adds	r3, #4
 801dfce:	e000      	b.n	801dfd2 <tcp_output+0xb2>
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801dfd4:	693b      	ldr	r3, [r7, #16]
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d102      	bne.n	801dfe0 <tcp_output+0xc0>
      return ERR_RTE;
 801dfda:	f06f 0303 	mvn.w	r3, #3
 801dfde:	e18e      	b.n	801e2fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801dfe0:	693b      	ldr	r3, [r7, #16]
 801dfe2:	681a      	ldr	r2, [r3, #0]
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfea:	68db      	ldr	r3, [r3, #12]
 801dfec:	685b      	ldr	r3, [r3, #4]
 801dfee:	4618      	mov	r0, r3
 801dff0:	f7f5 fcff 	bl	80139f2 <lwip_htonl>
 801dff4:	4602      	mov	r2, r0
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dffa:	1ad3      	subs	r3, r2, r3
 801dffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dffe:	8912      	ldrh	r2, [r2, #8]
 801e000:	4413      	add	r3, r2
 801e002:	69ba      	ldr	r2, [r7, #24]
 801e004:	429a      	cmp	r2, r3
 801e006:	d227      	bcs.n	801e058 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e00e:	461a      	mov	r2, r3
 801e010:	69bb      	ldr	r3, [r7, #24]
 801e012:	4293      	cmp	r3, r2
 801e014:	d114      	bne.n	801e040 <tcp_output+0x120>
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	d110      	bne.n	801e040 <tcp_output+0x120>
 801e01e:	687b      	ldr	r3, [r7, #4]
 801e020:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e024:	2b00      	cmp	r3, #0
 801e026:	d10b      	bne.n	801e040 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	2200      	movs	r2, #0
 801e02c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	2201      	movs	r2, #1
 801e034:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	2200      	movs	r2, #0
 801e03c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	8b5b      	ldrh	r3, [r3, #26]
 801e044:	f003 0302 	and.w	r3, r3, #2
 801e048:	2b00      	cmp	r3, #0
 801e04a:	f000 814d 	beq.w	801e2e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e04e:	6878      	ldr	r0, [r7, #4]
 801e050:	f000 fd6c 	bl	801eb2c <tcp_send_empty_ack>
 801e054:	4603      	mov	r3, r0
 801e056:	e152      	b.n	801e2fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	2200      	movs	r2, #0
 801e05c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e064:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e066:	6a3b      	ldr	r3, [r7, #32]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	f000 811c 	beq.w	801e2a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e06e:	e002      	b.n	801e076 <tcp_output+0x156>
 801e070:	6a3b      	ldr	r3, [r7, #32]
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	623b      	str	r3, [r7, #32]
 801e076:	6a3b      	ldr	r3, [r7, #32]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d1f8      	bne.n	801e070 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e07e:	e112      	b.n	801e2a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e082:	68db      	ldr	r3, [r3, #12]
 801e084:	899b      	ldrh	r3, [r3, #12]
 801e086:	b29b      	uxth	r3, r3
 801e088:	4618      	mov	r0, r3
 801e08a:	f7f5 fc9d 	bl	80139c8 <lwip_htons>
 801e08e:	4603      	mov	r3, r0
 801e090:	b2db      	uxtb	r3, r3
 801e092:	f003 0304 	and.w	r3, r3, #4
 801e096:	2b00      	cmp	r3, #0
 801e098:	d006      	beq.n	801e0a8 <tcp_output+0x188>
 801e09a:	4b43      	ldr	r3, [pc, #268]	; (801e1a8 <tcp_output+0x288>)
 801e09c:	f240 5236 	movw	r2, #1334	; 0x536
 801e0a0:	4946      	ldr	r1, [pc, #280]	; (801e1bc <tcp_output+0x29c>)
 801e0a2:	4843      	ldr	r0, [pc, #268]	; (801e1b0 <tcp_output+0x290>)
 801e0a4:	f003 fbba 	bl	802181c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d01f      	beq.n	801e0f0 <tcp_output+0x1d0>
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	8b5b      	ldrh	r3, [r3, #26]
 801e0b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d119      	bne.n	801e0f0 <tcp_output+0x1d0>
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d00b      	beq.n	801e0dc <tcp_output+0x1bc>
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	d110      	bne.n	801e0f0 <tcp_output+0x1d0>
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0d2:	891a      	ldrh	r2, [r3, #8]
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e0d8:	429a      	cmp	r2, r3
 801e0da:	d209      	bcs.n	801e0f0 <tcp_output+0x1d0>
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d004      	beq.n	801e0f0 <tcp_output+0x1d0>
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e0ec:	2b08      	cmp	r3, #8
 801e0ee:	d901      	bls.n	801e0f4 <tcp_output+0x1d4>
 801e0f0:	2301      	movs	r3, #1
 801e0f2:	e000      	b.n	801e0f6 <tcp_output+0x1d6>
 801e0f4:	2300      	movs	r3, #0
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d106      	bne.n	801e108 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	8b5b      	ldrh	r3, [r3, #26]
 801e0fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e102:	2b00      	cmp	r3, #0
 801e104:	f000 80e4 	beq.w	801e2d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	7d1b      	ldrb	r3, [r3, #20]
 801e10c:	2b02      	cmp	r3, #2
 801e10e:	d00d      	beq.n	801e12c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e112:	68db      	ldr	r3, [r3, #12]
 801e114:	899b      	ldrh	r3, [r3, #12]
 801e116:	b29c      	uxth	r4, r3
 801e118:	2010      	movs	r0, #16
 801e11a:	f7f5 fc55 	bl	80139c8 <lwip_htons>
 801e11e:	4603      	mov	r3, r0
 801e120:	461a      	mov	r2, r3
 801e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e124:	68db      	ldr	r3, [r3, #12]
 801e126:	4322      	orrs	r2, r4
 801e128:	b292      	uxth	r2, r2
 801e12a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e12c:	697a      	ldr	r2, [r7, #20]
 801e12e:	6879      	ldr	r1, [r7, #4]
 801e130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e132:	f000 f909 	bl	801e348 <tcp_output_segment>
 801e136:	4603      	mov	r3, r0
 801e138:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d009      	beq.n	801e156 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	8b5b      	ldrh	r3, [r3, #26]
 801e146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e14a:	b29a      	uxth	r2, r3
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	835a      	strh	r2, [r3, #26]
      return err;
 801e150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e154:	e0d3      	b.n	801e2fe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e158:	681a      	ldr	r2, [r3, #0]
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	7d1b      	ldrb	r3, [r3, #20]
 801e162:	2b02      	cmp	r3, #2
 801e164:	d006      	beq.n	801e174 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	8b5b      	ldrh	r3, [r3, #26]
 801e16a:	f023 0303 	bic.w	r3, r3, #3
 801e16e:	b29a      	uxth	r2, r3
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e176:	68db      	ldr	r3, [r3, #12]
 801e178:	685b      	ldr	r3, [r3, #4]
 801e17a:	4618      	mov	r0, r3
 801e17c:	f7f5 fc39 	bl	80139f2 <lwip_htonl>
 801e180:	4604      	mov	r4, r0
 801e182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e184:	891b      	ldrh	r3, [r3, #8]
 801e186:	461d      	mov	r5, r3
 801e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e18a:	68db      	ldr	r3, [r3, #12]
 801e18c:	899b      	ldrh	r3, [r3, #12]
 801e18e:	b29b      	uxth	r3, r3
 801e190:	4618      	mov	r0, r3
 801e192:	f7f5 fc19 	bl	80139c8 <lwip_htons>
 801e196:	4603      	mov	r3, r0
 801e198:	b2db      	uxtb	r3, r3
 801e19a:	f003 0303 	and.w	r3, r3, #3
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d00e      	beq.n	801e1c0 <tcp_output+0x2a0>
 801e1a2:	2301      	movs	r3, #1
 801e1a4:	e00d      	b.n	801e1c2 <tcp_output+0x2a2>
 801e1a6:	bf00      	nop
 801e1a8:	08024cf0 	.word	0x08024cf0
 801e1ac:	0802527c 	.word	0x0802527c
 801e1b0:	08024d8c 	.word	0x08024d8c
 801e1b4:	08025294 	.word	0x08025294
 801e1b8:	20011f90 	.word	0x20011f90
 801e1bc:	080252bc 	.word	0x080252bc
 801e1c0:	2300      	movs	r3, #0
 801e1c2:	442b      	add	r3, r5
 801e1c4:	4423      	add	r3, r4
 801e1c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e1cc:	68bb      	ldr	r3, [r7, #8]
 801e1ce:	1ad3      	subs	r3, r2, r3
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	da02      	bge.n	801e1da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	68ba      	ldr	r2, [r7, #8]
 801e1d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1dc:	891b      	ldrh	r3, [r3, #8]
 801e1de:	461c      	mov	r4, r3
 801e1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1e2:	68db      	ldr	r3, [r3, #12]
 801e1e4:	899b      	ldrh	r3, [r3, #12]
 801e1e6:	b29b      	uxth	r3, r3
 801e1e8:	4618      	mov	r0, r3
 801e1ea:	f7f5 fbed 	bl	80139c8 <lwip_htons>
 801e1ee:	4603      	mov	r3, r0
 801e1f0:	b2db      	uxtb	r3, r3
 801e1f2:	f003 0303 	and.w	r3, r3, #3
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d001      	beq.n	801e1fe <tcp_output+0x2de>
 801e1fa:	2301      	movs	r3, #1
 801e1fc:	e000      	b.n	801e200 <tcp_output+0x2e0>
 801e1fe:	2300      	movs	r3, #0
 801e200:	4423      	add	r3, r4
 801e202:	2b00      	cmp	r3, #0
 801e204:	d049      	beq.n	801e29a <tcp_output+0x37a>
      seg->next = NULL;
 801e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e208:	2200      	movs	r2, #0
 801e20a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e210:	2b00      	cmp	r3, #0
 801e212:	d105      	bne.n	801e220 <tcp_output+0x300>
        pcb->unacked = seg;
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e218:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e21c:	623b      	str	r3, [r7, #32]
 801e21e:	e03f      	b.n	801e2a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e222:	68db      	ldr	r3, [r3, #12]
 801e224:	685b      	ldr	r3, [r3, #4]
 801e226:	4618      	mov	r0, r3
 801e228:	f7f5 fbe3 	bl	80139f2 <lwip_htonl>
 801e22c:	4604      	mov	r4, r0
 801e22e:	6a3b      	ldr	r3, [r7, #32]
 801e230:	68db      	ldr	r3, [r3, #12]
 801e232:	685b      	ldr	r3, [r3, #4]
 801e234:	4618      	mov	r0, r3
 801e236:	f7f5 fbdc 	bl	80139f2 <lwip_htonl>
 801e23a:	4603      	mov	r3, r0
 801e23c:	1ae3      	subs	r3, r4, r3
 801e23e:	2b00      	cmp	r3, #0
 801e240:	da24      	bge.n	801e28c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	3370      	adds	r3, #112	; 0x70
 801e246:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e248:	e002      	b.n	801e250 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e24a:	69fb      	ldr	r3, [r7, #28]
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e250:	69fb      	ldr	r3, [r7, #28]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	2b00      	cmp	r3, #0
 801e256:	d011      	beq.n	801e27c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e258:	69fb      	ldr	r3, [r7, #28]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	68db      	ldr	r3, [r3, #12]
 801e25e:	685b      	ldr	r3, [r3, #4]
 801e260:	4618      	mov	r0, r3
 801e262:	f7f5 fbc6 	bl	80139f2 <lwip_htonl>
 801e266:	4604      	mov	r4, r0
 801e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e26a:	68db      	ldr	r3, [r3, #12]
 801e26c:	685b      	ldr	r3, [r3, #4]
 801e26e:	4618      	mov	r0, r3
 801e270:	f7f5 fbbf 	bl	80139f2 <lwip_htonl>
 801e274:	4603      	mov	r3, r0
 801e276:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e278:	2b00      	cmp	r3, #0
 801e27a:	dbe6      	blt.n	801e24a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801e27c:	69fb      	ldr	r3, [r7, #28]
 801e27e:	681a      	ldr	r2, [r3, #0]
 801e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e282:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e284:	69fb      	ldr	r3, [r7, #28]
 801e286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e288:	601a      	str	r2, [r3, #0]
 801e28a:	e009      	b.n	801e2a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e28c:	6a3b      	ldr	r3, [r7, #32]
 801e28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e290:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e292:	6a3b      	ldr	r3, [r7, #32]
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	623b      	str	r3, [r7, #32]
 801e298:	e002      	b.n	801e2a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e29a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e29c:	f7fc fc43 	bl	801ab26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d012      	beq.n	801e2d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2ae:	68db      	ldr	r3, [r3, #12]
 801e2b0:	685b      	ldr	r3, [r3, #4]
 801e2b2:	4618      	mov	r0, r3
 801e2b4:	f7f5 fb9d 	bl	80139f2 <lwip_htonl>
 801e2b8:	4602      	mov	r2, r0
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e2be:	1ad3      	subs	r3, r2, r3
 801e2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e2c2:	8912      	ldrh	r2, [r2, #8]
 801e2c4:	4413      	add	r3, r2
  while (seg != NULL &&
 801e2c6:	69ba      	ldr	r2, [r7, #24]
 801e2c8:	429a      	cmp	r2, r3
 801e2ca:	f4bf aed9 	bcs.w	801e080 <tcp_output+0x160>
 801e2ce:	e000      	b.n	801e2d2 <tcp_output+0x3b2>
      break;
 801e2d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d108      	bne.n	801e2ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	2200      	movs	r2, #0
 801e2de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801e2e2:	e004      	b.n	801e2ee <tcp_output+0x3ce>
    goto output_done;
 801e2e4:	bf00      	nop
 801e2e6:	e002      	b.n	801e2ee <tcp_output+0x3ce>
    goto output_done;
 801e2e8:	bf00      	nop
 801e2ea:	e000      	b.n	801e2ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e2ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	8b5b      	ldrh	r3, [r3, #26]
 801e2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e2f6:	b29a      	uxth	r2, r3
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801e2fc:	2300      	movs	r3, #0
}
 801e2fe:	4618      	mov	r0, r3
 801e300:	3728      	adds	r7, #40	; 0x28
 801e302:	46bd      	mov	sp, r7
 801e304:	bdb0      	pop	{r4, r5, r7, pc}
 801e306:	bf00      	nop

0801e308 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e308:	b580      	push	{r7, lr}
 801e30a:	b082      	sub	sp, #8
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	2b00      	cmp	r3, #0
 801e314:	d106      	bne.n	801e324 <tcp_output_segment_busy+0x1c>
 801e316:	4b09      	ldr	r3, [pc, #36]	; (801e33c <tcp_output_segment_busy+0x34>)
 801e318:	f240 529a 	movw	r2, #1434	; 0x59a
 801e31c:	4908      	ldr	r1, [pc, #32]	; (801e340 <tcp_output_segment_busy+0x38>)
 801e31e:	4809      	ldr	r0, [pc, #36]	; (801e344 <tcp_output_segment_busy+0x3c>)
 801e320:	f003 fa7c 	bl	802181c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	685b      	ldr	r3, [r3, #4]
 801e328:	7b9b      	ldrb	r3, [r3, #14]
 801e32a:	2b01      	cmp	r3, #1
 801e32c:	d001      	beq.n	801e332 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e32e:	2301      	movs	r3, #1
 801e330:	e000      	b.n	801e334 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e332:	2300      	movs	r3, #0
}
 801e334:	4618      	mov	r0, r3
 801e336:	3708      	adds	r7, #8
 801e338:	46bd      	mov	sp, r7
 801e33a:	bd80      	pop	{r7, pc}
 801e33c:	08024cf0 	.word	0x08024cf0
 801e340:	080252d4 	.word	0x080252d4
 801e344:	08024d8c 	.word	0x08024d8c

0801e348 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e348:	b5b0      	push	{r4, r5, r7, lr}
 801e34a:	b08c      	sub	sp, #48	; 0x30
 801e34c:	af04      	add	r7, sp, #16
 801e34e:	60f8      	str	r0, [r7, #12]
 801e350:	60b9      	str	r1, [r7, #8]
 801e352:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	2b00      	cmp	r3, #0
 801e358:	d106      	bne.n	801e368 <tcp_output_segment+0x20>
 801e35a:	4b63      	ldr	r3, [pc, #396]	; (801e4e8 <tcp_output_segment+0x1a0>)
 801e35c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e360:	4962      	ldr	r1, [pc, #392]	; (801e4ec <tcp_output_segment+0x1a4>)
 801e362:	4863      	ldr	r0, [pc, #396]	; (801e4f0 <tcp_output_segment+0x1a8>)
 801e364:	f003 fa5a 	bl	802181c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e368:	68bb      	ldr	r3, [r7, #8]
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d106      	bne.n	801e37c <tcp_output_segment+0x34>
 801e36e:	4b5e      	ldr	r3, [pc, #376]	; (801e4e8 <tcp_output_segment+0x1a0>)
 801e370:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e374:	495f      	ldr	r1, [pc, #380]	; (801e4f4 <tcp_output_segment+0x1ac>)
 801e376:	485e      	ldr	r0, [pc, #376]	; (801e4f0 <tcp_output_segment+0x1a8>)
 801e378:	f003 fa50 	bl	802181c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	2b00      	cmp	r3, #0
 801e380:	d106      	bne.n	801e390 <tcp_output_segment+0x48>
 801e382:	4b59      	ldr	r3, [pc, #356]	; (801e4e8 <tcp_output_segment+0x1a0>)
 801e384:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e388:	495b      	ldr	r1, [pc, #364]	; (801e4f8 <tcp_output_segment+0x1b0>)
 801e38a:	4859      	ldr	r0, [pc, #356]	; (801e4f0 <tcp_output_segment+0x1a8>)
 801e38c:	f003 fa46 	bl	802181c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e390:	68f8      	ldr	r0, [r7, #12]
 801e392:	f7ff ffb9 	bl	801e308 <tcp_output_segment_busy>
 801e396:	4603      	mov	r3, r0
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d001      	beq.n	801e3a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e39c:	2300      	movs	r3, #0
 801e39e:	e09f      	b.n	801e4e0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e3a0:	68bb      	ldr	r3, [r7, #8]
 801e3a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	68dc      	ldr	r4, [r3, #12]
 801e3a8:	4610      	mov	r0, r2
 801e3aa:	f7f5 fb22 	bl	80139f2 <lwip_htonl>
 801e3ae:	4603      	mov	r3, r0
 801e3b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e3b2:	68bb      	ldr	r3, [r7, #8]
 801e3b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e3b6:	68fb      	ldr	r3, [r7, #12]
 801e3b8:	68dc      	ldr	r4, [r3, #12]
 801e3ba:	4610      	mov	r0, r2
 801e3bc:	f7f5 fb04 	bl	80139c8 <lwip_htons>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e3c4:	68bb      	ldr	r3, [r7, #8]
 801e3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3c8:	68ba      	ldr	r2, [r7, #8]
 801e3ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e3cc:	441a      	add	r2, r3
 801e3ce:	68bb      	ldr	r3, [r7, #8]
 801e3d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	68db      	ldr	r3, [r3, #12]
 801e3d6:	3314      	adds	r3, #20
 801e3d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e3da:	68fb      	ldr	r3, [r7, #12]
 801e3dc:	7a9b      	ldrb	r3, [r3, #10]
 801e3de:	f003 0301 	and.w	r3, r3, #1
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d015      	beq.n	801e412 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e3e6:	68bb      	ldr	r3, [r7, #8]
 801e3e8:	3304      	adds	r3, #4
 801e3ea:	461a      	mov	r2, r3
 801e3ec:	6879      	ldr	r1, [r7, #4]
 801e3ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 801e3f2:	f7fc fe8f 	bl	801b114 <tcp_eff_send_mss_netif>
 801e3f6:	4603      	mov	r3, r0
 801e3f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e3fa:	8b7b      	ldrh	r3, [r7, #26]
 801e3fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e400:	4618      	mov	r0, r3
 801e402:	f7f5 faf6 	bl	80139f2 <lwip_htonl>
 801e406:	4602      	mov	r2, r0
 801e408:	69fb      	ldr	r3, [r7, #28]
 801e40a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e40c:	69fb      	ldr	r3, [r7, #28]
 801e40e:	3304      	adds	r3, #4
 801e410:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e412:	68bb      	ldr	r3, [r7, #8]
 801e414:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801e418:	2b00      	cmp	r3, #0
 801e41a:	da02      	bge.n	801e422 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e41c:	68bb      	ldr	r3, [r7, #8]
 801e41e:	2200      	movs	r2, #0
 801e420:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801e422:	68bb      	ldr	r3, [r7, #8]
 801e424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e426:	2b00      	cmp	r3, #0
 801e428:	d10c      	bne.n	801e444 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e42a:	4b34      	ldr	r3, [pc, #208]	; (801e4fc <tcp_output_segment+0x1b4>)
 801e42c:	681a      	ldr	r2, [r3, #0]
 801e42e:	68bb      	ldr	r3, [r7, #8]
 801e430:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	68db      	ldr	r3, [r3, #12]
 801e436:	685b      	ldr	r3, [r3, #4]
 801e438:	4618      	mov	r0, r3
 801e43a:	f7f5 fada 	bl	80139f2 <lwip_htonl>
 801e43e:	4602      	mov	r2, r0
 801e440:	68bb      	ldr	r3, [r7, #8]
 801e442:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	68da      	ldr	r2, [r3, #12]
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	685b      	ldr	r3, [r3, #4]
 801e44c:	685b      	ldr	r3, [r3, #4]
 801e44e:	1ad3      	subs	r3, r2, r3
 801e450:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	685b      	ldr	r3, [r3, #4]
 801e456:	8959      	ldrh	r1, [r3, #10]
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	685b      	ldr	r3, [r3, #4]
 801e45c:	8b3a      	ldrh	r2, [r7, #24]
 801e45e:	1a8a      	subs	r2, r1, r2
 801e460:	b292      	uxth	r2, r2
 801e462:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e464:	68fb      	ldr	r3, [r7, #12]
 801e466:	685b      	ldr	r3, [r3, #4]
 801e468:	8919      	ldrh	r1, [r3, #8]
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	685b      	ldr	r3, [r3, #4]
 801e46e:	8b3a      	ldrh	r2, [r7, #24]
 801e470:	1a8a      	subs	r2, r1, r2
 801e472:	b292      	uxth	r2, r2
 801e474:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	685b      	ldr	r3, [r3, #4]
 801e47a:	68fa      	ldr	r2, [r7, #12]
 801e47c:	68d2      	ldr	r2, [r2, #12]
 801e47e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	68db      	ldr	r3, [r3, #12]
 801e484:	2200      	movs	r2, #0
 801e486:	741a      	strb	r2, [r3, #16]
 801e488:	2200      	movs	r2, #0
 801e48a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	68db      	ldr	r3, [r3, #12]
 801e490:	f103 0214 	add.w	r2, r3, #20
 801e494:	68fb      	ldr	r3, [r7, #12]
 801e496:	7a9b      	ldrb	r3, [r3, #10]
 801e498:	009b      	lsls	r3, r3, #2
 801e49a:	f003 0304 	and.w	r3, r3, #4
 801e49e:	4413      	add	r3, r2
 801e4a0:	69fa      	ldr	r2, [r7, #28]
 801e4a2:	429a      	cmp	r2, r3
 801e4a4:	d006      	beq.n	801e4b4 <tcp_output_segment+0x16c>
 801e4a6:	4b10      	ldr	r3, [pc, #64]	; (801e4e8 <tcp_output_segment+0x1a0>)
 801e4a8:	f240 621c 	movw	r2, #1564	; 0x61c
 801e4ac:	4914      	ldr	r1, [pc, #80]	; (801e500 <tcp_output_segment+0x1b8>)
 801e4ae:	4810      	ldr	r0, [pc, #64]	; (801e4f0 <tcp_output_segment+0x1a8>)
 801e4b0:	f003 f9b4 	bl	802181c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	6858      	ldr	r0, [r3, #4]
 801e4b8:	68b9      	ldr	r1, [r7, #8]
 801e4ba:	68bb      	ldr	r3, [r7, #8]
 801e4bc:	1d1c      	adds	r4, r3, #4
 801e4be:	68bb      	ldr	r3, [r7, #8]
 801e4c0:	7add      	ldrb	r5, [r3, #11]
 801e4c2:	68bb      	ldr	r3, [r7, #8]
 801e4c4:	7a9b      	ldrb	r3, [r3, #10]
 801e4c6:	687a      	ldr	r2, [r7, #4]
 801e4c8:	9202      	str	r2, [sp, #8]
 801e4ca:	2206      	movs	r2, #6
 801e4cc:	9201      	str	r2, [sp, #4]
 801e4ce:	9300      	str	r3, [sp, #0]
 801e4d0:	462b      	mov	r3, r5
 801e4d2:	4622      	mov	r2, r4
 801e4d4:	f7f8 fce2 	bl	8016e9c <ip4_output_if>
 801e4d8:	4603      	mov	r3, r0
 801e4da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e4dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	3720      	adds	r7, #32
 801e4e4:	46bd      	mov	sp, r7
 801e4e6:	bdb0      	pop	{r4, r5, r7, pc}
 801e4e8:	08024cf0 	.word	0x08024cf0
 801e4ec:	080252fc 	.word	0x080252fc
 801e4f0:	08024d8c 	.word	0x08024d8c
 801e4f4:	0802531c 	.word	0x0802531c
 801e4f8:	0802533c 	.word	0x0802533c
 801e4fc:	20011f80 	.word	0x20011f80
 801e500:	08025360 	.word	0x08025360

0801e504 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801e504:	b5b0      	push	{r4, r5, r7, lr}
 801e506:	b084      	sub	sp, #16
 801e508:	af00      	add	r7, sp, #0
 801e50a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d106      	bne.n	801e520 <tcp_rexmit_rto_prepare+0x1c>
 801e512:	4b31      	ldr	r3, [pc, #196]	; (801e5d8 <tcp_rexmit_rto_prepare+0xd4>)
 801e514:	f240 6263 	movw	r2, #1635	; 0x663
 801e518:	4930      	ldr	r1, [pc, #192]	; (801e5dc <tcp_rexmit_rto_prepare+0xd8>)
 801e51a:	4831      	ldr	r0, [pc, #196]	; (801e5e0 <tcp_rexmit_rto_prepare+0xdc>)
 801e51c:	f003 f97e 	bl	802181c <iprintf>

  if (pcb->unacked == NULL) {
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e524:	2b00      	cmp	r3, #0
 801e526:	d102      	bne.n	801e52e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801e528:	f06f 0305 	mvn.w	r3, #5
 801e52c:	e050      	b.n	801e5d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e532:	60fb      	str	r3, [r7, #12]
 801e534:	e00b      	b.n	801e54e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801e536:	68f8      	ldr	r0, [r7, #12]
 801e538:	f7ff fee6 	bl	801e308 <tcp_output_segment_busy>
 801e53c:	4603      	mov	r3, r0
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d002      	beq.n	801e548 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801e542:	f06f 0305 	mvn.w	r3, #5
 801e546:	e043      	b.n	801e5d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	60fb      	str	r3, [r7, #12]
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	2b00      	cmp	r3, #0
 801e554:	d1ef      	bne.n	801e536 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801e556:	68f8      	ldr	r0, [r7, #12]
 801e558:	f7ff fed6 	bl	801e308 <tcp_output_segment_busy>
 801e55c:	4603      	mov	r3, r0
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d002      	beq.n	801e568 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801e562:	f06f 0305 	mvn.w	r3, #5
 801e566:	e033      	b.n	801e5d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	2200      	movs	r2, #0
 801e57c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	8b5b      	ldrh	r3, [r3, #26]
 801e582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e586:	b29a      	uxth	r2, r3
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	68db      	ldr	r3, [r3, #12]
 801e590:	685b      	ldr	r3, [r3, #4]
 801e592:	4618      	mov	r0, r3
 801e594:	f7f5 fa2d 	bl	80139f2 <lwip_htonl>
 801e598:	4604      	mov	r4, r0
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	891b      	ldrh	r3, [r3, #8]
 801e59e:	461d      	mov	r5, r3
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	68db      	ldr	r3, [r3, #12]
 801e5a4:	899b      	ldrh	r3, [r3, #12]
 801e5a6:	b29b      	uxth	r3, r3
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f7f5 fa0d 	bl	80139c8 <lwip_htons>
 801e5ae:	4603      	mov	r3, r0
 801e5b0:	b2db      	uxtb	r3, r3
 801e5b2:	f003 0303 	and.w	r3, r3, #3
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d001      	beq.n	801e5be <tcp_rexmit_rto_prepare+0xba>
 801e5ba:	2301      	movs	r3, #1
 801e5bc:	e000      	b.n	801e5c0 <tcp_rexmit_rto_prepare+0xbc>
 801e5be:	2300      	movs	r3, #0
 801e5c0:	442b      	add	r3, r5
 801e5c2:	18e2      	adds	r2, r4, r3
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	2200      	movs	r2, #0
 801e5cc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801e5ce:	2300      	movs	r3, #0
}
 801e5d0:	4618      	mov	r0, r3
 801e5d2:	3710      	adds	r7, #16
 801e5d4:	46bd      	mov	sp, r7
 801e5d6:	bdb0      	pop	{r4, r5, r7, pc}
 801e5d8:	08024cf0 	.word	0x08024cf0
 801e5dc:	08025374 	.word	0x08025374
 801e5e0:	08024d8c 	.word	0x08024d8c

0801e5e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	b082      	sub	sp, #8
 801e5e8:	af00      	add	r7, sp, #0
 801e5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d106      	bne.n	801e600 <tcp_rexmit_rto_commit+0x1c>
 801e5f2:	4b0d      	ldr	r3, [pc, #52]	; (801e628 <tcp_rexmit_rto_commit+0x44>)
 801e5f4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e5f8:	490c      	ldr	r1, [pc, #48]	; (801e62c <tcp_rexmit_rto_commit+0x48>)
 801e5fa:	480d      	ldr	r0, [pc, #52]	; (801e630 <tcp_rexmit_rto_commit+0x4c>)
 801e5fc:	f003 f90e 	bl	802181c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e606:	2bff      	cmp	r3, #255	; 0xff
 801e608:	d007      	beq.n	801e61a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e610:	3301      	adds	r3, #1
 801e612:	b2da      	uxtb	r2, r3
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801e61a:	6878      	ldr	r0, [r7, #4]
 801e61c:	f7ff fc80 	bl	801df20 <tcp_output>
}
 801e620:	bf00      	nop
 801e622:	3708      	adds	r7, #8
 801e624:	46bd      	mov	sp, r7
 801e626:	bd80      	pop	{r7, pc}
 801e628:	08024cf0 	.word	0x08024cf0
 801e62c:	08025398 	.word	0x08025398
 801e630:	08024d8c 	.word	0x08024d8c

0801e634 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801e634:	b580      	push	{r7, lr}
 801e636:	b082      	sub	sp, #8
 801e638:	af00      	add	r7, sp, #0
 801e63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d106      	bne.n	801e650 <tcp_rexmit_rto+0x1c>
 801e642:	4b0a      	ldr	r3, [pc, #40]	; (801e66c <tcp_rexmit_rto+0x38>)
 801e644:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e648:	4909      	ldr	r1, [pc, #36]	; (801e670 <tcp_rexmit_rto+0x3c>)
 801e64a:	480a      	ldr	r0, [pc, #40]	; (801e674 <tcp_rexmit_rto+0x40>)
 801e64c:	f003 f8e6 	bl	802181c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e650:	6878      	ldr	r0, [r7, #4]
 801e652:	f7ff ff57 	bl	801e504 <tcp_rexmit_rto_prepare>
 801e656:	4603      	mov	r3, r0
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d102      	bne.n	801e662 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801e65c:	6878      	ldr	r0, [r7, #4]
 801e65e:	f7ff ffc1 	bl	801e5e4 <tcp_rexmit_rto_commit>
  }
}
 801e662:	bf00      	nop
 801e664:	3708      	adds	r7, #8
 801e666:	46bd      	mov	sp, r7
 801e668:	bd80      	pop	{r7, pc}
 801e66a:	bf00      	nop
 801e66c:	08024cf0 	.word	0x08024cf0
 801e670:	080253bc 	.word	0x080253bc
 801e674:	08024d8c 	.word	0x08024d8c

0801e678 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801e678:	b590      	push	{r4, r7, lr}
 801e67a:	b085      	sub	sp, #20
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	2b00      	cmp	r3, #0
 801e684:	d106      	bne.n	801e694 <tcp_rexmit+0x1c>
 801e686:	4b2f      	ldr	r3, [pc, #188]	; (801e744 <tcp_rexmit+0xcc>)
 801e688:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801e68c:	492e      	ldr	r1, [pc, #184]	; (801e748 <tcp_rexmit+0xd0>)
 801e68e:	482f      	ldr	r0, [pc, #188]	; (801e74c <tcp_rexmit+0xd4>)
 801e690:	f003 f8c4 	bl	802181c <iprintf>

  if (pcb->unacked == NULL) {
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d102      	bne.n	801e6a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801e69c:	f06f 0305 	mvn.w	r3, #5
 801e6a0:	e04c      	b.n	801e73c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e6a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801e6a8:	68b8      	ldr	r0, [r7, #8]
 801e6aa:	f7ff fe2d 	bl	801e308 <tcp_output_segment_busy>
 801e6ae:	4603      	mov	r3, r0
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d002      	beq.n	801e6ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801e6b4:	f06f 0305 	mvn.w	r3, #5
 801e6b8:	e040      	b.n	801e73c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801e6ba:	68bb      	ldr	r3, [r7, #8]
 801e6bc:	681a      	ldr	r2, [r3, #0]
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	336c      	adds	r3, #108	; 0x6c
 801e6c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e6c8:	e002      	b.n	801e6d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	681b      	ldr	r3, [r3, #0]
 801e6ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	681b      	ldr	r3, [r3, #0]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d011      	beq.n	801e6fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	68db      	ldr	r3, [r3, #12]
 801e6de:	685b      	ldr	r3, [r3, #4]
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	f7f5 f986 	bl	80139f2 <lwip_htonl>
 801e6e6:	4604      	mov	r4, r0
 801e6e8:	68bb      	ldr	r3, [r7, #8]
 801e6ea:	68db      	ldr	r3, [r3, #12]
 801e6ec:	685b      	ldr	r3, [r3, #4]
 801e6ee:	4618      	mov	r0, r3
 801e6f0:	f7f5 f97f 	bl	80139f2 <lwip_htonl>
 801e6f4:	4603      	mov	r3, r0
 801e6f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	dbe6      	blt.n	801e6ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801e6fc:	68fb      	ldr	r3, [r7, #12]
 801e6fe:	681a      	ldr	r2, [r3, #0]
 801e700:	68bb      	ldr	r3, [r7, #8]
 801e702:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801e704:	68fb      	ldr	r3, [r7, #12]
 801e706:	68ba      	ldr	r2, [r7, #8]
 801e708:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801e70a:	68bb      	ldr	r3, [r7, #8]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d103      	bne.n	801e71a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	2200      	movs	r2, #0
 801e716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e720:	2bff      	cmp	r3, #255	; 0xff
 801e722:	d007      	beq.n	801e734 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e72a:	3301      	adds	r3, #1
 801e72c:	b2da      	uxtb	r2, r3
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	2200      	movs	r2, #0
 801e738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801e73a:	2300      	movs	r3, #0
}
 801e73c:	4618      	mov	r0, r3
 801e73e:	3714      	adds	r7, #20
 801e740:	46bd      	mov	sp, r7
 801e742:	bd90      	pop	{r4, r7, pc}
 801e744:	08024cf0 	.word	0x08024cf0
 801e748:	080253d8 	.word	0x080253d8
 801e74c:	08024d8c 	.word	0x08024d8c

0801e750 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801e750:	b580      	push	{r7, lr}
 801e752:	b082      	sub	sp, #8
 801e754:	af00      	add	r7, sp, #0
 801e756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d106      	bne.n	801e76c <tcp_rexmit_fast+0x1c>
 801e75e:	4b2a      	ldr	r3, [pc, #168]	; (801e808 <tcp_rexmit_fast+0xb8>)
 801e760:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e764:	4929      	ldr	r1, [pc, #164]	; (801e80c <tcp_rexmit_fast+0xbc>)
 801e766:	482a      	ldr	r0, [pc, #168]	; (801e810 <tcp_rexmit_fast+0xc0>)
 801e768:	f003 f858 	bl	802181c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e770:	2b00      	cmp	r3, #0
 801e772:	d045      	beq.n	801e800 <tcp_rexmit_fast+0xb0>
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	8b5b      	ldrh	r3, [r3, #26]
 801e778:	f003 0304 	and.w	r3, r3, #4
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d13f      	bne.n	801e800 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e780:	6878      	ldr	r0, [r7, #4]
 801e782:	f7ff ff79 	bl	801e678 <tcp_rexmit>
 801e786:	4603      	mov	r3, r0
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d139      	bne.n	801e800 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801e798:	4293      	cmp	r3, r2
 801e79a:	bf28      	it	cs
 801e79c:	4613      	movcs	r3, r2
 801e79e:	b29b      	uxth	r3, r3
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	da00      	bge.n	801e7a6 <tcp_rexmit_fast+0x56>
 801e7a4:	3301      	adds	r3, #1
 801e7a6:	105b      	asrs	r3, r3, #1
 801e7a8:	b29a      	uxth	r2, r3
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801e7b6:	461a      	mov	r2, r3
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e7bc:	005b      	lsls	r3, r3, #1
 801e7be:	429a      	cmp	r2, r3
 801e7c0:	d206      	bcs.n	801e7d0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e7c6:	005b      	lsls	r3, r3, #1
 801e7c8:	b29a      	uxth	r2, r3
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e7da:	4619      	mov	r1, r3
 801e7dc:	0049      	lsls	r1, r1, #1
 801e7de:	440b      	add	r3, r1
 801e7e0:	b29b      	uxth	r3, r3
 801e7e2:	4413      	add	r3, r2
 801e7e4:	b29a      	uxth	r2, r3
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	8b5b      	ldrh	r3, [r3, #26]
 801e7f0:	f043 0304 	orr.w	r3, r3, #4
 801e7f4:	b29a      	uxth	r2, r3
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801e7fa:	687b      	ldr	r3, [r7, #4]
 801e7fc:	2200      	movs	r2, #0
 801e7fe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801e800:	bf00      	nop
 801e802:	3708      	adds	r7, #8
 801e804:	46bd      	mov	sp, r7
 801e806:	bd80      	pop	{r7, pc}
 801e808:	08024cf0 	.word	0x08024cf0
 801e80c:	080253f0 	.word	0x080253f0
 801e810:	08024d8c 	.word	0x08024d8c

0801e814 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b086      	sub	sp, #24
 801e818:	af00      	add	r7, sp, #0
 801e81a:	60f8      	str	r0, [r7, #12]
 801e81c:	607b      	str	r3, [r7, #4]
 801e81e:	460b      	mov	r3, r1
 801e820:	817b      	strh	r3, [r7, #10]
 801e822:	4613      	mov	r3, r2
 801e824:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e826:	897a      	ldrh	r2, [r7, #10]
 801e828:	893b      	ldrh	r3, [r7, #8]
 801e82a:	4413      	add	r3, r2
 801e82c:	b29b      	uxth	r3, r3
 801e82e:	3314      	adds	r3, #20
 801e830:	b29b      	uxth	r3, r3
 801e832:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e836:	4619      	mov	r1, r3
 801e838:	2022      	movs	r0, #34	; 0x22
 801e83a:	f7fa fb0f 	bl	8018e5c <pbuf_alloc>
 801e83e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801e840:	697b      	ldr	r3, [r7, #20]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d04d      	beq.n	801e8e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e846:	897b      	ldrh	r3, [r7, #10]
 801e848:	3313      	adds	r3, #19
 801e84a:	697a      	ldr	r2, [r7, #20]
 801e84c:	8952      	ldrh	r2, [r2, #10]
 801e84e:	4293      	cmp	r3, r2
 801e850:	db06      	blt.n	801e860 <tcp_output_alloc_header_common+0x4c>
 801e852:	4b26      	ldr	r3, [pc, #152]	; (801e8ec <tcp_output_alloc_header_common+0xd8>)
 801e854:	f240 7223 	movw	r2, #1827	; 0x723
 801e858:	4925      	ldr	r1, [pc, #148]	; (801e8f0 <tcp_output_alloc_header_common+0xdc>)
 801e85a:	4826      	ldr	r0, [pc, #152]	; (801e8f4 <tcp_output_alloc_header_common+0xe0>)
 801e85c:	f002 ffde 	bl	802181c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801e860:	697b      	ldr	r3, [r7, #20]
 801e862:	685b      	ldr	r3, [r3, #4]
 801e864:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801e866:	8c3b      	ldrh	r3, [r7, #32]
 801e868:	4618      	mov	r0, r3
 801e86a:	f7f5 f8ad 	bl	80139c8 <lwip_htons>
 801e86e:	4603      	mov	r3, r0
 801e870:	461a      	mov	r2, r3
 801e872:	693b      	ldr	r3, [r7, #16]
 801e874:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e878:	4618      	mov	r0, r3
 801e87a:	f7f5 f8a5 	bl	80139c8 <lwip_htons>
 801e87e:	4603      	mov	r3, r0
 801e880:	461a      	mov	r2, r3
 801e882:	693b      	ldr	r3, [r7, #16]
 801e884:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801e886:	693b      	ldr	r3, [r7, #16]
 801e888:	687a      	ldr	r2, [r7, #4]
 801e88a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801e88c:	68f8      	ldr	r0, [r7, #12]
 801e88e:	f7f5 f8b0 	bl	80139f2 <lwip_htonl>
 801e892:	4602      	mov	r2, r0
 801e894:	693b      	ldr	r3, [r7, #16]
 801e896:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e898:	897b      	ldrh	r3, [r7, #10]
 801e89a:	089b      	lsrs	r3, r3, #2
 801e89c:	b29b      	uxth	r3, r3
 801e89e:	3305      	adds	r3, #5
 801e8a0:	b29b      	uxth	r3, r3
 801e8a2:	031b      	lsls	r3, r3, #12
 801e8a4:	b29a      	uxth	r2, r3
 801e8a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e8aa:	b29b      	uxth	r3, r3
 801e8ac:	4313      	orrs	r3, r2
 801e8ae:	b29b      	uxth	r3, r3
 801e8b0:	4618      	mov	r0, r3
 801e8b2:	f7f5 f889 	bl	80139c8 <lwip_htons>
 801e8b6:	4603      	mov	r3, r0
 801e8b8:	461a      	mov	r2, r3
 801e8ba:	693b      	ldr	r3, [r7, #16]
 801e8bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e8be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e8c0:	4618      	mov	r0, r3
 801e8c2:	f7f5 f881 	bl	80139c8 <lwip_htons>
 801e8c6:	4603      	mov	r3, r0
 801e8c8:	461a      	mov	r2, r3
 801e8ca:	693b      	ldr	r3, [r7, #16]
 801e8cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801e8ce:	693b      	ldr	r3, [r7, #16]
 801e8d0:	2200      	movs	r2, #0
 801e8d2:	741a      	strb	r2, [r3, #16]
 801e8d4:	2200      	movs	r2, #0
 801e8d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801e8d8:	693b      	ldr	r3, [r7, #16]
 801e8da:	2200      	movs	r2, #0
 801e8dc:	749a      	strb	r2, [r3, #18]
 801e8de:	2200      	movs	r2, #0
 801e8e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801e8e2:	697b      	ldr	r3, [r7, #20]
}
 801e8e4:	4618      	mov	r0, r3
 801e8e6:	3718      	adds	r7, #24
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	bd80      	pop	{r7, pc}
 801e8ec:	08024cf0 	.word	0x08024cf0
 801e8f0:	08025410 	.word	0x08025410
 801e8f4:	08024d8c 	.word	0x08024d8c

0801e8f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801e8f8:	b5b0      	push	{r4, r5, r7, lr}
 801e8fa:	b08a      	sub	sp, #40	; 0x28
 801e8fc:	af04      	add	r7, sp, #16
 801e8fe:	60f8      	str	r0, [r7, #12]
 801e900:	607b      	str	r3, [r7, #4]
 801e902:	460b      	mov	r3, r1
 801e904:	817b      	strh	r3, [r7, #10]
 801e906:	4613      	mov	r3, r2
 801e908:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d106      	bne.n	801e91e <tcp_output_alloc_header+0x26>
 801e910:	4b15      	ldr	r3, [pc, #84]	; (801e968 <tcp_output_alloc_header+0x70>)
 801e912:	f240 7242 	movw	r2, #1858	; 0x742
 801e916:	4915      	ldr	r1, [pc, #84]	; (801e96c <tcp_output_alloc_header+0x74>)
 801e918:	4815      	ldr	r0, [pc, #84]	; (801e970 <tcp_output_alloc_header+0x78>)
 801e91a:	f002 ff7f 	bl	802181c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e91e:	68fb      	ldr	r3, [r7, #12]
 801e920:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	8adb      	ldrh	r3, [r3, #22]
 801e926:	68fa      	ldr	r2, [r7, #12]
 801e928:	8b12      	ldrh	r2, [r2, #24]
 801e92a:	68f9      	ldr	r1, [r7, #12]
 801e92c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801e92e:	893d      	ldrh	r5, [r7, #8]
 801e930:	897c      	ldrh	r4, [r7, #10]
 801e932:	9103      	str	r1, [sp, #12]
 801e934:	2110      	movs	r1, #16
 801e936:	9102      	str	r1, [sp, #8]
 801e938:	9201      	str	r2, [sp, #4]
 801e93a:	9300      	str	r3, [sp, #0]
 801e93c:	687b      	ldr	r3, [r7, #4]
 801e93e:	462a      	mov	r2, r5
 801e940:	4621      	mov	r1, r4
 801e942:	f7ff ff67 	bl	801e814 <tcp_output_alloc_header_common>
 801e946:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e948:	697b      	ldr	r3, [r7, #20]
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d006      	beq.n	801e95c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e94e:	68fb      	ldr	r3, [r7, #12]
 801e950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e952:	68fa      	ldr	r2, [r7, #12]
 801e954:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e956:	441a      	add	r2, r3
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801e95c:	697b      	ldr	r3, [r7, #20]
}
 801e95e:	4618      	mov	r0, r3
 801e960:	3718      	adds	r7, #24
 801e962:	46bd      	mov	sp, r7
 801e964:	bdb0      	pop	{r4, r5, r7, pc}
 801e966:	bf00      	nop
 801e968:	08024cf0 	.word	0x08024cf0
 801e96c:	08025440 	.word	0x08025440
 801e970:	08024d8c 	.word	0x08024d8c

0801e974 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801e974:	b580      	push	{r7, lr}
 801e976:	b088      	sub	sp, #32
 801e978:	af00      	add	r7, sp, #0
 801e97a:	60f8      	str	r0, [r7, #12]
 801e97c:	60b9      	str	r1, [r7, #8]
 801e97e:	4611      	mov	r1, r2
 801e980:	461a      	mov	r2, r3
 801e982:	460b      	mov	r3, r1
 801e984:	71fb      	strb	r3, [r7, #7]
 801e986:	4613      	mov	r3, r2
 801e988:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801e98a:	2300      	movs	r3, #0
 801e98c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801e98e:	68bb      	ldr	r3, [r7, #8]
 801e990:	2b00      	cmp	r3, #0
 801e992:	d106      	bne.n	801e9a2 <tcp_output_fill_options+0x2e>
 801e994:	4b13      	ldr	r3, [pc, #76]	; (801e9e4 <tcp_output_fill_options+0x70>)
 801e996:	f240 7256 	movw	r2, #1878	; 0x756
 801e99a:	4913      	ldr	r1, [pc, #76]	; (801e9e8 <tcp_output_fill_options+0x74>)
 801e99c:	4813      	ldr	r0, [pc, #76]	; (801e9ec <tcp_output_fill_options+0x78>)
 801e99e:	f002 ff3d 	bl	802181c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801e9a2:	68bb      	ldr	r3, [r7, #8]
 801e9a4:	685b      	ldr	r3, [r3, #4]
 801e9a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801e9a8:	69bb      	ldr	r3, [r7, #24]
 801e9aa:	3314      	adds	r3, #20
 801e9ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801e9ae:	69bb      	ldr	r3, [r7, #24]
 801e9b0:	f103 0214 	add.w	r2, r3, #20
 801e9b4:	8bfb      	ldrh	r3, [r7, #30]
 801e9b6:	009b      	lsls	r3, r3, #2
 801e9b8:	4619      	mov	r1, r3
 801e9ba:	79fb      	ldrb	r3, [r7, #7]
 801e9bc:	009b      	lsls	r3, r3, #2
 801e9be:	f003 0304 	and.w	r3, r3, #4
 801e9c2:	440b      	add	r3, r1
 801e9c4:	4413      	add	r3, r2
 801e9c6:	697a      	ldr	r2, [r7, #20]
 801e9c8:	429a      	cmp	r2, r3
 801e9ca:	d006      	beq.n	801e9da <tcp_output_fill_options+0x66>
 801e9cc:	4b05      	ldr	r3, [pc, #20]	; (801e9e4 <tcp_output_fill_options+0x70>)
 801e9ce:	f240 7275 	movw	r2, #1909	; 0x775
 801e9d2:	4907      	ldr	r1, [pc, #28]	; (801e9f0 <tcp_output_fill_options+0x7c>)
 801e9d4:	4805      	ldr	r0, [pc, #20]	; (801e9ec <tcp_output_fill_options+0x78>)
 801e9d6:	f002 ff21 	bl	802181c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801e9da:	bf00      	nop
 801e9dc:	3720      	adds	r7, #32
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	bd80      	pop	{r7, pc}
 801e9e2:	bf00      	nop
 801e9e4:	08024cf0 	.word	0x08024cf0
 801e9e8:	08025468 	.word	0x08025468
 801e9ec:	08024d8c 	.word	0x08024d8c
 801e9f0:	08025360 	.word	0x08025360

0801e9f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b08a      	sub	sp, #40	; 0x28
 801e9f8:	af04      	add	r7, sp, #16
 801e9fa:	60f8      	str	r0, [r7, #12]
 801e9fc:	60b9      	str	r1, [r7, #8]
 801e9fe:	607a      	str	r2, [r7, #4]
 801ea00:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ea02:	68bb      	ldr	r3, [r7, #8]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d106      	bne.n	801ea16 <tcp_output_control_segment+0x22>
 801ea08:	4b1c      	ldr	r3, [pc, #112]	; (801ea7c <tcp_output_control_segment+0x88>)
 801ea0a:	f240 7287 	movw	r2, #1927	; 0x787
 801ea0e:	491c      	ldr	r1, [pc, #112]	; (801ea80 <tcp_output_control_segment+0x8c>)
 801ea10:	481c      	ldr	r0, [pc, #112]	; (801ea84 <tcp_output_control_segment+0x90>)
 801ea12:	f002 ff03 	bl	802181c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ea16:	683a      	ldr	r2, [r7, #0]
 801ea18:	6879      	ldr	r1, [r7, #4]
 801ea1a:	68f8      	ldr	r0, [r7, #12]
 801ea1c:	f7fe ff40 	bl	801d8a0 <tcp_route>
 801ea20:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ea22:	693b      	ldr	r3, [r7, #16]
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d102      	bne.n	801ea2e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ea28:	23fc      	movs	r3, #252	; 0xfc
 801ea2a:	75fb      	strb	r3, [r7, #23]
 801ea2c:	e01c      	b.n	801ea68 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d006      	beq.n	801ea42 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	7adb      	ldrb	r3, [r3, #11]
 801ea38:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	7a9b      	ldrb	r3, [r3, #10]
 801ea3e:	757b      	strb	r3, [r7, #21]
 801ea40:	e003      	b.n	801ea4a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ea42:	23ff      	movs	r3, #255	; 0xff
 801ea44:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ea46:	2300      	movs	r3, #0
 801ea48:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ea4a:	7dba      	ldrb	r2, [r7, #22]
 801ea4c:	693b      	ldr	r3, [r7, #16]
 801ea4e:	9302      	str	r3, [sp, #8]
 801ea50:	2306      	movs	r3, #6
 801ea52:	9301      	str	r3, [sp, #4]
 801ea54:	7d7b      	ldrb	r3, [r7, #21]
 801ea56:	9300      	str	r3, [sp, #0]
 801ea58:	4613      	mov	r3, r2
 801ea5a:	683a      	ldr	r2, [r7, #0]
 801ea5c:	6879      	ldr	r1, [r7, #4]
 801ea5e:	68b8      	ldr	r0, [r7, #8]
 801ea60:	f7f8 fa1c 	bl	8016e9c <ip4_output_if>
 801ea64:	4603      	mov	r3, r0
 801ea66:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ea68:	68b8      	ldr	r0, [r7, #8]
 801ea6a:	f7fa fcdb 	bl	8019424 <pbuf_free>
  return err;
 801ea6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ea72:	4618      	mov	r0, r3
 801ea74:	3718      	adds	r7, #24
 801ea76:	46bd      	mov	sp, r7
 801ea78:	bd80      	pop	{r7, pc}
 801ea7a:	bf00      	nop
 801ea7c:	08024cf0 	.word	0x08024cf0
 801ea80:	08025490 	.word	0x08025490
 801ea84:	08024d8c 	.word	0x08024d8c

0801ea88 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ea88:	b590      	push	{r4, r7, lr}
 801ea8a:	b08b      	sub	sp, #44	; 0x2c
 801ea8c:	af04      	add	r7, sp, #16
 801ea8e:	60f8      	str	r0, [r7, #12]
 801ea90:	60b9      	str	r1, [r7, #8]
 801ea92:	607a      	str	r2, [r7, #4]
 801ea94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ea96:	683b      	ldr	r3, [r7, #0]
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d106      	bne.n	801eaaa <tcp_rst+0x22>
 801ea9c:	4b1f      	ldr	r3, [pc, #124]	; (801eb1c <tcp_rst+0x94>)
 801ea9e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801eaa2:	491f      	ldr	r1, [pc, #124]	; (801eb20 <tcp_rst+0x98>)
 801eaa4:	481f      	ldr	r0, [pc, #124]	; (801eb24 <tcp_rst+0x9c>)
 801eaa6:	f002 feb9 	bl	802181c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d106      	bne.n	801eabe <tcp_rst+0x36>
 801eab0:	4b1a      	ldr	r3, [pc, #104]	; (801eb1c <tcp_rst+0x94>)
 801eab2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801eab6:	491c      	ldr	r1, [pc, #112]	; (801eb28 <tcp_rst+0xa0>)
 801eab8:	481a      	ldr	r0, [pc, #104]	; (801eb24 <tcp_rst+0x9c>)
 801eaba:	f002 feaf 	bl	802181c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801eabe:	2300      	movs	r3, #0
 801eac0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801eac2:	f246 0308 	movw	r3, #24584	; 0x6008
 801eac6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801eac8:	7dfb      	ldrb	r3, [r7, #23]
 801eaca:	b29c      	uxth	r4, r3
 801eacc:	68b8      	ldr	r0, [r7, #8]
 801eace:	f7f4 ff90 	bl	80139f2 <lwip_htonl>
 801ead2:	4602      	mov	r2, r0
 801ead4:	8abb      	ldrh	r3, [r7, #20]
 801ead6:	9303      	str	r3, [sp, #12]
 801ead8:	2314      	movs	r3, #20
 801eada:	9302      	str	r3, [sp, #8]
 801eadc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801eade:	9301      	str	r3, [sp, #4]
 801eae0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801eae2:	9300      	str	r3, [sp, #0]
 801eae4:	4613      	mov	r3, r2
 801eae6:	2200      	movs	r2, #0
 801eae8:	4621      	mov	r1, r4
 801eaea:	6878      	ldr	r0, [r7, #4]
 801eaec:	f7ff fe92 	bl	801e814 <tcp_output_alloc_header_common>
 801eaf0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801eaf2:	693b      	ldr	r3, [r7, #16]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d00c      	beq.n	801eb12 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801eaf8:	7dfb      	ldrb	r3, [r7, #23]
 801eafa:	2200      	movs	r2, #0
 801eafc:	6939      	ldr	r1, [r7, #16]
 801eafe:	68f8      	ldr	r0, [r7, #12]
 801eb00:	f7ff ff38 	bl	801e974 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801eb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb06:	683a      	ldr	r2, [r7, #0]
 801eb08:	6939      	ldr	r1, [r7, #16]
 801eb0a:	68f8      	ldr	r0, [r7, #12]
 801eb0c:	f7ff ff72 	bl	801e9f4 <tcp_output_control_segment>
 801eb10:	e000      	b.n	801eb14 <tcp_rst+0x8c>
    return;
 801eb12:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801eb14:	371c      	adds	r7, #28
 801eb16:	46bd      	mov	sp, r7
 801eb18:	bd90      	pop	{r4, r7, pc}
 801eb1a:	bf00      	nop
 801eb1c:	08024cf0 	.word	0x08024cf0
 801eb20:	080254bc 	.word	0x080254bc
 801eb24:	08024d8c 	.word	0x08024d8c
 801eb28:	080254d8 	.word	0x080254d8

0801eb2c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801eb2c:	b590      	push	{r4, r7, lr}
 801eb2e:	b087      	sub	sp, #28
 801eb30:	af00      	add	r7, sp, #0
 801eb32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801eb34:	2300      	movs	r3, #0
 801eb36:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801eb38:	2300      	movs	r3, #0
 801eb3a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d106      	bne.n	801eb50 <tcp_send_empty_ack+0x24>
 801eb42:	4b28      	ldr	r3, [pc, #160]	; (801ebe4 <tcp_send_empty_ack+0xb8>)
 801eb44:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801eb48:	4927      	ldr	r1, [pc, #156]	; (801ebe8 <tcp_send_empty_ack+0xbc>)
 801eb4a:	4828      	ldr	r0, [pc, #160]	; (801ebec <tcp_send_empty_ack+0xc0>)
 801eb4c:	f002 fe66 	bl	802181c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801eb50:	7dfb      	ldrb	r3, [r7, #23]
 801eb52:	009b      	lsls	r3, r3, #2
 801eb54:	b2db      	uxtb	r3, r3
 801eb56:	f003 0304 	and.w	r3, r3, #4
 801eb5a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801eb5c:	7d7b      	ldrb	r3, [r7, #21]
 801eb5e:	b29c      	uxth	r4, r3
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eb64:	4618      	mov	r0, r3
 801eb66:	f7f4 ff44 	bl	80139f2 <lwip_htonl>
 801eb6a:	4603      	mov	r3, r0
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	4621      	mov	r1, r4
 801eb70:	6878      	ldr	r0, [r7, #4]
 801eb72:	f7ff fec1 	bl	801e8f8 <tcp_output_alloc_header>
 801eb76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801eb78:	693b      	ldr	r3, [r7, #16]
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d109      	bne.n	801eb92 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	8b5b      	ldrh	r3, [r3, #26]
 801eb82:	f043 0303 	orr.w	r3, r3, #3
 801eb86:	b29a      	uxth	r2, r3
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801eb8c:	f06f 0301 	mvn.w	r3, #1
 801eb90:	e023      	b.n	801ebda <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801eb92:	7dbb      	ldrb	r3, [r7, #22]
 801eb94:	7dfa      	ldrb	r2, [r7, #23]
 801eb96:	6939      	ldr	r1, [r7, #16]
 801eb98:	6878      	ldr	r0, [r7, #4]
 801eb9a:	f7ff feeb 	bl	801e974 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801eb9e:	687a      	ldr	r2, [r7, #4]
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	3304      	adds	r3, #4
 801eba4:	6939      	ldr	r1, [r7, #16]
 801eba6:	6878      	ldr	r0, [r7, #4]
 801eba8:	f7ff ff24 	bl	801e9f4 <tcp_output_control_segment>
 801ebac:	4603      	mov	r3, r0
 801ebae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801ebb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d007      	beq.n	801ebc8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	8b5b      	ldrh	r3, [r3, #26]
 801ebbc:	f043 0303 	orr.w	r3, r3, #3
 801ebc0:	b29a      	uxth	r2, r3
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	835a      	strh	r2, [r3, #26]
 801ebc6:	e006      	b.n	801ebd6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	8b5b      	ldrh	r3, [r3, #26]
 801ebcc:	f023 0303 	bic.w	r3, r3, #3
 801ebd0:	b29a      	uxth	r2, r3
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801ebd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ebda:	4618      	mov	r0, r3
 801ebdc:	371c      	adds	r7, #28
 801ebde:	46bd      	mov	sp, r7
 801ebe0:	bd90      	pop	{r4, r7, pc}
 801ebe2:	bf00      	nop
 801ebe4:	08024cf0 	.word	0x08024cf0
 801ebe8:	080254f4 	.word	0x080254f4
 801ebec:	08024d8c 	.word	0x08024d8c

0801ebf0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ebf0:	b590      	push	{r4, r7, lr}
 801ebf2:	b087      	sub	sp, #28
 801ebf4:	af00      	add	r7, sp, #0
 801ebf6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ebf8:	2300      	movs	r3, #0
 801ebfa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d106      	bne.n	801ec10 <tcp_keepalive+0x20>
 801ec02:	4b18      	ldr	r3, [pc, #96]	; (801ec64 <tcp_keepalive+0x74>)
 801ec04:	f640 0224 	movw	r2, #2084	; 0x824
 801ec08:	4917      	ldr	r1, [pc, #92]	; (801ec68 <tcp_keepalive+0x78>)
 801ec0a:	4818      	ldr	r0, [pc, #96]	; (801ec6c <tcp_keepalive+0x7c>)
 801ec0c:	f002 fe06 	bl	802181c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801ec10:	7dfb      	ldrb	r3, [r7, #23]
 801ec12:	b29c      	uxth	r4, r3
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec18:	3b01      	subs	r3, #1
 801ec1a:	4618      	mov	r0, r3
 801ec1c:	f7f4 fee9 	bl	80139f2 <lwip_htonl>
 801ec20:	4603      	mov	r3, r0
 801ec22:	2200      	movs	r2, #0
 801ec24:	4621      	mov	r1, r4
 801ec26:	6878      	ldr	r0, [r7, #4]
 801ec28:	f7ff fe66 	bl	801e8f8 <tcp_output_alloc_header>
 801ec2c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ec2e:	693b      	ldr	r3, [r7, #16]
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	d102      	bne.n	801ec3a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801ec34:	f04f 33ff 	mov.w	r3, #4294967295
 801ec38:	e010      	b.n	801ec5c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ec3a:	7dfb      	ldrb	r3, [r7, #23]
 801ec3c:	2200      	movs	r2, #0
 801ec3e:	6939      	ldr	r1, [r7, #16]
 801ec40:	6878      	ldr	r0, [r7, #4]
 801ec42:	f7ff fe97 	bl	801e974 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ec46:	687a      	ldr	r2, [r7, #4]
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	3304      	adds	r3, #4
 801ec4c:	6939      	ldr	r1, [r7, #16]
 801ec4e:	6878      	ldr	r0, [r7, #4]
 801ec50:	f7ff fed0 	bl	801e9f4 <tcp_output_control_segment>
 801ec54:	4603      	mov	r3, r0
 801ec56:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ec58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ec5c:	4618      	mov	r0, r3
 801ec5e:	371c      	adds	r7, #28
 801ec60:	46bd      	mov	sp, r7
 801ec62:	bd90      	pop	{r4, r7, pc}
 801ec64:	08024cf0 	.word	0x08024cf0
 801ec68:	08025514 	.word	0x08025514
 801ec6c:	08024d8c 	.word	0x08024d8c

0801ec70 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801ec70:	b590      	push	{r4, r7, lr}
 801ec72:	b08b      	sub	sp, #44	; 0x2c
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ec78:	2300      	movs	r3, #0
 801ec7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	d106      	bne.n	801ec92 <tcp_zero_window_probe+0x22>
 801ec84:	4b4c      	ldr	r3, [pc, #304]	; (801edb8 <tcp_zero_window_probe+0x148>)
 801ec86:	f640 024f 	movw	r2, #2127	; 0x84f
 801ec8a:	494c      	ldr	r1, [pc, #304]	; (801edbc <tcp_zero_window_probe+0x14c>)
 801ec8c:	484c      	ldr	r0, [pc, #304]	; (801edc0 <tcp_zero_window_probe+0x150>)
 801ec8e:	f002 fdc5 	bl	802181c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec96:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801ec98:	6a3b      	ldr	r3, [r7, #32]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d101      	bne.n	801eca2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801ec9e:	2300      	movs	r3, #0
 801eca0:	e086      	b.n	801edb0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801eca8:	2bff      	cmp	r3, #255	; 0xff
 801ecaa:	d007      	beq.n	801ecbc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801ecb2:	3301      	adds	r3, #1
 801ecb4:	b2da      	uxtb	r2, r3
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801ecbc:	6a3b      	ldr	r3, [r7, #32]
 801ecbe:	68db      	ldr	r3, [r3, #12]
 801ecc0:	899b      	ldrh	r3, [r3, #12]
 801ecc2:	b29b      	uxth	r3, r3
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	f7f4 fe7f 	bl	80139c8 <lwip_htons>
 801ecca:	4603      	mov	r3, r0
 801eccc:	b2db      	uxtb	r3, r3
 801ecce:	f003 0301 	and.w	r3, r3, #1
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d005      	beq.n	801ece2 <tcp_zero_window_probe+0x72>
 801ecd6:	6a3b      	ldr	r3, [r7, #32]
 801ecd8:	891b      	ldrh	r3, [r3, #8]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d101      	bne.n	801ece2 <tcp_zero_window_probe+0x72>
 801ecde:	2301      	movs	r3, #1
 801ece0:	e000      	b.n	801ece4 <tcp_zero_window_probe+0x74>
 801ece2:	2300      	movs	r3, #0
 801ece4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ece6:	7ffb      	ldrb	r3, [r7, #31]
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	bf0c      	ite	eq
 801ecec:	2301      	moveq	r3, #1
 801ecee:	2300      	movne	r3, #0
 801ecf0:	b2db      	uxtb	r3, r3
 801ecf2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ecf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ecf8:	b299      	uxth	r1, r3
 801ecfa:	6a3b      	ldr	r3, [r7, #32]
 801ecfc:	68db      	ldr	r3, [r3, #12]
 801ecfe:	685b      	ldr	r3, [r3, #4]
 801ed00:	8bba      	ldrh	r2, [r7, #28]
 801ed02:	6878      	ldr	r0, [r7, #4]
 801ed04:	f7ff fdf8 	bl	801e8f8 <tcp_output_alloc_header>
 801ed08:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801ed0a:	69bb      	ldr	r3, [r7, #24]
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	d102      	bne.n	801ed16 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ed10:	f04f 33ff 	mov.w	r3, #4294967295
 801ed14:	e04c      	b.n	801edb0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ed16:	69bb      	ldr	r3, [r7, #24]
 801ed18:	685b      	ldr	r3, [r3, #4]
 801ed1a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801ed1c:	7ffb      	ldrb	r3, [r7, #31]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d011      	beq.n	801ed46 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801ed22:	697b      	ldr	r3, [r7, #20]
 801ed24:	899b      	ldrh	r3, [r3, #12]
 801ed26:	b29b      	uxth	r3, r3
 801ed28:	b21b      	sxth	r3, r3
 801ed2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ed2e:	b21c      	sxth	r4, r3
 801ed30:	2011      	movs	r0, #17
 801ed32:	f7f4 fe49 	bl	80139c8 <lwip_htons>
 801ed36:	4603      	mov	r3, r0
 801ed38:	b21b      	sxth	r3, r3
 801ed3a:	4323      	orrs	r3, r4
 801ed3c:	b21b      	sxth	r3, r3
 801ed3e:	b29a      	uxth	r2, r3
 801ed40:	697b      	ldr	r3, [r7, #20]
 801ed42:	819a      	strh	r2, [r3, #12]
 801ed44:	e010      	b.n	801ed68 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801ed46:	69bb      	ldr	r3, [r7, #24]
 801ed48:	685b      	ldr	r3, [r3, #4]
 801ed4a:	3314      	adds	r3, #20
 801ed4c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ed4e:	6a3b      	ldr	r3, [r7, #32]
 801ed50:	6858      	ldr	r0, [r3, #4]
 801ed52:	6a3b      	ldr	r3, [r7, #32]
 801ed54:	685b      	ldr	r3, [r3, #4]
 801ed56:	891a      	ldrh	r2, [r3, #8]
 801ed58:	6a3b      	ldr	r3, [r7, #32]
 801ed5a:	891b      	ldrh	r3, [r3, #8]
 801ed5c:	1ad3      	subs	r3, r2, r3
 801ed5e:	b29b      	uxth	r3, r3
 801ed60:	2201      	movs	r2, #1
 801ed62:	6939      	ldr	r1, [r7, #16]
 801ed64:	f7fa fd64 	bl	8019830 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801ed68:	6a3b      	ldr	r3, [r7, #32]
 801ed6a:	68db      	ldr	r3, [r3, #12]
 801ed6c:	685b      	ldr	r3, [r3, #4]
 801ed6e:	4618      	mov	r0, r3
 801ed70:	f7f4 fe3f 	bl	80139f2 <lwip_htonl>
 801ed74:	4603      	mov	r3, r0
 801ed76:	3301      	adds	r3, #1
 801ed78:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ed7e:	68fb      	ldr	r3, [r7, #12]
 801ed80:	1ad3      	subs	r3, r2, r3
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	da02      	bge.n	801ed8c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	68fa      	ldr	r2, [r7, #12]
 801ed8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ed8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ed90:	2200      	movs	r2, #0
 801ed92:	69b9      	ldr	r1, [r7, #24]
 801ed94:	6878      	ldr	r0, [r7, #4]
 801ed96:	f7ff fded 	bl	801e974 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ed9a:	687a      	ldr	r2, [r7, #4]
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	3304      	adds	r3, #4
 801eda0:	69b9      	ldr	r1, [r7, #24]
 801eda2:	6878      	ldr	r0, [r7, #4]
 801eda4:	f7ff fe26 	bl	801e9f4 <tcp_output_control_segment>
 801eda8:	4603      	mov	r3, r0
 801edaa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801edac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801edb0:	4618      	mov	r0, r3
 801edb2:	372c      	adds	r7, #44	; 0x2c
 801edb4:	46bd      	mov	sp, r7
 801edb6:	bd90      	pop	{r4, r7, pc}
 801edb8:	08024cf0 	.word	0x08024cf0
 801edbc:	08025530 	.word	0x08025530
 801edc0:	08024d8c 	.word	0x08024d8c

0801edc4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801edc4:	b580      	push	{r7, lr}
 801edc6:	b084      	sub	sp, #16
 801edc8:	af00      	add	r7, sp, #0
 801edca:	6078      	str	r0, [r7, #4]
 801edcc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801edce:	f000 fb01 	bl	801f3d4 <sys_timeouts_sleeptime>
 801edd2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801edd4:	68fb      	ldr	r3, [r7, #12]
 801edd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edda:	d10b      	bne.n	801edf4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801eddc:	4813      	ldr	r0, [pc, #76]	; (801ee2c <tcpip_timeouts_mbox_fetch+0x68>)
 801edde:	f7fa fe72 	bl	8019ac6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801ede2:	2200      	movs	r2, #0
 801ede4:	6839      	ldr	r1, [r7, #0]
 801ede6:	6878      	ldr	r0, [r7, #4]
 801ede8:	f7fa fdfa 	bl	80199e0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801edec:	480f      	ldr	r0, [pc, #60]	; (801ee2c <tcpip_timeouts_mbox_fetch+0x68>)
 801edee:	f7fa fe5b 	bl	8019aa8 <sys_mutex_lock>
    return;
 801edf2:	e018      	b.n	801ee26 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801edf4:	68fb      	ldr	r3, [r7, #12]
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d102      	bne.n	801ee00 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801edfa:	f000 fab1 	bl	801f360 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801edfe:	e7e6      	b.n	801edce <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801ee00:	480a      	ldr	r0, [pc, #40]	; (801ee2c <tcpip_timeouts_mbox_fetch+0x68>)
 801ee02:	f7fa fe60 	bl	8019ac6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801ee06:	68fa      	ldr	r2, [r7, #12]
 801ee08:	6839      	ldr	r1, [r7, #0]
 801ee0a:	6878      	ldr	r0, [r7, #4]
 801ee0c:	f7fa fde8 	bl	80199e0 <sys_arch_mbox_fetch>
 801ee10:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801ee12:	4806      	ldr	r0, [pc, #24]	; (801ee2c <tcpip_timeouts_mbox_fetch+0x68>)
 801ee14:	f7fa fe48 	bl	8019aa8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801ee18:	68bb      	ldr	r3, [r7, #8]
 801ee1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee1e:	d102      	bne.n	801ee26 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801ee20:	f000 fa9e 	bl	801f360 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801ee24:	e7d3      	b.n	801edce <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801ee26:	3710      	adds	r7, #16
 801ee28:	46bd      	mov	sp, r7
 801ee2a:	bd80      	pop	{r7, pc}
 801ee2c:	20011f94 	.word	0x20011f94

0801ee30 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801ee30:	b580      	push	{r7, lr}
 801ee32:	b084      	sub	sp, #16
 801ee34:	af00      	add	r7, sp, #0
 801ee36:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801ee38:	4810      	ldr	r0, [pc, #64]	; (801ee7c <tcpip_thread+0x4c>)
 801ee3a:	f7fa fe35 	bl	8019aa8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801ee3e:	4b10      	ldr	r3, [pc, #64]	; (801ee80 <tcpip_thread+0x50>)
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d005      	beq.n	801ee52 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801ee46:	4b0e      	ldr	r3, [pc, #56]	; (801ee80 <tcpip_thread+0x50>)
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	4a0e      	ldr	r2, [pc, #56]	; (801ee84 <tcpip_thread+0x54>)
 801ee4c:	6812      	ldr	r2, [r2, #0]
 801ee4e:	4610      	mov	r0, r2
 801ee50:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801ee52:	f107 030c 	add.w	r3, r7, #12
 801ee56:	4619      	mov	r1, r3
 801ee58:	480b      	ldr	r0, [pc, #44]	; (801ee88 <tcpip_thread+0x58>)
 801ee5a:	f7ff ffb3 	bl	801edc4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d106      	bne.n	801ee72 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801ee64:	4b09      	ldr	r3, [pc, #36]	; (801ee8c <tcpip_thread+0x5c>)
 801ee66:	2291      	movs	r2, #145	; 0x91
 801ee68:	4909      	ldr	r1, [pc, #36]	; (801ee90 <tcpip_thread+0x60>)
 801ee6a:	480a      	ldr	r0, [pc, #40]	; (801ee94 <tcpip_thread+0x64>)
 801ee6c:	f002 fcd6 	bl	802181c <iprintf>
      continue;
 801ee70:	e003      	b.n	801ee7a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	4618      	mov	r0, r3
 801ee76:	f000 f80f 	bl	801ee98 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801ee7a:	e7ea      	b.n	801ee52 <tcpip_thread+0x22>
 801ee7c:	20011f94 	.word	0x20011f94
 801ee80:	200090e0 	.word	0x200090e0
 801ee84:	200090e4 	.word	0x200090e4
 801ee88:	200090e8 	.word	0x200090e8
 801ee8c:	08025554 	.word	0x08025554
 801ee90:	080255cc 	.word	0x080255cc
 801ee94:	080255ec 	.word	0x080255ec

0801ee98 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801ee98:	b580      	push	{r7, lr}
 801ee9a:	b082      	sub	sp, #8
 801ee9c:	af00      	add	r7, sp, #0
 801ee9e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	781b      	ldrb	r3, [r3, #0]
 801eea4:	2b02      	cmp	r3, #2
 801eea6:	d026      	beq.n	801eef6 <tcpip_thread_handle_msg+0x5e>
 801eea8:	2b02      	cmp	r3, #2
 801eeaa:	dc2b      	bgt.n	801ef04 <tcpip_thread_handle_msg+0x6c>
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d002      	beq.n	801eeb6 <tcpip_thread_handle_msg+0x1e>
 801eeb0:	2b01      	cmp	r3, #1
 801eeb2:	d015      	beq.n	801eee0 <tcpip_thread_handle_msg+0x48>
 801eeb4:	e026      	b.n	801ef04 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	68db      	ldr	r3, [r3, #12]
 801eeba:	687a      	ldr	r2, [r7, #4]
 801eebc:	6850      	ldr	r0, [r2, #4]
 801eebe:	687a      	ldr	r2, [r7, #4]
 801eec0:	6892      	ldr	r2, [r2, #8]
 801eec2:	4611      	mov	r1, r2
 801eec4:	4798      	blx	r3
 801eec6:	4603      	mov	r3, r0
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d004      	beq.n	801eed6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	685b      	ldr	r3, [r3, #4]
 801eed0:	4618      	mov	r0, r3
 801eed2:	f7fa faa7 	bl	8019424 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801eed6:	6879      	ldr	r1, [r7, #4]
 801eed8:	2009      	movs	r0, #9
 801eeda:	f7f9 fbf3 	bl	80186c4 <memp_free>
      break;
 801eede:	e018      	b.n	801ef12 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	685b      	ldr	r3, [r3, #4]
 801eee4:	687a      	ldr	r2, [r7, #4]
 801eee6:	6892      	ldr	r2, [r2, #8]
 801eee8:	4610      	mov	r0, r2
 801eeea:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801eeec:	6879      	ldr	r1, [r7, #4]
 801eeee:	2008      	movs	r0, #8
 801eef0:	f7f9 fbe8 	bl	80186c4 <memp_free>
      break;
 801eef4:	e00d      	b.n	801ef12 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	685b      	ldr	r3, [r3, #4]
 801eefa:	687a      	ldr	r2, [r7, #4]
 801eefc:	6892      	ldr	r2, [r2, #8]
 801eefe:	4610      	mov	r0, r2
 801ef00:	4798      	blx	r3
      break;
 801ef02:	e006      	b.n	801ef12 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801ef04:	4b05      	ldr	r3, [pc, #20]	; (801ef1c <tcpip_thread_handle_msg+0x84>)
 801ef06:	22cf      	movs	r2, #207	; 0xcf
 801ef08:	4905      	ldr	r1, [pc, #20]	; (801ef20 <tcpip_thread_handle_msg+0x88>)
 801ef0a:	4806      	ldr	r0, [pc, #24]	; (801ef24 <tcpip_thread_handle_msg+0x8c>)
 801ef0c:	f002 fc86 	bl	802181c <iprintf>
      break;
 801ef10:	bf00      	nop
  }
}
 801ef12:	bf00      	nop
 801ef14:	3708      	adds	r7, #8
 801ef16:	46bd      	mov	sp, r7
 801ef18:	bd80      	pop	{r7, pc}
 801ef1a:	bf00      	nop
 801ef1c:	08025554 	.word	0x08025554
 801ef20:	080255cc 	.word	0x080255cc
 801ef24:	080255ec 	.word	0x080255ec

0801ef28 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801ef28:	b580      	push	{r7, lr}
 801ef2a:	b086      	sub	sp, #24
 801ef2c:	af00      	add	r7, sp, #0
 801ef2e:	60f8      	str	r0, [r7, #12]
 801ef30:	60b9      	str	r1, [r7, #8]
 801ef32:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801ef34:	481a      	ldr	r0, [pc, #104]	; (801efa0 <tcpip_inpkt+0x78>)
 801ef36:	f7fa fd84 	bl	8019a42 <sys_mbox_valid>
 801ef3a:	4603      	mov	r3, r0
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d105      	bne.n	801ef4c <tcpip_inpkt+0x24>
 801ef40:	4b18      	ldr	r3, [pc, #96]	; (801efa4 <tcpip_inpkt+0x7c>)
 801ef42:	22fc      	movs	r2, #252	; 0xfc
 801ef44:	4918      	ldr	r1, [pc, #96]	; (801efa8 <tcpip_inpkt+0x80>)
 801ef46:	4819      	ldr	r0, [pc, #100]	; (801efac <tcpip_inpkt+0x84>)
 801ef48:	f002 fc68 	bl	802181c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801ef4c:	2009      	movs	r0, #9
 801ef4e:	f7f9 fb67 	bl	8018620 <memp_malloc>
 801ef52:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801ef54:	697b      	ldr	r3, [r7, #20]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d102      	bne.n	801ef60 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801ef5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ef5e:	e01a      	b.n	801ef96 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801ef60:	697b      	ldr	r3, [r7, #20]
 801ef62:	2200      	movs	r2, #0
 801ef64:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801ef66:	697b      	ldr	r3, [r7, #20]
 801ef68:	68fa      	ldr	r2, [r7, #12]
 801ef6a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801ef6c:	697b      	ldr	r3, [r7, #20]
 801ef6e:	68ba      	ldr	r2, [r7, #8]
 801ef70:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801ef72:	697b      	ldr	r3, [r7, #20]
 801ef74:	687a      	ldr	r2, [r7, #4]
 801ef76:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801ef78:	6979      	ldr	r1, [r7, #20]
 801ef7a:	4809      	ldr	r0, [pc, #36]	; (801efa0 <tcpip_inpkt+0x78>)
 801ef7c:	f7fa fd16 	bl	80199ac <sys_mbox_trypost>
 801ef80:	4603      	mov	r3, r0
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d006      	beq.n	801ef94 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801ef86:	6979      	ldr	r1, [r7, #20]
 801ef88:	2009      	movs	r0, #9
 801ef8a:	f7f9 fb9b 	bl	80186c4 <memp_free>
    return ERR_MEM;
 801ef8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ef92:	e000      	b.n	801ef96 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801ef94:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801ef96:	4618      	mov	r0, r3
 801ef98:	3718      	adds	r7, #24
 801ef9a:	46bd      	mov	sp, r7
 801ef9c:	bd80      	pop	{r7, pc}
 801ef9e:	bf00      	nop
 801efa0:	200090e8 	.word	0x200090e8
 801efa4:	08025554 	.word	0x08025554
 801efa8:	08025614 	.word	0x08025614
 801efac:	080255ec 	.word	0x080255ec

0801efb0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801efb0:	b580      	push	{r7, lr}
 801efb2:	b082      	sub	sp, #8
 801efb4:	af00      	add	r7, sp, #0
 801efb6:	6078      	str	r0, [r7, #4]
 801efb8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801efba:	683b      	ldr	r3, [r7, #0]
 801efbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801efc0:	f003 0318 	and.w	r3, r3, #24
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d006      	beq.n	801efd6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801efc8:	4a08      	ldr	r2, [pc, #32]	; (801efec <tcpip_input+0x3c>)
 801efca:	6839      	ldr	r1, [r7, #0]
 801efcc:	6878      	ldr	r0, [r7, #4]
 801efce:	f7ff ffab 	bl	801ef28 <tcpip_inpkt>
 801efd2:	4603      	mov	r3, r0
 801efd4:	e005      	b.n	801efe2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801efd6:	4a06      	ldr	r2, [pc, #24]	; (801eff0 <tcpip_input+0x40>)
 801efd8:	6839      	ldr	r1, [r7, #0]
 801efda:	6878      	ldr	r0, [r7, #4]
 801efdc:	f7ff ffa4 	bl	801ef28 <tcpip_inpkt>
 801efe0:	4603      	mov	r3, r0
}
 801efe2:	4618      	mov	r0, r3
 801efe4:	3708      	adds	r7, #8
 801efe6:	46bd      	mov	sp, r7
 801efe8:	bd80      	pop	{r7, pc}
 801efea:	bf00      	nop
 801efec:	080165ed 	.word	0x080165ed
 801eff0:	08016c19 	.word	0x08016c19

0801eff4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801eff4:	b580      	push	{r7, lr}
 801eff6:	b084      	sub	sp, #16
 801eff8:	af00      	add	r7, sp, #0
 801effa:	6078      	str	r0, [r7, #4]
 801effc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801effe:	4819      	ldr	r0, [pc, #100]	; (801f064 <tcpip_try_callback+0x70>)
 801f000:	f7fa fd1f 	bl	8019a42 <sys_mbox_valid>
 801f004:	4603      	mov	r3, r0
 801f006:	2b00      	cmp	r3, #0
 801f008:	d106      	bne.n	801f018 <tcpip_try_callback+0x24>
 801f00a:	4b17      	ldr	r3, [pc, #92]	; (801f068 <tcpip_try_callback+0x74>)
 801f00c:	f240 125d 	movw	r2, #349	; 0x15d
 801f010:	4916      	ldr	r1, [pc, #88]	; (801f06c <tcpip_try_callback+0x78>)
 801f012:	4817      	ldr	r0, [pc, #92]	; (801f070 <tcpip_try_callback+0x7c>)
 801f014:	f002 fc02 	bl	802181c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801f018:	2008      	movs	r0, #8
 801f01a:	f7f9 fb01 	bl	8018620 <memp_malloc>
 801f01e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801f020:	68fb      	ldr	r3, [r7, #12]
 801f022:	2b00      	cmp	r3, #0
 801f024:	d102      	bne.n	801f02c <tcpip_try_callback+0x38>
    return ERR_MEM;
 801f026:	f04f 33ff 	mov.w	r3, #4294967295
 801f02a:	e017      	b.n	801f05c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	2201      	movs	r2, #1
 801f030:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801f032:	68fb      	ldr	r3, [r7, #12]
 801f034:	687a      	ldr	r2, [r7, #4]
 801f036:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801f038:	68fb      	ldr	r3, [r7, #12]
 801f03a:	683a      	ldr	r2, [r7, #0]
 801f03c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801f03e:	68f9      	ldr	r1, [r7, #12]
 801f040:	4808      	ldr	r0, [pc, #32]	; (801f064 <tcpip_try_callback+0x70>)
 801f042:	f7fa fcb3 	bl	80199ac <sys_mbox_trypost>
 801f046:	4603      	mov	r3, r0
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d006      	beq.n	801f05a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801f04c:	68f9      	ldr	r1, [r7, #12]
 801f04e:	2008      	movs	r0, #8
 801f050:	f7f9 fb38 	bl	80186c4 <memp_free>
    return ERR_MEM;
 801f054:	f04f 33ff 	mov.w	r3, #4294967295
 801f058:	e000      	b.n	801f05c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801f05a:	2300      	movs	r3, #0
}
 801f05c:	4618      	mov	r0, r3
 801f05e:	3710      	adds	r7, #16
 801f060:	46bd      	mov	sp, r7
 801f062:	bd80      	pop	{r7, pc}
 801f064:	200090e8 	.word	0x200090e8
 801f068:	08025554 	.word	0x08025554
 801f06c:	08025614 	.word	0x08025614
 801f070:	080255ec 	.word	0x080255ec

0801f074 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801f074:	b580      	push	{r7, lr}
 801f076:	b084      	sub	sp, #16
 801f078:	af02      	add	r7, sp, #8
 801f07a:	6078      	str	r0, [r7, #4]
 801f07c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801f07e:	f7f7 fd19 	bl	8016ab4 <lwip_init>

  tcpip_init_done = initfunc;
 801f082:	4a17      	ldr	r2, [pc, #92]	; (801f0e0 <tcpip_init+0x6c>)
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801f088:	4a16      	ldr	r2, [pc, #88]	; (801f0e4 <tcpip_init+0x70>)
 801f08a:	683b      	ldr	r3, [r7, #0]
 801f08c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801f08e:	2106      	movs	r1, #6
 801f090:	4815      	ldr	r0, [pc, #84]	; (801f0e8 <tcpip_init+0x74>)
 801f092:	f7fa fc71 	bl	8019978 <sys_mbox_new>
 801f096:	4603      	mov	r3, r0
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d006      	beq.n	801f0aa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801f09c:	4b13      	ldr	r3, [pc, #76]	; (801f0ec <tcpip_init+0x78>)
 801f09e:	f240 2261 	movw	r2, #609	; 0x261
 801f0a2:	4913      	ldr	r1, [pc, #76]	; (801f0f0 <tcpip_init+0x7c>)
 801f0a4:	4813      	ldr	r0, [pc, #76]	; (801f0f4 <tcpip_init+0x80>)
 801f0a6:	f002 fbb9 	bl	802181c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801f0aa:	4813      	ldr	r0, [pc, #76]	; (801f0f8 <tcpip_init+0x84>)
 801f0ac:	f7fa fce6 	bl	8019a7c <sys_mutex_new>
 801f0b0:	4603      	mov	r3, r0
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d006      	beq.n	801f0c4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801f0b6:	4b0d      	ldr	r3, [pc, #52]	; (801f0ec <tcpip_init+0x78>)
 801f0b8:	f240 2265 	movw	r2, #613	; 0x265
 801f0bc:	490f      	ldr	r1, [pc, #60]	; (801f0fc <tcpip_init+0x88>)
 801f0be:	480d      	ldr	r0, [pc, #52]	; (801f0f4 <tcpip_init+0x80>)
 801f0c0:	f002 fbac 	bl	802181c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801f0c4:	2318      	movs	r3, #24
 801f0c6:	9300      	str	r3, [sp, #0]
 801f0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	490c      	ldr	r1, [pc, #48]	; (801f100 <tcpip_init+0x8c>)
 801f0d0:	480c      	ldr	r0, [pc, #48]	; (801f104 <tcpip_init+0x90>)
 801f0d2:	f7fa fd05 	bl	8019ae0 <sys_thread_new>
}
 801f0d6:	bf00      	nop
 801f0d8:	3708      	adds	r7, #8
 801f0da:	46bd      	mov	sp, r7
 801f0dc:	bd80      	pop	{r7, pc}
 801f0de:	bf00      	nop
 801f0e0:	200090e0 	.word	0x200090e0
 801f0e4:	200090e4 	.word	0x200090e4
 801f0e8:	200090e8 	.word	0x200090e8
 801f0ec:	08025554 	.word	0x08025554
 801f0f0:	08025624 	.word	0x08025624
 801f0f4:	080255ec 	.word	0x080255ec
 801f0f8:	20011f94 	.word	0x20011f94
 801f0fc:	08025648 	.word	0x08025648
 801f100:	0801ee31 	.word	0x0801ee31
 801f104:	0802566c 	.word	0x0802566c

0801f108 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f108:	b580      	push	{r7, lr}
 801f10a:	b082      	sub	sp, #8
 801f10c:	af00      	add	r7, sp, #0
 801f10e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f110:	f7fa fd6e 	bl	8019bf0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f114:	4b0a      	ldr	r3, [pc, #40]	; (801f140 <tcpip_tcp_timer+0x38>)
 801f116:	681b      	ldr	r3, [r3, #0]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d103      	bne.n	801f124 <tcpip_tcp_timer+0x1c>
 801f11c:	4b09      	ldr	r3, [pc, #36]	; (801f144 <tcpip_tcp_timer+0x3c>)
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	2b00      	cmp	r3, #0
 801f122:	d005      	beq.n	801f130 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f124:	2200      	movs	r2, #0
 801f126:	4908      	ldr	r1, [pc, #32]	; (801f148 <tcpip_tcp_timer+0x40>)
 801f128:	20fa      	movs	r0, #250	; 0xfa
 801f12a:	f000 f8f3 	bl	801f314 <sys_timeout>
 801f12e:	e003      	b.n	801f138 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f130:	4b06      	ldr	r3, [pc, #24]	; (801f14c <tcpip_tcp_timer+0x44>)
 801f132:	2200      	movs	r2, #0
 801f134:	601a      	str	r2, [r3, #0]
  }
}
 801f136:	bf00      	nop
 801f138:	bf00      	nop
 801f13a:	3708      	adds	r7, #8
 801f13c:	46bd      	mov	sp, r7
 801f13e:	bd80      	pop	{r7, pc}
 801f140:	20011f7c 	.word	0x20011f7c
 801f144:	20011f8c 	.word	0x20011f8c
 801f148:	0801f109 	.word	0x0801f109
 801f14c:	200090f4 	.word	0x200090f4

0801f150 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f150:	b580      	push	{r7, lr}
 801f152:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f154:	4b0a      	ldr	r3, [pc, #40]	; (801f180 <tcp_timer_needed+0x30>)
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	2b00      	cmp	r3, #0
 801f15a:	d10f      	bne.n	801f17c <tcp_timer_needed+0x2c>
 801f15c:	4b09      	ldr	r3, [pc, #36]	; (801f184 <tcp_timer_needed+0x34>)
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	2b00      	cmp	r3, #0
 801f162:	d103      	bne.n	801f16c <tcp_timer_needed+0x1c>
 801f164:	4b08      	ldr	r3, [pc, #32]	; (801f188 <tcp_timer_needed+0x38>)
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d007      	beq.n	801f17c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f16c:	4b04      	ldr	r3, [pc, #16]	; (801f180 <tcp_timer_needed+0x30>)
 801f16e:	2201      	movs	r2, #1
 801f170:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f172:	2200      	movs	r2, #0
 801f174:	4905      	ldr	r1, [pc, #20]	; (801f18c <tcp_timer_needed+0x3c>)
 801f176:	20fa      	movs	r0, #250	; 0xfa
 801f178:	f000 f8cc 	bl	801f314 <sys_timeout>
  }
}
 801f17c:	bf00      	nop
 801f17e:	bd80      	pop	{r7, pc}
 801f180:	200090f4 	.word	0x200090f4
 801f184:	20011f7c 	.word	0x20011f7c
 801f188:	20011f8c 	.word	0x20011f8c
 801f18c:	0801f109 	.word	0x0801f109

0801f190 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b086      	sub	sp, #24
 801f194:	af00      	add	r7, sp, #0
 801f196:	60f8      	str	r0, [r7, #12]
 801f198:	60b9      	str	r1, [r7, #8]
 801f19a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f19c:	200a      	movs	r0, #10
 801f19e:	f7f9 fa3f 	bl	8018620 <memp_malloc>
 801f1a2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f1a4:	693b      	ldr	r3, [r7, #16]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d109      	bne.n	801f1be <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f1aa:	693b      	ldr	r3, [r7, #16]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d151      	bne.n	801f254 <sys_timeout_abs+0xc4>
 801f1b0:	4b2a      	ldr	r3, [pc, #168]	; (801f25c <sys_timeout_abs+0xcc>)
 801f1b2:	22be      	movs	r2, #190	; 0xbe
 801f1b4:	492a      	ldr	r1, [pc, #168]	; (801f260 <sys_timeout_abs+0xd0>)
 801f1b6:	482b      	ldr	r0, [pc, #172]	; (801f264 <sys_timeout_abs+0xd4>)
 801f1b8:	f002 fb30 	bl	802181c <iprintf>
    return;
 801f1bc:	e04a      	b.n	801f254 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f1be:	693b      	ldr	r3, [r7, #16]
 801f1c0:	2200      	movs	r2, #0
 801f1c2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f1c4:	693b      	ldr	r3, [r7, #16]
 801f1c6:	68ba      	ldr	r2, [r7, #8]
 801f1c8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f1ca:	693b      	ldr	r3, [r7, #16]
 801f1cc:	687a      	ldr	r2, [r7, #4]
 801f1ce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f1d0:	693b      	ldr	r3, [r7, #16]
 801f1d2:	68fa      	ldr	r2, [r7, #12]
 801f1d4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f1d6:	4b24      	ldr	r3, [pc, #144]	; (801f268 <sys_timeout_abs+0xd8>)
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d103      	bne.n	801f1e6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f1de:	4a22      	ldr	r2, [pc, #136]	; (801f268 <sys_timeout_abs+0xd8>)
 801f1e0:	693b      	ldr	r3, [r7, #16]
 801f1e2:	6013      	str	r3, [r2, #0]
    return;
 801f1e4:	e037      	b.n	801f256 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f1e6:	693b      	ldr	r3, [r7, #16]
 801f1e8:	685a      	ldr	r2, [r3, #4]
 801f1ea:	4b1f      	ldr	r3, [pc, #124]	; (801f268 <sys_timeout_abs+0xd8>)
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	685b      	ldr	r3, [r3, #4]
 801f1f0:	1ad3      	subs	r3, r2, r3
 801f1f2:	0fdb      	lsrs	r3, r3, #31
 801f1f4:	f003 0301 	and.w	r3, r3, #1
 801f1f8:	b2db      	uxtb	r3, r3
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d007      	beq.n	801f20e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f1fe:	4b1a      	ldr	r3, [pc, #104]	; (801f268 <sys_timeout_abs+0xd8>)
 801f200:	681a      	ldr	r2, [r3, #0]
 801f202:	693b      	ldr	r3, [r7, #16]
 801f204:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f206:	4a18      	ldr	r2, [pc, #96]	; (801f268 <sys_timeout_abs+0xd8>)
 801f208:	693b      	ldr	r3, [r7, #16]
 801f20a:	6013      	str	r3, [r2, #0]
 801f20c:	e023      	b.n	801f256 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f20e:	4b16      	ldr	r3, [pc, #88]	; (801f268 <sys_timeout_abs+0xd8>)
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	617b      	str	r3, [r7, #20]
 801f214:	e01a      	b.n	801f24c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f216:	697b      	ldr	r3, [r7, #20]
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d00b      	beq.n	801f236 <sys_timeout_abs+0xa6>
 801f21e:	693b      	ldr	r3, [r7, #16]
 801f220:	685a      	ldr	r2, [r3, #4]
 801f222:	697b      	ldr	r3, [r7, #20]
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	685b      	ldr	r3, [r3, #4]
 801f228:	1ad3      	subs	r3, r2, r3
 801f22a:	0fdb      	lsrs	r3, r3, #31
 801f22c:	f003 0301 	and.w	r3, r3, #1
 801f230:	b2db      	uxtb	r3, r3
 801f232:	2b00      	cmp	r3, #0
 801f234:	d007      	beq.n	801f246 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f236:	697b      	ldr	r3, [r7, #20]
 801f238:	681a      	ldr	r2, [r3, #0]
 801f23a:	693b      	ldr	r3, [r7, #16]
 801f23c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f23e:	697b      	ldr	r3, [r7, #20]
 801f240:	693a      	ldr	r2, [r7, #16]
 801f242:	601a      	str	r2, [r3, #0]
        break;
 801f244:	e007      	b.n	801f256 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f246:	697b      	ldr	r3, [r7, #20]
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	617b      	str	r3, [r7, #20]
 801f24c:	697b      	ldr	r3, [r7, #20]
 801f24e:	2b00      	cmp	r3, #0
 801f250:	d1e1      	bne.n	801f216 <sys_timeout_abs+0x86>
 801f252:	e000      	b.n	801f256 <sys_timeout_abs+0xc6>
    return;
 801f254:	bf00      	nop
      }
    }
  }
}
 801f256:	3718      	adds	r7, #24
 801f258:	46bd      	mov	sp, r7
 801f25a:	bd80      	pop	{r7, pc}
 801f25c:	0802567c 	.word	0x0802567c
 801f260:	080256f8 	.word	0x080256f8
 801f264:	08025738 	.word	0x08025738
 801f268:	200090ec 	.word	0x200090ec

0801f26c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f26c:	b580      	push	{r7, lr}
 801f26e:	b086      	sub	sp, #24
 801f270:	af00      	add	r7, sp, #0
 801f272:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f278:	697b      	ldr	r3, [r7, #20]
 801f27a:	685b      	ldr	r3, [r3, #4]
 801f27c:	4798      	blx	r3

  now = sys_now();
 801f27e:	f7e4 fb21 	bl	80038c4 <sys_now>
 801f282:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f284:	697b      	ldr	r3, [r7, #20]
 801f286:	681a      	ldr	r2, [r3, #0]
 801f288:	4b0f      	ldr	r3, [pc, #60]	; (801f2c8 <lwip_cyclic_timer+0x5c>)
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	4413      	add	r3, r2
 801f28e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f290:	68fa      	ldr	r2, [r7, #12]
 801f292:	693b      	ldr	r3, [r7, #16]
 801f294:	1ad3      	subs	r3, r2, r3
 801f296:	0fdb      	lsrs	r3, r3, #31
 801f298:	f003 0301 	and.w	r3, r3, #1
 801f29c:	b2db      	uxtb	r3, r3
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d009      	beq.n	801f2b6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f2a2:	697b      	ldr	r3, [r7, #20]
 801f2a4:	681a      	ldr	r2, [r3, #0]
 801f2a6:	693b      	ldr	r3, [r7, #16]
 801f2a8:	4413      	add	r3, r2
 801f2aa:	687a      	ldr	r2, [r7, #4]
 801f2ac:	4907      	ldr	r1, [pc, #28]	; (801f2cc <lwip_cyclic_timer+0x60>)
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	f7ff ff6e 	bl	801f190 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f2b4:	e004      	b.n	801f2c0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f2b6:	687a      	ldr	r2, [r7, #4]
 801f2b8:	4904      	ldr	r1, [pc, #16]	; (801f2cc <lwip_cyclic_timer+0x60>)
 801f2ba:	68f8      	ldr	r0, [r7, #12]
 801f2bc:	f7ff ff68 	bl	801f190 <sys_timeout_abs>
}
 801f2c0:	bf00      	nop
 801f2c2:	3718      	adds	r7, #24
 801f2c4:	46bd      	mov	sp, r7
 801f2c6:	bd80      	pop	{r7, pc}
 801f2c8:	200090f0 	.word	0x200090f0
 801f2cc:	0801f26d 	.word	0x0801f26d

0801f2d0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f2d0:	b580      	push	{r7, lr}
 801f2d2:	b082      	sub	sp, #8
 801f2d4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f2d6:	2301      	movs	r3, #1
 801f2d8:	607b      	str	r3, [r7, #4]
 801f2da:	e00e      	b.n	801f2fa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f2dc:	4a0b      	ldr	r2, [pc, #44]	; (801f30c <sys_timeouts_init+0x3c>)
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	00db      	lsls	r3, r3, #3
 801f2e8:	4a08      	ldr	r2, [pc, #32]	; (801f30c <sys_timeouts_init+0x3c>)
 801f2ea:	4413      	add	r3, r2
 801f2ec:	461a      	mov	r2, r3
 801f2ee:	4908      	ldr	r1, [pc, #32]	; (801f310 <sys_timeouts_init+0x40>)
 801f2f0:	f000 f810 	bl	801f314 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	3301      	adds	r3, #1
 801f2f8:	607b      	str	r3, [r7, #4]
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	2b04      	cmp	r3, #4
 801f2fe:	d9ed      	bls.n	801f2dc <sys_timeouts_init+0xc>
  }
}
 801f300:	bf00      	nop
 801f302:	bf00      	nop
 801f304:	3708      	adds	r7, #8
 801f306:	46bd      	mov	sp, r7
 801f308:	bd80      	pop	{r7, pc}
 801f30a:	bf00      	nop
 801f30c:	08025cf0 	.word	0x08025cf0
 801f310:	0801f26d 	.word	0x0801f26d

0801f314 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f314:	b580      	push	{r7, lr}
 801f316:	b086      	sub	sp, #24
 801f318:	af00      	add	r7, sp, #0
 801f31a:	60f8      	str	r0, [r7, #12]
 801f31c:	60b9      	str	r1, [r7, #8]
 801f31e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f326:	d306      	bcc.n	801f336 <sys_timeout+0x22>
 801f328:	4b0a      	ldr	r3, [pc, #40]	; (801f354 <sys_timeout+0x40>)
 801f32a:	f240 1229 	movw	r2, #297	; 0x129
 801f32e:	490a      	ldr	r1, [pc, #40]	; (801f358 <sys_timeout+0x44>)
 801f330:	480a      	ldr	r0, [pc, #40]	; (801f35c <sys_timeout+0x48>)
 801f332:	f002 fa73 	bl	802181c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f336:	f7e4 fac5 	bl	80038c4 <sys_now>
 801f33a:	4602      	mov	r2, r0
 801f33c:	68fb      	ldr	r3, [r7, #12]
 801f33e:	4413      	add	r3, r2
 801f340:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f342:	687a      	ldr	r2, [r7, #4]
 801f344:	68b9      	ldr	r1, [r7, #8]
 801f346:	6978      	ldr	r0, [r7, #20]
 801f348:	f7ff ff22 	bl	801f190 <sys_timeout_abs>
#endif
}
 801f34c:	bf00      	nop
 801f34e:	3718      	adds	r7, #24
 801f350:	46bd      	mov	sp, r7
 801f352:	bd80      	pop	{r7, pc}
 801f354:	0802567c 	.word	0x0802567c
 801f358:	08025760 	.word	0x08025760
 801f35c:	08025738 	.word	0x08025738

0801f360 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f360:	b580      	push	{r7, lr}
 801f362:	b084      	sub	sp, #16
 801f364:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f366:	f7e4 faad 	bl	80038c4 <sys_now>
 801f36a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f36c:	4b17      	ldr	r3, [pc, #92]	; (801f3cc <sys_check_timeouts+0x6c>)
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f372:	68bb      	ldr	r3, [r7, #8]
 801f374:	2b00      	cmp	r3, #0
 801f376:	d022      	beq.n	801f3be <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f378:	68bb      	ldr	r3, [r7, #8]
 801f37a:	685b      	ldr	r3, [r3, #4]
 801f37c:	68fa      	ldr	r2, [r7, #12]
 801f37e:	1ad3      	subs	r3, r2, r3
 801f380:	0fdb      	lsrs	r3, r3, #31
 801f382:	f003 0301 	and.w	r3, r3, #1
 801f386:	b2db      	uxtb	r3, r3
 801f388:	2b00      	cmp	r3, #0
 801f38a:	d11a      	bne.n	801f3c2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f38c:	68bb      	ldr	r3, [r7, #8]
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	4a0e      	ldr	r2, [pc, #56]	; (801f3cc <sys_check_timeouts+0x6c>)
 801f392:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f394:	68bb      	ldr	r3, [r7, #8]
 801f396:	689b      	ldr	r3, [r3, #8]
 801f398:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f39a:	68bb      	ldr	r3, [r7, #8]
 801f39c:	68db      	ldr	r3, [r3, #12]
 801f39e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f3a0:	68bb      	ldr	r3, [r7, #8]
 801f3a2:	685b      	ldr	r3, [r3, #4]
 801f3a4:	4a0a      	ldr	r2, [pc, #40]	; (801f3d0 <sys_check_timeouts+0x70>)
 801f3a6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f3a8:	68b9      	ldr	r1, [r7, #8]
 801f3aa:	200a      	movs	r0, #10
 801f3ac:	f7f9 f98a 	bl	80186c4 <memp_free>
    if (handler != NULL) {
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d0da      	beq.n	801f36c <sys_check_timeouts+0xc>
      handler(arg);
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	6838      	ldr	r0, [r7, #0]
 801f3ba:	4798      	blx	r3
  do {
 801f3bc:	e7d6      	b.n	801f36c <sys_check_timeouts+0xc>
      return;
 801f3be:	bf00      	nop
 801f3c0:	e000      	b.n	801f3c4 <sys_check_timeouts+0x64>
      return;
 801f3c2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f3c4:	3710      	adds	r7, #16
 801f3c6:	46bd      	mov	sp, r7
 801f3c8:	bd80      	pop	{r7, pc}
 801f3ca:	bf00      	nop
 801f3cc:	200090ec 	.word	0x200090ec
 801f3d0:	200090f0 	.word	0x200090f0

0801f3d4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f3d4:	b580      	push	{r7, lr}
 801f3d6:	b082      	sub	sp, #8
 801f3d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f3da:	4b16      	ldr	r3, [pc, #88]	; (801f434 <sys_timeouts_sleeptime+0x60>)
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d102      	bne.n	801f3e8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f3e2:	f04f 33ff 	mov.w	r3, #4294967295
 801f3e6:	e020      	b.n	801f42a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f3e8:	f7e4 fa6c 	bl	80038c4 <sys_now>
 801f3ec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f3ee:	4b11      	ldr	r3, [pc, #68]	; (801f434 <sys_timeouts_sleeptime+0x60>)
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	685a      	ldr	r2, [r3, #4]
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	1ad3      	subs	r3, r2, r3
 801f3f8:	0fdb      	lsrs	r3, r3, #31
 801f3fa:	f003 0301 	and.w	r3, r3, #1
 801f3fe:	b2db      	uxtb	r3, r3
 801f400:	2b00      	cmp	r3, #0
 801f402:	d001      	beq.n	801f408 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f404:	2300      	movs	r3, #0
 801f406:	e010      	b.n	801f42a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f408:	4b0a      	ldr	r3, [pc, #40]	; (801f434 <sys_timeouts_sleeptime+0x60>)
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	685a      	ldr	r2, [r3, #4]
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	1ad3      	subs	r3, r2, r3
 801f412:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f414:	683b      	ldr	r3, [r7, #0]
 801f416:	2b00      	cmp	r3, #0
 801f418:	da06      	bge.n	801f428 <sys_timeouts_sleeptime+0x54>
 801f41a:	4b07      	ldr	r3, [pc, #28]	; (801f438 <sys_timeouts_sleeptime+0x64>)
 801f41c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f420:	4906      	ldr	r1, [pc, #24]	; (801f43c <sys_timeouts_sleeptime+0x68>)
 801f422:	4807      	ldr	r0, [pc, #28]	; (801f440 <sys_timeouts_sleeptime+0x6c>)
 801f424:	f002 f9fa 	bl	802181c <iprintf>
    return ret;
 801f428:	683b      	ldr	r3, [r7, #0]
  }
}
 801f42a:	4618      	mov	r0, r3
 801f42c:	3708      	adds	r7, #8
 801f42e:	46bd      	mov	sp, r7
 801f430:	bd80      	pop	{r7, pc}
 801f432:	bf00      	nop
 801f434:	200090ec 	.word	0x200090ec
 801f438:	0802567c 	.word	0x0802567c
 801f43c:	08025798 	.word	0x08025798
 801f440:	08025738 	.word	0x08025738

0801f444 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f444:	b580      	push	{r7, lr}
 801f446:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f448:	f002 fa16 	bl	8021878 <rand>
 801f44c:	4603      	mov	r3, r0
 801f44e:	b29b      	uxth	r3, r3
 801f450:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f454:	b29b      	uxth	r3, r3
 801f456:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f45a:	b29a      	uxth	r2, r3
 801f45c:	4b01      	ldr	r3, [pc, #4]	; (801f464 <udp_init+0x20>)
 801f45e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f460:	bf00      	nop
 801f462:	bd80      	pop	{r7, pc}
 801f464:	20000094 	.word	0x20000094

0801f468 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f468:	b480      	push	{r7}
 801f46a:	b083      	sub	sp, #12
 801f46c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f46e:	2300      	movs	r3, #0
 801f470:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f472:	4b17      	ldr	r3, [pc, #92]	; (801f4d0 <udp_new_port+0x68>)
 801f474:	881b      	ldrh	r3, [r3, #0]
 801f476:	1c5a      	adds	r2, r3, #1
 801f478:	b291      	uxth	r1, r2
 801f47a:	4a15      	ldr	r2, [pc, #84]	; (801f4d0 <udp_new_port+0x68>)
 801f47c:	8011      	strh	r1, [r2, #0]
 801f47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f482:	4293      	cmp	r3, r2
 801f484:	d103      	bne.n	801f48e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f486:	4b12      	ldr	r3, [pc, #72]	; (801f4d0 <udp_new_port+0x68>)
 801f488:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f48c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f48e:	4b11      	ldr	r3, [pc, #68]	; (801f4d4 <udp_new_port+0x6c>)
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	603b      	str	r3, [r7, #0]
 801f494:	e011      	b.n	801f4ba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f496:	683b      	ldr	r3, [r7, #0]
 801f498:	8a5a      	ldrh	r2, [r3, #18]
 801f49a:	4b0d      	ldr	r3, [pc, #52]	; (801f4d0 <udp_new_port+0x68>)
 801f49c:	881b      	ldrh	r3, [r3, #0]
 801f49e:	429a      	cmp	r2, r3
 801f4a0:	d108      	bne.n	801f4b4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f4a2:	88fb      	ldrh	r3, [r7, #6]
 801f4a4:	3301      	adds	r3, #1
 801f4a6:	80fb      	strh	r3, [r7, #6]
 801f4a8:	88fb      	ldrh	r3, [r7, #6]
 801f4aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f4ae:	d3e0      	bcc.n	801f472 <udp_new_port+0xa>
        return 0;
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	e007      	b.n	801f4c4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f4b4:	683b      	ldr	r3, [r7, #0]
 801f4b6:	68db      	ldr	r3, [r3, #12]
 801f4b8:	603b      	str	r3, [r7, #0]
 801f4ba:	683b      	ldr	r3, [r7, #0]
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	d1ea      	bne.n	801f496 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f4c0:	4b03      	ldr	r3, [pc, #12]	; (801f4d0 <udp_new_port+0x68>)
 801f4c2:	881b      	ldrh	r3, [r3, #0]
}
 801f4c4:	4618      	mov	r0, r3
 801f4c6:	370c      	adds	r7, #12
 801f4c8:	46bd      	mov	sp, r7
 801f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ce:	4770      	bx	lr
 801f4d0:	20000094 	.word	0x20000094
 801f4d4:	20011f98 	.word	0x20011f98

0801f4d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f4d8:	b580      	push	{r7, lr}
 801f4da:	b084      	sub	sp, #16
 801f4dc:	af00      	add	r7, sp, #0
 801f4de:	60f8      	str	r0, [r7, #12]
 801f4e0:	60b9      	str	r1, [r7, #8]
 801f4e2:	4613      	mov	r3, r2
 801f4e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f4e6:	68fb      	ldr	r3, [r7, #12]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d105      	bne.n	801f4f8 <udp_input_local_match+0x20>
 801f4ec:	4b27      	ldr	r3, [pc, #156]	; (801f58c <udp_input_local_match+0xb4>)
 801f4ee:	2287      	movs	r2, #135	; 0x87
 801f4f0:	4927      	ldr	r1, [pc, #156]	; (801f590 <udp_input_local_match+0xb8>)
 801f4f2:	4828      	ldr	r0, [pc, #160]	; (801f594 <udp_input_local_match+0xbc>)
 801f4f4:	f002 f992 	bl	802181c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f4f8:	68bb      	ldr	r3, [r7, #8]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d105      	bne.n	801f50a <udp_input_local_match+0x32>
 801f4fe:	4b23      	ldr	r3, [pc, #140]	; (801f58c <udp_input_local_match+0xb4>)
 801f500:	2288      	movs	r2, #136	; 0x88
 801f502:	4925      	ldr	r1, [pc, #148]	; (801f598 <udp_input_local_match+0xc0>)
 801f504:	4823      	ldr	r0, [pc, #140]	; (801f594 <udp_input_local_match+0xbc>)
 801f506:	f002 f989 	bl	802181c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f50a:	68fb      	ldr	r3, [r7, #12]
 801f50c:	7a1b      	ldrb	r3, [r3, #8]
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d00b      	beq.n	801f52a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f512:	68fb      	ldr	r3, [r7, #12]
 801f514:	7a1a      	ldrb	r2, [r3, #8]
 801f516:	4b21      	ldr	r3, [pc, #132]	; (801f59c <udp_input_local_match+0xc4>)
 801f518:	685b      	ldr	r3, [r3, #4]
 801f51a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f51e:	3301      	adds	r3, #1
 801f520:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f522:	429a      	cmp	r2, r3
 801f524:	d001      	beq.n	801f52a <udp_input_local_match+0x52>
    return 0;
 801f526:	2300      	movs	r3, #0
 801f528:	e02b      	b.n	801f582 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f52a:	79fb      	ldrb	r3, [r7, #7]
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d018      	beq.n	801f562 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f530:	68fb      	ldr	r3, [r7, #12]
 801f532:	2b00      	cmp	r3, #0
 801f534:	d013      	beq.n	801f55e <udp_input_local_match+0x86>
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d00f      	beq.n	801f55e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f53e:	4b17      	ldr	r3, [pc, #92]	; (801f59c <udp_input_local_match+0xc4>)
 801f540:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f546:	d00a      	beq.n	801f55e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f548:	68fb      	ldr	r3, [r7, #12]
 801f54a:	681a      	ldr	r2, [r3, #0]
 801f54c:	4b13      	ldr	r3, [pc, #76]	; (801f59c <udp_input_local_match+0xc4>)
 801f54e:	695b      	ldr	r3, [r3, #20]
 801f550:	405a      	eors	r2, r3
 801f552:	68bb      	ldr	r3, [r7, #8]
 801f554:	3308      	adds	r3, #8
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d110      	bne.n	801f580 <udp_input_local_match+0xa8>
          return 1;
 801f55e:	2301      	movs	r3, #1
 801f560:	e00f      	b.n	801f582 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f562:	68fb      	ldr	r3, [r7, #12]
 801f564:	2b00      	cmp	r3, #0
 801f566:	d009      	beq.n	801f57c <udp_input_local_match+0xa4>
 801f568:	68fb      	ldr	r3, [r7, #12]
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	d005      	beq.n	801f57c <udp_input_local_match+0xa4>
 801f570:	68fb      	ldr	r3, [r7, #12]
 801f572:	681a      	ldr	r2, [r3, #0]
 801f574:	4b09      	ldr	r3, [pc, #36]	; (801f59c <udp_input_local_match+0xc4>)
 801f576:	695b      	ldr	r3, [r3, #20]
 801f578:	429a      	cmp	r2, r3
 801f57a:	d101      	bne.n	801f580 <udp_input_local_match+0xa8>
        return 1;
 801f57c:	2301      	movs	r3, #1
 801f57e:	e000      	b.n	801f582 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f580:	2300      	movs	r3, #0
}
 801f582:	4618      	mov	r0, r3
 801f584:	3710      	adds	r7, #16
 801f586:	46bd      	mov	sp, r7
 801f588:	bd80      	pop	{r7, pc}
 801f58a:	bf00      	nop
 801f58c:	080257ac 	.word	0x080257ac
 801f590:	08025824 	.word	0x08025824
 801f594:	08025848 	.word	0x08025848
 801f598:	08025870 	.word	0x08025870
 801f59c:	2000e840 	.word	0x2000e840

0801f5a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f5a0:	b590      	push	{r4, r7, lr}
 801f5a2:	b08d      	sub	sp, #52	; 0x34
 801f5a4:	af02      	add	r7, sp, #8
 801f5a6:	6078      	str	r0, [r7, #4]
 801f5a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f5aa:	2300      	movs	r3, #0
 801f5ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d105      	bne.n	801f5c0 <udp_input+0x20>
 801f5b4:	4b7c      	ldr	r3, [pc, #496]	; (801f7a8 <udp_input+0x208>)
 801f5b6:	22cf      	movs	r2, #207	; 0xcf
 801f5b8:	497c      	ldr	r1, [pc, #496]	; (801f7ac <udp_input+0x20c>)
 801f5ba:	487d      	ldr	r0, [pc, #500]	; (801f7b0 <udp_input+0x210>)
 801f5bc:	f002 f92e 	bl	802181c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f5c0:	683b      	ldr	r3, [r7, #0]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d105      	bne.n	801f5d2 <udp_input+0x32>
 801f5c6:	4b78      	ldr	r3, [pc, #480]	; (801f7a8 <udp_input+0x208>)
 801f5c8:	22d0      	movs	r2, #208	; 0xd0
 801f5ca:	497a      	ldr	r1, [pc, #488]	; (801f7b4 <udp_input+0x214>)
 801f5cc:	4878      	ldr	r0, [pc, #480]	; (801f7b0 <udp_input+0x210>)
 801f5ce:	f002 f925 	bl	802181c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	895b      	ldrh	r3, [r3, #10]
 801f5d6:	2b07      	cmp	r3, #7
 801f5d8:	d803      	bhi.n	801f5e2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f5da:	6878      	ldr	r0, [r7, #4]
 801f5dc:	f7f9 ff22 	bl	8019424 <pbuf_free>
    goto end;
 801f5e0:	e0de      	b.n	801f7a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	685b      	ldr	r3, [r3, #4]
 801f5e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f5e8:	4b73      	ldr	r3, [pc, #460]	; (801f7b8 <udp_input+0x218>)
 801f5ea:	695b      	ldr	r3, [r3, #20]
 801f5ec:	4a72      	ldr	r2, [pc, #456]	; (801f7b8 <udp_input+0x218>)
 801f5ee:	6812      	ldr	r2, [r2, #0]
 801f5f0:	4611      	mov	r1, r2
 801f5f2:	4618      	mov	r0, r3
 801f5f4:	f7f7 fd2a 	bl	801704c <ip4_addr_isbroadcast_u32>
 801f5f8:	4603      	mov	r3, r0
 801f5fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f5fc:	697b      	ldr	r3, [r7, #20]
 801f5fe:	881b      	ldrh	r3, [r3, #0]
 801f600:	b29b      	uxth	r3, r3
 801f602:	4618      	mov	r0, r3
 801f604:	f7f4 f9e0 	bl	80139c8 <lwip_htons>
 801f608:	4603      	mov	r3, r0
 801f60a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f60c:	697b      	ldr	r3, [r7, #20]
 801f60e:	885b      	ldrh	r3, [r3, #2]
 801f610:	b29b      	uxth	r3, r3
 801f612:	4618      	mov	r0, r3
 801f614:	f7f4 f9d8 	bl	80139c8 <lwip_htons>
 801f618:	4603      	mov	r3, r0
 801f61a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f61c:	2300      	movs	r3, #0
 801f61e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f620:	2300      	movs	r3, #0
 801f622:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f624:	2300      	movs	r3, #0
 801f626:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f628:	4b64      	ldr	r3, [pc, #400]	; (801f7bc <udp_input+0x21c>)
 801f62a:	681b      	ldr	r3, [r3, #0]
 801f62c:	627b      	str	r3, [r7, #36]	; 0x24
 801f62e:	e054      	b.n	801f6da <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f632:	8a5b      	ldrh	r3, [r3, #18]
 801f634:	89fa      	ldrh	r2, [r7, #14]
 801f636:	429a      	cmp	r2, r3
 801f638:	d14a      	bne.n	801f6d0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f63a:	7cfb      	ldrb	r3, [r7, #19]
 801f63c:	461a      	mov	r2, r3
 801f63e:	6839      	ldr	r1, [r7, #0]
 801f640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f642:	f7ff ff49 	bl	801f4d8 <udp_input_local_match>
 801f646:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d041      	beq.n	801f6d0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f64e:	7c1b      	ldrb	r3, [r3, #16]
 801f650:	f003 0304 	and.w	r3, r3, #4
 801f654:	2b00      	cmp	r3, #0
 801f656:	d11d      	bne.n	801f694 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f658:	69fb      	ldr	r3, [r7, #28]
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	d102      	bne.n	801f664 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f660:	61fb      	str	r3, [r7, #28]
 801f662:	e017      	b.n	801f694 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f664:	7cfb      	ldrb	r3, [r7, #19]
 801f666:	2b00      	cmp	r3, #0
 801f668:	d014      	beq.n	801f694 <udp_input+0xf4>
 801f66a:	4b53      	ldr	r3, [pc, #332]	; (801f7b8 <udp_input+0x218>)
 801f66c:	695b      	ldr	r3, [r3, #20]
 801f66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f672:	d10f      	bne.n	801f694 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f674:	69fb      	ldr	r3, [r7, #28]
 801f676:	681a      	ldr	r2, [r3, #0]
 801f678:	683b      	ldr	r3, [r7, #0]
 801f67a:	3304      	adds	r3, #4
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	429a      	cmp	r2, r3
 801f680:	d008      	beq.n	801f694 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f684:	681a      	ldr	r2, [r3, #0]
 801f686:	683b      	ldr	r3, [r7, #0]
 801f688:	3304      	adds	r3, #4
 801f68a:	681b      	ldr	r3, [r3, #0]
 801f68c:	429a      	cmp	r2, r3
 801f68e:	d101      	bne.n	801f694 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f692:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f696:	8a9b      	ldrh	r3, [r3, #20]
 801f698:	8a3a      	ldrh	r2, [r7, #16]
 801f69a:	429a      	cmp	r2, r3
 801f69c:	d118      	bne.n	801f6d0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6a0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d005      	beq.n	801f6b2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6a8:	685a      	ldr	r2, [r3, #4]
 801f6aa:	4b43      	ldr	r3, [pc, #268]	; (801f7b8 <udp_input+0x218>)
 801f6ac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f6ae:	429a      	cmp	r2, r3
 801f6b0:	d10e      	bne.n	801f6d0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f6b2:	6a3b      	ldr	r3, [r7, #32]
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d014      	beq.n	801f6e2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6ba:	68da      	ldr	r2, [r3, #12]
 801f6bc:	6a3b      	ldr	r3, [r7, #32]
 801f6be:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f6c0:	4b3e      	ldr	r3, [pc, #248]	; (801f7bc <udp_input+0x21c>)
 801f6c2:	681a      	ldr	r2, [r3, #0]
 801f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6c6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f6c8:	4a3c      	ldr	r2, [pc, #240]	; (801f7bc <udp_input+0x21c>)
 801f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6cc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f6ce:	e008      	b.n	801f6e2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6d2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6d6:	68db      	ldr	r3, [r3, #12]
 801f6d8:	627b      	str	r3, [r7, #36]	; 0x24
 801f6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d1a7      	bne.n	801f630 <udp_input+0x90>
 801f6e0:	e000      	b.n	801f6e4 <udp_input+0x144>
        break;
 801f6e2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d101      	bne.n	801f6ee <udp_input+0x14e>
    pcb = uncon_pcb;
 801f6ea:	69fb      	ldr	r3, [r7, #28]
 801f6ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d002      	beq.n	801f6fa <udp_input+0x15a>
    for_us = 1;
 801f6f4:	2301      	movs	r3, #1
 801f6f6:	76fb      	strb	r3, [r7, #27]
 801f6f8:	e00a      	b.n	801f710 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f6fa:	683b      	ldr	r3, [r7, #0]
 801f6fc:	3304      	adds	r3, #4
 801f6fe:	681a      	ldr	r2, [r3, #0]
 801f700:	4b2d      	ldr	r3, [pc, #180]	; (801f7b8 <udp_input+0x218>)
 801f702:	695b      	ldr	r3, [r3, #20]
 801f704:	429a      	cmp	r2, r3
 801f706:	bf0c      	ite	eq
 801f708:	2301      	moveq	r3, #1
 801f70a:	2300      	movne	r3, #0
 801f70c:	b2db      	uxtb	r3, r3
 801f70e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f710:	7efb      	ldrb	r3, [r7, #27]
 801f712:	2b00      	cmp	r3, #0
 801f714:	d041      	beq.n	801f79a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f716:	2108      	movs	r1, #8
 801f718:	6878      	ldr	r0, [r7, #4]
 801f71a:	f7f9 fdfd 	bl	8019318 <pbuf_remove_header>
 801f71e:	4603      	mov	r3, r0
 801f720:	2b00      	cmp	r3, #0
 801f722:	d00a      	beq.n	801f73a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f724:	4b20      	ldr	r3, [pc, #128]	; (801f7a8 <udp_input+0x208>)
 801f726:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f72a:	4925      	ldr	r1, [pc, #148]	; (801f7c0 <udp_input+0x220>)
 801f72c:	4820      	ldr	r0, [pc, #128]	; (801f7b0 <udp_input+0x210>)
 801f72e:	f002 f875 	bl	802181c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f732:	6878      	ldr	r0, [r7, #4]
 801f734:	f7f9 fe76 	bl	8019424 <pbuf_free>
      goto end;
 801f738:	e032      	b.n	801f7a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d012      	beq.n	801f766 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f742:	699b      	ldr	r3, [r3, #24]
 801f744:	2b00      	cmp	r3, #0
 801f746:	d00a      	beq.n	801f75e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f74a:	699c      	ldr	r4, [r3, #24]
 801f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f74e:	69d8      	ldr	r0, [r3, #28]
 801f750:	8a3b      	ldrh	r3, [r7, #16]
 801f752:	9300      	str	r3, [sp, #0]
 801f754:	4b1b      	ldr	r3, [pc, #108]	; (801f7c4 <udp_input+0x224>)
 801f756:	687a      	ldr	r2, [r7, #4]
 801f758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f75a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f75c:	e021      	b.n	801f7a2 <udp_input+0x202>
        pbuf_free(p);
 801f75e:	6878      	ldr	r0, [r7, #4]
 801f760:	f7f9 fe60 	bl	8019424 <pbuf_free>
        goto end;
 801f764:	e01c      	b.n	801f7a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f766:	7cfb      	ldrb	r3, [r7, #19]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d112      	bne.n	801f792 <udp_input+0x1f2>
 801f76c:	4b12      	ldr	r3, [pc, #72]	; (801f7b8 <udp_input+0x218>)
 801f76e:	695b      	ldr	r3, [r3, #20]
 801f770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f774:	2be0      	cmp	r3, #224	; 0xe0
 801f776:	d00c      	beq.n	801f792 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f778:	4b0f      	ldr	r3, [pc, #60]	; (801f7b8 <udp_input+0x218>)
 801f77a:	899b      	ldrh	r3, [r3, #12]
 801f77c:	3308      	adds	r3, #8
 801f77e:	b29b      	uxth	r3, r3
 801f780:	b21b      	sxth	r3, r3
 801f782:	4619      	mov	r1, r3
 801f784:	6878      	ldr	r0, [r7, #4]
 801f786:	f7f9 fe3a 	bl	80193fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f78a:	2103      	movs	r1, #3
 801f78c:	6878      	ldr	r0, [r7, #4]
 801f78e:	f7f7 f907 	bl	80169a0 <icmp_dest_unreach>
      pbuf_free(p);
 801f792:	6878      	ldr	r0, [r7, #4]
 801f794:	f7f9 fe46 	bl	8019424 <pbuf_free>
  return;
 801f798:	e003      	b.n	801f7a2 <udp_input+0x202>
    pbuf_free(p);
 801f79a:	6878      	ldr	r0, [r7, #4]
 801f79c:	f7f9 fe42 	bl	8019424 <pbuf_free>
  return;
 801f7a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f7a2:	372c      	adds	r7, #44	; 0x2c
 801f7a4:	46bd      	mov	sp, r7
 801f7a6:	bd90      	pop	{r4, r7, pc}
 801f7a8:	080257ac 	.word	0x080257ac
 801f7ac:	08025898 	.word	0x08025898
 801f7b0:	08025848 	.word	0x08025848
 801f7b4:	080258b0 	.word	0x080258b0
 801f7b8:	2000e840 	.word	0x2000e840
 801f7bc:	20011f98 	.word	0x20011f98
 801f7c0:	080258cc 	.word	0x080258cc
 801f7c4:	2000e850 	.word	0x2000e850

0801f7c8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f7c8:	b580      	push	{r7, lr}
 801f7ca:	b088      	sub	sp, #32
 801f7cc:	af02      	add	r7, sp, #8
 801f7ce:	60f8      	str	r0, [r7, #12]
 801f7d0:	60b9      	str	r1, [r7, #8]
 801f7d2:	607a      	str	r2, [r7, #4]
 801f7d4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f7d6:	68fb      	ldr	r3, [r7, #12]
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	d109      	bne.n	801f7f0 <udp_sendto_if+0x28>
 801f7dc:	4b2e      	ldr	r3, [pc, #184]	; (801f898 <udp_sendto_if+0xd0>)
 801f7de:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f7e2:	492e      	ldr	r1, [pc, #184]	; (801f89c <udp_sendto_if+0xd4>)
 801f7e4:	482e      	ldr	r0, [pc, #184]	; (801f8a0 <udp_sendto_if+0xd8>)
 801f7e6:	f002 f819 	bl	802181c <iprintf>
 801f7ea:	f06f 030f 	mvn.w	r3, #15
 801f7ee:	e04f      	b.n	801f890 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f7f0:	68bb      	ldr	r3, [r7, #8]
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d109      	bne.n	801f80a <udp_sendto_if+0x42>
 801f7f6:	4b28      	ldr	r3, [pc, #160]	; (801f898 <udp_sendto_if+0xd0>)
 801f7f8:	f240 2281 	movw	r2, #641	; 0x281
 801f7fc:	4929      	ldr	r1, [pc, #164]	; (801f8a4 <udp_sendto_if+0xdc>)
 801f7fe:	4828      	ldr	r0, [pc, #160]	; (801f8a0 <udp_sendto_if+0xd8>)
 801f800:	f002 f80c 	bl	802181c <iprintf>
 801f804:	f06f 030f 	mvn.w	r3, #15
 801f808:	e042      	b.n	801f890 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d109      	bne.n	801f824 <udp_sendto_if+0x5c>
 801f810:	4b21      	ldr	r3, [pc, #132]	; (801f898 <udp_sendto_if+0xd0>)
 801f812:	f240 2282 	movw	r2, #642	; 0x282
 801f816:	4924      	ldr	r1, [pc, #144]	; (801f8a8 <udp_sendto_if+0xe0>)
 801f818:	4821      	ldr	r0, [pc, #132]	; (801f8a0 <udp_sendto_if+0xd8>)
 801f81a:	f001 ffff 	bl	802181c <iprintf>
 801f81e:	f06f 030f 	mvn.w	r3, #15
 801f822:	e035      	b.n	801f890 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f824:	6a3b      	ldr	r3, [r7, #32]
 801f826:	2b00      	cmp	r3, #0
 801f828:	d109      	bne.n	801f83e <udp_sendto_if+0x76>
 801f82a:	4b1b      	ldr	r3, [pc, #108]	; (801f898 <udp_sendto_if+0xd0>)
 801f82c:	f240 2283 	movw	r2, #643	; 0x283
 801f830:	491e      	ldr	r1, [pc, #120]	; (801f8ac <udp_sendto_if+0xe4>)
 801f832:	481b      	ldr	r0, [pc, #108]	; (801f8a0 <udp_sendto_if+0xd8>)
 801f834:	f001 fff2 	bl	802181c <iprintf>
 801f838:	f06f 030f 	mvn.w	r3, #15
 801f83c:	e028      	b.n	801f890 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	2b00      	cmp	r3, #0
 801f842:	d009      	beq.n	801f858 <udp_sendto_if+0x90>
 801f844:	68fb      	ldr	r3, [r7, #12]
 801f846:	681b      	ldr	r3, [r3, #0]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d005      	beq.n	801f858 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f854:	2be0      	cmp	r3, #224	; 0xe0
 801f856:	d103      	bne.n	801f860 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801f858:	6a3b      	ldr	r3, [r7, #32]
 801f85a:	3304      	adds	r3, #4
 801f85c:	617b      	str	r3, [r7, #20]
 801f85e:	e00b      	b.n	801f878 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	681a      	ldr	r2, [r3, #0]
 801f864:	6a3b      	ldr	r3, [r7, #32]
 801f866:	3304      	adds	r3, #4
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	429a      	cmp	r2, r3
 801f86c:	d002      	beq.n	801f874 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801f86e:	f06f 0303 	mvn.w	r3, #3
 801f872:	e00d      	b.n	801f890 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f878:	887a      	ldrh	r2, [r7, #2]
 801f87a:	697b      	ldr	r3, [r7, #20]
 801f87c:	9301      	str	r3, [sp, #4]
 801f87e:	6a3b      	ldr	r3, [r7, #32]
 801f880:	9300      	str	r3, [sp, #0]
 801f882:	4613      	mov	r3, r2
 801f884:	687a      	ldr	r2, [r7, #4]
 801f886:	68b9      	ldr	r1, [r7, #8]
 801f888:	68f8      	ldr	r0, [r7, #12]
 801f88a:	f000 f811 	bl	801f8b0 <udp_sendto_if_src>
 801f88e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f890:	4618      	mov	r0, r3
 801f892:	3718      	adds	r7, #24
 801f894:	46bd      	mov	sp, r7
 801f896:	bd80      	pop	{r7, pc}
 801f898:	080257ac 	.word	0x080257ac
 801f89c:	08025968 	.word	0x08025968
 801f8a0:	08025848 	.word	0x08025848
 801f8a4:	08025984 	.word	0x08025984
 801f8a8:	080259a0 	.word	0x080259a0
 801f8ac:	080259c0 	.word	0x080259c0

0801f8b0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801f8b0:	b580      	push	{r7, lr}
 801f8b2:	b08c      	sub	sp, #48	; 0x30
 801f8b4:	af04      	add	r7, sp, #16
 801f8b6:	60f8      	str	r0, [r7, #12]
 801f8b8:	60b9      	str	r1, [r7, #8]
 801f8ba:	607a      	str	r2, [r7, #4]
 801f8bc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d109      	bne.n	801f8d8 <udp_sendto_if_src+0x28>
 801f8c4:	4b65      	ldr	r3, [pc, #404]	; (801fa5c <udp_sendto_if_src+0x1ac>)
 801f8c6:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f8ca:	4965      	ldr	r1, [pc, #404]	; (801fa60 <udp_sendto_if_src+0x1b0>)
 801f8cc:	4865      	ldr	r0, [pc, #404]	; (801fa64 <udp_sendto_if_src+0x1b4>)
 801f8ce:	f001 ffa5 	bl	802181c <iprintf>
 801f8d2:	f06f 030f 	mvn.w	r3, #15
 801f8d6:	e0bc      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f8d8:	68bb      	ldr	r3, [r7, #8]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d109      	bne.n	801f8f2 <udp_sendto_if_src+0x42>
 801f8de:	4b5f      	ldr	r3, [pc, #380]	; (801fa5c <udp_sendto_if_src+0x1ac>)
 801f8e0:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f8e4:	4960      	ldr	r1, [pc, #384]	; (801fa68 <udp_sendto_if_src+0x1b8>)
 801f8e6:	485f      	ldr	r0, [pc, #380]	; (801fa64 <udp_sendto_if_src+0x1b4>)
 801f8e8:	f001 ff98 	bl	802181c <iprintf>
 801f8ec:	f06f 030f 	mvn.w	r3, #15
 801f8f0:	e0af      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f8f2:	687b      	ldr	r3, [r7, #4]
 801f8f4:	2b00      	cmp	r3, #0
 801f8f6:	d109      	bne.n	801f90c <udp_sendto_if_src+0x5c>
 801f8f8:	4b58      	ldr	r3, [pc, #352]	; (801fa5c <udp_sendto_if_src+0x1ac>)
 801f8fa:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f8fe:	495b      	ldr	r1, [pc, #364]	; (801fa6c <udp_sendto_if_src+0x1bc>)
 801f900:	4858      	ldr	r0, [pc, #352]	; (801fa64 <udp_sendto_if_src+0x1b4>)
 801f902:	f001 ff8b 	bl	802181c <iprintf>
 801f906:	f06f 030f 	mvn.w	r3, #15
 801f90a:	e0a2      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d109      	bne.n	801f926 <udp_sendto_if_src+0x76>
 801f912:	4b52      	ldr	r3, [pc, #328]	; (801fa5c <udp_sendto_if_src+0x1ac>)
 801f914:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f918:	4955      	ldr	r1, [pc, #340]	; (801fa70 <udp_sendto_if_src+0x1c0>)
 801f91a:	4852      	ldr	r0, [pc, #328]	; (801fa64 <udp_sendto_if_src+0x1b4>)
 801f91c:	f001 ff7e 	bl	802181c <iprintf>
 801f920:	f06f 030f 	mvn.w	r3, #15
 801f924:	e095      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d109      	bne.n	801f940 <udp_sendto_if_src+0x90>
 801f92c:	4b4b      	ldr	r3, [pc, #300]	; (801fa5c <udp_sendto_if_src+0x1ac>)
 801f92e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f932:	4950      	ldr	r1, [pc, #320]	; (801fa74 <udp_sendto_if_src+0x1c4>)
 801f934:	484b      	ldr	r0, [pc, #300]	; (801fa64 <udp_sendto_if_src+0x1b4>)
 801f936:	f001 ff71 	bl	802181c <iprintf>
 801f93a:	f06f 030f 	mvn.w	r3, #15
 801f93e:	e088      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801f940:	68fb      	ldr	r3, [r7, #12]
 801f942:	8a5b      	ldrh	r3, [r3, #18]
 801f944:	2b00      	cmp	r3, #0
 801f946:	d10f      	bne.n	801f968 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f948:	68f9      	ldr	r1, [r7, #12]
 801f94a:	68fb      	ldr	r3, [r7, #12]
 801f94c:	8a5b      	ldrh	r3, [r3, #18]
 801f94e:	461a      	mov	r2, r3
 801f950:	68f8      	ldr	r0, [r7, #12]
 801f952:	f000 f893 	bl	801fa7c <udp_bind>
 801f956:	4603      	mov	r3, r0
 801f958:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801f95a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d002      	beq.n	801f968 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801f962:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f966:	e074      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f968:	68bb      	ldr	r3, [r7, #8]
 801f96a:	891b      	ldrh	r3, [r3, #8]
 801f96c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801f970:	4293      	cmp	r3, r2
 801f972:	d902      	bls.n	801f97a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801f974:	f04f 33ff 	mov.w	r3, #4294967295
 801f978:	e06b      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f97a:	2108      	movs	r1, #8
 801f97c:	68b8      	ldr	r0, [r7, #8]
 801f97e:	f7f9 fcbb 	bl	80192f8 <pbuf_add_header>
 801f982:	4603      	mov	r3, r0
 801f984:	2b00      	cmp	r3, #0
 801f986:	d015      	beq.n	801f9b4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f988:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f98c:	2108      	movs	r1, #8
 801f98e:	2022      	movs	r0, #34	; 0x22
 801f990:	f7f9 fa64 	bl	8018e5c <pbuf_alloc>
 801f994:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801f996:	69fb      	ldr	r3, [r7, #28]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d102      	bne.n	801f9a2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801f99c:	f04f 33ff 	mov.w	r3, #4294967295
 801f9a0:	e057      	b.n	801fa52 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801f9a2:	68bb      	ldr	r3, [r7, #8]
 801f9a4:	891b      	ldrh	r3, [r3, #8]
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d006      	beq.n	801f9b8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801f9aa:	68b9      	ldr	r1, [r7, #8]
 801f9ac:	69f8      	ldr	r0, [r7, #28]
 801f9ae:	f7f9 fe5d 	bl	801966c <pbuf_chain>
 801f9b2:	e001      	b.n	801f9b8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801f9b4:	68bb      	ldr	r3, [r7, #8]
 801f9b6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f9b8:	69fb      	ldr	r3, [r7, #28]
 801f9ba:	895b      	ldrh	r3, [r3, #10]
 801f9bc:	2b07      	cmp	r3, #7
 801f9be:	d806      	bhi.n	801f9ce <udp_sendto_if_src+0x11e>
 801f9c0:	4b26      	ldr	r3, [pc, #152]	; (801fa5c <udp_sendto_if_src+0x1ac>)
 801f9c2:	f240 320d 	movw	r2, #781	; 0x30d
 801f9c6:	492c      	ldr	r1, [pc, #176]	; (801fa78 <udp_sendto_if_src+0x1c8>)
 801f9c8:	4826      	ldr	r0, [pc, #152]	; (801fa64 <udp_sendto_if_src+0x1b4>)
 801f9ca:	f001 ff27 	bl	802181c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801f9ce:	69fb      	ldr	r3, [r7, #28]
 801f9d0:	685b      	ldr	r3, [r3, #4]
 801f9d2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801f9d4:	68fb      	ldr	r3, [r7, #12]
 801f9d6:	8a5b      	ldrh	r3, [r3, #18]
 801f9d8:	4618      	mov	r0, r3
 801f9da:	f7f3 fff5 	bl	80139c8 <lwip_htons>
 801f9de:	4603      	mov	r3, r0
 801f9e0:	461a      	mov	r2, r3
 801f9e2:	697b      	ldr	r3, [r7, #20]
 801f9e4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f9e6:	887b      	ldrh	r3, [r7, #2]
 801f9e8:	4618      	mov	r0, r3
 801f9ea:	f7f3 ffed 	bl	80139c8 <lwip_htons>
 801f9ee:	4603      	mov	r3, r0
 801f9f0:	461a      	mov	r2, r3
 801f9f2:	697b      	ldr	r3, [r7, #20]
 801f9f4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801f9f6:	697b      	ldr	r3, [r7, #20]
 801f9f8:	2200      	movs	r2, #0
 801f9fa:	719a      	strb	r2, [r3, #6]
 801f9fc:	2200      	movs	r2, #0
 801f9fe:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fa00:	69fb      	ldr	r3, [r7, #28]
 801fa02:	891b      	ldrh	r3, [r3, #8]
 801fa04:	4618      	mov	r0, r3
 801fa06:	f7f3 ffdf 	bl	80139c8 <lwip_htons>
 801fa0a:	4603      	mov	r3, r0
 801fa0c:	461a      	mov	r2, r3
 801fa0e:	697b      	ldr	r3, [r7, #20]
 801fa10:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fa12:	2311      	movs	r3, #17
 801fa14:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fa16:	68fb      	ldr	r3, [r7, #12]
 801fa18:	7adb      	ldrb	r3, [r3, #11]
 801fa1a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fa1c:	68fb      	ldr	r3, [r7, #12]
 801fa1e:	7a9b      	ldrb	r3, [r3, #10]
 801fa20:	7cb9      	ldrb	r1, [r7, #18]
 801fa22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fa24:	9202      	str	r2, [sp, #8]
 801fa26:	7cfa      	ldrb	r2, [r7, #19]
 801fa28:	9201      	str	r2, [sp, #4]
 801fa2a:	9300      	str	r3, [sp, #0]
 801fa2c:	460b      	mov	r3, r1
 801fa2e:	687a      	ldr	r2, [r7, #4]
 801fa30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fa32:	69f8      	ldr	r0, [r7, #28]
 801fa34:	f7f7 fa5c 	bl	8016ef0 <ip4_output_if_src>
 801fa38:	4603      	mov	r3, r0
 801fa3a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fa3c:	69fa      	ldr	r2, [r7, #28]
 801fa3e:	68bb      	ldr	r3, [r7, #8]
 801fa40:	429a      	cmp	r2, r3
 801fa42:	d004      	beq.n	801fa4e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801fa44:	69f8      	ldr	r0, [r7, #28]
 801fa46:	f7f9 fced 	bl	8019424 <pbuf_free>
    q = NULL;
 801fa4a:	2300      	movs	r3, #0
 801fa4c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801fa4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801fa52:	4618      	mov	r0, r3
 801fa54:	3720      	adds	r7, #32
 801fa56:	46bd      	mov	sp, r7
 801fa58:	bd80      	pop	{r7, pc}
 801fa5a:	bf00      	nop
 801fa5c:	080257ac 	.word	0x080257ac
 801fa60:	080259e0 	.word	0x080259e0
 801fa64:	08025848 	.word	0x08025848
 801fa68:	08025a00 	.word	0x08025a00
 801fa6c:	08025a20 	.word	0x08025a20
 801fa70:	08025a44 	.word	0x08025a44
 801fa74:	08025a68 	.word	0x08025a68
 801fa78:	08025a8c 	.word	0x08025a8c

0801fa7c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fa7c:	b580      	push	{r7, lr}
 801fa7e:	b086      	sub	sp, #24
 801fa80:	af00      	add	r7, sp, #0
 801fa82:	60f8      	str	r0, [r7, #12]
 801fa84:	60b9      	str	r1, [r7, #8]
 801fa86:	4613      	mov	r3, r2
 801fa88:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fa8a:	68bb      	ldr	r3, [r7, #8]
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d101      	bne.n	801fa94 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801fa90:	4b39      	ldr	r3, [pc, #228]	; (801fb78 <udp_bind+0xfc>)
 801fa92:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fa94:	68fb      	ldr	r3, [r7, #12]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d109      	bne.n	801faae <udp_bind+0x32>
 801fa9a:	4b38      	ldr	r3, [pc, #224]	; (801fb7c <udp_bind+0x100>)
 801fa9c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801faa0:	4937      	ldr	r1, [pc, #220]	; (801fb80 <udp_bind+0x104>)
 801faa2:	4838      	ldr	r0, [pc, #224]	; (801fb84 <udp_bind+0x108>)
 801faa4:	f001 feba 	bl	802181c <iprintf>
 801faa8:	f06f 030f 	mvn.w	r3, #15
 801faac:	e060      	b.n	801fb70 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801faae:	2300      	movs	r3, #0
 801fab0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fab2:	4b35      	ldr	r3, [pc, #212]	; (801fb88 <udp_bind+0x10c>)
 801fab4:	681b      	ldr	r3, [r3, #0]
 801fab6:	617b      	str	r3, [r7, #20]
 801fab8:	e009      	b.n	801face <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801faba:	68fa      	ldr	r2, [r7, #12]
 801fabc:	697b      	ldr	r3, [r7, #20]
 801fabe:	429a      	cmp	r2, r3
 801fac0:	d102      	bne.n	801fac8 <udp_bind+0x4c>
      rebind = 1;
 801fac2:	2301      	movs	r3, #1
 801fac4:	74fb      	strb	r3, [r7, #19]
      break;
 801fac6:	e005      	b.n	801fad4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fac8:	697b      	ldr	r3, [r7, #20]
 801faca:	68db      	ldr	r3, [r3, #12]
 801facc:	617b      	str	r3, [r7, #20]
 801face:	697b      	ldr	r3, [r7, #20]
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d1f2      	bne.n	801faba <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fad4:	88fb      	ldrh	r3, [r7, #6]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d109      	bne.n	801faee <udp_bind+0x72>
    port = udp_new_port();
 801fada:	f7ff fcc5 	bl	801f468 <udp_new_port>
 801fade:	4603      	mov	r3, r0
 801fae0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fae2:	88fb      	ldrh	r3, [r7, #6]
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	d12c      	bne.n	801fb42 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fae8:	f06f 0307 	mvn.w	r3, #7
 801faec:	e040      	b.n	801fb70 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801faee:	4b26      	ldr	r3, [pc, #152]	; (801fb88 <udp_bind+0x10c>)
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	617b      	str	r3, [r7, #20]
 801faf4:	e022      	b.n	801fb3c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801faf6:	68fa      	ldr	r2, [r7, #12]
 801faf8:	697b      	ldr	r3, [r7, #20]
 801fafa:	429a      	cmp	r2, r3
 801fafc:	d01b      	beq.n	801fb36 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fafe:	697b      	ldr	r3, [r7, #20]
 801fb00:	8a5b      	ldrh	r3, [r3, #18]
 801fb02:	88fa      	ldrh	r2, [r7, #6]
 801fb04:	429a      	cmp	r2, r3
 801fb06:	d116      	bne.n	801fb36 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb08:	697b      	ldr	r3, [r7, #20]
 801fb0a:	681a      	ldr	r2, [r3, #0]
 801fb0c:	68bb      	ldr	r3, [r7, #8]
 801fb0e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fb10:	429a      	cmp	r2, r3
 801fb12:	d00d      	beq.n	801fb30 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb14:	68bb      	ldr	r3, [r7, #8]
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d00a      	beq.n	801fb30 <udp_bind+0xb4>
 801fb1a:	68bb      	ldr	r3, [r7, #8]
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d006      	beq.n	801fb30 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb22:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb24:	2b00      	cmp	r3, #0
 801fb26:	d003      	beq.n	801fb30 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb28:	697b      	ldr	r3, [r7, #20]
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d102      	bne.n	801fb36 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fb30:	f06f 0307 	mvn.w	r3, #7
 801fb34:	e01c      	b.n	801fb70 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb36:	697b      	ldr	r3, [r7, #20]
 801fb38:	68db      	ldr	r3, [r3, #12]
 801fb3a:	617b      	str	r3, [r7, #20]
 801fb3c:	697b      	ldr	r3, [r7, #20]
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d1d9      	bne.n	801faf6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fb42:	68bb      	ldr	r3, [r7, #8]
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d002      	beq.n	801fb4e <udp_bind+0xd2>
 801fb48:	68bb      	ldr	r3, [r7, #8]
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	e000      	b.n	801fb50 <udp_bind+0xd4>
 801fb4e:	2300      	movs	r3, #0
 801fb50:	68fa      	ldr	r2, [r7, #12]
 801fb52:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fb54:	68fb      	ldr	r3, [r7, #12]
 801fb56:	88fa      	ldrh	r2, [r7, #6]
 801fb58:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fb5a:	7cfb      	ldrb	r3, [r7, #19]
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d106      	bne.n	801fb6e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fb60:	4b09      	ldr	r3, [pc, #36]	; (801fb88 <udp_bind+0x10c>)
 801fb62:	681a      	ldr	r2, [r3, #0]
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fb68:	4a07      	ldr	r2, [pc, #28]	; (801fb88 <udp_bind+0x10c>)
 801fb6a:	68fb      	ldr	r3, [r7, #12]
 801fb6c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fb6e:	2300      	movs	r3, #0
}
 801fb70:	4618      	mov	r0, r3
 801fb72:	3718      	adds	r7, #24
 801fb74:	46bd      	mov	sp, r7
 801fb76:	bd80      	pop	{r7, pc}
 801fb78:	08025bf0 	.word	0x08025bf0
 801fb7c:	080257ac 	.word	0x080257ac
 801fb80:	08025abc 	.word	0x08025abc
 801fb84:	08025848 	.word	0x08025848
 801fb88:	20011f98 	.word	0x20011f98

0801fb8c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fb8c:	b580      	push	{r7, lr}
 801fb8e:	b086      	sub	sp, #24
 801fb90:	af00      	add	r7, sp, #0
 801fb92:	60f8      	str	r0, [r7, #12]
 801fb94:	60b9      	str	r1, [r7, #8]
 801fb96:	4613      	mov	r3, r2
 801fb98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fb9a:	68fb      	ldr	r3, [r7, #12]
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d109      	bne.n	801fbb4 <udp_connect+0x28>
 801fba0:	4b2c      	ldr	r3, [pc, #176]	; (801fc54 <udp_connect+0xc8>)
 801fba2:	f240 4235 	movw	r2, #1077	; 0x435
 801fba6:	492c      	ldr	r1, [pc, #176]	; (801fc58 <udp_connect+0xcc>)
 801fba8:	482c      	ldr	r0, [pc, #176]	; (801fc5c <udp_connect+0xd0>)
 801fbaa:	f001 fe37 	bl	802181c <iprintf>
 801fbae:	f06f 030f 	mvn.w	r3, #15
 801fbb2:	e04b      	b.n	801fc4c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fbb4:	68bb      	ldr	r3, [r7, #8]
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d109      	bne.n	801fbce <udp_connect+0x42>
 801fbba:	4b26      	ldr	r3, [pc, #152]	; (801fc54 <udp_connect+0xc8>)
 801fbbc:	f240 4236 	movw	r2, #1078	; 0x436
 801fbc0:	4927      	ldr	r1, [pc, #156]	; (801fc60 <udp_connect+0xd4>)
 801fbc2:	4826      	ldr	r0, [pc, #152]	; (801fc5c <udp_connect+0xd0>)
 801fbc4:	f001 fe2a 	bl	802181c <iprintf>
 801fbc8:	f06f 030f 	mvn.w	r3, #15
 801fbcc:	e03e      	b.n	801fc4c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801fbce:	68fb      	ldr	r3, [r7, #12]
 801fbd0:	8a5b      	ldrh	r3, [r3, #18]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d10f      	bne.n	801fbf6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fbd6:	68f9      	ldr	r1, [r7, #12]
 801fbd8:	68fb      	ldr	r3, [r7, #12]
 801fbda:	8a5b      	ldrh	r3, [r3, #18]
 801fbdc:	461a      	mov	r2, r3
 801fbde:	68f8      	ldr	r0, [r7, #12]
 801fbe0:	f7ff ff4c 	bl	801fa7c <udp_bind>
 801fbe4:	4603      	mov	r3, r0
 801fbe6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801fbe8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d002      	beq.n	801fbf6 <udp_connect+0x6a>
      return err;
 801fbf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fbf4:	e02a      	b.n	801fc4c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fbf6:	68bb      	ldr	r3, [r7, #8]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d002      	beq.n	801fc02 <udp_connect+0x76>
 801fbfc:	68bb      	ldr	r3, [r7, #8]
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	e000      	b.n	801fc04 <udp_connect+0x78>
 801fc02:	2300      	movs	r3, #0
 801fc04:	68fa      	ldr	r2, [r7, #12]
 801fc06:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801fc08:	68fb      	ldr	r3, [r7, #12]
 801fc0a:	88fa      	ldrh	r2, [r7, #6]
 801fc0c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fc0e:	68fb      	ldr	r3, [r7, #12]
 801fc10:	7c1b      	ldrb	r3, [r3, #16]
 801fc12:	f043 0304 	orr.w	r3, r3, #4
 801fc16:	b2da      	uxtb	r2, r3
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc1c:	4b11      	ldr	r3, [pc, #68]	; (801fc64 <udp_connect+0xd8>)
 801fc1e:	681b      	ldr	r3, [r3, #0]
 801fc20:	617b      	str	r3, [r7, #20]
 801fc22:	e008      	b.n	801fc36 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801fc24:	68fa      	ldr	r2, [r7, #12]
 801fc26:	697b      	ldr	r3, [r7, #20]
 801fc28:	429a      	cmp	r2, r3
 801fc2a:	d101      	bne.n	801fc30 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801fc2c:	2300      	movs	r3, #0
 801fc2e:	e00d      	b.n	801fc4c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc30:	697b      	ldr	r3, [r7, #20]
 801fc32:	68db      	ldr	r3, [r3, #12]
 801fc34:	617b      	str	r3, [r7, #20]
 801fc36:	697b      	ldr	r3, [r7, #20]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d1f3      	bne.n	801fc24 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801fc3c:	4b09      	ldr	r3, [pc, #36]	; (801fc64 <udp_connect+0xd8>)
 801fc3e:	681a      	ldr	r2, [r3, #0]
 801fc40:	68fb      	ldr	r3, [r7, #12]
 801fc42:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801fc44:	4a07      	ldr	r2, [pc, #28]	; (801fc64 <udp_connect+0xd8>)
 801fc46:	68fb      	ldr	r3, [r7, #12]
 801fc48:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801fc4a:	2300      	movs	r3, #0
}
 801fc4c:	4618      	mov	r0, r3
 801fc4e:	3718      	adds	r7, #24
 801fc50:	46bd      	mov	sp, r7
 801fc52:	bd80      	pop	{r7, pc}
 801fc54:	080257ac 	.word	0x080257ac
 801fc58:	08025ad4 	.word	0x08025ad4
 801fc5c:	08025848 	.word	0x08025848
 801fc60:	08025af0 	.word	0x08025af0
 801fc64:	20011f98 	.word	0x20011f98

0801fc68 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fc68:	b580      	push	{r7, lr}
 801fc6a:	b084      	sub	sp, #16
 801fc6c:	af00      	add	r7, sp, #0
 801fc6e:	60f8      	str	r0, [r7, #12]
 801fc70:	60b9      	str	r1, [r7, #8]
 801fc72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fc74:	68fb      	ldr	r3, [r7, #12]
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d107      	bne.n	801fc8a <udp_recv+0x22>
 801fc7a:	4b08      	ldr	r3, [pc, #32]	; (801fc9c <udp_recv+0x34>)
 801fc7c:	f240 428a 	movw	r2, #1162	; 0x48a
 801fc80:	4907      	ldr	r1, [pc, #28]	; (801fca0 <udp_recv+0x38>)
 801fc82:	4808      	ldr	r0, [pc, #32]	; (801fca4 <udp_recv+0x3c>)
 801fc84:	f001 fdca 	bl	802181c <iprintf>
 801fc88:	e005      	b.n	801fc96 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fc8a:	68fb      	ldr	r3, [r7, #12]
 801fc8c:	68ba      	ldr	r2, [r7, #8]
 801fc8e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fc90:	68fb      	ldr	r3, [r7, #12]
 801fc92:	687a      	ldr	r2, [r7, #4]
 801fc94:	61da      	str	r2, [r3, #28]
}
 801fc96:	3710      	adds	r7, #16
 801fc98:	46bd      	mov	sp, r7
 801fc9a:	bd80      	pop	{r7, pc}
 801fc9c:	080257ac 	.word	0x080257ac
 801fca0:	08025b28 	.word	0x08025b28
 801fca4:	08025848 	.word	0x08025848

0801fca8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801fca8:	b580      	push	{r7, lr}
 801fcaa:	b084      	sub	sp, #16
 801fcac:	af00      	add	r7, sp, #0
 801fcae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	d107      	bne.n	801fcc6 <udp_remove+0x1e>
 801fcb6:	4b19      	ldr	r3, [pc, #100]	; (801fd1c <udp_remove+0x74>)
 801fcb8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fcbc:	4918      	ldr	r1, [pc, #96]	; (801fd20 <udp_remove+0x78>)
 801fcbe:	4819      	ldr	r0, [pc, #100]	; (801fd24 <udp_remove+0x7c>)
 801fcc0:	f001 fdac 	bl	802181c <iprintf>
 801fcc4:	e026      	b.n	801fd14 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fcc6:	4b18      	ldr	r3, [pc, #96]	; (801fd28 <udp_remove+0x80>)
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	687a      	ldr	r2, [r7, #4]
 801fccc:	429a      	cmp	r2, r3
 801fcce:	d105      	bne.n	801fcdc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fcd0:	4b15      	ldr	r3, [pc, #84]	; (801fd28 <udp_remove+0x80>)
 801fcd2:	681b      	ldr	r3, [r3, #0]
 801fcd4:	68db      	ldr	r3, [r3, #12]
 801fcd6:	4a14      	ldr	r2, [pc, #80]	; (801fd28 <udp_remove+0x80>)
 801fcd8:	6013      	str	r3, [r2, #0]
 801fcda:	e017      	b.n	801fd0c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fcdc:	4b12      	ldr	r3, [pc, #72]	; (801fd28 <udp_remove+0x80>)
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	60fb      	str	r3, [r7, #12]
 801fce2:	e010      	b.n	801fd06 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fce4:	68fb      	ldr	r3, [r7, #12]
 801fce6:	68db      	ldr	r3, [r3, #12]
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d009      	beq.n	801fd00 <udp_remove+0x58>
 801fcec:	68fb      	ldr	r3, [r7, #12]
 801fcee:	68db      	ldr	r3, [r3, #12]
 801fcf0:	687a      	ldr	r2, [r7, #4]
 801fcf2:	429a      	cmp	r2, r3
 801fcf4:	d104      	bne.n	801fd00 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	68da      	ldr	r2, [r3, #12]
 801fcfa:	68fb      	ldr	r3, [r7, #12]
 801fcfc:	60da      	str	r2, [r3, #12]
        break;
 801fcfe:	e005      	b.n	801fd0c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fd00:	68fb      	ldr	r3, [r7, #12]
 801fd02:	68db      	ldr	r3, [r3, #12]
 801fd04:	60fb      	str	r3, [r7, #12]
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d1eb      	bne.n	801fce4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fd0c:	6879      	ldr	r1, [r7, #4]
 801fd0e:	2000      	movs	r0, #0
 801fd10:	f7f8 fcd8 	bl	80186c4 <memp_free>
}
 801fd14:	3710      	adds	r7, #16
 801fd16:	46bd      	mov	sp, r7
 801fd18:	bd80      	pop	{r7, pc}
 801fd1a:	bf00      	nop
 801fd1c:	080257ac 	.word	0x080257ac
 801fd20:	08025b40 	.word	0x08025b40
 801fd24:	08025848 	.word	0x08025848
 801fd28:	20011f98 	.word	0x20011f98

0801fd2c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fd2c:	b580      	push	{r7, lr}
 801fd2e:	b082      	sub	sp, #8
 801fd30:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fd32:	2000      	movs	r0, #0
 801fd34:	f7f8 fc74 	bl	8018620 <memp_malloc>
 801fd38:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d007      	beq.n	801fd50 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fd40:	2220      	movs	r2, #32
 801fd42:	2100      	movs	r1, #0
 801fd44:	6878      	ldr	r0, [r7, #4]
 801fd46:	f001 fcb7 	bl	80216b8 <memset>
    pcb->ttl = UDP_TTL;
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	22ff      	movs	r2, #255	; 0xff
 801fd4e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fd50:	687b      	ldr	r3, [r7, #4]
}
 801fd52:	4618      	mov	r0, r3
 801fd54:	3708      	adds	r7, #8
 801fd56:	46bd      	mov	sp, r7
 801fd58:	bd80      	pop	{r7, pc}
	...

0801fd5c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fd5c:	b480      	push	{r7}
 801fd5e:	b085      	sub	sp, #20
 801fd60:	af00      	add	r7, sp, #0
 801fd62:	6078      	str	r0, [r7, #4]
 801fd64:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d01e      	beq.n	801fdaa <udp_netif_ip_addr_changed+0x4e>
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d01a      	beq.n	801fdaa <udp_netif_ip_addr_changed+0x4e>
 801fd74:	683b      	ldr	r3, [r7, #0]
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d017      	beq.n	801fdaa <udp_netif_ip_addr_changed+0x4e>
 801fd7a:	683b      	ldr	r3, [r7, #0]
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	d013      	beq.n	801fdaa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fd82:	4b0d      	ldr	r3, [pc, #52]	; (801fdb8 <udp_netif_ip_addr_changed+0x5c>)
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	60fb      	str	r3, [r7, #12]
 801fd88:	e00c      	b.n	801fda4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	681a      	ldr	r2, [r3, #0]
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	429a      	cmp	r2, r3
 801fd94:	d103      	bne.n	801fd9e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801fd96:	683b      	ldr	r3, [r7, #0]
 801fd98:	681a      	ldr	r2, [r3, #0]
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fd9e:	68fb      	ldr	r3, [r7, #12]
 801fda0:	68db      	ldr	r3, [r3, #12]
 801fda2:	60fb      	str	r3, [r7, #12]
 801fda4:	68fb      	ldr	r3, [r7, #12]
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d1ef      	bne.n	801fd8a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801fdaa:	bf00      	nop
 801fdac:	3714      	adds	r7, #20
 801fdae:	46bd      	mov	sp, r7
 801fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdb4:	4770      	bx	lr
 801fdb6:	bf00      	nop
 801fdb8:	20011f98 	.word	0x20011f98

0801fdbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801fdbc:	b580      	push	{r7, lr}
 801fdbe:	b084      	sub	sp, #16
 801fdc0:	af00      	add	r7, sp, #0
 801fdc2:	6078      	str	r0, [r7, #4]
 801fdc4:	460b      	mov	r3, r1
 801fdc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801fdc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801fdcc:	f001 fc48 	bl	8021660 <malloc>
 801fdd0:	4603      	mov	r3, r0
 801fdd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d105      	bne.n	801fde6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	2200      	movs	r2, #0
 801fdde:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801fde2:	2302      	movs	r3, #2
 801fde4:	e066      	b.n	801feb4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	68fa      	ldr	r2, [r7, #12]
 801fdea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	7c1b      	ldrb	r3, [r3, #16]
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d119      	bne.n	801fe2a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801fdf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 801fdfa:	2202      	movs	r2, #2
 801fdfc:	2181      	movs	r1, #129	; 0x81
 801fdfe:	6878      	ldr	r0, [r7, #4]
 801fe00:	f7e4 f9fb 	bl	80041fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	2201      	movs	r2, #1
 801fe08:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801fe0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801fe0e:	2202      	movs	r2, #2
 801fe10:	2101      	movs	r1, #1
 801fe12:	6878      	ldr	r0, [r7, #4]
 801fe14:	f7e4 f9f1 	bl	80041fa <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	2201      	movs	r2, #1
 801fe1c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	2210      	movs	r2, #16
 801fe24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801fe28:	e016      	b.n	801fe58 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801fe2a:	2340      	movs	r3, #64	; 0x40
 801fe2c:	2202      	movs	r2, #2
 801fe2e:	2181      	movs	r1, #129	; 0x81
 801fe30:	6878      	ldr	r0, [r7, #4]
 801fe32:	f7e4 f9e2 	bl	80041fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	2201      	movs	r2, #1
 801fe3a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801fe3c:	2340      	movs	r3, #64	; 0x40
 801fe3e:	2202      	movs	r2, #2
 801fe40:	2101      	movs	r1, #1
 801fe42:	6878      	ldr	r0, [r7, #4]
 801fe44:	f7e4 f9d9 	bl	80041fa <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	2201      	movs	r2, #1
 801fe4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	2210      	movs	r2, #16
 801fe54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801fe58:	2308      	movs	r3, #8
 801fe5a:	2203      	movs	r2, #3
 801fe5c:	2182      	movs	r1, #130	; 0x82
 801fe5e:	6878      	ldr	r0, [r7, #4]
 801fe60:	f7e4 f9cb 	bl	80041fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	2201      	movs	r2, #1
 801fe68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801fe76:	68fb      	ldr	r3, [r7, #12]
 801fe78:	2200      	movs	r2, #0
 801fe7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	2200      	movs	r2, #0
 801fe82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	7c1b      	ldrb	r3, [r3, #16]
 801fe8a:	2b00      	cmp	r3, #0
 801fe8c:	d109      	bne.n	801fea2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801fe8e:	68fb      	ldr	r3, [r7, #12]
 801fe90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801fe94:	f44f 7300 	mov.w	r3, #512	; 0x200
 801fe98:	2101      	movs	r1, #1
 801fe9a:	6878      	ldr	r0, [r7, #4]
 801fe9c:	f7e4 fa9c 	bl	80043d8 <USBD_LL_PrepareReceive>
 801fea0:	e007      	b.n	801feb2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801fea2:	68fb      	ldr	r3, [r7, #12]
 801fea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801fea8:	2340      	movs	r3, #64	; 0x40
 801feaa:	2101      	movs	r1, #1
 801feac:	6878      	ldr	r0, [r7, #4]
 801feae:	f7e4 fa93 	bl	80043d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801feb2:	2300      	movs	r3, #0
}
 801feb4:	4618      	mov	r0, r3
 801feb6:	3710      	adds	r7, #16
 801feb8:	46bd      	mov	sp, r7
 801feba:	bd80      	pop	{r7, pc}

0801febc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801febc:	b580      	push	{r7, lr}
 801febe:	b084      	sub	sp, #16
 801fec0:	af00      	add	r7, sp, #0
 801fec2:	6078      	str	r0, [r7, #4]
 801fec4:	460b      	mov	r3, r1
 801fec6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 801fec8:	2300      	movs	r3, #0
 801feca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801fecc:	2181      	movs	r1, #129	; 0x81
 801fece:	6878      	ldr	r0, [r7, #4]
 801fed0:	f7e4 f9b9 	bl	8004246 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	2200      	movs	r2, #0
 801fed8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801feda:	2101      	movs	r1, #1
 801fedc:	6878      	ldr	r0, [r7, #4]
 801fede:	f7e4 f9b2 	bl	8004246 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	2200      	movs	r2, #0
 801fee6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801feea:	2182      	movs	r1, #130	; 0x82
 801feec:	6878      	ldr	r0, [r7, #4]
 801feee:	f7e4 f9aa 	bl	8004246 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	2200      	movs	r2, #0
 801fef6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	2200      	movs	r2, #0
 801fefe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff08:	2b00      	cmp	r3, #0
 801ff0a:	d00e      	beq.n	801ff2a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ff12:	685b      	ldr	r3, [r3, #4]
 801ff14:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff1c:	4618      	mov	r0, r3
 801ff1e:	f001 fba7 	bl	8021670 <free>
    pdev->pClassData = NULL;
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	2200      	movs	r2, #0
 801ff26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 801ff2a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ff2c:	4618      	mov	r0, r3
 801ff2e:	3710      	adds	r7, #16
 801ff30:	46bd      	mov	sp, r7
 801ff32:	bd80      	pop	{r7, pc}

0801ff34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801ff34:	b580      	push	{r7, lr}
 801ff36:	b086      	sub	sp, #24
 801ff38:	af00      	add	r7, sp, #0
 801ff3a:	6078      	str	r0, [r7, #4]
 801ff3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801ff46:	2300      	movs	r3, #0
 801ff48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801ff4a:	2300      	movs	r3, #0
 801ff4c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801ff4e:	2300      	movs	r3, #0
 801ff50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ff52:	683b      	ldr	r3, [r7, #0]
 801ff54:	781b      	ldrb	r3, [r3, #0]
 801ff56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d03a      	beq.n	801ffd4 <USBD_CDC_Setup+0xa0>
 801ff5e:	2b20      	cmp	r3, #32
 801ff60:	f040 8097 	bne.w	8020092 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 801ff64:	683b      	ldr	r3, [r7, #0]
 801ff66:	88db      	ldrh	r3, [r3, #6]
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	d029      	beq.n	801ffc0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 801ff6c:	683b      	ldr	r3, [r7, #0]
 801ff6e:	781b      	ldrb	r3, [r3, #0]
 801ff70:	b25b      	sxtb	r3, r3
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	da11      	bge.n	801ff9a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ff7c:	689b      	ldr	r3, [r3, #8]
 801ff7e:	683a      	ldr	r2, [r7, #0]
 801ff80:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 801ff82:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ff84:	683a      	ldr	r2, [r7, #0]
 801ff86:	88d2      	ldrh	r2, [r2, #6]
 801ff88:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801ff8a:	6939      	ldr	r1, [r7, #16]
 801ff8c:	683b      	ldr	r3, [r7, #0]
 801ff8e:	88db      	ldrh	r3, [r3, #6]
 801ff90:	461a      	mov	r2, r3
 801ff92:	6878      	ldr	r0, [r7, #4]
 801ff94:	f001 fac0 	bl	8021518 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 801ff98:	e082      	b.n	80200a0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801ff9a:	683b      	ldr	r3, [r7, #0]
 801ff9c:	785a      	ldrb	r2, [r3, #1]
 801ff9e:	693b      	ldr	r3, [r7, #16]
 801ffa0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 801ffa4:	683b      	ldr	r3, [r7, #0]
 801ffa6:	88db      	ldrh	r3, [r3, #6]
 801ffa8:	b2da      	uxtb	r2, r3
 801ffaa:	693b      	ldr	r3, [r7, #16]
 801ffac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801ffb0:	6939      	ldr	r1, [r7, #16]
 801ffb2:	683b      	ldr	r3, [r7, #0]
 801ffb4:	88db      	ldrh	r3, [r3, #6]
 801ffb6:	461a      	mov	r2, r3
 801ffb8:	6878      	ldr	r0, [r7, #4]
 801ffba:	f001 fad9 	bl	8021570 <USBD_CtlPrepareRx>
    break;
 801ffbe:	e06f      	b.n	80200a0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ffc6:	689b      	ldr	r3, [r3, #8]
 801ffc8:	683a      	ldr	r2, [r7, #0]
 801ffca:	7850      	ldrb	r0, [r2, #1]
 801ffcc:	2200      	movs	r2, #0
 801ffce:	6839      	ldr	r1, [r7, #0]
 801ffd0:	4798      	blx	r3
    break;
 801ffd2:	e065      	b.n	80200a0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801ffd4:	683b      	ldr	r3, [r7, #0]
 801ffd6:	785b      	ldrb	r3, [r3, #1]
 801ffd8:	2b0b      	cmp	r3, #11
 801ffda:	d84f      	bhi.n	802007c <USBD_CDC_Setup+0x148>
 801ffdc:	a201      	add	r2, pc, #4	; (adr r2, 801ffe4 <USBD_CDC_Setup+0xb0>)
 801ffde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ffe2:	bf00      	nop
 801ffe4:	08020015 	.word	0x08020015
 801ffe8:	0802008b 	.word	0x0802008b
 801ffec:	0802007d 	.word	0x0802007d
 801fff0:	0802007d 	.word	0x0802007d
 801fff4:	0802007d 	.word	0x0802007d
 801fff8:	0802007d 	.word	0x0802007d
 801fffc:	0802007d 	.word	0x0802007d
 8020000:	0802007d 	.word	0x0802007d
 8020004:	0802007d 	.word	0x0802007d
 8020008:	0802007d 	.word	0x0802007d
 802000c:	0802003d 	.word	0x0802003d
 8020010:	08020065 	.word	0x08020065
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802001a:	2b03      	cmp	r3, #3
 802001c:	d107      	bne.n	802002e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802001e:	f107 030c 	add.w	r3, r7, #12
 8020022:	2202      	movs	r2, #2
 8020024:	4619      	mov	r1, r3
 8020026:	6878      	ldr	r0, [r7, #4]
 8020028:	f001 fa76 	bl	8021518 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 802002c:	e030      	b.n	8020090 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 802002e:	6839      	ldr	r1, [r7, #0]
 8020030:	6878      	ldr	r0, [r7, #4]
 8020032:	f001 fa00 	bl	8021436 <USBD_CtlError>
        ret = USBD_FAIL;
 8020036:	2303      	movs	r3, #3
 8020038:	75fb      	strb	r3, [r7, #23]
      break;
 802003a:	e029      	b.n	8020090 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020042:	2b03      	cmp	r3, #3
 8020044:	d107      	bne.n	8020056 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8020046:	f107 030f 	add.w	r3, r7, #15
 802004a:	2201      	movs	r2, #1
 802004c:	4619      	mov	r1, r3
 802004e:	6878      	ldr	r0, [r7, #4]
 8020050:	f001 fa62 	bl	8021518 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8020054:	e01c      	b.n	8020090 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8020056:	6839      	ldr	r1, [r7, #0]
 8020058:	6878      	ldr	r0, [r7, #4]
 802005a:	f001 f9ec 	bl	8021436 <USBD_CtlError>
        ret = USBD_FAIL;
 802005e:	2303      	movs	r3, #3
 8020060:	75fb      	strb	r3, [r7, #23]
      break;
 8020062:	e015      	b.n	8020090 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8020064:	687b      	ldr	r3, [r7, #4]
 8020066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802006a:	2b03      	cmp	r3, #3
 802006c:	d00f      	beq.n	802008e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 802006e:	6839      	ldr	r1, [r7, #0]
 8020070:	6878      	ldr	r0, [r7, #4]
 8020072:	f001 f9e0 	bl	8021436 <USBD_CtlError>
        ret = USBD_FAIL;
 8020076:	2303      	movs	r3, #3
 8020078:	75fb      	strb	r3, [r7, #23]
      }
      break;
 802007a:	e008      	b.n	802008e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 802007c:	6839      	ldr	r1, [r7, #0]
 802007e:	6878      	ldr	r0, [r7, #4]
 8020080:	f001 f9d9 	bl	8021436 <USBD_CtlError>
      ret = USBD_FAIL;
 8020084:	2303      	movs	r3, #3
 8020086:	75fb      	strb	r3, [r7, #23]
      break;
 8020088:	e002      	b.n	8020090 <USBD_CDC_Setup+0x15c>
      break;
 802008a:	bf00      	nop
 802008c:	e008      	b.n	80200a0 <USBD_CDC_Setup+0x16c>
      break;
 802008e:	bf00      	nop
    }
    break;
 8020090:	e006      	b.n	80200a0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8020092:	6839      	ldr	r1, [r7, #0]
 8020094:	6878      	ldr	r0, [r7, #4]
 8020096:	f001 f9ce 	bl	8021436 <USBD_CtlError>
    ret = USBD_FAIL;
 802009a:	2303      	movs	r3, #3
 802009c:	75fb      	strb	r3, [r7, #23]
    break;
 802009e:	bf00      	nop
  }

  return (uint8_t)ret;
 80200a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80200a2:	4618      	mov	r0, r3
 80200a4:	3718      	adds	r7, #24
 80200a6:	46bd      	mov	sp, r7
 80200a8:	bd80      	pop	{r7, pc}
 80200aa:	bf00      	nop

080200ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80200ac:	b580      	push	{r7, lr}
 80200ae:	b084      	sub	sp, #16
 80200b0:	af00      	add	r7, sp, #0
 80200b2:	6078      	str	r0, [r7, #4]
 80200b4:	460b      	mov	r3, r1
 80200b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80200be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d101      	bne.n	80200ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80200ca:	2303      	movs	r3, #3
 80200cc:	e049      	b.n	8020162 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80200d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80200d6:	78fa      	ldrb	r2, [r7, #3]
 80200d8:	6879      	ldr	r1, [r7, #4]
 80200da:	4613      	mov	r3, r2
 80200dc:	009b      	lsls	r3, r3, #2
 80200de:	4413      	add	r3, r2
 80200e0:	009b      	lsls	r3, r3, #2
 80200e2:	440b      	add	r3, r1
 80200e4:	3318      	adds	r3, #24
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d029      	beq.n	8020140 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80200ec:	78fa      	ldrb	r2, [r7, #3]
 80200ee:	6879      	ldr	r1, [r7, #4]
 80200f0:	4613      	mov	r3, r2
 80200f2:	009b      	lsls	r3, r3, #2
 80200f4:	4413      	add	r3, r2
 80200f6:	009b      	lsls	r3, r3, #2
 80200f8:	440b      	add	r3, r1
 80200fa:	3318      	adds	r3, #24
 80200fc:	681a      	ldr	r2, [r3, #0]
 80200fe:	78f9      	ldrb	r1, [r7, #3]
 8020100:	68f8      	ldr	r0, [r7, #12]
 8020102:	460b      	mov	r3, r1
 8020104:	00db      	lsls	r3, r3, #3
 8020106:	1a5b      	subs	r3, r3, r1
 8020108:	009b      	lsls	r3, r3, #2
 802010a:	4403      	add	r3, r0
 802010c:	3344      	adds	r3, #68	; 0x44
 802010e:	681b      	ldr	r3, [r3, #0]
 8020110:	fbb2 f1f3 	udiv	r1, r2, r3
 8020114:	fb03 f301 	mul.w	r3, r3, r1
 8020118:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 802011a:	2b00      	cmp	r3, #0
 802011c:	d110      	bne.n	8020140 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 802011e:	78fa      	ldrb	r2, [r7, #3]
 8020120:	6879      	ldr	r1, [r7, #4]
 8020122:	4613      	mov	r3, r2
 8020124:	009b      	lsls	r3, r3, #2
 8020126:	4413      	add	r3, r2
 8020128:	009b      	lsls	r3, r3, #2
 802012a:	440b      	add	r3, r1
 802012c:	3318      	adds	r3, #24
 802012e:	2200      	movs	r2, #0
 8020130:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020132:	78f9      	ldrb	r1, [r7, #3]
 8020134:	2300      	movs	r3, #0
 8020136:	2200      	movs	r2, #0
 8020138:	6878      	ldr	r0, [r7, #4]
 802013a:	f7e4 f92c 	bl	8004396 <USBD_LL_Transmit>
 802013e:	e00f      	b.n	8020160 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8020140:	68bb      	ldr	r3, [r7, #8]
 8020142:	2200      	movs	r2, #0
 8020144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8020148:	687b      	ldr	r3, [r7, #4]
 802014a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802014e:	691b      	ldr	r3, [r3, #16]
 8020150:	68ba      	ldr	r2, [r7, #8]
 8020152:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8020156:	68ba      	ldr	r2, [r7, #8]
 8020158:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802015c:	78fa      	ldrb	r2, [r7, #3]
 802015e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8020160:	2300      	movs	r3, #0
}
 8020162:	4618      	mov	r0, r3
 8020164:	3710      	adds	r7, #16
 8020166:	46bd      	mov	sp, r7
 8020168:	bd80      	pop	{r7, pc}

0802016a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802016a:	b580      	push	{r7, lr}
 802016c:	b084      	sub	sp, #16
 802016e:	af00      	add	r7, sp, #0
 8020170:	6078      	str	r0, [r7, #4]
 8020172:	460b      	mov	r3, r1
 8020174:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802017c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 802017e:	687b      	ldr	r3, [r7, #4]
 8020180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020184:	2b00      	cmp	r3, #0
 8020186:	d101      	bne.n	802018c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8020188:	2303      	movs	r3, #3
 802018a:	e015      	b.n	80201b8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802018c:	78fb      	ldrb	r3, [r7, #3]
 802018e:	4619      	mov	r1, r3
 8020190:	6878      	ldr	r0, [r7, #4]
 8020192:	f7e4 f942 	bl	800441a <USBD_LL_GetRxDataSize>
 8020196:	4602      	mov	r2, r0
 8020198:	68fb      	ldr	r3, [r7, #12]
 802019a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80201a4:	68db      	ldr	r3, [r3, #12]
 80201a6:	68fa      	ldr	r2, [r7, #12]
 80201a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80201ac:	68fa      	ldr	r2, [r7, #12]
 80201ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80201b2:	4611      	mov	r1, r2
 80201b4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80201b6:	2300      	movs	r3, #0
}
 80201b8:	4618      	mov	r0, r3
 80201ba:	3710      	adds	r7, #16
 80201bc:	46bd      	mov	sp, r7
 80201be:	bd80      	pop	{r7, pc}

080201c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80201c0:	b580      	push	{r7, lr}
 80201c2:	b084      	sub	sp, #16
 80201c4:	af00      	add	r7, sp, #0
 80201c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80201ce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80201d6:	2b00      	cmp	r3, #0
 80201d8:	d015      	beq.n	8020206 <USBD_CDC_EP0_RxReady+0x46>
 80201da:	68fb      	ldr	r3, [r7, #12]
 80201dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80201e0:	2bff      	cmp	r3, #255	; 0xff
 80201e2:	d010      	beq.n	8020206 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80201ea:	689b      	ldr	r3, [r3, #8]
 80201ec:	68fa      	ldr	r2, [r7, #12]
 80201ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80201f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80201f4:	68fa      	ldr	r2, [r7, #12]
 80201f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80201fa:	b292      	uxth	r2, r2
 80201fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80201fe:	68fb      	ldr	r3, [r7, #12]
 8020200:	22ff      	movs	r2, #255	; 0xff
 8020202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8020206:	2300      	movs	r3, #0
}
 8020208:	4618      	mov	r0, r3
 802020a:	3710      	adds	r7, #16
 802020c:	46bd      	mov	sp, r7
 802020e:	bd80      	pop	{r7, pc}

08020210 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020210:	b480      	push	{r7}
 8020212:	b083      	sub	sp, #12
 8020214:	af00      	add	r7, sp, #0
 8020216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	2243      	movs	r2, #67	; 0x43
 802021c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 802021e:	4b03      	ldr	r3, [pc, #12]	; (802022c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8020220:	4618      	mov	r0, r3
 8020222:	370c      	adds	r7, #12
 8020224:	46bd      	mov	sp, r7
 8020226:	f85d 7b04 	ldr.w	r7, [sp], #4
 802022a:	4770      	bx	lr
 802022c:	20000120 	.word	0x20000120

08020230 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020230:	b480      	push	{r7}
 8020232:	b083      	sub	sp, #12
 8020234:	af00      	add	r7, sp, #0
 8020236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	2243      	movs	r2, #67	; 0x43
 802023c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 802023e:	4b03      	ldr	r3, [pc, #12]	; (802024c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8020240:	4618      	mov	r0, r3
 8020242:	370c      	adds	r7, #12
 8020244:	46bd      	mov	sp, r7
 8020246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802024a:	4770      	bx	lr
 802024c:	200000dc 	.word	0x200000dc

08020250 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020250:	b480      	push	{r7}
 8020252:	b083      	sub	sp, #12
 8020254:	af00      	add	r7, sp, #0
 8020256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	2243      	movs	r2, #67	; 0x43
 802025c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 802025e:	4b03      	ldr	r3, [pc, #12]	; (802026c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8020260:	4618      	mov	r0, r3
 8020262:	370c      	adds	r7, #12
 8020264:	46bd      	mov	sp, r7
 8020266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802026a:	4770      	bx	lr
 802026c:	20000164 	.word	0x20000164

08020270 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020270:	b480      	push	{r7}
 8020272:	b083      	sub	sp, #12
 8020274:	af00      	add	r7, sp, #0
 8020276:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	220a      	movs	r2, #10
 802027c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802027e:	4b03      	ldr	r3, [pc, #12]	; (802028c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8020280:	4618      	mov	r0, r3
 8020282:	370c      	adds	r7, #12
 8020284:	46bd      	mov	sp, r7
 8020286:	f85d 7b04 	ldr.w	r7, [sp], #4
 802028a:	4770      	bx	lr
 802028c:	20000098 	.word	0x20000098

08020290 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8020290:	b480      	push	{r7}
 8020292:	b083      	sub	sp, #12
 8020294:	af00      	add	r7, sp, #0
 8020296:	6078      	str	r0, [r7, #4]
 8020298:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802029a:	683b      	ldr	r3, [r7, #0]
 802029c:	2b00      	cmp	r3, #0
 802029e:	d101      	bne.n	80202a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80202a0:	2303      	movs	r3, #3
 80202a2:	e004      	b.n	80202ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	683a      	ldr	r2, [r7, #0]
 80202a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80202ac:	2300      	movs	r3, #0
}
 80202ae:	4618      	mov	r0, r3
 80202b0:	370c      	adds	r7, #12
 80202b2:	46bd      	mov	sp, r7
 80202b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202b8:	4770      	bx	lr

080202ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80202ba:	b480      	push	{r7}
 80202bc:	b087      	sub	sp, #28
 80202be:	af00      	add	r7, sp, #0
 80202c0:	60f8      	str	r0, [r7, #12]
 80202c2:	60b9      	str	r1, [r7, #8]
 80202c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80202c6:	68fb      	ldr	r3, [r7, #12]
 80202c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80202cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80202ce:	697b      	ldr	r3, [r7, #20]
 80202d0:	68ba      	ldr	r2, [r7, #8]
 80202d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80202d6:	697b      	ldr	r3, [r7, #20]
 80202d8:	687a      	ldr	r2, [r7, #4]
 80202da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80202de:	2300      	movs	r3, #0
}
 80202e0:	4618      	mov	r0, r3
 80202e2:	371c      	adds	r7, #28
 80202e4:	46bd      	mov	sp, r7
 80202e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ea:	4770      	bx	lr

080202ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80202ec:	b480      	push	{r7}
 80202ee:	b085      	sub	sp, #20
 80202f0:	af00      	add	r7, sp, #0
 80202f2:	6078      	str	r0, [r7, #4]
 80202f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80202fc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	683a      	ldr	r2, [r7, #0]
 8020302:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8020306:	2300      	movs	r3, #0
}
 8020308:	4618      	mov	r0, r3
 802030a:	3714      	adds	r7, #20
 802030c:	46bd      	mov	sp, r7
 802030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020312:	4770      	bx	lr

08020314 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8020314:	b580      	push	{r7, lr}
 8020316:	b084      	sub	sp, #16
 8020318:	af00      	add	r7, sp, #0
 802031a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020322:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802032a:	2b00      	cmp	r3, #0
 802032c:	d101      	bne.n	8020332 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 802032e:	2303      	movs	r3, #3
 8020330:	e016      	b.n	8020360 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020332:	687b      	ldr	r3, [r7, #4]
 8020334:	7c1b      	ldrb	r3, [r3, #16]
 8020336:	2b00      	cmp	r3, #0
 8020338:	d109      	bne.n	802034e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8020340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020344:	2101      	movs	r1, #1
 8020346:	6878      	ldr	r0, [r7, #4]
 8020348:	f7e4 f846 	bl	80043d8 <USBD_LL_PrepareReceive>
 802034c:	e007      	b.n	802035e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802034e:	68fb      	ldr	r3, [r7, #12]
 8020350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8020354:	2340      	movs	r3, #64	; 0x40
 8020356:	2101      	movs	r1, #1
 8020358:	6878      	ldr	r0, [r7, #4]
 802035a:	f7e4 f83d 	bl	80043d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802035e:	2300      	movs	r3, #0
}
 8020360:	4618      	mov	r0, r3
 8020362:	3710      	adds	r7, #16
 8020364:	46bd      	mov	sp, r7
 8020366:	bd80      	pop	{r7, pc}

08020368 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020368:	b580      	push	{r7, lr}
 802036a:	b086      	sub	sp, #24
 802036c:	af00      	add	r7, sp, #0
 802036e:	60f8      	str	r0, [r7, #12]
 8020370:	60b9      	str	r1, [r7, #8]
 8020372:	4613      	mov	r3, r2
 8020374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020376:	68fb      	ldr	r3, [r7, #12]
 8020378:	2b00      	cmp	r3, #0
 802037a:	d10a      	bne.n	8020392 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 802037c:	481a      	ldr	r0, [pc, #104]	; (80203e8 <USBD_Init+0x80>)
 802037e:	f001 fa4d 	bl	802181c <iprintf>
 8020382:	481a      	ldr	r0, [pc, #104]	; (80203ec <USBD_Init+0x84>)
 8020384:	f001 fa4a 	bl	802181c <iprintf>
 8020388:	200a      	movs	r0, #10
 802038a:	f001 fa5f 	bl	802184c <putchar>
#endif
    return USBD_FAIL;
 802038e:	2303      	movs	r3, #3
 8020390:	e025      	b.n	80203de <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8020392:	68fb      	ldr	r3, [r7, #12]
 8020394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020398:	2b00      	cmp	r3, #0
 802039a:	d003      	beq.n	80203a4 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 802039c:	68fb      	ldr	r3, [r7, #12]
 802039e:	2200      	movs	r2, #0
 80203a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d003      	beq.n	80203b6 <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 80203ae:	68fb      	ldr	r3, [r7, #12]
 80203b0:	2200      	movs	r2, #0
 80203b2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80203b6:	68bb      	ldr	r3, [r7, #8]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d003      	beq.n	80203c4 <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 80203bc:	68fb      	ldr	r3, [r7, #12]
 80203be:	68ba      	ldr	r2, [r7, #8]
 80203c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80203c4:	68fb      	ldr	r3, [r7, #12]
 80203c6:	2201      	movs	r2, #1
 80203c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80203cc:	68fb      	ldr	r3, [r7, #12]
 80203ce:	79fa      	ldrb	r2, [r7, #7]
 80203d0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80203d2:	68f8      	ldr	r0, [r7, #12]
 80203d4:	f7e3 feaa 	bl	800412c <USBD_LL_Init>
 80203d8:	4603      	mov	r3, r0
 80203da:	75fb      	strb	r3, [r7, #23]

  return ret;
 80203dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80203de:	4618      	mov	r0, r3
 80203e0:	3718      	adds	r7, #24
 80203e2:	46bd      	mov	sp, r7
 80203e4:	bd80      	pop	{r7, pc}
 80203e6:	bf00      	nop
 80203e8:	08025b58 	.word	0x08025b58
 80203ec:	08025b60 	.word	0x08025b60

080203f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80203f0:	b580      	push	{r7, lr}
 80203f2:	b084      	sub	sp, #16
 80203f4:	af00      	add	r7, sp, #0
 80203f6:	6078      	str	r0, [r7, #4]
 80203f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80203fa:	2300      	movs	r3, #0
 80203fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80203fe:	683b      	ldr	r3, [r7, #0]
 8020400:	2b00      	cmp	r3, #0
 8020402:	d10a      	bne.n	802041a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8020404:	480f      	ldr	r0, [pc, #60]	; (8020444 <USBD_RegisterClass+0x54>)
 8020406:	f001 fa09 	bl	802181c <iprintf>
 802040a:	480f      	ldr	r0, [pc, #60]	; (8020448 <USBD_RegisterClass+0x58>)
 802040c:	f001 fa06 	bl	802181c <iprintf>
 8020410:	200a      	movs	r0, #10
 8020412:	f001 fa1b 	bl	802184c <putchar>
#endif
    return USBD_FAIL;
 8020416:	2303      	movs	r3, #3
 8020418:	e010      	b.n	802043c <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	683a      	ldr	r2, [r7, #0]
 802041e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802042a:	f107 020e 	add.w	r2, r7, #14
 802042e:	4610      	mov	r0, r2
 8020430:	4798      	blx	r3
 8020432:	4602      	mov	r2, r0
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 802043a:	2300      	movs	r3, #0
}
 802043c:	4618      	mov	r0, r3
 802043e:	3710      	adds	r7, #16
 8020440:	46bd      	mov	sp, r7
 8020442:	bd80      	pop	{r7, pc}
 8020444:	08025b58 	.word	0x08025b58
 8020448:	08025b78 	.word	0x08025b78

0802044c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802044c:	b580      	push	{r7, lr}
 802044e:	b082      	sub	sp, #8
 8020450:	af00      	add	r7, sp, #0
 8020452:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020454:	6878      	ldr	r0, [r7, #4]
 8020456:	f7e3 feb5 	bl	80041c4 <USBD_LL_Start>
 802045a:	4603      	mov	r3, r0
}
 802045c:	4618      	mov	r0, r3
 802045e:	3708      	adds	r7, #8
 8020460:	46bd      	mov	sp, r7
 8020462:	bd80      	pop	{r7, pc}

08020464 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020464:	b480      	push	{r7}
 8020466:	b083      	sub	sp, #12
 8020468:	af00      	add	r7, sp, #0
 802046a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802046c:	2300      	movs	r3, #0
}
 802046e:	4618      	mov	r0, r3
 8020470:	370c      	adds	r7, #12
 8020472:	46bd      	mov	sp, r7
 8020474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020478:	4770      	bx	lr

0802047a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802047a:	b580      	push	{r7, lr}
 802047c:	b084      	sub	sp, #16
 802047e:	af00      	add	r7, sp, #0
 8020480:	6078      	str	r0, [r7, #4]
 8020482:	460b      	mov	r3, r1
 8020484:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020486:	2303      	movs	r3, #3
 8020488:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020490:	2b00      	cmp	r3, #0
 8020492:	d009      	beq.n	80204a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	78fa      	ldrb	r2, [r7, #3]
 802049e:	4611      	mov	r1, r2
 80204a0:	6878      	ldr	r0, [r7, #4]
 80204a2:	4798      	blx	r3
 80204a4:	4603      	mov	r3, r0
 80204a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80204a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80204aa:	4618      	mov	r0, r3
 80204ac:	3710      	adds	r7, #16
 80204ae:	46bd      	mov	sp, r7
 80204b0:	bd80      	pop	{r7, pc}

080204b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80204b2:	b580      	push	{r7, lr}
 80204b4:	b082      	sub	sp, #8
 80204b6:	af00      	add	r7, sp, #0
 80204b8:	6078      	str	r0, [r7, #4]
 80204ba:	460b      	mov	r3, r1
 80204bc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d007      	beq.n	80204d8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80204ce:	685b      	ldr	r3, [r3, #4]
 80204d0:	78fa      	ldrb	r2, [r7, #3]
 80204d2:	4611      	mov	r1, r2
 80204d4:	6878      	ldr	r0, [r7, #4]
 80204d6:	4798      	blx	r3
  }

  return USBD_OK;
 80204d8:	2300      	movs	r3, #0
}
 80204da:	4618      	mov	r0, r3
 80204dc:	3708      	adds	r7, #8
 80204de:	46bd      	mov	sp, r7
 80204e0:	bd80      	pop	{r7, pc}

080204e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80204e2:	b580      	push	{r7, lr}
 80204e4:	b084      	sub	sp, #16
 80204e6:	af00      	add	r7, sp, #0
 80204e8:	6078      	str	r0, [r7, #4]
 80204ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80204f2:	6839      	ldr	r1, [r7, #0]
 80204f4:	4618      	mov	r0, r3
 80204f6:	f000 ff64 	bl	80213c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	2201      	movs	r2, #1
 80204fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8020508:	461a      	mov	r2, r3
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020516:	f003 031f 	and.w	r3, r3, #31
 802051a:	2b02      	cmp	r3, #2
 802051c:	d01a      	beq.n	8020554 <USBD_LL_SetupStage+0x72>
 802051e:	2b02      	cmp	r3, #2
 8020520:	d822      	bhi.n	8020568 <USBD_LL_SetupStage+0x86>
 8020522:	2b00      	cmp	r3, #0
 8020524:	d002      	beq.n	802052c <USBD_LL_SetupStage+0x4a>
 8020526:	2b01      	cmp	r3, #1
 8020528:	d00a      	beq.n	8020540 <USBD_LL_SetupStage+0x5e>
 802052a:	e01d      	b.n	8020568 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020532:	4619      	mov	r1, r3
 8020534:	6878      	ldr	r0, [r7, #4]
 8020536:	f000 fa17 	bl	8020968 <USBD_StdDevReq>
 802053a:	4603      	mov	r3, r0
 802053c:	73fb      	strb	r3, [r7, #15]
      break;
 802053e:	e020      	b.n	8020582 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020546:	4619      	mov	r1, r3
 8020548:	6878      	ldr	r0, [r7, #4]
 802054a:	f000 fa7b 	bl	8020a44 <USBD_StdItfReq>
 802054e:	4603      	mov	r3, r0
 8020550:	73fb      	strb	r3, [r7, #15]
      break;
 8020552:	e016      	b.n	8020582 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802055a:	4619      	mov	r1, r3
 802055c:	6878      	ldr	r0, [r7, #4]
 802055e:	f000 fab9 	bl	8020ad4 <USBD_StdEPReq>
 8020562:	4603      	mov	r3, r0
 8020564:	73fb      	strb	r3, [r7, #15]
      break;
 8020566:	e00c      	b.n	8020582 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802056e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020572:	b2db      	uxtb	r3, r3
 8020574:	4619      	mov	r1, r3
 8020576:	6878      	ldr	r0, [r7, #4]
 8020578:	f7e3 fe84 	bl	8004284 <USBD_LL_StallEP>
 802057c:	4603      	mov	r3, r0
 802057e:	73fb      	strb	r3, [r7, #15]
      break;
 8020580:	bf00      	nop
  }

  return ret;
 8020582:	7bfb      	ldrb	r3, [r7, #15]
}
 8020584:	4618      	mov	r0, r3
 8020586:	3710      	adds	r7, #16
 8020588:	46bd      	mov	sp, r7
 802058a:	bd80      	pop	{r7, pc}

0802058c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802058c:	b580      	push	{r7, lr}
 802058e:	b086      	sub	sp, #24
 8020590:	af00      	add	r7, sp, #0
 8020592:	60f8      	str	r0, [r7, #12]
 8020594:	460b      	mov	r3, r1
 8020596:	607a      	str	r2, [r7, #4]
 8020598:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 802059a:	7afb      	ldrb	r3, [r7, #11]
 802059c:	2b00      	cmp	r3, #0
 802059e:	d137      	bne.n	8020610 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80205a0:	68fb      	ldr	r3, [r7, #12]
 80205a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80205a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80205a8:	68fb      	ldr	r3, [r7, #12]
 80205aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80205ae:	2b03      	cmp	r3, #3
 80205b0:	d14a      	bne.n	8020648 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80205b2:	693b      	ldr	r3, [r7, #16]
 80205b4:	689a      	ldr	r2, [r3, #8]
 80205b6:	693b      	ldr	r3, [r7, #16]
 80205b8:	68db      	ldr	r3, [r3, #12]
 80205ba:	429a      	cmp	r2, r3
 80205bc:	d913      	bls.n	80205e6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80205be:	693b      	ldr	r3, [r7, #16]
 80205c0:	689a      	ldr	r2, [r3, #8]
 80205c2:	693b      	ldr	r3, [r7, #16]
 80205c4:	68db      	ldr	r3, [r3, #12]
 80205c6:	1ad2      	subs	r2, r2, r3
 80205c8:	693b      	ldr	r3, [r7, #16]
 80205ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80205cc:	693b      	ldr	r3, [r7, #16]
 80205ce:	68da      	ldr	r2, [r3, #12]
 80205d0:	693b      	ldr	r3, [r7, #16]
 80205d2:	689b      	ldr	r3, [r3, #8]
 80205d4:	4293      	cmp	r3, r2
 80205d6:	bf28      	it	cs
 80205d8:	4613      	movcs	r3, r2
 80205da:	461a      	mov	r2, r3
 80205dc:	6879      	ldr	r1, [r7, #4]
 80205de:	68f8      	ldr	r0, [r7, #12]
 80205e0:	f000 ffe3 	bl	80215aa <USBD_CtlContinueRx>
 80205e4:	e030      	b.n	8020648 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80205e6:	68fb      	ldr	r3, [r7, #12]
 80205e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80205ec:	691b      	ldr	r3, [r3, #16]
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d00a      	beq.n	8020608 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80205f2:	68fb      	ldr	r3, [r7, #12]
 80205f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80205f8:	2b03      	cmp	r3, #3
 80205fa:	d105      	bne.n	8020608 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80205fc:	68fb      	ldr	r3, [r7, #12]
 80205fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020602:	691b      	ldr	r3, [r3, #16]
 8020604:	68f8      	ldr	r0, [r7, #12]
 8020606:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8020608:	68f8      	ldr	r0, [r7, #12]
 802060a:	f000 ffdf 	bl	80215cc <USBD_CtlSendStatus>
 802060e:	e01b      	b.n	8020648 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8020610:	68fb      	ldr	r3, [r7, #12]
 8020612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020616:	699b      	ldr	r3, [r3, #24]
 8020618:	2b00      	cmp	r3, #0
 802061a:	d013      	beq.n	8020644 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802061c:	68fb      	ldr	r3, [r7, #12]
 802061e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8020622:	2b03      	cmp	r3, #3
 8020624:	d10e      	bne.n	8020644 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802062c:	699b      	ldr	r3, [r3, #24]
 802062e:	7afa      	ldrb	r2, [r7, #11]
 8020630:	4611      	mov	r1, r2
 8020632:	68f8      	ldr	r0, [r7, #12]
 8020634:	4798      	blx	r3
 8020636:	4603      	mov	r3, r0
 8020638:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 802063a:	7dfb      	ldrb	r3, [r7, #23]
 802063c:	2b00      	cmp	r3, #0
 802063e:	d003      	beq.n	8020648 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8020640:	7dfb      	ldrb	r3, [r7, #23]
 8020642:	e002      	b.n	802064a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8020644:	2303      	movs	r3, #3
 8020646:	e000      	b.n	802064a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8020648:	2300      	movs	r3, #0
}
 802064a:	4618      	mov	r0, r3
 802064c:	3718      	adds	r7, #24
 802064e:	46bd      	mov	sp, r7
 8020650:	bd80      	pop	{r7, pc}

08020652 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020652:	b580      	push	{r7, lr}
 8020654:	b086      	sub	sp, #24
 8020656:	af00      	add	r7, sp, #0
 8020658:	60f8      	str	r0, [r7, #12]
 802065a:	460b      	mov	r3, r1
 802065c:	607a      	str	r2, [r7, #4]
 802065e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8020660:	7afb      	ldrb	r3, [r7, #11]
 8020662:	2b00      	cmp	r3, #0
 8020664:	d16a      	bne.n	802073c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8020666:	68fb      	ldr	r3, [r7, #12]
 8020668:	3314      	adds	r3, #20
 802066a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802066c:	68fb      	ldr	r3, [r7, #12]
 802066e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8020672:	2b02      	cmp	r3, #2
 8020674:	d155      	bne.n	8020722 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8020676:	693b      	ldr	r3, [r7, #16]
 8020678:	689a      	ldr	r2, [r3, #8]
 802067a:	693b      	ldr	r3, [r7, #16]
 802067c:	68db      	ldr	r3, [r3, #12]
 802067e:	429a      	cmp	r2, r3
 8020680:	d914      	bls.n	80206ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8020682:	693b      	ldr	r3, [r7, #16]
 8020684:	689a      	ldr	r2, [r3, #8]
 8020686:	693b      	ldr	r3, [r7, #16]
 8020688:	68db      	ldr	r3, [r3, #12]
 802068a:	1ad2      	subs	r2, r2, r3
 802068c:	693b      	ldr	r3, [r7, #16]
 802068e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8020690:	693b      	ldr	r3, [r7, #16]
 8020692:	689b      	ldr	r3, [r3, #8]
 8020694:	461a      	mov	r2, r3
 8020696:	6879      	ldr	r1, [r7, #4]
 8020698:	68f8      	ldr	r0, [r7, #12]
 802069a:	f000 ff58 	bl	802154e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802069e:	2300      	movs	r3, #0
 80206a0:	2200      	movs	r2, #0
 80206a2:	2100      	movs	r1, #0
 80206a4:	68f8      	ldr	r0, [r7, #12]
 80206a6:	f7e3 fe97 	bl	80043d8 <USBD_LL_PrepareReceive>
 80206aa:	e03a      	b.n	8020722 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80206ac:	693b      	ldr	r3, [r7, #16]
 80206ae:	68da      	ldr	r2, [r3, #12]
 80206b0:	693b      	ldr	r3, [r7, #16]
 80206b2:	689b      	ldr	r3, [r3, #8]
 80206b4:	429a      	cmp	r2, r3
 80206b6:	d11c      	bne.n	80206f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80206b8:	693b      	ldr	r3, [r7, #16]
 80206ba:	685a      	ldr	r2, [r3, #4]
 80206bc:	693b      	ldr	r3, [r7, #16]
 80206be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80206c0:	429a      	cmp	r2, r3
 80206c2:	d316      	bcc.n	80206f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80206c4:	693b      	ldr	r3, [r7, #16]
 80206c6:	685a      	ldr	r2, [r3, #4]
 80206c8:	68fb      	ldr	r3, [r7, #12]
 80206ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80206ce:	429a      	cmp	r2, r3
 80206d0:	d20f      	bcs.n	80206f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80206d2:	2200      	movs	r2, #0
 80206d4:	2100      	movs	r1, #0
 80206d6:	68f8      	ldr	r0, [r7, #12]
 80206d8:	f000 ff39 	bl	802154e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	2200      	movs	r2, #0
 80206e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80206e4:	2300      	movs	r3, #0
 80206e6:	2200      	movs	r2, #0
 80206e8:	2100      	movs	r1, #0
 80206ea:	68f8      	ldr	r0, [r7, #12]
 80206ec:	f7e3 fe74 	bl	80043d8 <USBD_LL_PrepareReceive>
 80206f0:	e017      	b.n	8020722 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80206f8:	68db      	ldr	r3, [r3, #12]
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d00a      	beq.n	8020714 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80206fe:	68fb      	ldr	r3, [r7, #12]
 8020700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8020704:	2b03      	cmp	r3, #3
 8020706:	d105      	bne.n	8020714 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8020708:	68fb      	ldr	r3, [r7, #12]
 802070a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802070e:	68db      	ldr	r3, [r3, #12]
 8020710:	68f8      	ldr	r0, [r7, #12]
 8020712:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8020714:	2180      	movs	r1, #128	; 0x80
 8020716:	68f8      	ldr	r0, [r7, #12]
 8020718:	f7e3 fdb4 	bl	8004284 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802071c:	68f8      	ldr	r0, [r7, #12]
 802071e:	f000 ff68 	bl	80215f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8020728:	2b01      	cmp	r3, #1
 802072a:	d123      	bne.n	8020774 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 802072c:	68f8      	ldr	r0, [r7, #12]
 802072e:	f7ff fe99 	bl	8020464 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	2200      	movs	r2, #0
 8020736:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802073a:	e01b      	b.n	8020774 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020742:	695b      	ldr	r3, [r3, #20]
 8020744:	2b00      	cmp	r3, #0
 8020746:	d013      	beq.n	8020770 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 802074e:	2b03      	cmp	r3, #3
 8020750:	d10e      	bne.n	8020770 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8020752:	68fb      	ldr	r3, [r7, #12]
 8020754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020758:	695b      	ldr	r3, [r3, #20]
 802075a:	7afa      	ldrb	r2, [r7, #11]
 802075c:	4611      	mov	r1, r2
 802075e:	68f8      	ldr	r0, [r7, #12]
 8020760:	4798      	blx	r3
 8020762:	4603      	mov	r3, r0
 8020764:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8020766:	7dfb      	ldrb	r3, [r7, #23]
 8020768:	2b00      	cmp	r3, #0
 802076a:	d003      	beq.n	8020774 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 802076c:	7dfb      	ldrb	r3, [r7, #23]
 802076e:	e002      	b.n	8020776 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8020770:	2303      	movs	r3, #3
 8020772:	e000      	b.n	8020776 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8020774:	2300      	movs	r3, #0
}
 8020776:	4618      	mov	r0, r3
 8020778:	3718      	adds	r7, #24
 802077a:	46bd      	mov	sp, r7
 802077c:	bd80      	pop	{r7, pc}

0802077e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802077e:	b580      	push	{r7, lr}
 8020780:	b082      	sub	sp, #8
 8020782:	af00      	add	r7, sp, #0
 8020784:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	2201      	movs	r2, #1
 802078a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	2200      	movs	r2, #0
 8020792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	2200      	movs	r2, #0
 802079a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802079c:	687b      	ldr	r3, [r7, #4]
 802079e:	2200      	movs	r2, #0
 80207a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80207a4:	687b      	ldr	r3, [r7, #4]
 80207a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d009      	beq.n	80207c2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80207b4:	685b      	ldr	r3, [r3, #4]
 80207b6:	687a      	ldr	r2, [r7, #4]
 80207b8:	6852      	ldr	r2, [r2, #4]
 80207ba:	b2d2      	uxtb	r2, r2
 80207bc:	4611      	mov	r1, r2
 80207be:	6878      	ldr	r0, [r7, #4]
 80207c0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80207c2:	2340      	movs	r3, #64	; 0x40
 80207c4:	2200      	movs	r2, #0
 80207c6:	2100      	movs	r1, #0
 80207c8:	6878      	ldr	r0, [r7, #4]
 80207ca:	f7e3 fd16 	bl	80041fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80207ce:	687b      	ldr	r3, [r7, #4]
 80207d0:	2201      	movs	r2, #1
 80207d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	2240      	movs	r2, #64	; 0x40
 80207da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80207de:	2340      	movs	r3, #64	; 0x40
 80207e0:	2200      	movs	r2, #0
 80207e2:	2180      	movs	r1, #128	; 0x80
 80207e4:	6878      	ldr	r0, [r7, #4]
 80207e6:	f7e3 fd08 	bl	80041fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	2201      	movs	r2, #1
 80207ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	2240      	movs	r2, #64	; 0x40
 80207f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80207f6:	2300      	movs	r3, #0
}
 80207f8:	4618      	mov	r0, r3
 80207fa:	3708      	adds	r7, #8
 80207fc:	46bd      	mov	sp, r7
 80207fe:	bd80      	pop	{r7, pc}

08020800 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8020800:	b480      	push	{r7}
 8020802:	b083      	sub	sp, #12
 8020804:	af00      	add	r7, sp, #0
 8020806:	6078      	str	r0, [r7, #4]
 8020808:	460b      	mov	r3, r1
 802080a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	78fa      	ldrb	r2, [r7, #3]
 8020810:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8020812:	2300      	movs	r3, #0
}
 8020814:	4618      	mov	r0, r3
 8020816:	370c      	adds	r7, #12
 8020818:	46bd      	mov	sp, r7
 802081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802081e:	4770      	bx	lr

08020820 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8020820:	b480      	push	{r7}
 8020822:	b083      	sub	sp, #12
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	2204      	movs	r2, #4
 8020838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802083c:	2300      	movs	r3, #0
}
 802083e:	4618      	mov	r0, r3
 8020840:	370c      	adds	r7, #12
 8020842:	46bd      	mov	sp, r7
 8020844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020848:	4770      	bx	lr

0802084a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802084a:	b480      	push	{r7}
 802084c:	b083      	sub	sp, #12
 802084e:	af00      	add	r7, sp, #0
 8020850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8020852:	687b      	ldr	r3, [r7, #4]
 8020854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020858:	2b04      	cmp	r3, #4
 802085a:	d105      	bne.n	8020868 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8020862:	687b      	ldr	r3, [r7, #4]
 8020864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8020868:	2300      	movs	r3, #0
}
 802086a:	4618      	mov	r0, r3
 802086c:	370c      	adds	r7, #12
 802086e:	46bd      	mov	sp, r7
 8020870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020874:	4770      	bx	lr

08020876 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8020876:	b580      	push	{r7, lr}
 8020878:	b082      	sub	sp, #8
 802087a:	af00      	add	r7, sp, #0
 802087c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020884:	2b03      	cmp	r3, #3
 8020886:	d10b      	bne.n	80208a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802088e:	69db      	ldr	r3, [r3, #28]
 8020890:	2b00      	cmp	r3, #0
 8020892:	d005      	beq.n	80208a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802089a:	69db      	ldr	r3, [r3, #28]
 802089c:	6878      	ldr	r0, [r7, #4]
 802089e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80208a0:	2300      	movs	r3, #0
}
 80208a2:	4618      	mov	r0, r3
 80208a4:	3708      	adds	r7, #8
 80208a6:	46bd      	mov	sp, r7
 80208a8:	bd80      	pop	{r7, pc}

080208aa <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80208aa:	b480      	push	{r7}
 80208ac:	b083      	sub	sp, #12
 80208ae:	af00      	add	r7, sp, #0
 80208b0:	6078      	str	r0, [r7, #4]
 80208b2:	460b      	mov	r3, r1
 80208b4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80208b6:	2300      	movs	r3, #0
}
 80208b8:	4618      	mov	r0, r3
 80208ba:	370c      	adds	r7, #12
 80208bc:	46bd      	mov	sp, r7
 80208be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c2:	4770      	bx	lr

080208c4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80208c4:	b480      	push	{r7}
 80208c6:	b083      	sub	sp, #12
 80208c8:	af00      	add	r7, sp, #0
 80208ca:	6078      	str	r0, [r7, #4]
 80208cc:	460b      	mov	r3, r1
 80208ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80208d0:	2300      	movs	r3, #0
}
 80208d2:	4618      	mov	r0, r3
 80208d4:	370c      	adds	r7, #12
 80208d6:	46bd      	mov	sp, r7
 80208d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208dc:	4770      	bx	lr

080208de <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80208de:	b480      	push	{r7}
 80208e0:	b083      	sub	sp, #12
 80208e2:	af00      	add	r7, sp, #0
 80208e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80208e6:	2300      	movs	r3, #0
}
 80208e8:	4618      	mov	r0, r3
 80208ea:	370c      	adds	r7, #12
 80208ec:	46bd      	mov	sp, r7
 80208ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f2:	4770      	bx	lr

080208f4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80208f4:	b580      	push	{r7, lr}
 80208f6:	b082      	sub	sp, #8
 80208f8:	af00      	add	r7, sp, #0
 80208fa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	2201      	movs	r2, #1
 8020900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802090a:	2b00      	cmp	r3, #0
 802090c:	d009      	beq.n	8020922 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020914:	685b      	ldr	r3, [r3, #4]
 8020916:	687a      	ldr	r2, [r7, #4]
 8020918:	6852      	ldr	r2, [r2, #4]
 802091a:	b2d2      	uxtb	r2, r2
 802091c:	4611      	mov	r1, r2
 802091e:	6878      	ldr	r0, [r7, #4]
 8020920:	4798      	blx	r3
  }

  return USBD_OK;
 8020922:	2300      	movs	r3, #0
}
 8020924:	4618      	mov	r0, r3
 8020926:	3708      	adds	r7, #8
 8020928:	46bd      	mov	sp, r7
 802092a:	bd80      	pop	{r7, pc}

0802092c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 802092c:	b480      	push	{r7}
 802092e:	b087      	sub	sp, #28
 8020930:	af00      	add	r7, sp, #0
 8020932:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8020938:	697b      	ldr	r3, [r7, #20]
 802093a:	781b      	ldrb	r3, [r3, #0]
 802093c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802093e:	697b      	ldr	r3, [r7, #20]
 8020940:	3301      	adds	r3, #1
 8020942:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8020944:	697b      	ldr	r3, [r7, #20]
 8020946:	781b      	ldrb	r3, [r3, #0]
 8020948:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802094a:	8a3b      	ldrh	r3, [r7, #16]
 802094c:	021b      	lsls	r3, r3, #8
 802094e:	b21a      	sxth	r2, r3
 8020950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020954:	4313      	orrs	r3, r2
 8020956:	b21b      	sxth	r3, r3
 8020958:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802095a:	89fb      	ldrh	r3, [r7, #14]
}
 802095c:	4618      	mov	r0, r3
 802095e:	371c      	adds	r7, #28
 8020960:	46bd      	mov	sp, r7
 8020962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020966:	4770      	bx	lr

08020968 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020968:	b580      	push	{r7, lr}
 802096a:	b084      	sub	sp, #16
 802096c:	af00      	add	r7, sp, #0
 802096e:	6078      	str	r0, [r7, #4]
 8020970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8020972:	2300      	movs	r3, #0
 8020974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020976:	683b      	ldr	r3, [r7, #0]
 8020978:	781b      	ldrb	r3, [r3, #0]
 802097a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802097e:	2b40      	cmp	r3, #64	; 0x40
 8020980:	d005      	beq.n	802098e <USBD_StdDevReq+0x26>
 8020982:	2b40      	cmp	r3, #64	; 0x40
 8020984:	d853      	bhi.n	8020a2e <USBD_StdDevReq+0xc6>
 8020986:	2b00      	cmp	r3, #0
 8020988:	d00b      	beq.n	80209a2 <USBD_StdDevReq+0x3a>
 802098a:	2b20      	cmp	r3, #32
 802098c:	d14f      	bne.n	8020a2e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020994:	689b      	ldr	r3, [r3, #8]
 8020996:	6839      	ldr	r1, [r7, #0]
 8020998:	6878      	ldr	r0, [r7, #4]
 802099a:	4798      	blx	r3
 802099c:	4603      	mov	r3, r0
 802099e:	73fb      	strb	r3, [r7, #15]
    break;
 80209a0:	e04a      	b.n	8020a38 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80209a2:	683b      	ldr	r3, [r7, #0]
 80209a4:	785b      	ldrb	r3, [r3, #1]
 80209a6:	2b09      	cmp	r3, #9
 80209a8:	d83b      	bhi.n	8020a22 <USBD_StdDevReq+0xba>
 80209aa:	a201      	add	r2, pc, #4	; (adr r2, 80209b0 <USBD_StdDevReq+0x48>)
 80209ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209b0:	08020a05 	.word	0x08020a05
 80209b4:	08020a19 	.word	0x08020a19
 80209b8:	08020a23 	.word	0x08020a23
 80209bc:	08020a0f 	.word	0x08020a0f
 80209c0:	08020a23 	.word	0x08020a23
 80209c4:	080209e3 	.word	0x080209e3
 80209c8:	080209d9 	.word	0x080209d9
 80209cc:	08020a23 	.word	0x08020a23
 80209d0:	080209fb 	.word	0x080209fb
 80209d4:	080209ed 	.word	0x080209ed
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80209d8:	6839      	ldr	r1, [r7, #0]
 80209da:	6878      	ldr	r0, [r7, #4]
 80209dc:	f000 f9d8 	bl	8020d90 <USBD_GetDescriptor>
      break;
 80209e0:	e024      	b.n	8020a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80209e2:	6839      	ldr	r1, [r7, #0]
 80209e4:	6878      	ldr	r0, [r7, #4]
 80209e6:	f000 fb67 	bl	80210b8 <USBD_SetAddress>
      break;
 80209ea:	e01f      	b.n	8020a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80209ec:	6839      	ldr	r1, [r7, #0]
 80209ee:	6878      	ldr	r0, [r7, #4]
 80209f0:	f000 fba6 	bl	8021140 <USBD_SetConfig>
 80209f4:	4603      	mov	r3, r0
 80209f6:	73fb      	strb	r3, [r7, #15]
      break;
 80209f8:	e018      	b.n	8020a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80209fa:	6839      	ldr	r1, [r7, #0]
 80209fc:	6878      	ldr	r0, [r7, #4]
 80209fe:	f000 fc43 	bl	8021288 <USBD_GetConfig>
      break;
 8020a02:	e013      	b.n	8020a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8020a04:	6839      	ldr	r1, [r7, #0]
 8020a06:	6878      	ldr	r0, [r7, #4]
 8020a08:	f000 fc73 	bl	80212f2 <USBD_GetStatus>
      break;
 8020a0c:	e00e      	b.n	8020a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8020a0e:	6839      	ldr	r1, [r7, #0]
 8020a10:	6878      	ldr	r0, [r7, #4]
 8020a12:	f000 fca1 	bl	8021358 <USBD_SetFeature>
      break;
 8020a16:	e009      	b.n	8020a2c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8020a18:	6839      	ldr	r1, [r7, #0]
 8020a1a:	6878      	ldr	r0, [r7, #4]
 8020a1c:	f000 fcb0 	bl	8021380 <USBD_ClrFeature>
      break;
 8020a20:	e004      	b.n	8020a2c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8020a22:	6839      	ldr	r1, [r7, #0]
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	f000 fd06 	bl	8021436 <USBD_CtlError>
      break;
 8020a2a:	bf00      	nop
    }
    break;
 8020a2c:	e004      	b.n	8020a38 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8020a2e:	6839      	ldr	r1, [r7, #0]
 8020a30:	6878      	ldr	r0, [r7, #4]
 8020a32:	f000 fd00 	bl	8021436 <USBD_CtlError>
    break;
 8020a36:	bf00      	nop
  }

  return ret;
 8020a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8020a3a:	4618      	mov	r0, r3
 8020a3c:	3710      	adds	r7, #16
 8020a3e:	46bd      	mov	sp, r7
 8020a40:	bd80      	pop	{r7, pc}
 8020a42:	bf00      	nop

08020a44 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020a44:	b580      	push	{r7, lr}
 8020a46:	b084      	sub	sp, #16
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]
 8020a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8020a4e:	2300      	movs	r3, #0
 8020a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020a52:	683b      	ldr	r3, [r7, #0]
 8020a54:	781b      	ldrb	r3, [r3, #0]
 8020a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020a5a:	2b40      	cmp	r3, #64	; 0x40
 8020a5c:	d005      	beq.n	8020a6a <USBD_StdItfReq+0x26>
 8020a5e:	2b40      	cmp	r3, #64	; 0x40
 8020a60:	d82e      	bhi.n	8020ac0 <USBD_StdItfReq+0x7c>
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	d001      	beq.n	8020a6a <USBD_StdItfReq+0x26>
 8020a66:	2b20      	cmp	r3, #32
 8020a68:	d12a      	bne.n	8020ac0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020a70:	3b01      	subs	r3, #1
 8020a72:	2b02      	cmp	r3, #2
 8020a74:	d81d      	bhi.n	8020ab2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8020a76:	683b      	ldr	r3, [r7, #0]
 8020a78:	889b      	ldrh	r3, [r3, #4]
 8020a7a:	b2db      	uxtb	r3, r3
 8020a7c:	2b01      	cmp	r3, #1
 8020a7e:	d813      	bhi.n	8020aa8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020a86:	689b      	ldr	r3, [r3, #8]
 8020a88:	6839      	ldr	r1, [r7, #0]
 8020a8a:	6878      	ldr	r0, [r7, #4]
 8020a8c:	4798      	blx	r3
 8020a8e:	4603      	mov	r3, r0
 8020a90:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8020a92:	683b      	ldr	r3, [r7, #0]
 8020a94:	88db      	ldrh	r3, [r3, #6]
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	d110      	bne.n	8020abc <USBD_StdItfReq+0x78>
 8020a9a:	7bfb      	ldrb	r3, [r7, #15]
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d10d      	bne.n	8020abc <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8020aa0:	6878      	ldr	r0, [r7, #4]
 8020aa2:	f000 fd93 	bl	80215cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8020aa6:	e009      	b.n	8020abc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8020aa8:	6839      	ldr	r1, [r7, #0]
 8020aaa:	6878      	ldr	r0, [r7, #4]
 8020aac:	f000 fcc3 	bl	8021436 <USBD_CtlError>
      break;
 8020ab0:	e004      	b.n	8020abc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8020ab2:	6839      	ldr	r1, [r7, #0]
 8020ab4:	6878      	ldr	r0, [r7, #4]
 8020ab6:	f000 fcbe 	bl	8021436 <USBD_CtlError>
      break;
 8020aba:	e000      	b.n	8020abe <USBD_StdItfReq+0x7a>
      break;
 8020abc:	bf00      	nop
    }
    break;
 8020abe:	e004      	b.n	8020aca <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8020ac0:	6839      	ldr	r1, [r7, #0]
 8020ac2:	6878      	ldr	r0, [r7, #4]
 8020ac4:	f000 fcb7 	bl	8021436 <USBD_CtlError>
    break;
 8020ac8:	bf00      	nop
  }

  return ret;
 8020aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8020acc:	4618      	mov	r0, r3
 8020ace:	3710      	adds	r7, #16
 8020ad0:	46bd      	mov	sp, r7
 8020ad2:	bd80      	pop	{r7, pc}

08020ad4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b084      	sub	sp, #16
 8020ad8:	af00      	add	r7, sp, #0
 8020ada:	6078      	str	r0, [r7, #4]
 8020adc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8020ade:	2300      	movs	r3, #0
 8020ae0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8020ae2:	683b      	ldr	r3, [r7, #0]
 8020ae4:	889b      	ldrh	r3, [r3, #4]
 8020ae6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020ae8:	683b      	ldr	r3, [r7, #0]
 8020aea:	781b      	ldrb	r3, [r3, #0]
 8020aec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020af0:	2b40      	cmp	r3, #64	; 0x40
 8020af2:	d007      	beq.n	8020b04 <USBD_StdEPReq+0x30>
 8020af4:	2b40      	cmp	r3, #64	; 0x40
 8020af6:	f200 8140 	bhi.w	8020d7a <USBD_StdEPReq+0x2a6>
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d00c      	beq.n	8020b18 <USBD_StdEPReq+0x44>
 8020afe:	2b20      	cmp	r3, #32
 8020b00:	f040 813b 	bne.w	8020d7a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020b0a:	689b      	ldr	r3, [r3, #8]
 8020b0c:	6839      	ldr	r1, [r7, #0]
 8020b0e:	6878      	ldr	r0, [r7, #4]
 8020b10:	4798      	blx	r3
 8020b12:	4603      	mov	r3, r0
 8020b14:	73fb      	strb	r3, [r7, #15]
    break;
 8020b16:	e135      	b.n	8020d84 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8020b18:	683b      	ldr	r3, [r7, #0]
 8020b1a:	785b      	ldrb	r3, [r3, #1]
 8020b1c:	2b03      	cmp	r3, #3
 8020b1e:	d007      	beq.n	8020b30 <USBD_StdEPReq+0x5c>
 8020b20:	2b03      	cmp	r3, #3
 8020b22:	f300 8124 	bgt.w	8020d6e <USBD_StdEPReq+0x29a>
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d07b      	beq.n	8020c22 <USBD_StdEPReq+0x14e>
 8020b2a:	2b01      	cmp	r3, #1
 8020b2c:	d03b      	beq.n	8020ba6 <USBD_StdEPReq+0xd2>
 8020b2e:	e11e      	b.n	8020d6e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020b36:	2b02      	cmp	r3, #2
 8020b38:	d002      	beq.n	8020b40 <USBD_StdEPReq+0x6c>
 8020b3a:	2b03      	cmp	r3, #3
 8020b3c:	d016      	beq.n	8020b6c <USBD_StdEPReq+0x98>
 8020b3e:	e02c      	b.n	8020b9a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020b40:	7bbb      	ldrb	r3, [r7, #14]
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d00d      	beq.n	8020b62 <USBD_StdEPReq+0x8e>
 8020b46:	7bbb      	ldrb	r3, [r7, #14]
 8020b48:	2b80      	cmp	r3, #128	; 0x80
 8020b4a:	d00a      	beq.n	8020b62 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8020b4c:	7bbb      	ldrb	r3, [r7, #14]
 8020b4e:	4619      	mov	r1, r3
 8020b50:	6878      	ldr	r0, [r7, #4]
 8020b52:	f7e3 fb97 	bl	8004284 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8020b56:	2180      	movs	r1, #128	; 0x80
 8020b58:	6878      	ldr	r0, [r7, #4]
 8020b5a:	f7e3 fb93 	bl	8004284 <USBD_LL_StallEP>
 8020b5e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8020b60:	e020      	b.n	8020ba4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8020b62:	6839      	ldr	r1, [r7, #0]
 8020b64:	6878      	ldr	r0, [r7, #4]
 8020b66:	f000 fc66 	bl	8021436 <USBD_CtlError>
        break;
 8020b6a:	e01b      	b.n	8020ba4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8020b6c:	683b      	ldr	r3, [r7, #0]
 8020b6e:	885b      	ldrh	r3, [r3, #2]
 8020b70:	2b00      	cmp	r3, #0
 8020b72:	d10e      	bne.n	8020b92 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8020b74:	7bbb      	ldrb	r3, [r7, #14]
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	d00b      	beq.n	8020b92 <USBD_StdEPReq+0xbe>
 8020b7a:	7bbb      	ldrb	r3, [r7, #14]
 8020b7c:	2b80      	cmp	r3, #128	; 0x80
 8020b7e:	d008      	beq.n	8020b92 <USBD_StdEPReq+0xbe>
 8020b80:	683b      	ldr	r3, [r7, #0]
 8020b82:	88db      	ldrh	r3, [r3, #6]
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	d104      	bne.n	8020b92 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8020b88:	7bbb      	ldrb	r3, [r7, #14]
 8020b8a:	4619      	mov	r1, r3
 8020b8c:	6878      	ldr	r0, [r7, #4]
 8020b8e:	f7e3 fb79 	bl	8004284 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8020b92:	6878      	ldr	r0, [r7, #4]
 8020b94:	f000 fd1a 	bl	80215cc <USBD_CtlSendStatus>

        break;
 8020b98:	e004      	b.n	8020ba4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8020b9a:	6839      	ldr	r1, [r7, #0]
 8020b9c:	6878      	ldr	r0, [r7, #4]
 8020b9e:	f000 fc4a 	bl	8021436 <USBD_CtlError>
        break;
 8020ba2:	bf00      	nop
      }
      break;
 8020ba4:	e0e8      	b.n	8020d78 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020bac:	2b02      	cmp	r3, #2
 8020bae:	d002      	beq.n	8020bb6 <USBD_StdEPReq+0xe2>
 8020bb0:	2b03      	cmp	r3, #3
 8020bb2:	d016      	beq.n	8020be2 <USBD_StdEPReq+0x10e>
 8020bb4:	e02e      	b.n	8020c14 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020bb6:	7bbb      	ldrb	r3, [r7, #14]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d00d      	beq.n	8020bd8 <USBD_StdEPReq+0x104>
 8020bbc:	7bbb      	ldrb	r3, [r7, #14]
 8020bbe:	2b80      	cmp	r3, #128	; 0x80
 8020bc0:	d00a      	beq.n	8020bd8 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8020bc2:	7bbb      	ldrb	r3, [r7, #14]
 8020bc4:	4619      	mov	r1, r3
 8020bc6:	6878      	ldr	r0, [r7, #4]
 8020bc8:	f7e3 fb5c 	bl	8004284 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8020bcc:	2180      	movs	r1, #128	; 0x80
 8020bce:	6878      	ldr	r0, [r7, #4]
 8020bd0:	f7e3 fb58 	bl	8004284 <USBD_LL_StallEP>
 8020bd4:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8020bd6:	e023      	b.n	8020c20 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8020bd8:	6839      	ldr	r1, [r7, #0]
 8020bda:	6878      	ldr	r0, [r7, #4]
 8020bdc:	f000 fc2b 	bl	8021436 <USBD_CtlError>
        break;
 8020be0:	e01e      	b.n	8020c20 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8020be2:	683b      	ldr	r3, [r7, #0]
 8020be4:	885b      	ldrh	r3, [r3, #2]
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d119      	bne.n	8020c1e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8020bea:	7bbb      	ldrb	r3, [r7, #14]
 8020bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020bf0:	2b00      	cmp	r3, #0
 8020bf2:	d004      	beq.n	8020bfe <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8020bf4:	7bbb      	ldrb	r3, [r7, #14]
 8020bf6:	4619      	mov	r1, r3
 8020bf8:	6878      	ldr	r0, [r7, #4]
 8020bfa:	f7e3 fb62 	bl	80042c2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8020bfe:	6878      	ldr	r0, [r7, #4]
 8020c00:	f000 fce4 	bl	80215cc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020c0a:	689b      	ldr	r3, [r3, #8]
 8020c0c:	6839      	ldr	r1, [r7, #0]
 8020c0e:	6878      	ldr	r0, [r7, #4]
 8020c10:	4798      	blx	r3
        }
        break;
 8020c12:	e004      	b.n	8020c1e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8020c14:	6839      	ldr	r1, [r7, #0]
 8020c16:	6878      	ldr	r0, [r7, #4]
 8020c18:	f000 fc0d 	bl	8021436 <USBD_CtlError>
        break;
 8020c1c:	e000      	b.n	8020c20 <USBD_StdEPReq+0x14c>
        break;
 8020c1e:	bf00      	nop
      }
      break;
 8020c20:	e0aa      	b.n	8020d78 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020c28:	2b02      	cmp	r3, #2
 8020c2a:	d002      	beq.n	8020c32 <USBD_StdEPReq+0x15e>
 8020c2c:	2b03      	cmp	r3, #3
 8020c2e:	d032      	beq.n	8020c96 <USBD_StdEPReq+0x1c2>
 8020c30:	e097      	b.n	8020d62 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020c32:	7bbb      	ldrb	r3, [r7, #14]
 8020c34:	2b00      	cmp	r3, #0
 8020c36:	d007      	beq.n	8020c48 <USBD_StdEPReq+0x174>
 8020c38:	7bbb      	ldrb	r3, [r7, #14]
 8020c3a:	2b80      	cmp	r3, #128	; 0x80
 8020c3c:	d004      	beq.n	8020c48 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8020c3e:	6839      	ldr	r1, [r7, #0]
 8020c40:	6878      	ldr	r0, [r7, #4]
 8020c42:	f000 fbf8 	bl	8021436 <USBD_CtlError>
          break;
 8020c46:	e091      	b.n	8020d6c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	da0b      	bge.n	8020c68 <USBD_StdEPReq+0x194>
 8020c50:	7bbb      	ldrb	r3, [r7, #14]
 8020c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020c56:	4613      	mov	r3, r2
 8020c58:	009b      	lsls	r3, r3, #2
 8020c5a:	4413      	add	r3, r2
 8020c5c:	009b      	lsls	r3, r3, #2
 8020c5e:	3310      	adds	r3, #16
 8020c60:	687a      	ldr	r2, [r7, #4]
 8020c62:	4413      	add	r3, r2
 8020c64:	3304      	adds	r3, #4
 8020c66:	e00b      	b.n	8020c80 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8020c68:	7bbb      	ldrb	r3, [r7, #14]
 8020c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020c6e:	4613      	mov	r3, r2
 8020c70:	009b      	lsls	r3, r3, #2
 8020c72:	4413      	add	r3, r2
 8020c74:	009b      	lsls	r3, r3, #2
 8020c76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8020c7a:	687a      	ldr	r2, [r7, #4]
 8020c7c:	4413      	add	r3, r2
 8020c7e:	3304      	adds	r3, #4
 8020c80:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8020c82:	68bb      	ldr	r3, [r7, #8]
 8020c84:	2200      	movs	r2, #0
 8020c86:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8020c88:	68bb      	ldr	r3, [r7, #8]
 8020c8a:	2202      	movs	r2, #2
 8020c8c:	4619      	mov	r1, r3
 8020c8e:	6878      	ldr	r0, [r7, #4]
 8020c90:	f000 fc42 	bl	8021518 <USBD_CtlSendData>
        break;
 8020c94:	e06a      	b.n	8020d6c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8020c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	da11      	bge.n	8020cc2 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8020c9e:	7bbb      	ldrb	r3, [r7, #14]
 8020ca0:	f003 020f 	and.w	r2, r3, #15
 8020ca4:	6879      	ldr	r1, [r7, #4]
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	009b      	lsls	r3, r3, #2
 8020caa:	4413      	add	r3, r2
 8020cac:	009b      	lsls	r3, r3, #2
 8020cae:	440b      	add	r3, r1
 8020cb0:	3324      	adds	r3, #36	; 0x24
 8020cb2:	881b      	ldrh	r3, [r3, #0]
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d117      	bne.n	8020ce8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8020cb8:	6839      	ldr	r1, [r7, #0]
 8020cba:	6878      	ldr	r0, [r7, #4]
 8020cbc:	f000 fbbb 	bl	8021436 <USBD_CtlError>
            break;
 8020cc0:	e054      	b.n	8020d6c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8020cc2:	7bbb      	ldrb	r3, [r7, #14]
 8020cc4:	f003 020f 	and.w	r2, r3, #15
 8020cc8:	6879      	ldr	r1, [r7, #4]
 8020cca:	4613      	mov	r3, r2
 8020ccc:	009b      	lsls	r3, r3, #2
 8020cce:	4413      	add	r3, r2
 8020cd0:	009b      	lsls	r3, r3, #2
 8020cd2:	440b      	add	r3, r1
 8020cd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8020cd8:	881b      	ldrh	r3, [r3, #0]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d104      	bne.n	8020ce8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8020cde:	6839      	ldr	r1, [r7, #0]
 8020ce0:	6878      	ldr	r0, [r7, #4]
 8020ce2:	f000 fba8 	bl	8021436 <USBD_CtlError>
            break;
 8020ce6:	e041      	b.n	8020d6c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	da0b      	bge.n	8020d08 <USBD_StdEPReq+0x234>
 8020cf0:	7bbb      	ldrb	r3, [r7, #14]
 8020cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020cf6:	4613      	mov	r3, r2
 8020cf8:	009b      	lsls	r3, r3, #2
 8020cfa:	4413      	add	r3, r2
 8020cfc:	009b      	lsls	r3, r3, #2
 8020cfe:	3310      	adds	r3, #16
 8020d00:	687a      	ldr	r2, [r7, #4]
 8020d02:	4413      	add	r3, r2
 8020d04:	3304      	adds	r3, #4
 8020d06:	e00b      	b.n	8020d20 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8020d08:	7bbb      	ldrb	r3, [r7, #14]
 8020d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020d0e:	4613      	mov	r3, r2
 8020d10:	009b      	lsls	r3, r3, #2
 8020d12:	4413      	add	r3, r2
 8020d14:	009b      	lsls	r3, r3, #2
 8020d16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8020d1a:	687a      	ldr	r2, [r7, #4]
 8020d1c:	4413      	add	r3, r2
 8020d1e:	3304      	adds	r3, #4
 8020d20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8020d22:	7bbb      	ldrb	r3, [r7, #14]
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d002      	beq.n	8020d2e <USBD_StdEPReq+0x25a>
 8020d28:	7bbb      	ldrb	r3, [r7, #14]
 8020d2a:	2b80      	cmp	r3, #128	; 0x80
 8020d2c:	d103      	bne.n	8020d36 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8020d2e:	68bb      	ldr	r3, [r7, #8]
 8020d30:	2200      	movs	r2, #0
 8020d32:	601a      	str	r2, [r3, #0]
 8020d34:	e00e      	b.n	8020d54 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8020d36:	7bbb      	ldrb	r3, [r7, #14]
 8020d38:	4619      	mov	r1, r3
 8020d3a:	6878      	ldr	r0, [r7, #4]
 8020d3c:	f7e3 fae0 	bl	8004300 <USBD_LL_IsStallEP>
 8020d40:	4603      	mov	r3, r0
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d003      	beq.n	8020d4e <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8020d46:	68bb      	ldr	r3, [r7, #8]
 8020d48:	2201      	movs	r2, #1
 8020d4a:	601a      	str	r2, [r3, #0]
 8020d4c:	e002      	b.n	8020d54 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8020d4e:	68bb      	ldr	r3, [r7, #8]
 8020d50:	2200      	movs	r2, #0
 8020d52:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8020d54:	68bb      	ldr	r3, [r7, #8]
 8020d56:	2202      	movs	r2, #2
 8020d58:	4619      	mov	r1, r3
 8020d5a:	6878      	ldr	r0, [r7, #4]
 8020d5c:	f000 fbdc 	bl	8021518 <USBD_CtlSendData>
          break;
 8020d60:	e004      	b.n	8020d6c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8020d62:	6839      	ldr	r1, [r7, #0]
 8020d64:	6878      	ldr	r0, [r7, #4]
 8020d66:	f000 fb66 	bl	8021436 <USBD_CtlError>
        break;
 8020d6a:	bf00      	nop
      }
      break;
 8020d6c:	e004      	b.n	8020d78 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8020d6e:	6839      	ldr	r1, [r7, #0]
 8020d70:	6878      	ldr	r0, [r7, #4]
 8020d72:	f000 fb60 	bl	8021436 <USBD_CtlError>
      break;
 8020d76:	bf00      	nop
    }
    break;
 8020d78:	e004      	b.n	8020d84 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8020d7a:	6839      	ldr	r1, [r7, #0]
 8020d7c:	6878      	ldr	r0, [r7, #4]
 8020d7e:	f000 fb5a 	bl	8021436 <USBD_CtlError>
    break;
 8020d82:	bf00      	nop
  }

  return ret;
 8020d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8020d86:	4618      	mov	r0, r3
 8020d88:	3710      	adds	r7, #16
 8020d8a:	46bd      	mov	sp, r7
 8020d8c:	bd80      	pop	{r7, pc}
	...

08020d90 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020d90:	b580      	push	{r7, lr}
 8020d92:	b084      	sub	sp, #16
 8020d94:	af00      	add	r7, sp, #0
 8020d96:	6078      	str	r0, [r7, #4]
 8020d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020d9a:	2300      	movs	r3, #0
 8020d9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8020d9e:	2300      	movs	r3, #0
 8020da0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8020da2:	2300      	movs	r3, #0
 8020da4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8020da6:	683b      	ldr	r3, [r7, #0]
 8020da8:	885b      	ldrh	r3, [r3, #2]
 8020daa:	0a1b      	lsrs	r3, r3, #8
 8020dac:	b29b      	uxth	r3, r3
 8020dae:	3b01      	subs	r3, #1
 8020db0:	2b0e      	cmp	r3, #14
 8020db2:	f200 8152 	bhi.w	802105a <USBD_GetDescriptor+0x2ca>
 8020db6:	a201      	add	r2, pc, #4	; (adr r2, 8020dbc <USBD_GetDescriptor+0x2c>)
 8020db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020dbc:	08020e2d 	.word	0x08020e2d
 8020dc0:	08020e45 	.word	0x08020e45
 8020dc4:	08020e85 	.word	0x08020e85
 8020dc8:	0802105b 	.word	0x0802105b
 8020dcc:	0802105b 	.word	0x0802105b
 8020dd0:	08020ffb 	.word	0x08020ffb
 8020dd4:	08021027 	.word	0x08021027
 8020dd8:	0802105b 	.word	0x0802105b
 8020ddc:	0802105b 	.word	0x0802105b
 8020de0:	0802105b 	.word	0x0802105b
 8020de4:	0802105b 	.word	0x0802105b
 8020de8:	0802105b 	.word	0x0802105b
 8020dec:	0802105b 	.word	0x0802105b
 8020df0:	0802105b 	.word	0x0802105b
 8020df4:	08020df9 	.word	0x08020df9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020dfe:	69db      	ldr	r3, [r3, #28]
 8020e00:	2b00      	cmp	r3, #0
 8020e02:	d00b      	beq.n	8020e1c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020e0a:	69db      	ldr	r3, [r3, #28]
 8020e0c:	687a      	ldr	r2, [r7, #4]
 8020e0e:	7c12      	ldrb	r2, [r2, #16]
 8020e10:	f107 0108 	add.w	r1, r7, #8
 8020e14:	4610      	mov	r0, r2
 8020e16:	4798      	blx	r3
 8020e18:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8020e1a:	e126      	b.n	802106a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8020e1c:	6839      	ldr	r1, [r7, #0]
 8020e1e:	6878      	ldr	r0, [r7, #4]
 8020e20:	f000 fb09 	bl	8021436 <USBD_CtlError>
      err++;
 8020e24:	7afb      	ldrb	r3, [r7, #11]
 8020e26:	3301      	adds	r3, #1
 8020e28:	72fb      	strb	r3, [r7, #11]
    break;
 8020e2a:	e11e      	b.n	802106a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8020e2c:	687b      	ldr	r3, [r7, #4]
 8020e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	687a      	ldr	r2, [r7, #4]
 8020e36:	7c12      	ldrb	r2, [r2, #16]
 8020e38:	f107 0108 	add.w	r1, r7, #8
 8020e3c:	4610      	mov	r0, r2
 8020e3e:	4798      	blx	r3
 8020e40:	60f8      	str	r0, [r7, #12]
    break;
 8020e42:	e112      	b.n	802106a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	7c1b      	ldrb	r3, [r3, #16]
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	d10d      	bne.n	8020e68 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e54:	f107 0208 	add.w	r2, r7, #8
 8020e58:	4610      	mov	r0, r2
 8020e5a:	4798      	blx	r3
 8020e5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8020e5e:	68fb      	ldr	r3, [r7, #12]
 8020e60:	3301      	adds	r3, #1
 8020e62:	2202      	movs	r2, #2
 8020e64:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8020e66:	e100      	b.n	802106a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e70:	f107 0208 	add.w	r2, r7, #8
 8020e74:	4610      	mov	r0, r2
 8020e76:	4798      	blx	r3
 8020e78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8020e7a:	68fb      	ldr	r3, [r7, #12]
 8020e7c:	3301      	adds	r3, #1
 8020e7e:	2202      	movs	r2, #2
 8020e80:	701a      	strb	r2, [r3, #0]
    break;
 8020e82:	e0f2      	b.n	802106a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8020e84:	683b      	ldr	r3, [r7, #0]
 8020e86:	885b      	ldrh	r3, [r3, #2]
 8020e88:	b2db      	uxtb	r3, r3
 8020e8a:	2b05      	cmp	r3, #5
 8020e8c:	f200 80ac 	bhi.w	8020fe8 <USBD_GetDescriptor+0x258>
 8020e90:	a201      	add	r2, pc, #4	; (adr r2, 8020e98 <USBD_GetDescriptor+0x108>)
 8020e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e96:	bf00      	nop
 8020e98:	08020eb1 	.word	0x08020eb1
 8020e9c:	08020ee5 	.word	0x08020ee5
 8020ea0:	08020f19 	.word	0x08020f19
 8020ea4:	08020f4d 	.word	0x08020f4d
 8020ea8:	08020f81 	.word	0x08020f81
 8020eac:	08020fb5 	.word	0x08020fb5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8020eb0:	687b      	ldr	r3, [r7, #4]
 8020eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020eb6:	685b      	ldr	r3, [r3, #4]
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d00b      	beq.n	8020ed4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020ec2:	685b      	ldr	r3, [r3, #4]
 8020ec4:	687a      	ldr	r2, [r7, #4]
 8020ec6:	7c12      	ldrb	r2, [r2, #16]
 8020ec8:	f107 0108 	add.w	r1, r7, #8
 8020ecc:	4610      	mov	r0, r2
 8020ece:	4798      	blx	r3
 8020ed0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020ed2:	e091      	b.n	8020ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8020ed4:	6839      	ldr	r1, [r7, #0]
 8020ed6:	6878      	ldr	r0, [r7, #4]
 8020ed8:	f000 faad 	bl	8021436 <USBD_CtlError>
        err++;
 8020edc:	7afb      	ldrb	r3, [r7, #11]
 8020ede:	3301      	adds	r3, #1
 8020ee0:	72fb      	strb	r3, [r7, #11]
      break;
 8020ee2:	e089      	b.n	8020ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020eea:	689b      	ldr	r3, [r3, #8]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d00b      	beq.n	8020f08 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020ef6:	689b      	ldr	r3, [r3, #8]
 8020ef8:	687a      	ldr	r2, [r7, #4]
 8020efa:	7c12      	ldrb	r2, [r2, #16]
 8020efc:	f107 0108 	add.w	r1, r7, #8
 8020f00:	4610      	mov	r0, r2
 8020f02:	4798      	blx	r3
 8020f04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020f06:	e077      	b.n	8020ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8020f08:	6839      	ldr	r1, [r7, #0]
 8020f0a:	6878      	ldr	r0, [r7, #4]
 8020f0c:	f000 fa93 	bl	8021436 <USBD_CtlError>
        err++;
 8020f10:	7afb      	ldrb	r3, [r7, #11]
 8020f12:	3301      	adds	r3, #1
 8020f14:	72fb      	strb	r3, [r7, #11]
      break;
 8020f16:	e06f      	b.n	8020ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020f1e:	68db      	ldr	r3, [r3, #12]
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d00b      	beq.n	8020f3c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020f2a:	68db      	ldr	r3, [r3, #12]
 8020f2c:	687a      	ldr	r2, [r7, #4]
 8020f2e:	7c12      	ldrb	r2, [r2, #16]
 8020f30:	f107 0108 	add.w	r1, r7, #8
 8020f34:	4610      	mov	r0, r2
 8020f36:	4798      	blx	r3
 8020f38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020f3a:	e05d      	b.n	8020ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8020f3c:	6839      	ldr	r1, [r7, #0]
 8020f3e:	6878      	ldr	r0, [r7, #4]
 8020f40:	f000 fa79 	bl	8021436 <USBD_CtlError>
        err++;
 8020f44:	7afb      	ldrb	r3, [r7, #11]
 8020f46:	3301      	adds	r3, #1
 8020f48:	72fb      	strb	r3, [r7, #11]
      break;
 8020f4a:	e055      	b.n	8020ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020f52:	691b      	ldr	r3, [r3, #16]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d00b      	beq.n	8020f70 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020f5e:	691b      	ldr	r3, [r3, #16]
 8020f60:	687a      	ldr	r2, [r7, #4]
 8020f62:	7c12      	ldrb	r2, [r2, #16]
 8020f64:	f107 0108 	add.w	r1, r7, #8
 8020f68:	4610      	mov	r0, r2
 8020f6a:	4798      	blx	r3
 8020f6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020f6e:	e043      	b.n	8020ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8020f70:	6839      	ldr	r1, [r7, #0]
 8020f72:	6878      	ldr	r0, [r7, #4]
 8020f74:	f000 fa5f 	bl	8021436 <USBD_CtlError>
        err++;
 8020f78:	7afb      	ldrb	r3, [r7, #11]
 8020f7a:	3301      	adds	r3, #1
 8020f7c:	72fb      	strb	r3, [r7, #11]
      break;
 8020f7e:	e03b      	b.n	8020ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020f86:	695b      	ldr	r3, [r3, #20]
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	d00b      	beq.n	8020fa4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8020f8c:	687b      	ldr	r3, [r7, #4]
 8020f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020f92:	695b      	ldr	r3, [r3, #20]
 8020f94:	687a      	ldr	r2, [r7, #4]
 8020f96:	7c12      	ldrb	r2, [r2, #16]
 8020f98:	f107 0108 	add.w	r1, r7, #8
 8020f9c:	4610      	mov	r0, r2
 8020f9e:	4798      	blx	r3
 8020fa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020fa2:	e029      	b.n	8020ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8020fa4:	6839      	ldr	r1, [r7, #0]
 8020fa6:	6878      	ldr	r0, [r7, #4]
 8020fa8:	f000 fa45 	bl	8021436 <USBD_CtlError>
        err++;
 8020fac:	7afb      	ldrb	r3, [r7, #11]
 8020fae:	3301      	adds	r3, #1
 8020fb0:	72fb      	strb	r3, [r7, #11]
      break;
 8020fb2:	e021      	b.n	8020ff8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020fba:	699b      	ldr	r3, [r3, #24]
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d00b      	beq.n	8020fd8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8020fc6:	699b      	ldr	r3, [r3, #24]
 8020fc8:	687a      	ldr	r2, [r7, #4]
 8020fca:	7c12      	ldrb	r2, [r2, #16]
 8020fcc:	f107 0108 	add.w	r1, r7, #8
 8020fd0:	4610      	mov	r0, r2
 8020fd2:	4798      	blx	r3
 8020fd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8020fd6:	e00f      	b.n	8020ff8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8020fd8:	6839      	ldr	r1, [r7, #0]
 8020fda:	6878      	ldr	r0, [r7, #4]
 8020fdc:	f000 fa2b 	bl	8021436 <USBD_CtlError>
        err++;
 8020fe0:	7afb      	ldrb	r3, [r7, #11]
 8020fe2:	3301      	adds	r3, #1
 8020fe4:	72fb      	strb	r3, [r7, #11]
      break;
 8020fe6:	e007      	b.n	8020ff8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8020fe8:	6839      	ldr	r1, [r7, #0]
 8020fea:	6878      	ldr	r0, [r7, #4]
 8020fec:	f000 fa23 	bl	8021436 <USBD_CtlError>
      err++;
 8020ff0:	7afb      	ldrb	r3, [r7, #11]
 8020ff2:	3301      	adds	r3, #1
 8020ff4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8020ff6:	bf00      	nop
    }
    break;
 8020ff8:	e037      	b.n	802106a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	7c1b      	ldrb	r3, [r3, #16]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d109      	bne.n	8021016 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802100a:	f107 0208 	add.w	r2, r7, #8
 802100e:	4610      	mov	r0, r2
 8021010:	4798      	blx	r3
 8021012:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8021014:	e029      	b.n	802106a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8021016:	6839      	ldr	r1, [r7, #0]
 8021018:	6878      	ldr	r0, [r7, #4]
 802101a:	f000 fa0c 	bl	8021436 <USBD_CtlError>
      err++;
 802101e:	7afb      	ldrb	r3, [r7, #11]
 8021020:	3301      	adds	r3, #1
 8021022:	72fb      	strb	r3, [r7, #11]
    break;
 8021024:	e021      	b.n	802106a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	7c1b      	ldrb	r3, [r3, #16]
 802102a:	2b00      	cmp	r3, #0
 802102c:	d10d      	bne.n	802104a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021036:	f107 0208 	add.w	r2, r7, #8
 802103a:	4610      	mov	r0, r2
 802103c:	4798      	blx	r3
 802103e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021040:	68fb      	ldr	r3, [r7, #12]
 8021042:	3301      	adds	r3, #1
 8021044:	2207      	movs	r2, #7
 8021046:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8021048:	e00f      	b.n	802106a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 802104a:	6839      	ldr	r1, [r7, #0]
 802104c:	6878      	ldr	r0, [r7, #4]
 802104e:	f000 f9f2 	bl	8021436 <USBD_CtlError>
      err++;
 8021052:	7afb      	ldrb	r3, [r7, #11]
 8021054:	3301      	adds	r3, #1
 8021056:	72fb      	strb	r3, [r7, #11]
    break;
 8021058:	e007      	b.n	802106a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 802105a:	6839      	ldr	r1, [r7, #0]
 802105c:	6878      	ldr	r0, [r7, #4]
 802105e:	f000 f9ea 	bl	8021436 <USBD_CtlError>
    err++;
 8021062:	7afb      	ldrb	r3, [r7, #11]
 8021064:	3301      	adds	r3, #1
 8021066:	72fb      	strb	r3, [r7, #11]
    break;
 8021068:	bf00      	nop
  }

  if (err != 0U)
 802106a:	7afb      	ldrb	r3, [r7, #11]
 802106c:	2b00      	cmp	r3, #0
 802106e:	d11e      	bne.n	80210ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	88db      	ldrh	r3, [r3, #6]
 8021074:	2b00      	cmp	r3, #0
 8021076:	d016      	beq.n	80210a6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8021078:	893b      	ldrh	r3, [r7, #8]
 802107a:	2b00      	cmp	r3, #0
 802107c:	d00e      	beq.n	802109c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 802107e:	683b      	ldr	r3, [r7, #0]
 8021080:	88da      	ldrh	r2, [r3, #6]
 8021082:	893b      	ldrh	r3, [r7, #8]
 8021084:	4293      	cmp	r3, r2
 8021086:	bf28      	it	cs
 8021088:	4613      	movcs	r3, r2
 802108a:	b29b      	uxth	r3, r3
 802108c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 802108e:	893b      	ldrh	r3, [r7, #8]
 8021090:	461a      	mov	r2, r3
 8021092:	68f9      	ldr	r1, [r7, #12]
 8021094:	6878      	ldr	r0, [r7, #4]
 8021096:	f000 fa3f 	bl	8021518 <USBD_CtlSendData>
 802109a:	e009      	b.n	80210b0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 802109c:	6839      	ldr	r1, [r7, #0]
 802109e:	6878      	ldr	r0, [r7, #4]
 80210a0:	f000 f9c9 	bl	8021436 <USBD_CtlError>
 80210a4:	e004      	b.n	80210b0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80210a6:	6878      	ldr	r0, [r7, #4]
 80210a8:	f000 fa90 	bl	80215cc <USBD_CtlSendStatus>
 80210ac:	e000      	b.n	80210b0 <USBD_GetDescriptor+0x320>
    return;
 80210ae:	bf00      	nop
    }
  }
}
 80210b0:	3710      	adds	r7, #16
 80210b2:	46bd      	mov	sp, r7
 80210b4:	bd80      	pop	{r7, pc}
 80210b6:	bf00      	nop

080210b8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80210b8:	b580      	push	{r7, lr}
 80210ba:	b084      	sub	sp, #16
 80210bc:	af00      	add	r7, sp, #0
 80210be:	6078      	str	r0, [r7, #4]
 80210c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80210c2:	683b      	ldr	r3, [r7, #0]
 80210c4:	889b      	ldrh	r3, [r3, #4]
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d130      	bne.n	802112c <USBD_SetAddress+0x74>
 80210ca:	683b      	ldr	r3, [r7, #0]
 80210cc:	88db      	ldrh	r3, [r3, #6]
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d12c      	bne.n	802112c <USBD_SetAddress+0x74>
 80210d2:	683b      	ldr	r3, [r7, #0]
 80210d4:	885b      	ldrh	r3, [r3, #2]
 80210d6:	2b7f      	cmp	r3, #127	; 0x7f
 80210d8:	d828      	bhi.n	802112c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80210da:	683b      	ldr	r3, [r7, #0]
 80210dc:	885b      	ldrh	r3, [r3, #2]
 80210de:	b2db      	uxtb	r3, r3
 80210e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80210e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80210ec:	2b03      	cmp	r3, #3
 80210ee:	d104      	bne.n	80210fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80210f0:	6839      	ldr	r1, [r7, #0]
 80210f2:	6878      	ldr	r0, [r7, #4]
 80210f4:	f000 f99f 	bl	8021436 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80210f8:	e01d      	b.n	8021136 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	7bfa      	ldrb	r2, [r7, #15]
 80210fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021102:	7bfb      	ldrb	r3, [r7, #15]
 8021104:	4619      	mov	r1, r3
 8021106:	6878      	ldr	r0, [r7, #4]
 8021108:	f7e3 f926 	bl	8004358 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 802110c:	6878      	ldr	r0, [r7, #4]
 802110e:	f000 fa5d 	bl	80215cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021112:	7bfb      	ldrb	r3, [r7, #15]
 8021114:	2b00      	cmp	r3, #0
 8021116:	d004      	beq.n	8021122 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021118:	687b      	ldr	r3, [r7, #4]
 802111a:	2202      	movs	r2, #2
 802111c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021120:	e009      	b.n	8021136 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	2201      	movs	r2, #1
 8021126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802112a:	e004      	b.n	8021136 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 802112c:	6839      	ldr	r1, [r7, #0]
 802112e:	6878      	ldr	r0, [r7, #4]
 8021130:	f000 f981 	bl	8021436 <USBD_CtlError>
  }
}
 8021134:	bf00      	nop
 8021136:	bf00      	nop
 8021138:	3710      	adds	r7, #16
 802113a:	46bd      	mov	sp, r7
 802113c:	bd80      	pop	{r7, pc}
	...

08021140 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021140:	b580      	push	{r7, lr}
 8021142:	b084      	sub	sp, #16
 8021144:	af00      	add	r7, sp, #0
 8021146:	6078      	str	r0, [r7, #4]
 8021148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802114a:	2300      	movs	r3, #0
 802114c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802114e:	683b      	ldr	r3, [r7, #0]
 8021150:	885b      	ldrh	r3, [r3, #2]
 8021152:	b2da      	uxtb	r2, r3
 8021154:	4b4b      	ldr	r3, [pc, #300]	; (8021284 <USBD_SetConfig+0x144>)
 8021156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021158:	4b4a      	ldr	r3, [pc, #296]	; (8021284 <USBD_SetConfig+0x144>)
 802115a:	781b      	ldrb	r3, [r3, #0]
 802115c:	2b01      	cmp	r3, #1
 802115e:	d905      	bls.n	802116c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021160:	6839      	ldr	r1, [r7, #0]
 8021162:	6878      	ldr	r0, [r7, #4]
 8021164:	f000 f967 	bl	8021436 <USBD_CtlError>
    return USBD_FAIL;
 8021168:	2303      	movs	r3, #3
 802116a:	e087      	b.n	802127c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021172:	2b02      	cmp	r3, #2
 8021174:	d002      	beq.n	802117c <USBD_SetConfig+0x3c>
 8021176:	2b03      	cmp	r3, #3
 8021178:	d025      	beq.n	80211c6 <USBD_SetConfig+0x86>
 802117a:	e071      	b.n	8021260 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 802117c:	4b41      	ldr	r3, [pc, #260]	; (8021284 <USBD_SetConfig+0x144>)
 802117e:	781b      	ldrb	r3, [r3, #0]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d01c      	beq.n	80211be <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8021184:	4b3f      	ldr	r3, [pc, #252]	; (8021284 <USBD_SetConfig+0x144>)
 8021186:	781b      	ldrb	r3, [r3, #0]
 8021188:	461a      	mov	r2, r3
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 802118e:	4b3d      	ldr	r3, [pc, #244]	; (8021284 <USBD_SetConfig+0x144>)
 8021190:	781b      	ldrb	r3, [r3, #0]
 8021192:	4619      	mov	r1, r3
 8021194:	6878      	ldr	r0, [r7, #4]
 8021196:	f7ff f970 	bl	802047a <USBD_SetClassConfig>
 802119a:	4603      	mov	r3, r0
 802119c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 802119e:	7bfb      	ldrb	r3, [r7, #15]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d004      	beq.n	80211ae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80211a4:	6839      	ldr	r1, [r7, #0]
 80211a6:	6878      	ldr	r0, [r7, #4]
 80211a8:	f000 f945 	bl	8021436 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80211ac:	e065      	b.n	802127a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80211ae:	6878      	ldr	r0, [r7, #4]
 80211b0:	f000 fa0c 	bl	80215cc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	2203      	movs	r2, #3
 80211b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80211bc:	e05d      	b.n	802127a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80211be:	6878      	ldr	r0, [r7, #4]
 80211c0:	f000 fa04 	bl	80215cc <USBD_CtlSendStatus>
    break;
 80211c4:	e059      	b.n	802127a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80211c6:	4b2f      	ldr	r3, [pc, #188]	; (8021284 <USBD_SetConfig+0x144>)
 80211c8:	781b      	ldrb	r3, [r3, #0]
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d112      	bne.n	80211f4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	2202      	movs	r2, #2
 80211d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80211d6:	4b2b      	ldr	r3, [pc, #172]	; (8021284 <USBD_SetConfig+0x144>)
 80211d8:	781b      	ldrb	r3, [r3, #0]
 80211da:	461a      	mov	r2, r3
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80211e0:	4b28      	ldr	r3, [pc, #160]	; (8021284 <USBD_SetConfig+0x144>)
 80211e2:	781b      	ldrb	r3, [r3, #0]
 80211e4:	4619      	mov	r1, r3
 80211e6:	6878      	ldr	r0, [r7, #4]
 80211e8:	f7ff f963 	bl	80204b2 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80211ec:	6878      	ldr	r0, [r7, #4]
 80211ee:	f000 f9ed 	bl	80215cc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80211f2:	e042      	b.n	802127a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80211f4:	4b23      	ldr	r3, [pc, #140]	; (8021284 <USBD_SetConfig+0x144>)
 80211f6:	781b      	ldrb	r3, [r3, #0]
 80211f8:	461a      	mov	r2, r3
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	685b      	ldr	r3, [r3, #4]
 80211fe:	429a      	cmp	r2, r3
 8021200:	d02a      	beq.n	8021258 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	685b      	ldr	r3, [r3, #4]
 8021206:	b2db      	uxtb	r3, r3
 8021208:	4619      	mov	r1, r3
 802120a:	6878      	ldr	r0, [r7, #4]
 802120c:	f7ff f951 	bl	80204b2 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8021210:	4b1c      	ldr	r3, [pc, #112]	; (8021284 <USBD_SetConfig+0x144>)
 8021212:	781b      	ldrb	r3, [r3, #0]
 8021214:	461a      	mov	r2, r3
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 802121a:	4b1a      	ldr	r3, [pc, #104]	; (8021284 <USBD_SetConfig+0x144>)
 802121c:	781b      	ldrb	r3, [r3, #0]
 802121e:	4619      	mov	r1, r3
 8021220:	6878      	ldr	r0, [r7, #4]
 8021222:	f7ff f92a 	bl	802047a <USBD_SetClassConfig>
 8021226:	4603      	mov	r3, r0
 8021228:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 802122a:	7bfb      	ldrb	r3, [r7, #15]
 802122c:	2b00      	cmp	r3, #0
 802122e:	d00f      	beq.n	8021250 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8021230:	6839      	ldr	r1, [r7, #0]
 8021232:	6878      	ldr	r0, [r7, #4]
 8021234:	f000 f8ff 	bl	8021436 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	685b      	ldr	r3, [r3, #4]
 802123c:	b2db      	uxtb	r3, r3
 802123e:	4619      	mov	r1, r3
 8021240:	6878      	ldr	r0, [r7, #4]
 8021242:	f7ff f936 	bl	80204b2 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	2202      	movs	r2, #2
 802124a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 802124e:	e014      	b.n	802127a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8021250:	6878      	ldr	r0, [r7, #4]
 8021252:	f000 f9bb 	bl	80215cc <USBD_CtlSendStatus>
    break;
 8021256:	e010      	b.n	802127a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8021258:	6878      	ldr	r0, [r7, #4]
 802125a:	f000 f9b7 	bl	80215cc <USBD_CtlSendStatus>
    break;
 802125e:	e00c      	b.n	802127a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8021260:	6839      	ldr	r1, [r7, #0]
 8021262:	6878      	ldr	r0, [r7, #4]
 8021264:	f000 f8e7 	bl	8021436 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021268:	4b06      	ldr	r3, [pc, #24]	; (8021284 <USBD_SetConfig+0x144>)
 802126a:	781b      	ldrb	r3, [r3, #0]
 802126c:	4619      	mov	r1, r3
 802126e:	6878      	ldr	r0, [r7, #4]
 8021270:	f7ff f91f 	bl	80204b2 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8021274:	2303      	movs	r3, #3
 8021276:	73fb      	strb	r3, [r7, #15]
    break;
 8021278:	bf00      	nop
  }

  return ret;
 802127a:	7bfb      	ldrb	r3, [r7, #15]
}
 802127c:	4618      	mov	r0, r3
 802127e:	3710      	adds	r7, #16
 8021280:	46bd      	mov	sp, r7
 8021282:	bd80      	pop	{r7, pc}
 8021284:	200090f8 	.word	0x200090f8

08021288 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021288:	b580      	push	{r7, lr}
 802128a:	b082      	sub	sp, #8
 802128c:	af00      	add	r7, sp, #0
 802128e:	6078      	str	r0, [r7, #4]
 8021290:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021292:	683b      	ldr	r3, [r7, #0]
 8021294:	88db      	ldrh	r3, [r3, #6]
 8021296:	2b01      	cmp	r3, #1
 8021298:	d004      	beq.n	80212a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 802129a:	6839      	ldr	r1, [r7, #0]
 802129c:	6878      	ldr	r0, [r7, #4]
 802129e:	f000 f8ca 	bl	8021436 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80212a2:	e022      	b.n	80212ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212aa:	2b02      	cmp	r3, #2
 80212ac:	dc02      	bgt.n	80212b4 <USBD_GetConfig+0x2c>
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	dc03      	bgt.n	80212ba <USBD_GetConfig+0x32>
 80212b2:	e015      	b.n	80212e0 <USBD_GetConfig+0x58>
 80212b4:	2b03      	cmp	r3, #3
 80212b6:	d00b      	beq.n	80212d0 <USBD_GetConfig+0x48>
 80212b8:	e012      	b.n	80212e0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	2200      	movs	r2, #0
 80212be:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	3308      	adds	r3, #8
 80212c4:	2201      	movs	r2, #1
 80212c6:	4619      	mov	r1, r3
 80212c8:	6878      	ldr	r0, [r7, #4]
 80212ca:	f000 f925 	bl	8021518 <USBD_CtlSendData>
      break;
 80212ce:	e00c      	b.n	80212ea <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	3304      	adds	r3, #4
 80212d4:	2201      	movs	r2, #1
 80212d6:	4619      	mov	r1, r3
 80212d8:	6878      	ldr	r0, [r7, #4]
 80212da:	f000 f91d 	bl	8021518 <USBD_CtlSendData>
      break;
 80212de:	e004      	b.n	80212ea <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80212e0:	6839      	ldr	r1, [r7, #0]
 80212e2:	6878      	ldr	r0, [r7, #4]
 80212e4:	f000 f8a7 	bl	8021436 <USBD_CtlError>
      break;
 80212e8:	bf00      	nop
}
 80212ea:	bf00      	nop
 80212ec:	3708      	adds	r7, #8
 80212ee:	46bd      	mov	sp, r7
 80212f0:	bd80      	pop	{r7, pc}

080212f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80212f2:	b580      	push	{r7, lr}
 80212f4:	b082      	sub	sp, #8
 80212f6:	af00      	add	r7, sp, #0
 80212f8:	6078      	str	r0, [r7, #4]
 80212fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021302:	3b01      	subs	r3, #1
 8021304:	2b02      	cmp	r3, #2
 8021306:	d81e      	bhi.n	8021346 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8021308:	683b      	ldr	r3, [r7, #0]
 802130a:	88db      	ldrh	r3, [r3, #6]
 802130c:	2b02      	cmp	r3, #2
 802130e:	d004      	beq.n	802131a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8021310:	6839      	ldr	r1, [r7, #0]
 8021312:	6878      	ldr	r0, [r7, #4]
 8021314:	f000 f88f 	bl	8021436 <USBD_CtlError>
      break;
 8021318:	e01a      	b.n	8021350 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	2201      	movs	r2, #1
 802131e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021326:	2b00      	cmp	r3, #0
 8021328:	d005      	beq.n	8021336 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802132a:	687b      	ldr	r3, [r7, #4]
 802132c:	68db      	ldr	r3, [r3, #12]
 802132e:	f043 0202 	orr.w	r2, r3, #2
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	330c      	adds	r3, #12
 802133a:	2202      	movs	r2, #2
 802133c:	4619      	mov	r1, r3
 802133e:	6878      	ldr	r0, [r7, #4]
 8021340:	f000 f8ea 	bl	8021518 <USBD_CtlSendData>
    break;
 8021344:	e004      	b.n	8021350 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8021346:	6839      	ldr	r1, [r7, #0]
 8021348:	6878      	ldr	r0, [r7, #4]
 802134a:	f000 f874 	bl	8021436 <USBD_CtlError>
    break;
 802134e:	bf00      	nop
  }
}
 8021350:	bf00      	nop
 8021352:	3708      	adds	r7, #8
 8021354:	46bd      	mov	sp, r7
 8021356:	bd80      	pop	{r7, pc}

08021358 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021358:	b580      	push	{r7, lr}
 802135a:	b082      	sub	sp, #8
 802135c:	af00      	add	r7, sp, #0
 802135e:	6078      	str	r0, [r7, #4]
 8021360:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021362:	683b      	ldr	r3, [r7, #0]
 8021364:	885b      	ldrh	r3, [r3, #2]
 8021366:	2b01      	cmp	r3, #1
 8021368:	d106      	bne.n	8021378 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	2201      	movs	r2, #1
 802136e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021372:	6878      	ldr	r0, [r7, #4]
 8021374:	f000 f92a 	bl	80215cc <USBD_CtlSendStatus>
  }
}
 8021378:	bf00      	nop
 802137a:	3708      	adds	r7, #8
 802137c:	46bd      	mov	sp, r7
 802137e:	bd80      	pop	{r7, pc}

08021380 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021380:	b580      	push	{r7, lr}
 8021382:	b082      	sub	sp, #8
 8021384:	af00      	add	r7, sp, #0
 8021386:	6078      	str	r0, [r7, #4]
 8021388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021390:	3b01      	subs	r3, #1
 8021392:	2b02      	cmp	r3, #2
 8021394:	d80b      	bhi.n	80213ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021396:	683b      	ldr	r3, [r7, #0]
 8021398:	885b      	ldrh	r3, [r3, #2]
 802139a:	2b01      	cmp	r3, #1
 802139c:	d10c      	bne.n	80213b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	2200      	movs	r2, #0
 80213a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80213a6:	6878      	ldr	r0, [r7, #4]
 80213a8:	f000 f910 	bl	80215cc <USBD_CtlSendStatus>
      }
      break;
 80213ac:	e004      	b.n	80213b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80213ae:	6839      	ldr	r1, [r7, #0]
 80213b0:	6878      	ldr	r0, [r7, #4]
 80213b2:	f000 f840 	bl	8021436 <USBD_CtlError>
      break;
 80213b6:	e000      	b.n	80213ba <USBD_ClrFeature+0x3a>
      break;
 80213b8:	bf00      	nop
  }
}
 80213ba:	bf00      	nop
 80213bc:	3708      	adds	r7, #8
 80213be:	46bd      	mov	sp, r7
 80213c0:	bd80      	pop	{r7, pc}

080213c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80213c2:	b580      	push	{r7, lr}
 80213c4:	b084      	sub	sp, #16
 80213c6:	af00      	add	r7, sp, #0
 80213c8:	6078      	str	r0, [r7, #4]
 80213ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80213cc:	683b      	ldr	r3, [r7, #0]
 80213ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80213d0:	68fb      	ldr	r3, [r7, #12]
 80213d2:	781a      	ldrb	r2, [r3, #0]
 80213d4:	687b      	ldr	r3, [r7, #4]
 80213d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80213d8:	68fb      	ldr	r3, [r7, #12]
 80213da:	3301      	adds	r3, #1
 80213dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80213de:	68fb      	ldr	r3, [r7, #12]
 80213e0:	781a      	ldrb	r2, [r3, #0]
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80213e6:	68fb      	ldr	r3, [r7, #12]
 80213e8:	3301      	adds	r3, #1
 80213ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80213ec:	68f8      	ldr	r0, [r7, #12]
 80213ee:	f7ff fa9d 	bl	802092c <SWAPBYTE>
 80213f2:	4603      	mov	r3, r0
 80213f4:	461a      	mov	r2, r3
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80213fa:	68fb      	ldr	r3, [r7, #12]
 80213fc:	3301      	adds	r3, #1
 80213fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021400:	68fb      	ldr	r3, [r7, #12]
 8021402:	3301      	adds	r3, #1
 8021404:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021406:	68f8      	ldr	r0, [r7, #12]
 8021408:	f7ff fa90 	bl	802092c <SWAPBYTE>
 802140c:	4603      	mov	r3, r0
 802140e:	461a      	mov	r2, r3
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021414:	68fb      	ldr	r3, [r7, #12]
 8021416:	3301      	adds	r3, #1
 8021418:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	3301      	adds	r3, #1
 802141e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021420:	68f8      	ldr	r0, [r7, #12]
 8021422:	f7ff fa83 	bl	802092c <SWAPBYTE>
 8021426:	4603      	mov	r3, r0
 8021428:	461a      	mov	r2, r3
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	80da      	strh	r2, [r3, #6]
}
 802142e:	bf00      	nop
 8021430:	3710      	adds	r7, #16
 8021432:	46bd      	mov	sp, r7
 8021434:	bd80      	pop	{r7, pc}

08021436 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021436:	b580      	push	{r7, lr}
 8021438:	b082      	sub	sp, #8
 802143a:	af00      	add	r7, sp, #0
 802143c:	6078      	str	r0, [r7, #4]
 802143e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021440:	2180      	movs	r1, #128	; 0x80
 8021442:	6878      	ldr	r0, [r7, #4]
 8021444:	f7e2 ff1e 	bl	8004284 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021448:	2100      	movs	r1, #0
 802144a:	6878      	ldr	r0, [r7, #4]
 802144c:	f7e2 ff1a 	bl	8004284 <USBD_LL_StallEP>
}
 8021450:	bf00      	nop
 8021452:	3708      	adds	r7, #8
 8021454:	46bd      	mov	sp, r7
 8021456:	bd80      	pop	{r7, pc}

08021458 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021458:	b580      	push	{r7, lr}
 802145a:	b086      	sub	sp, #24
 802145c:	af00      	add	r7, sp, #0
 802145e:	60f8      	str	r0, [r7, #12]
 8021460:	60b9      	str	r1, [r7, #8]
 8021462:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021464:	2300      	movs	r3, #0
 8021466:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021468:	68fb      	ldr	r3, [r7, #12]
 802146a:	2b00      	cmp	r3, #0
 802146c:	d036      	beq.n	80214dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 802146e:	68fb      	ldr	r3, [r7, #12]
 8021470:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021472:	6938      	ldr	r0, [r7, #16]
 8021474:	f000 f836 	bl	80214e4 <USBD_GetLen>
 8021478:	4603      	mov	r3, r0
 802147a:	3301      	adds	r3, #1
 802147c:	b29b      	uxth	r3, r3
 802147e:	005b      	lsls	r3, r3, #1
 8021480:	b29a      	uxth	r2, r3
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8021486:	7dfb      	ldrb	r3, [r7, #23]
 8021488:	68ba      	ldr	r2, [r7, #8]
 802148a:	4413      	add	r3, r2
 802148c:	687a      	ldr	r2, [r7, #4]
 802148e:	7812      	ldrb	r2, [r2, #0]
 8021490:	701a      	strb	r2, [r3, #0]
  idx++;
 8021492:	7dfb      	ldrb	r3, [r7, #23]
 8021494:	3301      	adds	r3, #1
 8021496:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021498:	7dfb      	ldrb	r3, [r7, #23]
 802149a:	68ba      	ldr	r2, [r7, #8]
 802149c:	4413      	add	r3, r2
 802149e:	2203      	movs	r2, #3
 80214a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80214a2:	7dfb      	ldrb	r3, [r7, #23]
 80214a4:	3301      	adds	r3, #1
 80214a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80214a8:	e013      	b.n	80214d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80214aa:	7dfb      	ldrb	r3, [r7, #23]
 80214ac:	68ba      	ldr	r2, [r7, #8]
 80214ae:	4413      	add	r3, r2
 80214b0:	693a      	ldr	r2, [r7, #16]
 80214b2:	7812      	ldrb	r2, [r2, #0]
 80214b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80214b6:	693b      	ldr	r3, [r7, #16]
 80214b8:	3301      	adds	r3, #1
 80214ba:	613b      	str	r3, [r7, #16]
    idx++;
 80214bc:	7dfb      	ldrb	r3, [r7, #23]
 80214be:	3301      	adds	r3, #1
 80214c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80214c2:	7dfb      	ldrb	r3, [r7, #23]
 80214c4:	68ba      	ldr	r2, [r7, #8]
 80214c6:	4413      	add	r3, r2
 80214c8:	2200      	movs	r2, #0
 80214ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80214cc:	7dfb      	ldrb	r3, [r7, #23]
 80214ce:	3301      	adds	r3, #1
 80214d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80214d2:	693b      	ldr	r3, [r7, #16]
 80214d4:	781b      	ldrb	r3, [r3, #0]
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	d1e7      	bne.n	80214aa <USBD_GetString+0x52>
 80214da:	e000      	b.n	80214de <USBD_GetString+0x86>
    return;
 80214dc:	bf00      	nop
  }
}
 80214de:	3718      	adds	r7, #24
 80214e0:	46bd      	mov	sp, r7
 80214e2:	bd80      	pop	{r7, pc}

080214e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80214e4:	b480      	push	{r7}
 80214e6:	b085      	sub	sp, #20
 80214e8:	af00      	add	r7, sp, #0
 80214ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80214ec:	2300      	movs	r3, #0
 80214ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80214f0:	687b      	ldr	r3, [r7, #4]
 80214f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80214f4:	e005      	b.n	8021502 <USBD_GetLen+0x1e>
  {
    len++;
 80214f6:	7bfb      	ldrb	r3, [r7, #15]
 80214f8:	3301      	adds	r3, #1
 80214fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80214fc:	68bb      	ldr	r3, [r7, #8]
 80214fe:	3301      	adds	r3, #1
 8021500:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8021502:	68bb      	ldr	r3, [r7, #8]
 8021504:	781b      	ldrb	r3, [r3, #0]
 8021506:	2b00      	cmp	r3, #0
 8021508:	d1f5      	bne.n	80214f6 <USBD_GetLen+0x12>
  }

  return len;
 802150a:	7bfb      	ldrb	r3, [r7, #15]
}
 802150c:	4618      	mov	r0, r3
 802150e:	3714      	adds	r7, #20
 8021510:	46bd      	mov	sp, r7
 8021512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021516:	4770      	bx	lr

08021518 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8021518:	b580      	push	{r7, lr}
 802151a:	b084      	sub	sp, #16
 802151c:	af00      	add	r7, sp, #0
 802151e:	60f8      	str	r0, [r7, #12]
 8021520:	60b9      	str	r1, [r7, #8]
 8021522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021524:	68fb      	ldr	r3, [r7, #12]
 8021526:	2202      	movs	r2, #2
 8021528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802152c:	68fb      	ldr	r3, [r7, #12]
 802152e:	687a      	ldr	r2, [r7, #4]
 8021530:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	687a      	ldr	r2, [r7, #4]
 8021536:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	68ba      	ldr	r2, [r7, #8]
 802153c:	2100      	movs	r1, #0
 802153e:	68f8      	ldr	r0, [r7, #12]
 8021540:	f7e2 ff29 	bl	8004396 <USBD_LL_Transmit>

  return USBD_OK;
 8021544:	2300      	movs	r3, #0
}
 8021546:	4618      	mov	r0, r3
 8021548:	3710      	adds	r7, #16
 802154a:	46bd      	mov	sp, r7
 802154c:	bd80      	pop	{r7, pc}

0802154e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 802154e:	b580      	push	{r7, lr}
 8021550:	b084      	sub	sp, #16
 8021552:	af00      	add	r7, sp, #0
 8021554:	60f8      	str	r0, [r7, #12]
 8021556:	60b9      	str	r1, [r7, #8]
 8021558:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	68ba      	ldr	r2, [r7, #8]
 802155e:	2100      	movs	r1, #0
 8021560:	68f8      	ldr	r0, [r7, #12]
 8021562:	f7e2 ff18 	bl	8004396 <USBD_LL_Transmit>

  return USBD_OK;
 8021566:	2300      	movs	r3, #0
}
 8021568:	4618      	mov	r0, r3
 802156a:	3710      	adds	r7, #16
 802156c:	46bd      	mov	sp, r7
 802156e:	bd80      	pop	{r7, pc}

08021570 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8021570:	b580      	push	{r7, lr}
 8021572:	b084      	sub	sp, #16
 8021574:	af00      	add	r7, sp, #0
 8021576:	60f8      	str	r0, [r7, #12]
 8021578:	60b9      	str	r1, [r7, #8]
 802157a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 802157c:	68fb      	ldr	r3, [r7, #12]
 802157e:	2203      	movs	r2, #3
 8021580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8021584:	68fb      	ldr	r3, [r7, #12]
 8021586:	687a      	ldr	r2, [r7, #4]
 8021588:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 802158c:	68fb      	ldr	r3, [r7, #12]
 802158e:	687a      	ldr	r2, [r7, #4]
 8021590:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	68ba      	ldr	r2, [r7, #8]
 8021598:	2100      	movs	r1, #0
 802159a:	68f8      	ldr	r0, [r7, #12]
 802159c:	f7e2 ff1c 	bl	80043d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80215a0:	2300      	movs	r3, #0
}
 80215a2:	4618      	mov	r0, r3
 80215a4:	3710      	adds	r7, #16
 80215a6:	46bd      	mov	sp, r7
 80215a8:	bd80      	pop	{r7, pc}

080215aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80215aa:	b580      	push	{r7, lr}
 80215ac:	b084      	sub	sp, #16
 80215ae:	af00      	add	r7, sp, #0
 80215b0:	60f8      	str	r0, [r7, #12]
 80215b2:	60b9      	str	r1, [r7, #8]
 80215b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	68ba      	ldr	r2, [r7, #8]
 80215ba:	2100      	movs	r1, #0
 80215bc:	68f8      	ldr	r0, [r7, #12]
 80215be:	f7e2 ff0b 	bl	80043d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80215c2:	2300      	movs	r3, #0
}
 80215c4:	4618      	mov	r0, r3
 80215c6:	3710      	adds	r7, #16
 80215c8:	46bd      	mov	sp, r7
 80215ca:	bd80      	pop	{r7, pc}

080215cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80215cc:	b580      	push	{r7, lr}
 80215ce:	b082      	sub	sp, #8
 80215d0:	af00      	add	r7, sp, #0
 80215d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	2204      	movs	r2, #4
 80215d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80215dc:	2300      	movs	r3, #0
 80215de:	2200      	movs	r2, #0
 80215e0:	2100      	movs	r1, #0
 80215e2:	6878      	ldr	r0, [r7, #4]
 80215e4:	f7e2 fed7 	bl	8004396 <USBD_LL_Transmit>

  return USBD_OK;
 80215e8:	2300      	movs	r3, #0
}
 80215ea:	4618      	mov	r0, r3
 80215ec:	3708      	adds	r7, #8
 80215ee:	46bd      	mov	sp, r7
 80215f0:	bd80      	pop	{r7, pc}

080215f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80215f2:	b580      	push	{r7, lr}
 80215f4:	b082      	sub	sp, #8
 80215f6:	af00      	add	r7, sp, #0
 80215f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	2205      	movs	r2, #5
 80215fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021602:	2300      	movs	r3, #0
 8021604:	2200      	movs	r2, #0
 8021606:	2100      	movs	r1, #0
 8021608:	6878      	ldr	r0, [r7, #4]
 802160a:	f7e2 fee5 	bl	80043d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802160e:	2300      	movs	r3, #0
}
 8021610:	4618      	mov	r0, r3
 8021612:	3708      	adds	r7, #8
 8021614:	46bd      	mov	sp, r7
 8021616:	bd80      	pop	{r7, pc}

08021618 <__libc_init_array>:
 8021618:	b570      	push	{r4, r5, r6, lr}
 802161a:	4d0d      	ldr	r5, [pc, #52]	; (8021650 <__libc_init_array+0x38>)
 802161c:	4c0d      	ldr	r4, [pc, #52]	; (8021654 <__libc_init_array+0x3c>)
 802161e:	1b64      	subs	r4, r4, r5
 8021620:	10a4      	asrs	r4, r4, #2
 8021622:	2600      	movs	r6, #0
 8021624:	42a6      	cmp	r6, r4
 8021626:	d109      	bne.n	802163c <__libc_init_array+0x24>
 8021628:	4d0b      	ldr	r5, [pc, #44]	; (8021658 <__libc_init_array+0x40>)
 802162a:	4c0c      	ldr	r4, [pc, #48]	; (802165c <__libc_init_array+0x44>)
 802162c:	f001 f8bc 	bl	80227a8 <_init>
 8021630:	1b64      	subs	r4, r4, r5
 8021632:	10a4      	asrs	r4, r4, #2
 8021634:	2600      	movs	r6, #0
 8021636:	42a6      	cmp	r6, r4
 8021638:	d105      	bne.n	8021646 <__libc_init_array+0x2e>
 802163a:	bd70      	pop	{r4, r5, r6, pc}
 802163c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021640:	4798      	blx	r3
 8021642:	3601      	adds	r6, #1
 8021644:	e7ee      	b.n	8021624 <__libc_init_array+0xc>
 8021646:	f855 3b04 	ldr.w	r3, [r5], #4
 802164a:	4798      	blx	r3
 802164c:	3601      	adds	r6, #1
 802164e:	e7f2      	b.n	8021636 <__libc_init_array+0x1e>
 8021650:	08025e6c 	.word	0x08025e6c
 8021654:	08025e6c 	.word	0x08025e6c
 8021658:	08025e6c 	.word	0x08025e6c
 802165c:	08025e70 	.word	0x08025e70

08021660 <malloc>:
 8021660:	4b02      	ldr	r3, [pc, #8]	; (802166c <malloc+0xc>)
 8021662:	4601      	mov	r1, r0
 8021664:	6818      	ldr	r0, [r3, #0]
 8021666:	f000 b87f 	b.w	8021768 <_malloc_r>
 802166a:	bf00      	nop
 802166c:	200001a8 	.word	0x200001a8

08021670 <free>:
 8021670:	4b02      	ldr	r3, [pc, #8]	; (802167c <free+0xc>)
 8021672:	4601      	mov	r1, r0
 8021674:	6818      	ldr	r0, [r3, #0]
 8021676:	f000 b827 	b.w	80216c8 <_free_r>
 802167a:	bf00      	nop
 802167c:	200001a8 	.word	0x200001a8

08021680 <memcmp>:
 8021680:	b530      	push	{r4, r5, lr}
 8021682:	3901      	subs	r1, #1
 8021684:	2400      	movs	r4, #0
 8021686:	42a2      	cmp	r2, r4
 8021688:	d101      	bne.n	802168e <memcmp+0xe>
 802168a:	2000      	movs	r0, #0
 802168c:	e005      	b.n	802169a <memcmp+0x1a>
 802168e:	5d03      	ldrb	r3, [r0, r4]
 8021690:	3401      	adds	r4, #1
 8021692:	5d0d      	ldrb	r5, [r1, r4]
 8021694:	42ab      	cmp	r3, r5
 8021696:	d0f6      	beq.n	8021686 <memcmp+0x6>
 8021698:	1b58      	subs	r0, r3, r5
 802169a:	bd30      	pop	{r4, r5, pc}

0802169c <memcpy>:
 802169c:	440a      	add	r2, r1
 802169e:	4291      	cmp	r1, r2
 80216a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80216a4:	d100      	bne.n	80216a8 <memcpy+0xc>
 80216a6:	4770      	bx	lr
 80216a8:	b510      	push	{r4, lr}
 80216aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80216ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80216b2:	4291      	cmp	r1, r2
 80216b4:	d1f9      	bne.n	80216aa <memcpy+0xe>
 80216b6:	bd10      	pop	{r4, pc}

080216b8 <memset>:
 80216b8:	4402      	add	r2, r0
 80216ba:	4603      	mov	r3, r0
 80216bc:	4293      	cmp	r3, r2
 80216be:	d100      	bne.n	80216c2 <memset+0xa>
 80216c0:	4770      	bx	lr
 80216c2:	f803 1b01 	strb.w	r1, [r3], #1
 80216c6:	e7f9      	b.n	80216bc <memset+0x4>

080216c8 <_free_r>:
 80216c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80216ca:	2900      	cmp	r1, #0
 80216cc:	d048      	beq.n	8021760 <_free_r+0x98>
 80216ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80216d2:	9001      	str	r0, [sp, #4]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	f1a1 0404 	sub.w	r4, r1, #4
 80216da:	bfb8      	it	lt
 80216dc:	18e4      	addlt	r4, r4, r3
 80216de:	f000 fa43 	bl	8021b68 <__malloc_lock>
 80216e2:	4a20      	ldr	r2, [pc, #128]	; (8021764 <_free_r+0x9c>)
 80216e4:	9801      	ldr	r0, [sp, #4]
 80216e6:	6813      	ldr	r3, [r2, #0]
 80216e8:	4615      	mov	r5, r2
 80216ea:	b933      	cbnz	r3, 80216fa <_free_r+0x32>
 80216ec:	6063      	str	r3, [r4, #4]
 80216ee:	6014      	str	r4, [r2, #0]
 80216f0:	b003      	add	sp, #12
 80216f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80216f6:	f000 ba3d 	b.w	8021b74 <__malloc_unlock>
 80216fa:	42a3      	cmp	r3, r4
 80216fc:	d90b      	bls.n	8021716 <_free_r+0x4e>
 80216fe:	6821      	ldr	r1, [r4, #0]
 8021700:	1862      	adds	r2, r4, r1
 8021702:	4293      	cmp	r3, r2
 8021704:	bf04      	itt	eq
 8021706:	681a      	ldreq	r2, [r3, #0]
 8021708:	685b      	ldreq	r3, [r3, #4]
 802170a:	6063      	str	r3, [r4, #4]
 802170c:	bf04      	itt	eq
 802170e:	1852      	addeq	r2, r2, r1
 8021710:	6022      	streq	r2, [r4, #0]
 8021712:	602c      	str	r4, [r5, #0]
 8021714:	e7ec      	b.n	80216f0 <_free_r+0x28>
 8021716:	461a      	mov	r2, r3
 8021718:	685b      	ldr	r3, [r3, #4]
 802171a:	b10b      	cbz	r3, 8021720 <_free_r+0x58>
 802171c:	42a3      	cmp	r3, r4
 802171e:	d9fa      	bls.n	8021716 <_free_r+0x4e>
 8021720:	6811      	ldr	r1, [r2, #0]
 8021722:	1855      	adds	r5, r2, r1
 8021724:	42a5      	cmp	r5, r4
 8021726:	d10b      	bne.n	8021740 <_free_r+0x78>
 8021728:	6824      	ldr	r4, [r4, #0]
 802172a:	4421      	add	r1, r4
 802172c:	1854      	adds	r4, r2, r1
 802172e:	42a3      	cmp	r3, r4
 8021730:	6011      	str	r1, [r2, #0]
 8021732:	d1dd      	bne.n	80216f0 <_free_r+0x28>
 8021734:	681c      	ldr	r4, [r3, #0]
 8021736:	685b      	ldr	r3, [r3, #4]
 8021738:	6053      	str	r3, [r2, #4]
 802173a:	4421      	add	r1, r4
 802173c:	6011      	str	r1, [r2, #0]
 802173e:	e7d7      	b.n	80216f0 <_free_r+0x28>
 8021740:	d902      	bls.n	8021748 <_free_r+0x80>
 8021742:	230c      	movs	r3, #12
 8021744:	6003      	str	r3, [r0, #0]
 8021746:	e7d3      	b.n	80216f0 <_free_r+0x28>
 8021748:	6825      	ldr	r5, [r4, #0]
 802174a:	1961      	adds	r1, r4, r5
 802174c:	428b      	cmp	r3, r1
 802174e:	bf04      	itt	eq
 8021750:	6819      	ldreq	r1, [r3, #0]
 8021752:	685b      	ldreq	r3, [r3, #4]
 8021754:	6063      	str	r3, [r4, #4]
 8021756:	bf04      	itt	eq
 8021758:	1949      	addeq	r1, r1, r5
 802175a:	6021      	streq	r1, [r4, #0]
 802175c:	6054      	str	r4, [r2, #4]
 802175e:	e7c7      	b.n	80216f0 <_free_r+0x28>
 8021760:	b003      	add	sp, #12
 8021762:	bd30      	pop	{r4, r5, pc}
 8021764:	200090fc 	.word	0x200090fc

08021768 <_malloc_r>:
 8021768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802176a:	1ccd      	adds	r5, r1, #3
 802176c:	f025 0503 	bic.w	r5, r5, #3
 8021770:	3508      	adds	r5, #8
 8021772:	2d0c      	cmp	r5, #12
 8021774:	bf38      	it	cc
 8021776:	250c      	movcc	r5, #12
 8021778:	2d00      	cmp	r5, #0
 802177a:	4606      	mov	r6, r0
 802177c:	db01      	blt.n	8021782 <_malloc_r+0x1a>
 802177e:	42a9      	cmp	r1, r5
 8021780:	d903      	bls.n	802178a <_malloc_r+0x22>
 8021782:	230c      	movs	r3, #12
 8021784:	6033      	str	r3, [r6, #0]
 8021786:	2000      	movs	r0, #0
 8021788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802178a:	f000 f9ed 	bl	8021b68 <__malloc_lock>
 802178e:	4921      	ldr	r1, [pc, #132]	; (8021814 <_malloc_r+0xac>)
 8021790:	680a      	ldr	r2, [r1, #0]
 8021792:	4614      	mov	r4, r2
 8021794:	b99c      	cbnz	r4, 80217be <_malloc_r+0x56>
 8021796:	4f20      	ldr	r7, [pc, #128]	; (8021818 <_malloc_r+0xb0>)
 8021798:	683b      	ldr	r3, [r7, #0]
 802179a:	b923      	cbnz	r3, 80217a6 <_malloc_r+0x3e>
 802179c:	4621      	mov	r1, r4
 802179e:	4630      	mov	r0, r6
 80217a0:	f000 f8aa 	bl	80218f8 <_sbrk_r>
 80217a4:	6038      	str	r0, [r7, #0]
 80217a6:	4629      	mov	r1, r5
 80217a8:	4630      	mov	r0, r6
 80217aa:	f000 f8a5 	bl	80218f8 <_sbrk_r>
 80217ae:	1c43      	adds	r3, r0, #1
 80217b0:	d123      	bne.n	80217fa <_malloc_r+0x92>
 80217b2:	230c      	movs	r3, #12
 80217b4:	6033      	str	r3, [r6, #0]
 80217b6:	4630      	mov	r0, r6
 80217b8:	f000 f9dc 	bl	8021b74 <__malloc_unlock>
 80217bc:	e7e3      	b.n	8021786 <_malloc_r+0x1e>
 80217be:	6823      	ldr	r3, [r4, #0]
 80217c0:	1b5b      	subs	r3, r3, r5
 80217c2:	d417      	bmi.n	80217f4 <_malloc_r+0x8c>
 80217c4:	2b0b      	cmp	r3, #11
 80217c6:	d903      	bls.n	80217d0 <_malloc_r+0x68>
 80217c8:	6023      	str	r3, [r4, #0]
 80217ca:	441c      	add	r4, r3
 80217cc:	6025      	str	r5, [r4, #0]
 80217ce:	e004      	b.n	80217da <_malloc_r+0x72>
 80217d0:	6863      	ldr	r3, [r4, #4]
 80217d2:	42a2      	cmp	r2, r4
 80217d4:	bf0c      	ite	eq
 80217d6:	600b      	streq	r3, [r1, #0]
 80217d8:	6053      	strne	r3, [r2, #4]
 80217da:	4630      	mov	r0, r6
 80217dc:	f000 f9ca 	bl	8021b74 <__malloc_unlock>
 80217e0:	f104 000b 	add.w	r0, r4, #11
 80217e4:	1d23      	adds	r3, r4, #4
 80217e6:	f020 0007 	bic.w	r0, r0, #7
 80217ea:	1ac2      	subs	r2, r0, r3
 80217ec:	d0cc      	beq.n	8021788 <_malloc_r+0x20>
 80217ee:	1a1b      	subs	r3, r3, r0
 80217f0:	50a3      	str	r3, [r4, r2]
 80217f2:	e7c9      	b.n	8021788 <_malloc_r+0x20>
 80217f4:	4622      	mov	r2, r4
 80217f6:	6864      	ldr	r4, [r4, #4]
 80217f8:	e7cc      	b.n	8021794 <_malloc_r+0x2c>
 80217fa:	1cc4      	adds	r4, r0, #3
 80217fc:	f024 0403 	bic.w	r4, r4, #3
 8021800:	42a0      	cmp	r0, r4
 8021802:	d0e3      	beq.n	80217cc <_malloc_r+0x64>
 8021804:	1a21      	subs	r1, r4, r0
 8021806:	4630      	mov	r0, r6
 8021808:	f000 f876 	bl	80218f8 <_sbrk_r>
 802180c:	3001      	adds	r0, #1
 802180e:	d1dd      	bne.n	80217cc <_malloc_r+0x64>
 8021810:	e7cf      	b.n	80217b2 <_malloc_r+0x4a>
 8021812:	bf00      	nop
 8021814:	200090fc 	.word	0x200090fc
 8021818:	20009100 	.word	0x20009100

0802181c <iprintf>:
 802181c:	b40f      	push	{r0, r1, r2, r3}
 802181e:	4b0a      	ldr	r3, [pc, #40]	; (8021848 <iprintf+0x2c>)
 8021820:	b513      	push	{r0, r1, r4, lr}
 8021822:	681c      	ldr	r4, [r3, #0]
 8021824:	b124      	cbz	r4, 8021830 <iprintf+0x14>
 8021826:	69a3      	ldr	r3, [r4, #24]
 8021828:	b913      	cbnz	r3, 8021830 <iprintf+0x14>
 802182a:	4620      	mov	r0, r4
 802182c:	f000 f8ea 	bl	8021a04 <__sinit>
 8021830:	ab05      	add	r3, sp, #20
 8021832:	9a04      	ldr	r2, [sp, #16]
 8021834:	68a1      	ldr	r1, [r4, #8]
 8021836:	9301      	str	r3, [sp, #4]
 8021838:	4620      	mov	r0, r4
 802183a:	f000 f9cb 	bl	8021bd4 <_vfiprintf_r>
 802183e:	b002      	add	sp, #8
 8021840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021844:	b004      	add	sp, #16
 8021846:	4770      	bx	lr
 8021848:	200001a8 	.word	0x200001a8

0802184c <putchar>:
 802184c:	4b09      	ldr	r3, [pc, #36]	; (8021874 <putchar+0x28>)
 802184e:	b513      	push	{r0, r1, r4, lr}
 8021850:	681c      	ldr	r4, [r3, #0]
 8021852:	4601      	mov	r1, r0
 8021854:	b134      	cbz	r4, 8021864 <putchar+0x18>
 8021856:	69a3      	ldr	r3, [r4, #24]
 8021858:	b923      	cbnz	r3, 8021864 <putchar+0x18>
 802185a:	9001      	str	r0, [sp, #4]
 802185c:	4620      	mov	r0, r4
 802185e:	f000 f8d1 	bl	8021a04 <__sinit>
 8021862:	9901      	ldr	r1, [sp, #4]
 8021864:	68a2      	ldr	r2, [r4, #8]
 8021866:	4620      	mov	r0, r4
 8021868:	b002      	add	sp, #8
 802186a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802186e:	f000 bc75 	b.w	802215c <_putc_r>
 8021872:	bf00      	nop
 8021874:	200001a8 	.word	0x200001a8

08021878 <rand>:
 8021878:	4b17      	ldr	r3, [pc, #92]	; (80218d8 <rand+0x60>)
 802187a:	b510      	push	{r4, lr}
 802187c:	681c      	ldr	r4, [r3, #0]
 802187e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021880:	b9b3      	cbnz	r3, 80218b0 <rand+0x38>
 8021882:	2018      	movs	r0, #24
 8021884:	f7ff feec 	bl	8021660 <malloc>
 8021888:	63a0      	str	r0, [r4, #56]	; 0x38
 802188a:	b928      	cbnz	r0, 8021898 <rand+0x20>
 802188c:	4602      	mov	r2, r0
 802188e:	4b13      	ldr	r3, [pc, #76]	; (80218dc <rand+0x64>)
 8021890:	4813      	ldr	r0, [pc, #76]	; (80218e0 <rand+0x68>)
 8021892:	214e      	movs	r1, #78	; 0x4e
 8021894:	f000 f840 	bl	8021918 <__assert_func>
 8021898:	4a12      	ldr	r2, [pc, #72]	; (80218e4 <rand+0x6c>)
 802189a:	4b13      	ldr	r3, [pc, #76]	; (80218e8 <rand+0x70>)
 802189c:	e9c0 2300 	strd	r2, r3, [r0]
 80218a0:	4b12      	ldr	r3, [pc, #72]	; (80218ec <rand+0x74>)
 80218a2:	6083      	str	r3, [r0, #8]
 80218a4:	230b      	movs	r3, #11
 80218a6:	8183      	strh	r3, [r0, #12]
 80218a8:	2201      	movs	r2, #1
 80218aa:	2300      	movs	r3, #0
 80218ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80218b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80218b2:	480f      	ldr	r0, [pc, #60]	; (80218f0 <rand+0x78>)
 80218b4:	690a      	ldr	r2, [r1, #16]
 80218b6:	694b      	ldr	r3, [r1, #20]
 80218b8:	4c0e      	ldr	r4, [pc, #56]	; (80218f4 <rand+0x7c>)
 80218ba:	4350      	muls	r0, r2
 80218bc:	fb04 0003 	mla	r0, r4, r3, r0
 80218c0:	fba2 3404 	umull	r3, r4, r2, r4
 80218c4:	1c5a      	adds	r2, r3, #1
 80218c6:	4404      	add	r4, r0
 80218c8:	f144 0000 	adc.w	r0, r4, #0
 80218cc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80218d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80218d4:	bd10      	pop	{r4, pc}
 80218d6:	bf00      	nop
 80218d8:	200001a8 	.word	0x200001a8
 80218dc:	08025d1c 	.word	0x08025d1c
 80218e0:	08025d33 	.word	0x08025d33
 80218e4:	abcd330e 	.word	0xabcd330e
 80218e8:	e66d1234 	.word	0xe66d1234
 80218ec:	0005deec 	.word	0x0005deec
 80218f0:	5851f42d 	.word	0x5851f42d
 80218f4:	4c957f2d 	.word	0x4c957f2d

080218f8 <_sbrk_r>:
 80218f8:	b538      	push	{r3, r4, r5, lr}
 80218fa:	4d06      	ldr	r5, [pc, #24]	; (8021914 <_sbrk_r+0x1c>)
 80218fc:	2300      	movs	r3, #0
 80218fe:	4604      	mov	r4, r0
 8021900:	4608      	mov	r0, r1
 8021902:	602b      	str	r3, [r5, #0]
 8021904:	f7e0 fcbc 	bl	8002280 <_sbrk>
 8021908:	1c43      	adds	r3, r0, #1
 802190a:	d102      	bne.n	8021912 <_sbrk_r+0x1a>
 802190c:	682b      	ldr	r3, [r5, #0]
 802190e:	b103      	cbz	r3, 8021912 <_sbrk_r+0x1a>
 8021910:	6023      	str	r3, [r4, #0]
 8021912:	bd38      	pop	{r3, r4, r5, pc}
 8021914:	20011f70 	.word	0x20011f70

08021918 <__assert_func>:
 8021918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802191a:	4614      	mov	r4, r2
 802191c:	461a      	mov	r2, r3
 802191e:	4b09      	ldr	r3, [pc, #36]	; (8021944 <__assert_func+0x2c>)
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	4605      	mov	r5, r0
 8021924:	68d8      	ldr	r0, [r3, #12]
 8021926:	b14c      	cbz	r4, 802193c <__assert_func+0x24>
 8021928:	4b07      	ldr	r3, [pc, #28]	; (8021948 <__assert_func+0x30>)
 802192a:	9100      	str	r1, [sp, #0]
 802192c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021930:	4906      	ldr	r1, [pc, #24]	; (802194c <__assert_func+0x34>)
 8021932:	462b      	mov	r3, r5
 8021934:	f000 f8e4 	bl	8021b00 <fiprintf>
 8021938:	f000 fd6e 	bl	8022418 <abort>
 802193c:	4b04      	ldr	r3, [pc, #16]	; (8021950 <__assert_func+0x38>)
 802193e:	461c      	mov	r4, r3
 8021940:	e7f3      	b.n	802192a <__assert_func+0x12>
 8021942:	bf00      	nop
 8021944:	200001a8 	.word	0x200001a8
 8021948:	08025d92 	.word	0x08025d92
 802194c:	08025d9f 	.word	0x08025d9f
 8021950:	08025dcd 	.word	0x08025dcd

08021954 <std>:
 8021954:	2300      	movs	r3, #0
 8021956:	b510      	push	{r4, lr}
 8021958:	4604      	mov	r4, r0
 802195a:	e9c0 3300 	strd	r3, r3, [r0]
 802195e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021962:	6083      	str	r3, [r0, #8]
 8021964:	8181      	strh	r1, [r0, #12]
 8021966:	6643      	str	r3, [r0, #100]	; 0x64
 8021968:	81c2      	strh	r2, [r0, #14]
 802196a:	6183      	str	r3, [r0, #24]
 802196c:	4619      	mov	r1, r3
 802196e:	2208      	movs	r2, #8
 8021970:	305c      	adds	r0, #92	; 0x5c
 8021972:	f7ff fea1 	bl	80216b8 <memset>
 8021976:	4b05      	ldr	r3, [pc, #20]	; (802198c <std+0x38>)
 8021978:	6263      	str	r3, [r4, #36]	; 0x24
 802197a:	4b05      	ldr	r3, [pc, #20]	; (8021990 <std+0x3c>)
 802197c:	62a3      	str	r3, [r4, #40]	; 0x28
 802197e:	4b05      	ldr	r3, [pc, #20]	; (8021994 <std+0x40>)
 8021980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021982:	4b05      	ldr	r3, [pc, #20]	; (8021998 <std+0x44>)
 8021984:	6224      	str	r4, [r4, #32]
 8021986:	6323      	str	r3, [r4, #48]	; 0x30
 8021988:	bd10      	pop	{r4, pc}
 802198a:	bf00      	nop
 802198c:	080221ed 	.word	0x080221ed
 8021990:	0802220f 	.word	0x0802220f
 8021994:	08022247 	.word	0x08022247
 8021998:	0802226b 	.word	0x0802226b

0802199c <_cleanup_r>:
 802199c:	4901      	ldr	r1, [pc, #4]	; (80219a4 <_cleanup_r+0x8>)
 802199e:	f000 b8c1 	b.w	8021b24 <_fwalk_reent>
 80219a2:	bf00      	nop
 80219a4:	08022555 	.word	0x08022555

080219a8 <__sfmoreglue>:
 80219a8:	b570      	push	{r4, r5, r6, lr}
 80219aa:	1e4a      	subs	r2, r1, #1
 80219ac:	2568      	movs	r5, #104	; 0x68
 80219ae:	4355      	muls	r5, r2
 80219b0:	460e      	mov	r6, r1
 80219b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80219b6:	f7ff fed7 	bl	8021768 <_malloc_r>
 80219ba:	4604      	mov	r4, r0
 80219bc:	b140      	cbz	r0, 80219d0 <__sfmoreglue+0x28>
 80219be:	2100      	movs	r1, #0
 80219c0:	e9c0 1600 	strd	r1, r6, [r0]
 80219c4:	300c      	adds	r0, #12
 80219c6:	60a0      	str	r0, [r4, #8]
 80219c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80219cc:	f7ff fe74 	bl	80216b8 <memset>
 80219d0:	4620      	mov	r0, r4
 80219d2:	bd70      	pop	{r4, r5, r6, pc}

080219d4 <__sfp_lock_acquire>:
 80219d4:	4801      	ldr	r0, [pc, #4]	; (80219dc <__sfp_lock_acquire+0x8>)
 80219d6:	f000 b8c5 	b.w	8021b64 <__retarget_lock_acquire_recursive>
 80219da:	bf00      	nop
 80219dc:	20011fa4 	.word	0x20011fa4

080219e0 <__sfp_lock_release>:
 80219e0:	4801      	ldr	r0, [pc, #4]	; (80219e8 <__sfp_lock_release+0x8>)
 80219e2:	f000 b8c0 	b.w	8021b66 <__retarget_lock_release_recursive>
 80219e6:	bf00      	nop
 80219e8:	20011fa4 	.word	0x20011fa4

080219ec <__sinit_lock_acquire>:
 80219ec:	4801      	ldr	r0, [pc, #4]	; (80219f4 <__sinit_lock_acquire+0x8>)
 80219ee:	f000 b8b9 	b.w	8021b64 <__retarget_lock_acquire_recursive>
 80219f2:	bf00      	nop
 80219f4:	20011f9f 	.word	0x20011f9f

080219f8 <__sinit_lock_release>:
 80219f8:	4801      	ldr	r0, [pc, #4]	; (8021a00 <__sinit_lock_release+0x8>)
 80219fa:	f000 b8b4 	b.w	8021b66 <__retarget_lock_release_recursive>
 80219fe:	bf00      	nop
 8021a00:	20011f9f 	.word	0x20011f9f

08021a04 <__sinit>:
 8021a04:	b510      	push	{r4, lr}
 8021a06:	4604      	mov	r4, r0
 8021a08:	f7ff fff0 	bl	80219ec <__sinit_lock_acquire>
 8021a0c:	69a3      	ldr	r3, [r4, #24]
 8021a0e:	b11b      	cbz	r3, 8021a18 <__sinit+0x14>
 8021a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a14:	f7ff bff0 	b.w	80219f8 <__sinit_lock_release>
 8021a18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021a1c:	6523      	str	r3, [r4, #80]	; 0x50
 8021a1e:	4b13      	ldr	r3, [pc, #76]	; (8021a6c <__sinit+0x68>)
 8021a20:	4a13      	ldr	r2, [pc, #76]	; (8021a70 <__sinit+0x6c>)
 8021a22:	681b      	ldr	r3, [r3, #0]
 8021a24:	62a2      	str	r2, [r4, #40]	; 0x28
 8021a26:	42a3      	cmp	r3, r4
 8021a28:	bf04      	itt	eq
 8021a2a:	2301      	moveq	r3, #1
 8021a2c:	61a3      	streq	r3, [r4, #24]
 8021a2e:	4620      	mov	r0, r4
 8021a30:	f000 f820 	bl	8021a74 <__sfp>
 8021a34:	6060      	str	r0, [r4, #4]
 8021a36:	4620      	mov	r0, r4
 8021a38:	f000 f81c 	bl	8021a74 <__sfp>
 8021a3c:	60a0      	str	r0, [r4, #8]
 8021a3e:	4620      	mov	r0, r4
 8021a40:	f000 f818 	bl	8021a74 <__sfp>
 8021a44:	2200      	movs	r2, #0
 8021a46:	60e0      	str	r0, [r4, #12]
 8021a48:	2104      	movs	r1, #4
 8021a4a:	6860      	ldr	r0, [r4, #4]
 8021a4c:	f7ff ff82 	bl	8021954 <std>
 8021a50:	68a0      	ldr	r0, [r4, #8]
 8021a52:	2201      	movs	r2, #1
 8021a54:	2109      	movs	r1, #9
 8021a56:	f7ff ff7d 	bl	8021954 <std>
 8021a5a:	68e0      	ldr	r0, [r4, #12]
 8021a5c:	2202      	movs	r2, #2
 8021a5e:	2112      	movs	r1, #18
 8021a60:	f7ff ff78 	bl	8021954 <std>
 8021a64:	2301      	movs	r3, #1
 8021a66:	61a3      	str	r3, [r4, #24]
 8021a68:	e7d2      	b.n	8021a10 <__sinit+0xc>
 8021a6a:	bf00      	nop
 8021a6c:	08025d18 	.word	0x08025d18
 8021a70:	0802199d 	.word	0x0802199d

08021a74 <__sfp>:
 8021a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a76:	4607      	mov	r7, r0
 8021a78:	f7ff ffac 	bl	80219d4 <__sfp_lock_acquire>
 8021a7c:	4b1e      	ldr	r3, [pc, #120]	; (8021af8 <__sfp+0x84>)
 8021a7e:	681e      	ldr	r6, [r3, #0]
 8021a80:	69b3      	ldr	r3, [r6, #24]
 8021a82:	b913      	cbnz	r3, 8021a8a <__sfp+0x16>
 8021a84:	4630      	mov	r0, r6
 8021a86:	f7ff ffbd 	bl	8021a04 <__sinit>
 8021a8a:	3648      	adds	r6, #72	; 0x48
 8021a8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021a90:	3b01      	subs	r3, #1
 8021a92:	d503      	bpl.n	8021a9c <__sfp+0x28>
 8021a94:	6833      	ldr	r3, [r6, #0]
 8021a96:	b30b      	cbz	r3, 8021adc <__sfp+0x68>
 8021a98:	6836      	ldr	r6, [r6, #0]
 8021a9a:	e7f7      	b.n	8021a8c <__sfp+0x18>
 8021a9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021aa0:	b9d5      	cbnz	r5, 8021ad8 <__sfp+0x64>
 8021aa2:	4b16      	ldr	r3, [pc, #88]	; (8021afc <__sfp+0x88>)
 8021aa4:	60e3      	str	r3, [r4, #12]
 8021aa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021aaa:	6665      	str	r5, [r4, #100]	; 0x64
 8021aac:	f000 f859 	bl	8021b62 <__retarget_lock_init_recursive>
 8021ab0:	f7ff ff96 	bl	80219e0 <__sfp_lock_release>
 8021ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021abc:	6025      	str	r5, [r4, #0]
 8021abe:	61a5      	str	r5, [r4, #24]
 8021ac0:	2208      	movs	r2, #8
 8021ac2:	4629      	mov	r1, r5
 8021ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021ac8:	f7ff fdf6 	bl	80216b8 <memset>
 8021acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021ad4:	4620      	mov	r0, r4
 8021ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ad8:	3468      	adds	r4, #104	; 0x68
 8021ada:	e7d9      	b.n	8021a90 <__sfp+0x1c>
 8021adc:	2104      	movs	r1, #4
 8021ade:	4638      	mov	r0, r7
 8021ae0:	f7ff ff62 	bl	80219a8 <__sfmoreglue>
 8021ae4:	4604      	mov	r4, r0
 8021ae6:	6030      	str	r0, [r6, #0]
 8021ae8:	2800      	cmp	r0, #0
 8021aea:	d1d5      	bne.n	8021a98 <__sfp+0x24>
 8021aec:	f7ff ff78 	bl	80219e0 <__sfp_lock_release>
 8021af0:	230c      	movs	r3, #12
 8021af2:	603b      	str	r3, [r7, #0]
 8021af4:	e7ee      	b.n	8021ad4 <__sfp+0x60>
 8021af6:	bf00      	nop
 8021af8:	08025d18 	.word	0x08025d18
 8021afc:	ffff0001 	.word	0xffff0001

08021b00 <fiprintf>:
 8021b00:	b40e      	push	{r1, r2, r3}
 8021b02:	b503      	push	{r0, r1, lr}
 8021b04:	4601      	mov	r1, r0
 8021b06:	ab03      	add	r3, sp, #12
 8021b08:	4805      	ldr	r0, [pc, #20]	; (8021b20 <fiprintf+0x20>)
 8021b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b0e:	6800      	ldr	r0, [r0, #0]
 8021b10:	9301      	str	r3, [sp, #4]
 8021b12:	f000 f85f 	bl	8021bd4 <_vfiprintf_r>
 8021b16:	b002      	add	sp, #8
 8021b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b1c:	b003      	add	sp, #12
 8021b1e:	4770      	bx	lr
 8021b20:	200001a8 	.word	0x200001a8

08021b24 <_fwalk_reent>:
 8021b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b28:	4606      	mov	r6, r0
 8021b2a:	4688      	mov	r8, r1
 8021b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021b30:	2700      	movs	r7, #0
 8021b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021b36:	f1b9 0901 	subs.w	r9, r9, #1
 8021b3a:	d505      	bpl.n	8021b48 <_fwalk_reent+0x24>
 8021b3c:	6824      	ldr	r4, [r4, #0]
 8021b3e:	2c00      	cmp	r4, #0
 8021b40:	d1f7      	bne.n	8021b32 <_fwalk_reent+0xe>
 8021b42:	4638      	mov	r0, r7
 8021b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b48:	89ab      	ldrh	r3, [r5, #12]
 8021b4a:	2b01      	cmp	r3, #1
 8021b4c:	d907      	bls.n	8021b5e <_fwalk_reent+0x3a>
 8021b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021b52:	3301      	adds	r3, #1
 8021b54:	d003      	beq.n	8021b5e <_fwalk_reent+0x3a>
 8021b56:	4629      	mov	r1, r5
 8021b58:	4630      	mov	r0, r6
 8021b5a:	47c0      	blx	r8
 8021b5c:	4307      	orrs	r7, r0
 8021b5e:	3568      	adds	r5, #104	; 0x68
 8021b60:	e7e9      	b.n	8021b36 <_fwalk_reent+0x12>

08021b62 <__retarget_lock_init_recursive>:
 8021b62:	4770      	bx	lr

08021b64 <__retarget_lock_acquire_recursive>:
 8021b64:	4770      	bx	lr

08021b66 <__retarget_lock_release_recursive>:
 8021b66:	4770      	bx	lr

08021b68 <__malloc_lock>:
 8021b68:	4801      	ldr	r0, [pc, #4]	; (8021b70 <__malloc_lock+0x8>)
 8021b6a:	f7ff bffb 	b.w	8021b64 <__retarget_lock_acquire_recursive>
 8021b6e:	bf00      	nop
 8021b70:	20011fa0 	.word	0x20011fa0

08021b74 <__malloc_unlock>:
 8021b74:	4801      	ldr	r0, [pc, #4]	; (8021b7c <__malloc_unlock+0x8>)
 8021b76:	f7ff bff6 	b.w	8021b66 <__retarget_lock_release_recursive>
 8021b7a:	bf00      	nop
 8021b7c:	20011fa0 	.word	0x20011fa0

08021b80 <__sfputc_r>:
 8021b80:	6893      	ldr	r3, [r2, #8]
 8021b82:	3b01      	subs	r3, #1
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	b410      	push	{r4}
 8021b88:	6093      	str	r3, [r2, #8]
 8021b8a:	da08      	bge.n	8021b9e <__sfputc_r+0x1e>
 8021b8c:	6994      	ldr	r4, [r2, #24]
 8021b8e:	42a3      	cmp	r3, r4
 8021b90:	db01      	blt.n	8021b96 <__sfputc_r+0x16>
 8021b92:	290a      	cmp	r1, #10
 8021b94:	d103      	bne.n	8021b9e <__sfputc_r+0x1e>
 8021b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021b9a:	f000 bb6b 	b.w	8022274 <__swbuf_r>
 8021b9e:	6813      	ldr	r3, [r2, #0]
 8021ba0:	1c58      	adds	r0, r3, #1
 8021ba2:	6010      	str	r0, [r2, #0]
 8021ba4:	7019      	strb	r1, [r3, #0]
 8021ba6:	4608      	mov	r0, r1
 8021ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021bac:	4770      	bx	lr

08021bae <__sfputs_r>:
 8021bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bb0:	4606      	mov	r6, r0
 8021bb2:	460f      	mov	r7, r1
 8021bb4:	4614      	mov	r4, r2
 8021bb6:	18d5      	adds	r5, r2, r3
 8021bb8:	42ac      	cmp	r4, r5
 8021bba:	d101      	bne.n	8021bc0 <__sfputs_r+0x12>
 8021bbc:	2000      	movs	r0, #0
 8021bbe:	e007      	b.n	8021bd0 <__sfputs_r+0x22>
 8021bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021bc4:	463a      	mov	r2, r7
 8021bc6:	4630      	mov	r0, r6
 8021bc8:	f7ff ffda 	bl	8021b80 <__sfputc_r>
 8021bcc:	1c43      	adds	r3, r0, #1
 8021bce:	d1f3      	bne.n	8021bb8 <__sfputs_r+0xa>
 8021bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021bd4 <_vfiprintf_r>:
 8021bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bd8:	460d      	mov	r5, r1
 8021bda:	b09d      	sub	sp, #116	; 0x74
 8021bdc:	4614      	mov	r4, r2
 8021bde:	4698      	mov	r8, r3
 8021be0:	4606      	mov	r6, r0
 8021be2:	b118      	cbz	r0, 8021bec <_vfiprintf_r+0x18>
 8021be4:	6983      	ldr	r3, [r0, #24]
 8021be6:	b90b      	cbnz	r3, 8021bec <_vfiprintf_r+0x18>
 8021be8:	f7ff ff0c 	bl	8021a04 <__sinit>
 8021bec:	4b89      	ldr	r3, [pc, #548]	; (8021e14 <_vfiprintf_r+0x240>)
 8021bee:	429d      	cmp	r5, r3
 8021bf0:	d11b      	bne.n	8021c2a <_vfiprintf_r+0x56>
 8021bf2:	6875      	ldr	r5, [r6, #4]
 8021bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021bf6:	07d9      	lsls	r1, r3, #31
 8021bf8:	d405      	bmi.n	8021c06 <_vfiprintf_r+0x32>
 8021bfa:	89ab      	ldrh	r3, [r5, #12]
 8021bfc:	059a      	lsls	r2, r3, #22
 8021bfe:	d402      	bmi.n	8021c06 <_vfiprintf_r+0x32>
 8021c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021c02:	f7ff ffaf 	bl	8021b64 <__retarget_lock_acquire_recursive>
 8021c06:	89ab      	ldrh	r3, [r5, #12]
 8021c08:	071b      	lsls	r3, r3, #28
 8021c0a:	d501      	bpl.n	8021c10 <_vfiprintf_r+0x3c>
 8021c0c:	692b      	ldr	r3, [r5, #16]
 8021c0e:	b9eb      	cbnz	r3, 8021c4c <_vfiprintf_r+0x78>
 8021c10:	4629      	mov	r1, r5
 8021c12:	4630      	mov	r0, r6
 8021c14:	f000 fb92 	bl	802233c <__swsetup_r>
 8021c18:	b1c0      	cbz	r0, 8021c4c <_vfiprintf_r+0x78>
 8021c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021c1c:	07dc      	lsls	r4, r3, #31
 8021c1e:	d50e      	bpl.n	8021c3e <_vfiprintf_r+0x6a>
 8021c20:	f04f 30ff 	mov.w	r0, #4294967295
 8021c24:	b01d      	add	sp, #116	; 0x74
 8021c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c2a:	4b7b      	ldr	r3, [pc, #492]	; (8021e18 <_vfiprintf_r+0x244>)
 8021c2c:	429d      	cmp	r5, r3
 8021c2e:	d101      	bne.n	8021c34 <_vfiprintf_r+0x60>
 8021c30:	68b5      	ldr	r5, [r6, #8]
 8021c32:	e7df      	b.n	8021bf4 <_vfiprintf_r+0x20>
 8021c34:	4b79      	ldr	r3, [pc, #484]	; (8021e1c <_vfiprintf_r+0x248>)
 8021c36:	429d      	cmp	r5, r3
 8021c38:	bf08      	it	eq
 8021c3a:	68f5      	ldreq	r5, [r6, #12]
 8021c3c:	e7da      	b.n	8021bf4 <_vfiprintf_r+0x20>
 8021c3e:	89ab      	ldrh	r3, [r5, #12]
 8021c40:	0598      	lsls	r0, r3, #22
 8021c42:	d4ed      	bmi.n	8021c20 <_vfiprintf_r+0x4c>
 8021c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021c46:	f7ff ff8e 	bl	8021b66 <__retarget_lock_release_recursive>
 8021c4a:	e7e9      	b.n	8021c20 <_vfiprintf_r+0x4c>
 8021c4c:	2300      	movs	r3, #0
 8021c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8021c50:	2320      	movs	r3, #32
 8021c52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8021c5a:	2330      	movs	r3, #48	; 0x30
 8021c5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021e20 <_vfiprintf_r+0x24c>
 8021c60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021c64:	f04f 0901 	mov.w	r9, #1
 8021c68:	4623      	mov	r3, r4
 8021c6a:	469a      	mov	sl, r3
 8021c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021c70:	b10a      	cbz	r2, 8021c76 <_vfiprintf_r+0xa2>
 8021c72:	2a25      	cmp	r2, #37	; 0x25
 8021c74:	d1f9      	bne.n	8021c6a <_vfiprintf_r+0x96>
 8021c76:	ebba 0b04 	subs.w	fp, sl, r4
 8021c7a:	d00b      	beq.n	8021c94 <_vfiprintf_r+0xc0>
 8021c7c:	465b      	mov	r3, fp
 8021c7e:	4622      	mov	r2, r4
 8021c80:	4629      	mov	r1, r5
 8021c82:	4630      	mov	r0, r6
 8021c84:	f7ff ff93 	bl	8021bae <__sfputs_r>
 8021c88:	3001      	adds	r0, #1
 8021c8a:	f000 80aa 	beq.w	8021de2 <_vfiprintf_r+0x20e>
 8021c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021c90:	445a      	add	r2, fp
 8021c92:	9209      	str	r2, [sp, #36]	; 0x24
 8021c94:	f89a 3000 	ldrb.w	r3, [sl]
 8021c98:	2b00      	cmp	r3, #0
 8021c9a:	f000 80a2 	beq.w	8021de2 <_vfiprintf_r+0x20e>
 8021c9e:	2300      	movs	r3, #0
 8021ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8021ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ca8:	f10a 0a01 	add.w	sl, sl, #1
 8021cac:	9304      	str	r3, [sp, #16]
 8021cae:	9307      	str	r3, [sp, #28]
 8021cb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8021cb6:	4654      	mov	r4, sl
 8021cb8:	2205      	movs	r2, #5
 8021cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021cbe:	4858      	ldr	r0, [pc, #352]	; (8021e20 <_vfiprintf_r+0x24c>)
 8021cc0:	f7de faa6 	bl	8000210 <memchr>
 8021cc4:	9a04      	ldr	r2, [sp, #16]
 8021cc6:	b9d8      	cbnz	r0, 8021d00 <_vfiprintf_r+0x12c>
 8021cc8:	06d1      	lsls	r1, r2, #27
 8021cca:	bf44      	itt	mi
 8021ccc:	2320      	movmi	r3, #32
 8021cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021cd2:	0713      	lsls	r3, r2, #28
 8021cd4:	bf44      	itt	mi
 8021cd6:	232b      	movmi	r3, #43	; 0x2b
 8021cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8021ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8021ce2:	d015      	beq.n	8021d10 <_vfiprintf_r+0x13c>
 8021ce4:	9a07      	ldr	r2, [sp, #28]
 8021ce6:	4654      	mov	r4, sl
 8021ce8:	2000      	movs	r0, #0
 8021cea:	f04f 0c0a 	mov.w	ip, #10
 8021cee:	4621      	mov	r1, r4
 8021cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021cf4:	3b30      	subs	r3, #48	; 0x30
 8021cf6:	2b09      	cmp	r3, #9
 8021cf8:	d94e      	bls.n	8021d98 <_vfiprintf_r+0x1c4>
 8021cfa:	b1b0      	cbz	r0, 8021d2a <_vfiprintf_r+0x156>
 8021cfc:	9207      	str	r2, [sp, #28]
 8021cfe:	e014      	b.n	8021d2a <_vfiprintf_r+0x156>
 8021d00:	eba0 0308 	sub.w	r3, r0, r8
 8021d04:	fa09 f303 	lsl.w	r3, r9, r3
 8021d08:	4313      	orrs	r3, r2
 8021d0a:	9304      	str	r3, [sp, #16]
 8021d0c:	46a2      	mov	sl, r4
 8021d0e:	e7d2      	b.n	8021cb6 <_vfiprintf_r+0xe2>
 8021d10:	9b03      	ldr	r3, [sp, #12]
 8021d12:	1d19      	adds	r1, r3, #4
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	9103      	str	r1, [sp, #12]
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	bfbb      	ittet	lt
 8021d1c:	425b      	neglt	r3, r3
 8021d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8021d22:	9307      	strge	r3, [sp, #28]
 8021d24:	9307      	strlt	r3, [sp, #28]
 8021d26:	bfb8      	it	lt
 8021d28:	9204      	strlt	r2, [sp, #16]
 8021d2a:	7823      	ldrb	r3, [r4, #0]
 8021d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8021d2e:	d10c      	bne.n	8021d4a <_vfiprintf_r+0x176>
 8021d30:	7863      	ldrb	r3, [r4, #1]
 8021d32:	2b2a      	cmp	r3, #42	; 0x2a
 8021d34:	d135      	bne.n	8021da2 <_vfiprintf_r+0x1ce>
 8021d36:	9b03      	ldr	r3, [sp, #12]
 8021d38:	1d1a      	adds	r2, r3, #4
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	9203      	str	r2, [sp, #12]
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	bfb8      	it	lt
 8021d42:	f04f 33ff 	movlt.w	r3, #4294967295
 8021d46:	3402      	adds	r4, #2
 8021d48:	9305      	str	r3, [sp, #20]
 8021d4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021e30 <_vfiprintf_r+0x25c>
 8021d4e:	7821      	ldrb	r1, [r4, #0]
 8021d50:	2203      	movs	r2, #3
 8021d52:	4650      	mov	r0, sl
 8021d54:	f7de fa5c 	bl	8000210 <memchr>
 8021d58:	b140      	cbz	r0, 8021d6c <_vfiprintf_r+0x198>
 8021d5a:	2340      	movs	r3, #64	; 0x40
 8021d5c:	eba0 000a 	sub.w	r0, r0, sl
 8021d60:	fa03 f000 	lsl.w	r0, r3, r0
 8021d64:	9b04      	ldr	r3, [sp, #16]
 8021d66:	4303      	orrs	r3, r0
 8021d68:	3401      	adds	r4, #1
 8021d6a:	9304      	str	r3, [sp, #16]
 8021d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d70:	482c      	ldr	r0, [pc, #176]	; (8021e24 <_vfiprintf_r+0x250>)
 8021d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021d76:	2206      	movs	r2, #6
 8021d78:	f7de fa4a 	bl	8000210 <memchr>
 8021d7c:	2800      	cmp	r0, #0
 8021d7e:	d03f      	beq.n	8021e00 <_vfiprintf_r+0x22c>
 8021d80:	4b29      	ldr	r3, [pc, #164]	; (8021e28 <_vfiprintf_r+0x254>)
 8021d82:	bb1b      	cbnz	r3, 8021dcc <_vfiprintf_r+0x1f8>
 8021d84:	9b03      	ldr	r3, [sp, #12]
 8021d86:	3307      	adds	r3, #7
 8021d88:	f023 0307 	bic.w	r3, r3, #7
 8021d8c:	3308      	adds	r3, #8
 8021d8e:	9303      	str	r3, [sp, #12]
 8021d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d92:	443b      	add	r3, r7
 8021d94:	9309      	str	r3, [sp, #36]	; 0x24
 8021d96:	e767      	b.n	8021c68 <_vfiprintf_r+0x94>
 8021d98:	fb0c 3202 	mla	r2, ip, r2, r3
 8021d9c:	460c      	mov	r4, r1
 8021d9e:	2001      	movs	r0, #1
 8021da0:	e7a5      	b.n	8021cee <_vfiprintf_r+0x11a>
 8021da2:	2300      	movs	r3, #0
 8021da4:	3401      	adds	r4, #1
 8021da6:	9305      	str	r3, [sp, #20]
 8021da8:	4619      	mov	r1, r3
 8021daa:	f04f 0c0a 	mov.w	ip, #10
 8021dae:	4620      	mov	r0, r4
 8021db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021db4:	3a30      	subs	r2, #48	; 0x30
 8021db6:	2a09      	cmp	r2, #9
 8021db8:	d903      	bls.n	8021dc2 <_vfiprintf_r+0x1ee>
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d0c5      	beq.n	8021d4a <_vfiprintf_r+0x176>
 8021dbe:	9105      	str	r1, [sp, #20]
 8021dc0:	e7c3      	b.n	8021d4a <_vfiprintf_r+0x176>
 8021dc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8021dc6:	4604      	mov	r4, r0
 8021dc8:	2301      	movs	r3, #1
 8021dca:	e7f0      	b.n	8021dae <_vfiprintf_r+0x1da>
 8021dcc:	ab03      	add	r3, sp, #12
 8021dce:	9300      	str	r3, [sp, #0]
 8021dd0:	462a      	mov	r2, r5
 8021dd2:	4b16      	ldr	r3, [pc, #88]	; (8021e2c <_vfiprintf_r+0x258>)
 8021dd4:	a904      	add	r1, sp, #16
 8021dd6:	4630      	mov	r0, r6
 8021dd8:	f3af 8000 	nop.w
 8021ddc:	4607      	mov	r7, r0
 8021dde:	1c78      	adds	r0, r7, #1
 8021de0:	d1d6      	bne.n	8021d90 <_vfiprintf_r+0x1bc>
 8021de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021de4:	07d9      	lsls	r1, r3, #31
 8021de6:	d405      	bmi.n	8021df4 <_vfiprintf_r+0x220>
 8021de8:	89ab      	ldrh	r3, [r5, #12]
 8021dea:	059a      	lsls	r2, r3, #22
 8021dec:	d402      	bmi.n	8021df4 <_vfiprintf_r+0x220>
 8021dee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021df0:	f7ff feb9 	bl	8021b66 <__retarget_lock_release_recursive>
 8021df4:	89ab      	ldrh	r3, [r5, #12]
 8021df6:	065b      	lsls	r3, r3, #25
 8021df8:	f53f af12 	bmi.w	8021c20 <_vfiprintf_r+0x4c>
 8021dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021dfe:	e711      	b.n	8021c24 <_vfiprintf_r+0x50>
 8021e00:	ab03      	add	r3, sp, #12
 8021e02:	9300      	str	r3, [sp, #0]
 8021e04:	462a      	mov	r2, r5
 8021e06:	4b09      	ldr	r3, [pc, #36]	; (8021e2c <_vfiprintf_r+0x258>)
 8021e08:	a904      	add	r1, sp, #16
 8021e0a:	4630      	mov	r0, r6
 8021e0c:	f000 f880 	bl	8021f10 <_printf_i>
 8021e10:	e7e4      	b.n	8021ddc <_vfiprintf_r+0x208>
 8021e12:	bf00      	nop
 8021e14:	08025df0 	.word	0x08025df0
 8021e18:	08025e10 	.word	0x08025e10
 8021e1c:	08025dd0 	.word	0x08025dd0
 8021e20:	08025e30 	.word	0x08025e30
 8021e24:	08025e3a 	.word	0x08025e3a
 8021e28:	00000000 	.word	0x00000000
 8021e2c:	08021baf 	.word	0x08021baf
 8021e30:	08025e36 	.word	0x08025e36

08021e34 <_printf_common>:
 8021e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e38:	4616      	mov	r6, r2
 8021e3a:	4699      	mov	r9, r3
 8021e3c:	688a      	ldr	r2, [r1, #8]
 8021e3e:	690b      	ldr	r3, [r1, #16]
 8021e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021e44:	4293      	cmp	r3, r2
 8021e46:	bfb8      	it	lt
 8021e48:	4613      	movlt	r3, r2
 8021e4a:	6033      	str	r3, [r6, #0]
 8021e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021e50:	4607      	mov	r7, r0
 8021e52:	460c      	mov	r4, r1
 8021e54:	b10a      	cbz	r2, 8021e5a <_printf_common+0x26>
 8021e56:	3301      	adds	r3, #1
 8021e58:	6033      	str	r3, [r6, #0]
 8021e5a:	6823      	ldr	r3, [r4, #0]
 8021e5c:	0699      	lsls	r1, r3, #26
 8021e5e:	bf42      	ittt	mi
 8021e60:	6833      	ldrmi	r3, [r6, #0]
 8021e62:	3302      	addmi	r3, #2
 8021e64:	6033      	strmi	r3, [r6, #0]
 8021e66:	6825      	ldr	r5, [r4, #0]
 8021e68:	f015 0506 	ands.w	r5, r5, #6
 8021e6c:	d106      	bne.n	8021e7c <_printf_common+0x48>
 8021e6e:	f104 0a19 	add.w	sl, r4, #25
 8021e72:	68e3      	ldr	r3, [r4, #12]
 8021e74:	6832      	ldr	r2, [r6, #0]
 8021e76:	1a9b      	subs	r3, r3, r2
 8021e78:	42ab      	cmp	r3, r5
 8021e7a:	dc26      	bgt.n	8021eca <_printf_common+0x96>
 8021e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021e80:	1e13      	subs	r3, r2, #0
 8021e82:	6822      	ldr	r2, [r4, #0]
 8021e84:	bf18      	it	ne
 8021e86:	2301      	movne	r3, #1
 8021e88:	0692      	lsls	r2, r2, #26
 8021e8a:	d42b      	bmi.n	8021ee4 <_printf_common+0xb0>
 8021e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021e90:	4649      	mov	r1, r9
 8021e92:	4638      	mov	r0, r7
 8021e94:	47c0      	blx	r8
 8021e96:	3001      	adds	r0, #1
 8021e98:	d01e      	beq.n	8021ed8 <_printf_common+0xa4>
 8021e9a:	6823      	ldr	r3, [r4, #0]
 8021e9c:	68e5      	ldr	r5, [r4, #12]
 8021e9e:	6832      	ldr	r2, [r6, #0]
 8021ea0:	f003 0306 	and.w	r3, r3, #6
 8021ea4:	2b04      	cmp	r3, #4
 8021ea6:	bf08      	it	eq
 8021ea8:	1aad      	subeq	r5, r5, r2
 8021eaa:	68a3      	ldr	r3, [r4, #8]
 8021eac:	6922      	ldr	r2, [r4, #16]
 8021eae:	bf0c      	ite	eq
 8021eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021eb4:	2500      	movne	r5, #0
 8021eb6:	4293      	cmp	r3, r2
 8021eb8:	bfc4      	itt	gt
 8021eba:	1a9b      	subgt	r3, r3, r2
 8021ebc:	18ed      	addgt	r5, r5, r3
 8021ebe:	2600      	movs	r6, #0
 8021ec0:	341a      	adds	r4, #26
 8021ec2:	42b5      	cmp	r5, r6
 8021ec4:	d11a      	bne.n	8021efc <_printf_common+0xc8>
 8021ec6:	2000      	movs	r0, #0
 8021ec8:	e008      	b.n	8021edc <_printf_common+0xa8>
 8021eca:	2301      	movs	r3, #1
 8021ecc:	4652      	mov	r2, sl
 8021ece:	4649      	mov	r1, r9
 8021ed0:	4638      	mov	r0, r7
 8021ed2:	47c0      	blx	r8
 8021ed4:	3001      	adds	r0, #1
 8021ed6:	d103      	bne.n	8021ee0 <_printf_common+0xac>
 8021ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8021edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ee0:	3501      	adds	r5, #1
 8021ee2:	e7c6      	b.n	8021e72 <_printf_common+0x3e>
 8021ee4:	18e1      	adds	r1, r4, r3
 8021ee6:	1c5a      	adds	r2, r3, #1
 8021ee8:	2030      	movs	r0, #48	; 0x30
 8021eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021eee:	4422      	add	r2, r4
 8021ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021ef8:	3302      	adds	r3, #2
 8021efa:	e7c7      	b.n	8021e8c <_printf_common+0x58>
 8021efc:	2301      	movs	r3, #1
 8021efe:	4622      	mov	r2, r4
 8021f00:	4649      	mov	r1, r9
 8021f02:	4638      	mov	r0, r7
 8021f04:	47c0      	blx	r8
 8021f06:	3001      	adds	r0, #1
 8021f08:	d0e6      	beq.n	8021ed8 <_printf_common+0xa4>
 8021f0a:	3601      	adds	r6, #1
 8021f0c:	e7d9      	b.n	8021ec2 <_printf_common+0x8e>
	...

08021f10 <_printf_i>:
 8021f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021f14:	460c      	mov	r4, r1
 8021f16:	4691      	mov	r9, r2
 8021f18:	7e27      	ldrb	r7, [r4, #24]
 8021f1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021f1c:	2f78      	cmp	r7, #120	; 0x78
 8021f1e:	4680      	mov	r8, r0
 8021f20:	469a      	mov	sl, r3
 8021f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021f26:	d807      	bhi.n	8021f38 <_printf_i+0x28>
 8021f28:	2f62      	cmp	r7, #98	; 0x62
 8021f2a:	d80a      	bhi.n	8021f42 <_printf_i+0x32>
 8021f2c:	2f00      	cmp	r7, #0
 8021f2e:	f000 80d8 	beq.w	80220e2 <_printf_i+0x1d2>
 8021f32:	2f58      	cmp	r7, #88	; 0x58
 8021f34:	f000 80a3 	beq.w	802207e <_printf_i+0x16e>
 8021f38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021f40:	e03a      	b.n	8021fb8 <_printf_i+0xa8>
 8021f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021f46:	2b15      	cmp	r3, #21
 8021f48:	d8f6      	bhi.n	8021f38 <_printf_i+0x28>
 8021f4a:	a001      	add	r0, pc, #4	; (adr r0, 8021f50 <_printf_i+0x40>)
 8021f4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021f50:	08021fa9 	.word	0x08021fa9
 8021f54:	08021fbd 	.word	0x08021fbd
 8021f58:	08021f39 	.word	0x08021f39
 8021f5c:	08021f39 	.word	0x08021f39
 8021f60:	08021f39 	.word	0x08021f39
 8021f64:	08021f39 	.word	0x08021f39
 8021f68:	08021fbd 	.word	0x08021fbd
 8021f6c:	08021f39 	.word	0x08021f39
 8021f70:	08021f39 	.word	0x08021f39
 8021f74:	08021f39 	.word	0x08021f39
 8021f78:	08021f39 	.word	0x08021f39
 8021f7c:	080220c9 	.word	0x080220c9
 8021f80:	08021fed 	.word	0x08021fed
 8021f84:	080220ab 	.word	0x080220ab
 8021f88:	08021f39 	.word	0x08021f39
 8021f8c:	08021f39 	.word	0x08021f39
 8021f90:	080220eb 	.word	0x080220eb
 8021f94:	08021f39 	.word	0x08021f39
 8021f98:	08021fed 	.word	0x08021fed
 8021f9c:	08021f39 	.word	0x08021f39
 8021fa0:	08021f39 	.word	0x08021f39
 8021fa4:	080220b3 	.word	0x080220b3
 8021fa8:	680b      	ldr	r3, [r1, #0]
 8021faa:	1d1a      	adds	r2, r3, #4
 8021fac:	681b      	ldr	r3, [r3, #0]
 8021fae:	600a      	str	r2, [r1, #0]
 8021fb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021fb8:	2301      	movs	r3, #1
 8021fba:	e0a3      	b.n	8022104 <_printf_i+0x1f4>
 8021fbc:	6825      	ldr	r5, [r4, #0]
 8021fbe:	6808      	ldr	r0, [r1, #0]
 8021fc0:	062e      	lsls	r6, r5, #24
 8021fc2:	f100 0304 	add.w	r3, r0, #4
 8021fc6:	d50a      	bpl.n	8021fde <_printf_i+0xce>
 8021fc8:	6805      	ldr	r5, [r0, #0]
 8021fca:	600b      	str	r3, [r1, #0]
 8021fcc:	2d00      	cmp	r5, #0
 8021fce:	da03      	bge.n	8021fd8 <_printf_i+0xc8>
 8021fd0:	232d      	movs	r3, #45	; 0x2d
 8021fd2:	426d      	negs	r5, r5
 8021fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021fd8:	485e      	ldr	r0, [pc, #376]	; (8022154 <_printf_i+0x244>)
 8021fda:	230a      	movs	r3, #10
 8021fdc:	e019      	b.n	8022012 <_printf_i+0x102>
 8021fde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8021fe2:	6805      	ldr	r5, [r0, #0]
 8021fe4:	600b      	str	r3, [r1, #0]
 8021fe6:	bf18      	it	ne
 8021fe8:	b22d      	sxthne	r5, r5
 8021fea:	e7ef      	b.n	8021fcc <_printf_i+0xbc>
 8021fec:	680b      	ldr	r3, [r1, #0]
 8021fee:	6825      	ldr	r5, [r4, #0]
 8021ff0:	1d18      	adds	r0, r3, #4
 8021ff2:	6008      	str	r0, [r1, #0]
 8021ff4:	0628      	lsls	r0, r5, #24
 8021ff6:	d501      	bpl.n	8021ffc <_printf_i+0xec>
 8021ff8:	681d      	ldr	r5, [r3, #0]
 8021ffa:	e002      	b.n	8022002 <_printf_i+0xf2>
 8021ffc:	0669      	lsls	r1, r5, #25
 8021ffe:	d5fb      	bpl.n	8021ff8 <_printf_i+0xe8>
 8022000:	881d      	ldrh	r5, [r3, #0]
 8022002:	4854      	ldr	r0, [pc, #336]	; (8022154 <_printf_i+0x244>)
 8022004:	2f6f      	cmp	r7, #111	; 0x6f
 8022006:	bf0c      	ite	eq
 8022008:	2308      	moveq	r3, #8
 802200a:	230a      	movne	r3, #10
 802200c:	2100      	movs	r1, #0
 802200e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022012:	6866      	ldr	r6, [r4, #4]
 8022014:	60a6      	str	r6, [r4, #8]
 8022016:	2e00      	cmp	r6, #0
 8022018:	bfa2      	ittt	ge
 802201a:	6821      	ldrge	r1, [r4, #0]
 802201c:	f021 0104 	bicge.w	r1, r1, #4
 8022020:	6021      	strge	r1, [r4, #0]
 8022022:	b90d      	cbnz	r5, 8022028 <_printf_i+0x118>
 8022024:	2e00      	cmp	r6, #0
 8022026:	d04d      	beq.n	80220c4 <_printf_i+0x1b4>
 8022028:	4616      	mov	r6, r2
 802202a:	fbb5 f1f3 	udiv	r1, r5, r3
 802202e:	fb03 5711 	mls	r7, r3, r1, r5
 8022032:	5dc7      	ldrb	r7, [r0, r7]
 8022034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022038:	462f      	mov	r7, r5
 802203a:	42bb      	cmp	r3, r7
 802203c:	460d      	mov	r5, r1
 802203e:	d9f4      	bls.n	802202a <_printf_i+0x11a>
 8022040:	2b08      	cmp	r3, #8
 8022042:	d10b      	bne.n	802205c <_printf_i+0x14c>
 8022044:	6823      	ldr	r3, [r4, #0]
 8022046:	07df      	lsls	r7, r3, #31
 8022048:	d508      	bpl.n	802205c <_printf_i+0x14c>
 802204a:	6923      	ldr	r3, [r4, #16]
 802204c:	6861      	ldr	r1, [r4, #4]
 802204e:	4299      	cmp	r1, r3
 8022050:	bfde      	ittt	le
 8022052:	2330      	movle	r3, #48	; 0x30
 8022054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022058:	f106 36ff 	addle.w	r6, r6, #4294967295
 802205c:	1b92      	subs	r2, r2, r6
 802205e:	6122      	str	r2, [r4, #16]
 8022060:	f8cd a000 	str.w	sl, [sp]
 8022064:	464b      	mov	r3, r9
 8022066:	aa03      	add	r2, sp, #12
 8022068:	4621      	mov	r1, r4
 802206a:	4640      	mov	r0, r8
 802206c:	f7ff fee2 	bl	8021e34 <_printf_common>
 8022070:	3001      	adds	r0, #1
 8022072:	d14c      	bne.n	802210e <_printf_i+0x1fe>
 8022074:	f04f 30ff 	mov.w	r0, #4294967295
 8022078:	b004      	add	sp, #16
 802207a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802207e:	4835      	ldr	r0, [pc, #212]	; (8022154 <_printf_i+0x244>)
 8022080:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022084:	6823      	ldr	r3, [r4, #0]
 8022086:	680e      	ldr	r6, [r1, #0]
 8022088:	061f      	lsls	r7, r3, #24
 802208a:	f856 5b04 	ldr.w	r5, [r6], #4
 802208e:	600e      	str	r6, [r1, #0]
 8022090:	d514      	bpl.n	80220bc <_printf_i+0x1ac>
 8022092:	07d9      	lsls	r1, r3, #31
 8022094:	bf44      	itt	mi
 8022096:	f043 0320 	orrmi.w	r3, r3, #32
 802209a:	6023      	strmi	r3, [r4, #0]
 802209c:	b91d      	cbnz	r5, 80220a6 <_printf_i+0x196>
 802209e:	6823      	ldr	r3, [r4, #0]
 80220a0:	f023 0320 	bic.w	r3, r3, #32
 80220a4:	6023      	str	r3, [r4, #0]
 80220a6:	2310      	movs	r3, #16
 80220a8:	e7b0      	b.n	802200c <_printf_i+0xfc>
 80220aa:	6823      	ldr	r3, [r4, #0]
 80220ac:	f043 0320 	orr.w	r3, r3, #32
 80220b0:	6023      	str	r3, [r4, #0]
 80220b2:	2378      	movs	r3, #120	; 0x78
 80220b4:	4828      	ldr	r0, [pc, #160]	; (8022158 <_printf_i+0x248>)
 80220b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80220ba:	e7e3      	b.n	8022084 <_printf_i+0x174>
 80220bc:	065e      	lsls	r6, r3, #25
 80220be:	bf48      	it	mi
 80220c0:	b2ad      	uxthmi	r5, r5
 80220c2:	e7e6      	b.n	8022092 <_printf_i+0x182>
 80220c4:	4616      	mov	r6, r2
 80220c6:	e7bb      	b.n	8022040 <_printf_i+0x130>
 80220c8:	680b      	ldr	r3, [r1, #0]
 80220ca:	6826      	ldr	r6, [r4, #0]
 80220cc:	6960      	ldr	r0, [r4, #20]
 80220ce:	1d1d      	adds	r5, r3, #4
 80220d0:	600d      	str	r5, [r1, #0]
 80220d2:	0635      	lsls	r5, r6, #24
 80220d4:	681b      	ldr	r3, [r3, #0]
 80220d6:	d501      	bpl.n	80220dc <_printf_i+0x1cc>
 80220d8:	6018      	str	r0, [r3, #0]
 80220da:	e002      	b.n	80220e2 <_printf_i+0x1d2>
 80220dc:	0671      	lsls	r1, r6, #25
 80220de:	d5fb      	bpl.n	80220d8 <_printf_i+0x1c8>
 80220e0:	8018      	strh	r0, [r3, #0]
 80220e2:	2300      	movs	r3, #0
 80220e4:	6123      	str	r3, [r4, #16]
 80220e6:	4616      	mov	r6, r2
 80220e8:	e7ba      	b.n	8022060 <_printf_i+0x150>
 80220ea:	680b      	ldr	r3, [r1, #0]
 80220ec:	1d1a      	adds	r2, r3, #4
 80220ee:	600a      	str	r2, [r1, #0]
 80220f0:	681e      	ldr	r6, [r3, #0]
 80220f2:	6862      	ldr	r2, [r4, #4]
 80220f4:	2100      	movs	r1, #0
 80220f6:	4630      	mov	r0, r6
 80220f8:	f7de f88a 	bl	8000210 <memchr>
 80220fc:	b108      	cbz	r0, 8022102 <_printf_i+0x1f2>
 80220fe:	1b80      	subs	r0, r0, r6
 8022100:	6060      	str	r0, [r4, #4]
 8022102:	6863      	ldr	r3, [r4, #4]
 8022104:	6123      	str	r3, [r4, #16]
 8022106:	2300      	movs	r3, #0
 8022108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802210c:	e7a8      	b.n	8022060 <_printf_i+0x150>
 802210e:	6923      	ldr	r3, [r4, #16]
 8022110:	4632      	mov	r2, r6
 8022112:	4649      	mov	r1, r9
 8022114:	4640      	mov	r0, r8
 8022116:	47d0      	blx	sl
 8022118:	3001      	adds	r0, #1
 802211a:	d0ab      	beq.n	8022074 <_printf_i+0x164>
 802211c:	6823      	ldr	r3, [r4, #0]
 802211e:	079b      	lsls	r3, r3, #30
 8022120:	d413      	bmi.n	802214a <_printf_i+0x23a>
 8022122:	68e0      	ldr	r0, [r4, #12]
 8022124:	9b03      	ldr	r3, [sp, #12]
 8022126:	4298      	cmp	r0, r3
 8022128:	bfb8      	it	lt
 802212a:	4618      	movlt	r0, r3
 802212c:	e7a4      	b.n	8022078 <_printf_i+0x168>
 802212e:	2301      	movs	r3, #1
 8022130:	4632      	mov	r2, r6
 8022132:	4649      	mov	r1, r9
 8022134:	4640      	mov	r0, r8
 8022136:	47d0      	blx	sl
 8022138:	3001      	adds	r0, #1
 802213a:	d09b      	beq.n	8022074 <_printf_i+0x164>
 802213c:	3501      	adds	r5, #1
 802213e:	68e3      	ldr	r3, [r4, #12]
 8022140:	9903      	ldr	r1, [sp, #12]
 8022142:	1a5b      	subs	r3, r3, r1
 8022144:	42ab      	cmp	r3, r5
 8022146:	dcf2      	bgt.n	802212e <_printf_i+0x21e>
 8022148:	e7eb      	b.n	8022122 <_printf_i+0x212>
 802214a:	2500      	movs	r5, #0
 802214c:	f104 0619 	add.w	r6, r4, #25
 8022150:	e7f5      	b.n	802213e <_printf_i+0x22e>
 8022152:	bf00      	nop
 8022154:	08025e41 	.word	0x08025e41
 8022158:	08025e52 	.word	0x08025e52

0802215c <_putc_r>:
 802215c:	b570      	push	{r4, r5, r6, lr}
 802215e:	460d      	mov	r5, r1
 8022160:	4614      	mov	r4, r2
 8022162:	4606      	mov	r6, r0
 8022164:	b118      	cbz	r0, 802216e <_putc_r+0x12>
 8022166:	6983      	ldr	r3, [r0, #24]
 8022168:	b90b      	cbnz	r3, 802216e <_putc_r+0x12>
 802216a:	f7ff fc4b 	bl	8021a04 <__sinit>
 802216e:	4b1c      	ldr	r3, [pc, #112]	; (80221e0 <_putc_r+0x84>)
 8022170:	429c      	cmp	r4, r3
 8022172:	d124      	bne.n	80221be <_putc_r+0x62>
 8022174:	6874      	ldr	r4, [r6, #4]
 8022176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022178:	07d8      	lsls	r0, r3, #31
 802217a:	d405      	bmi.n	8022188 <_putc_r+0x2c>
 802217c:	89a3      	ldrh	r3, [r4, #12]
 802217e:	0599      	lsls	r1, r3, #22
 8022180:	d402      	bmi.n	8022188 <_putc_r+0x2c>
 8022182:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022184:	f7ff fcee 	bl	8021b64 <__retarget_lock_acquire_recursive>
 8022188:	68a3      	ldr	r3, [r4, #8]
 802218a:	3b01      	subs	r3, #1
 802218c:	2b00      	cmp	r3, #0
 802218e:	60a3      	str	r3, [r4, #8]
 8022190:	da05      	bge.n	802219e <_putc_r+0x42>
 8022192:	69a2      	ldr	r2, [r4, #24]
 8022194:	4293      	cmp	r3, r2
 8022196:	db1c      	blt.n	80221d2 <_putc_r+0x76>
 8022198:	b2eb      	uxtb	r3, r5
 802219a:	2b0a      	cmp	r3, #10
 802219c:	d019      	beq.n	80221d2 <_putc_r+0x76>
 802219e:	6823      	ldr	r3, [r4, #0]
 80221a0:	1c5a      	adds	r2, r3, #1
 80221a2:	6022      	str	r2, [r4, #0]
 80221a4:	701d      	strb	r5, [r3, #0]
 80221a6:	b2ed      	uxtb	r5, r5
 80221a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80221aa:	07da      	lsls	r2, r3, #31
 80221ac:	d405      	bmi.n	80221ba <_putc_r+0x5e>
 80221ae:	89a3      	ldrh	r3, [r4, #12]
 80221b0:	059b      	lsls	r3, r3, #22
 80221b2:	d402      	bmi.n	80221ba <_putc_r+0x5e>
 80221b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80221b6:	f7ff fcd6 	bl	8021b66 <__retarget_lock_release_recursive>
 80221ba:	4628      	mov	r0, r5
 80221bc:	bd70      	pop	{r4, r5, r6, pc}
 80221be:	4b09      	ldr	r3, [pc, #36]	; (80221e4 <_putc_r+0x88>)
 80221c0:	429c      	cmp	r4, r3
 80221c2:	d101      	bne.n	80221c8 <_putc_r+0x6c>
 80221c4:	68b4      	ldr	r4, [r6, #8]
 80221c6:	e7d6      	b.n	8022176 <_putc_r+0x1a>
 80221c8:	4b07      	ldr	r3, [pc, #28]	; (80221e8 <_putc_r+0x8c>)
 80221ca:	429c      	cmp	r4, r3
 80221cc:	bf08      	it	eq
 80221ce:	68f4      	ldreq	r4, [r6, #12]
 80221d0:	e7d1      	b.n	8022176 <_putc_r+0x1a>
 80221d2:	4629      	mov	r1, r5
 80221d4:	4622      	mov	r2, r4
 80221d6:	4630      	mov	r0, r6
 80221d8:	f000 f84c 	bl	8022274 <__swbuf_r>
 80221dc:	4605      	mov	r5, r0
 80221de:	e7e3      	b.n	80221a8 <_putc_r+0x4c>
 80221e0:	08025df0 	.word	0x08025df0
 80221e4:	08025e10 	.word	0x08025e10
 80221e8:	08025dd0 	.word	0x08025dd0

080221ec <__sread>:
 80221ec:	b510      	push	{r4, lr}
 80221ee:	460c      	mov	r4, r1
 80221f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221f4:	f000 fa60 	bl	80226b8 <_read_r>
 80221f8:	2800      	cmp	r0, #0
 80221fa:	bfab      	itete	ge
 80221fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80221fe:	89a3      	ldrhlt	r3, [r4, #12]
 8022200:	181b      	addge	r3, r3, r0
 8022202:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022206:	bfac      	ite	ge
 8022208:	6563      	strge	r3, [r4, #84]	; 0x54
 802220a:	81a3      	strhlt	r3, [r4, #12]
 802220c:	bd10      	pop	{r4, pc}

0802220e <__swrite>:
 802220e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022212:	461f      	mov	r7, r3
 8022214:	898b      	ldrh	r3, [r1, #12]
 8022216:	05db      	lsls	r3, r3, #23
 8022218:	4605      	mov	r5, r0
 802221a:	460c      	mov	r4, r1
 802221c:	4616      	mov	r6, r2
 802221e:	d505      	bpl.n	802222c <__swrite+0x1e>
 8022220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022224:	2302      	movs	r3, #2
 8022226:	2200      	movs	r2, #0
 8022228:	f000 f9d0 	bl	80225cc <_lseek_r>
 802222c:	89a3      	ldrh	r3, [r4, #12]
 802222e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022236:	81a3      	strh	r3, [r4, #12]
 8022238:	4632      	mov	r2, r6
 802223a:	463b      	mov	r3, r7
 802223c:	4628      	mov	r0, r5
 802223e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022242:	f000 b869 	b.w	8022318 <_write_r>

08022246 <__sseek>:
 8022246:	b510      	push	{r4, lr}
 8022248:	460c      	mov	r4, r1
 802224a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802224e:	f000 f9bd 	bl	80225cc <_lseek_r>
 8022252:	1c43      	adds	r3, r0, #1
 8022254:	89a3      	ldrh	r3, [r4, #12]
 8022256:	bf15      	itete	ne
 8022258:	6560      	strne	r0, [r4, #84]	; 0x54
 802225a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802225e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022262:	81a3      	strheq	r3, [r4, #12]
 8022264:	bf18      	it	ne
 8022266:	81a3      	strhne	r3, [r4, #12]
 8022268:	bd10      	pop	{r4, pc}

0802226a <__sclose>:
 802226a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802226e:	f000 b8db 	b.w	8022428 <_close_r>
	...

08022274 <__swbuf_r>:
 8022274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022276:	460e      	mov	r6, r1
 8022278:	4614      	mov	r4, r2
 802227a:	4605      	mov	r5, r0
 802227c:	b118      	cbz	r0, 8022286 <__swbuf_r+0x12>
 802227e:	6983      	ldr	r3, [r0, #24]
 8022280:	b90b      	cbnz	r3, 8022286 <__swbuf_r+0x12>
 8022282:	f7ff fbbf 	bl	8021a04 <__sinit>
 8022286:	4b21      	ldr	r3, [pc, #132]	; (802230c <__swbuf_r+0x98>)
 8022288:	429c      	cmp	r4, r3
 802228a:	d12b      	bne.n	80222e4 <__swbuf_r+0x70>
 802228c:	686c      	ldr	r4, [r5, #4]
 802228e:	69a3      	ldr	r3, [r4, #24]
 8022290:	60a3      	str	r3, [r4, #8]
 8022292:	89a3      	ldrh	r3, [r4, #12]
 8022294:	071a      	lsls	r2, r3, #28
 8022296:	d52f      	bpl.n	80222f8 <__swbuf_r+0x84>
 8022298:	6923      	ldr	r3, [r4, #16]
 802229a:	b36b      	cbz	r3, 80222f8 <__swbuf_r+0x84>
 802229c:	6923      	ldr	r3, [r4, #16]
 802229e:	6820      	ldr	r0, [r4, #0]
 80222a0:	1ac0      	subs	r0, r0, r3
 80222a2:	6963      	ldr	r3, [r4, #20]
 80222a4:	b2f6      	uxtb	r6, r6
 80222a6:	4283      	cmp	r3, r0
 80222a8:	4637      	mov	r7, r6
 80222aa:	dc04      	bgt.n	80222b6 <__swbuf_r+0x42>
 80222ac:	4621      	mov	r1, r4
 80222ae:	4628      	mov	r0, r5
 80222b0:	f000 f950 	bl	8022554 <_fflush_r>
 80222b4:	bb30      	cbnz	r0, 8022304 <__swbuf_r+0x90>
 80222b6:	68a3      	ldr	r3, [r4, #8]
 80222b8:	3b01      	subs	r3, #1
 80222ba:	60a3      	str	r3, [r4, #8]
 80222bc:	6823      	ldr	r3, [r4, #0]
 80222be:	1c5a      	adds	r2, r3, #1
 80222c0:	6022      	str	r2, [r4, #0]
 80222c2:	701e      	strb	r6, [r3, #0]
 80222c4:	6963      	ldr	r3, [r4, #20]
 80222c6:	3001      	adds	r0, #1
 80222c8:	4283      	cmp	r3, r0
 80222ca:	d004      	beq.n	80222d6 <__swbuf_r+0x62>
 80222cc:	89a3      	ldrh	r3, [r4, #12]
 80222ce:	07db      	lsls	r3, r3, #31
 80222d0:	d506      	bpl.n	80222e0 <__swbuf_r+0x6c>
 80222d2:	2e0a      	cmp	r6, #10
 80222d4:	d104      	bne.n	80222e0 <__swbuf_r+0x6c>
 80222d6:	4621      	mov	r1, r4
 80222d8:	4628      	mov	r0, r5
 80222da:	f000 f93b 	bl	8022554 <_fflush_r>
 80222de:	b988      	cbnz	r0, 8022304 <__swbuf_r+0x90>
 80222e0:	4638      	mov	r0, r7
 80222e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222e4:	4b0a      	ldr	r3, [pc, #40]	; (8022310 <__swbuf_r+0x9c>)
 80222e6:	429c      	cmp	r4, r3
 80222e8:	d101      	bne.n	80222ee <__swbuf_r+0x7a>
 80222ea:	68ac      	ldr	r4, [r5, #8]
 80222ec:	e7cf      	b.n	802228e <__swbuf_r+0x1a>
 80222ee:	4b09      	ldr	r3, [pc, #36]	; (8022314 <__swbuf_r+0xa0>)
 80222f0:	429c      	cmp	r4, r3
 80222f2:	bf08      	it	eq
 80222f4:	68ec      	ldreq	r4, [r5, #12]
 80222f6:	e7ca      	b.n	802228e <__swbuf_r+0x1a>
 80222f8:	4621      	mov	r1, r4
 80222fa:	4628      	mov	r0, r5
 80222fc:	f000 f81e 	bl	802233c <__swsetup_r>
 8022300:	2800      	cmp	r0, #0
 8022302:	d0cb      	beq.n	802229c <__swbuf_r+0x28>
 8022304:	f04f 37ff 	mov.w	r7, #4294967295
 8022308:	e7ea      	b.n	80222e0 <__swbuf_r+0x6c>
 802230a:	bf00      	nop
 802230c:	08025df0 	.word	0x08025df0
 8022310:	08025e10 	.word	0x08025e10
 8022314:	08025dd0 	.word	0x08025dd0

08022318 <_write_r>:
 8022318:	b538      	push	{r3, r4, r5, lr}
 802231a:	4d07      	ldr	r5, [pc, #28]	; (8022338 <_write_r+0x20>)
 802231c:	4604      	mov	r4, r0
 802231e:	4608      	mov	r0, r1
 8022320:	4611      	mov	r1, r2
 8022322:	2200      	movs	r2, #0
 8022324:	602a      	str	r2, [r5, #0]
 8022326:	461a      	mov	r2, r3
 8022328:	f7df ff59 	bl	80021de <_write>
 802232c:	1c43      	adds	r3, r0, #1
 802232e:	d102      	bne.n	8022336 <_write_r+0x1e>
 8022330:	682b      	ldr	r3, [r5, #0]
 8022332:	b103      	cbz	r3, 8022336 <_write_r+0x1e>
 8022334:	6023      	str	r3, [r4, #0]
 8022336:	bd38      	pop	{r3, r4, r5, pc}
 8022338:	20011f70 	.word	0x20011f70

0802233c <__swsetup_r>:
 802233c:	4b32      	ldr	r3, [pc, #200]	; (8022408 <__swsetup_r+0xcc>)
 802233e:	b570      	push	{r4, r5, r6, lr}
 8022340:	681d      	ldr	r5, [r3, #0]
 8022342:	4606      	mov	r6, r0
 8022344:	460c      	mov	r4, r1
 8022346:	b125      	cbz	r5, 8022352 <__swsetup_r+0x16>
 8022348:	69ab      	ldr	r3, [r5, #24]
 802234a:	b913      	cbnz	r3, 8022352 <__swsetup_r+0x16>
 802234c:	4628      	mov	r0, r5
 802234e:	f7ff fb59 	bl	8021a04 <__sinit>
 8022352:	4b2e      	ldr	r3, [pc, #184]	; (802240c <__swsetup_r+0xd0>)
 8022354:	429c      	cmp	r4, r3
 8022356:	d10f      	bne.n	8022378 <__swsetup_r+0x3c>
 8022358:	686c      	ldr	r4, [r5, #4]
 802235a:	89a3      	ldrh	r3, [r4, #12]
 802235c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022360:	0719      	lsls	r1, r3, #28
 8022362:	d42c      	bmi.n	80223be <__swsetup_r+0x82>
 8022364:	06dd      	lsls	r5, r3, #27
 8022366:	d411      	bmi.n	802238c <__swsetup_r+0x50>
 8022368:	2309      	movs	r3, #9
 802236a:	6033      	str	r3, [r6, #0]
 802236c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022370:	81a3      	strh	r3, [r4, #12]
 8022372:	f04f 30ff 	mov.w	r0, #4294967295
 8022376:	e03e      	b.n	80223f6 <__swsetup_r+0xba>
 8022378:	4b25      	ldr	r3, [pc, #148]	; (8022410 <__swsetup_r+0xd4>)
 802237a:	429c      	cmp	r4, r3
 802237c:	d101      	bne.n	8022382 <__swsetup_r+0x46>
 802237e:	68ac      	ldr	r4, [r5, #8]
 8022380:	e7eb      	b.n	802235a <__swsetup_r+0x1e>
 8022382:	4b24      	ldr	r3, [pc, #144]	; (8022414 <__swsetup_r+0xd8>)
 8022384:	429c      	cmp	r4, r3
 8022386:	bf08      	it	eq
 8022388:	68ec      	ldreq	r4, [r5, #12]
 802238a:	e7e6      	b.n	802235a <__swsetup_r+0x1e>
 802238c:	0758      	lsls	r0, r3, #29
 802238e:	d512      	bpl.n	80223b6 <__swsetup_r+0x7a>
 8022390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022392:	b141      	cbz	r1, 80223a6 <__swsetup_r+0x6a>
 8022394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022398:	4299      	cmp	r1, r3
 802239a:	d002      	beq.n	80223a2 <__swsetup_r+0x66>
 802239c:	4630      	mov	r0, r6
 802239e:	f7ff f993 	bl	80216c8 <_free_r>
 80223a2:	2300      	movs	r3, #0
 80223a4:	6363      	str	r3, [r4, #52]	; 0x34
 80223a6:	89a3      	ldrh	r3, [r4, #12]
 80223a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80223ac:	81a3      	strh	r3, [r4, #12]
 80223ae:	2300      	movs	r3, #0
 80223b0:	6063      	str	r3, [r4, #4]
 80223b2:	6923      	ldr	r3, [r4, #16]
 80223b4:	6023      	str	r3, [r4, #0]
 80223b6:	89a3      	ldrh	r3, [r4, #12]
 80223b8:	f043 0308 	orr.w	r3, r3, #8
 80223bc:	81a3      	strh	r3, [r4, #12]
 80223be:	6923      	ldr	r3, [r4, #16]
 80223c0:	b94b      	cbnz	r3, 80223d6 <__swsetup_r+0x9a>
 80223c2:	89a3      	ldrh	r3, [r4, #12]
 80223c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80223c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80223cc:	d003      	beq.n	80223d6 <__swsetup_r+0x9a>
 80223ce:	4621      	mov	r1, r4
 80223d0:	4630      	mov	r0, r6
 80223d2:	f000 f931 	bl	8022638 <__smakebuf_r>
 80223d6:	89a0      	ldrh	r0, [r4, #12]
 80223d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80223dc:	f010 0301 	ands.w	r3, r0, #1
 80223e0:	d00a      	beq.n	80223f8 <__swsetup_r+0xbc>
 80223e2:	2300      	movs	r3, #0
 80223e4:	60a3      	str	r3, [r4, #8]
 80223e6:	6963      	ldr	r3, [r4, #20]
 80223e8:	425b      	negs	r3, r3
 80223ea:	61a3      	str	r3, [r4, #24]
 80223ec:	6923      	ldr	r3, [r4, #16]
 80223ee:	b943      	cbnz	r3, 8022402 <__swsetup_r+0xc6>
 80223f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80223f4:	d1ba      	bne.n	802236c <__swsetup_r+0x30>
 80223f6:	bd70      	pop	{r4, r5, r6, pc}
 80223f8:	0781      	lsls	r1, r0, #30
 80223fa:	bf58      	it	pl
 80223fc:	6963      	ldrpl	r3, [r4, #20]
 80223fe:	60a3      	str	r3, [r4, #8]
 8022400:	e7f4      	b.n	80223ec <__swsetup_r+0xb0>
 8022402:	2000      	movs	r0, #0
 8022404:	e7f7      	b.n	80223f6 <__swsetup_r+0xba>
 8022406:	bf00      	nop
 8022408:	200001a8 	.word	0x200001a8
 802240c:	08025df0 	.word	0x08025df0
 8022410:	08025e10 	.word	0x08025e10
 8022414:	08025dd0 	.word	0x08025dd0

08022418 <abort>:
 8022418:	b508      	push	{r3, lr}
 802241a:	2006      	movs	r0, #6
 802241c:	f000 f986 	bl	802272c <raise>
 8022420:	2001      	movs	r0, #1
 8022422:	f7df feb5 	bl	8002190 <_exit>
	...

08022428 <_close_r>:
 8022428:	b538      	push	{r3, r4, r5, lr}
 802242a:	4d06      	ldr	r5, [pc, #24]	; (8022444 <_close_r+0x1c>)
 802242c:	2300      	movs	r3, #0
 802242e:	4604      	mov	r4, r0
 8022430:	4608      	mov	r0, r1
 8022432:	602b      	str	r3, [r5, #0]
 8022434:	f7df feef 	bl	8002216 <_close>
 8022438:	1c43      	adds	r3, r0, #1
 802243a:	d102      	bne.n	8022442 <_close_r+0x1a>
 802243c:	682b      	ldr	r3, [r5, #0]
 802243e:	b103      	cbz	r3, 8022442 <_close_r+0x1a>
 8022440:	6023      	str	r3, [r4, #0]
 8022442:	bd38      	pop	{r3, r4, r5, pc}
 8022444:	20011f70 	.word	0x20011f70

08022448 <__sflush_r>:
 8022448:	898a      	ldrh	r2, [r1, #12]
 802244a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802244e:	4605      	mov	r5, r0
 8022450:	0710      	lsls	r0, r2, #28
 8022452:	460c      	mov	r4, r1
 8022454:	d458      	bmi.n	8022508 <__sflush_r+0xc0>
 8022456:	684b      	ldr	r3, [r1, #4]
 8022458:	2b00      	cmp	r3, #0
 802245a:	dc05      	bgt.n	8022468 <__sflush_r+0x20>
 802245c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802245e:	2b00      	cmp	r3, #0
 8022460:	dc02      	bgt.n	8022468 <__sflush_r+0x20>
 8022462:	2000      	movs	r0, #0
 8022464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802246a:	2e00      	cmp	r6, #0
 802246c:	d0f9      	beq.n	8022462 <__sflush_r+0x1a>
 802246e:	2300      	movs	r3, #0
 8022470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022474:	682f      	ldr	r7, [r5, #0]
 8022476:	602b      	str	r3, [r5, #0]
 8022478:	d032      	beq.n	80224e0 <__sflush_r+0x98>
 802247a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802247c:	89a3      	ldrh	r3, [r4, #12]
 802247e:	075a      	lsls	r2, r3, #29
 8022480:	d505      	bpl.n	802248e <__sflush_r+0x46>
 8022482:	6863      	ldr	r3, [r4, #4]
 8022484:	1ac0      	subs	r0, r0, r3
 8022486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022488:	b10b      	cbz	r3, 802248e <__sflush_r+0x46>
 802248a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802248c:	1ac0      	subs	r0, r0, r3
 802248e:	2300      	movs	r3, #0
 8022490:	4602      	mov	r2, r0
 8022492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022494:	6a21      	ldr	r1, [r4, #32]
 8022496:	4628      	mov	r0, r5
 8022498:	47b0      	blx	r6
 802249a:	1c43      	adds	r3, r0, #1
 802249c:	89a3      	ldrh	r3, [r4, #12]
 802249e:	d106      	bne.n	80224ae <__sflush_r+0x66>
 80224a0:	6829      	ldr	r1, [r5, #0]
 80224a2:	291d      	cmp	r1, #29
 80224a4:	d82c      	bhi.n	8022500 <__sflush_r+0xb8>
 80224a6:	4a2a      	ldr	r2, [pc, #168]	; (8022550 <__sflush_r+0x108>)
 80224a8:	40ca      	lsrs	r2, r1
 80224aa:	07d6      	lsls	r6, r2, #31
 80224ac:	d528      	bpl.n	8022500 <__sflush_r+0xb8>
 80224ae:	2200      	movs	r2, #0
 80224b0:	6062      	str	r2, [r4, #4]
 80224b2:	04d9      	lsls	r1, r3, #19
 80224b4:	6922      	ldr	r2, [r4, #16]
 80224b6:	6022      	str	r2, [r4, #0]
 80224b8:	d504      	bpl.n	80224c4 <__sflush_r+0x7c>
 80224ba:	1c42      	adds	r2, r0, #1
 80224bc:	d101      	bne.n	80224c2 <__sflush_r+0x7a>
 80224be:	682b      	ldr	r3, [r5, #0]
 80224c0:	b903      	cbnz	r3, 80224c4 <__sflush_r+0x7c>
 80224c2:	6560      	str	r0, [r4, #84]	; 0x54
 80224c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80224c6:	602f      	str	r7, [r5, #0]
 80224c8:	2900      	cmp	r1, #0
 80224ca:	d0ca      	beq.n	8022462 <__sflush_r+0x1a>
 80224cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80224d0:	4299      	cmp	r1, r3
 80224d2:	d002      	beq.n	80224da <__sflush_r+0x92>
 80224d4:	4628      	mov	r0, r5
 80224d6:	f7ff f8f7 	bl	80216c8 <_free_r>
 80224da:	2000      	movs	r0, #0
 80224dc:	6360      	str	r0, [r4, #52]	; 0x34
 80224de:	e7c1      	b.n	8022464 <__sflush_r+0x1c>
 80224e0:	6a21      	ldr	r1, [r4, #32]
 80224e2:	2301      	movs	r3, #1
 80224e4:	4628      	mov	r0, r5
 80224e6:	47b0      	blx	r6
 80224e8:	1c41      	adds	r1, r0, #1
 80224ea:	d1c7      	bne.n	802247c <__sflush_r+0x34>
 80224ec:	682b      	ldr	r3, [r5, #0]
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	d0c4      	beq.n	802247c <__sflush_r+0x34>
 80224f2:	2b1d      	cmp	r3, #29
 80224f4:	d001      	beq.n	80224fa <__sflush_r+0xb2>
 80224f6:	2b16      	cmp	r3, #22
 80224f8:	d101      	bne.n	80224fe <__sflush_r+0xb6>
 80224fa:	602f      	str	r7, [r5, #0]
 80224fc:	e7b1      	b.n	8022462 <__sflush_r+0x1a>
 80224fe:	89a3      	ldrh	r3, [r4, #12]
 8022500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022504:	81a3      	strh	r3, [r4, #12]
 8022506:	e7ad      	b.n	8022464 <__sflush_r+0x1c>
 8022508:	690f      	ldr	r7, [r1, #16]
 802250a:	2f00      	cmp	r7, #0
 802250c:	d0a9      	beq.n	8022462 <__sflush_r+0x1a>
 802250e:	0793      	lsls	r3, r2, #30
 8022510:	680e      	ldr	r6, [r1, #0]
 8022512:	bf08      	it	eq
 8022514:	694b      	ldreq	r3, [r1, #20]
 8022516:	600f      	str	r7, [r1, #0]
 8022518:	bf18      	it	ne
 802251a:	2300      	movne	r3, #0
 802251c:	eba6 0807 	sub.w	r8, r6, r7
 8022520:	608b      	str	r3, [r1, #8]
 8022522:	f1b8 0f00 	cmp.w	r8, #0
 8022526:	dd9c      	ble.n	8022462 <__sflush_r+0x1a>
 8022528:	6a21      	ldr	r1, [r4, #32]
 802252a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802252c:	4643      	mov	r3, r8
 802252e:	463a      	mov	r2, r7
 8022530:	4628      	mov	r0, r5
 8022532:	47b0      	blx	r6
 8022534:	2800      	cmp	r0, #0
 8022536:	dc06      	bgt.n	8022546 <__sflush_r+0xfe>
 8022538:	89a3      	ldrh	r3, [r4, #12]
 802253a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802253e:	81a3      	strh	r3, [r4, #12]
 8022540:	f04f 30ff 	mov.w	r0, #4294967295
 8022544:	e78e      	b.n	8022464 <__sflush_r+0x1c>
 8022546:	4407      	add	r7, r0
 8022548:	eba8 0800 	sub.w	r8, r8, r0
 802254c:	e7e9      	b.n	8022522 <__sflush_r+0xda>
 802254e:	bf00      	nop
 8022550:	20400001 	.word	0x20400001

08022554 <_fflush_r>:
 8022554:	b538      	push	{r3, r4, r5, lr}
 8022556:	690b      	ldr	r3, [r1, #16]
 8022558:	4605      	mov	r5, r0
 802255a:	460c      	mov	r4, r1
 802255c:	b913      	cbnz	r3, 8022564 <_fflush_r+0x10>
 802255e:	2500      	movs	r5, #0
 8022560:	4628      	mov	r0, r5
 8022562:	bd38      	pop	{r3, r4, r5, pc}
 8022564:	b118      	cbz	r0, 802256e <_fflush_r+0x1a>
 8022566:	6983      	ldr	r3, [r0, #24]
 8022568:	b90b      	cbnz	r3, 802256e <_fflush_r+0x1a>
 802256a:	f7ff fa4b 	bl	8021a04 <__sinit>
 802256e:	4b14      	ldr	r3, [pc, #80]	; (80225c0 <_fflush_r+0x6c>)
 8022570:	429c      	cmp	r4, r3
 8022572:	d11b      	bne.n	80225ac <_fflush_r+0x58>
 8022574:	686c      	ldr	r4, [r5, #4]
 8022576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802257a:	2b00      	cmp	r3, #0
 802257c:	d0ef      	beq.n	802255e <_fflush_r+0xa>
 802257e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022580:	07d0      	lsls	r0, r2, #31
 8022582:	d404      	bmi.n	802258e <_fflush_r+0x3a>
 8022584:	0599      	lsls	r1, r3, #22
 8022586:	d402      	bmi.n	802258e <_fflush_r+0x3a>
 8022588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802258a:	f7ff faeb 	bl	8021b64 <__retarget_lock_acquire_recursive>
 802258e:	4628      	mov	r0, r5
 8022590:	4621      	mov	r1, r4
 8022592:	f7ff ff59 	bl	8022448 <__sflush_r>
 8022596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022598:	07da      	lsls	r2, r3, #31
 802259a:	4605      	mov	r5, r0
 802259c:	d4e0      	bmi.n	8022560 <_fflush_r+0xc>
 802259e:	89a3      	ldrh	r3, [r4, #12]
 80225a0:	059b      	lsls	r3, r3, #22
 80225a2:	d4dd      	bmi.n	8022560 <_fflush_r+0xc>
 80225a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80225a6:	f7ff fade 	bl	8021b66 <__retarget_lock_release_recursive>
 80225aa:	e7d9      	b.n	8022560 <_fflush_r+0xc>
 80225ac:	4b05      	ldr	r3, [pc, #20]	; (80225c4 <_fflush_r+0x70>)
 80225ae:	429c      	cmp	r4, r3
 80225b0:	d101      	bne.n	80225b6 <_fflush_r+0x62>
 80225b2:	68ac      	ldr	r4, [r5, #8]
 80225b4:	e7df      	b.n	8022576 <_fflush_r+0x22>
 80225b6:	4b04      	ldr	r3, [pc, #16]	; (80225c8 <_fflush_r+0x74>)
 80225b8:	429c      	cmp	r4, r3
 80225ba:	bf08      	it	eq
 80225bc:	68ec      	ldreq	r4, [r5, #12]
 80225be:	e7da      	b.n	8022576 <_fflush_r+0x22>
 80225c0:	08025df0 	.word	0x08025df0
 80225c4:	08025e10 	.word	0x08025e10
 80225c8:	08025dd0 	.word	0x08025dd0

080225cc <_lseek_r>:
 80225cc:	b538      	push	{r3, r4, r5, lr}
 80225ce:	4d07      	ldr	r5, [pc, #28]	; (80225ec <_lseek_r+0x20>)
 80225d0:	4604      	mov	r4, r0
 80225d2:	4608      	mov	r0, r1
 80225d4:	4611      	mov	r1, r2
 80225d6:	2200      	movs	r2, #0
 80225d8:	602a      	str	r2, [r5, #0]
 80225da:	461a      	mov	r2, r3
 80225dc:	f7df fe42 	bl	8002264 <_lseek>
 80225e0:	1c43      	adds	r3, r0, #1
 80225e2:	d102      	bne.n	80225ea <_lseek_r+0x1e>
 80225e4:	682b      	ldr	r3, [r5, #0]
 80225e6:	b103      	cbz	r3, 80225ea <_lseek_r+0x1e>
 80225e8:	6023      	str	r3, [r4, #0]
 80225ea:	bd38      	pop	{r3, r4, r5, pc}
 80225ec:	20011f70 	.word	0x20011f70

080225f0 <__swhatbuf_r>:
 80225f0:	b570      	push	{r4, r5, r6, lr}
 80225f2:	460e      	mov	r6, r1
 80225f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80225f8:	2900      	cmp	r1, #0
 80225fa:	b096      	sub	sp, #88	; 0x58
 80225fc:	4614      	mov	r4, r2
 80225fe:	461d      	mov	r5, r3
 8022600:	da07      	bge.n	8022612 <__swhatbuf_r+0x22>
 8022602:	2300      	movs	r3, #0
 8022604:	602b      	str	r3, [r5, #0]
 8022606:	89b3      	ldrh	r3, [r6, #12]
 8022608:	061a      	lsls	r2, r3, #24
 802260a:	d410      	bmi.n	802262e <__swhatbuf_r+0x3e>
 802260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022610:	e00e      	b.n	8022630 <__swhatbuf_r+0x40>
 8022612:	466a      	mov	r2, sp
 8022614:	f000 f8a6 	bl	8022764 <_fstat_r>
 8022618:	2800      	cmp	r0, #0
 802261a:	dbf2      	blt.n	8022602 <__swhatbuf_r+0x12>
 802261c:	9a01      	ldr	r2, [sp, #4]
 802261e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022622:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022626:	425a      	negs	r2, r3
 8022628:	415a      	adcs	r2, r3
 802262a:	602a      	str	r2, [r5, #0]
 802262c:	e7ee      	b.n	802260c <__swhatbuf_r+0x1c>
 802262e:	2340      	movs	r3, #64	; 0x40
 8022630:	2000      	movs	r0, #0
 8022632:	6023      	str	r3, [r4, #0]
 8022634:	b016      	add	sp, #88	; 0x58
 8022636:	bd70      	pop	{r4, r5, r6, pc}

08022638 <__smakebuf_r>:
 8022638:	898b      	ldrh	r3, [r1, #12]
 802263a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802263c:	079d      	lsls	r5, r3, #30
 802263e:	4606      	mov	r6, r0
 8022640:	460c      	mov	r4, r1
 8022642:	d507      	bpl.n	8022654 <__smakebuf_r+0x1c>
 8022644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022648:	6023      	str	r3, [r4, #0]
 802264a:	6123      	str	r3, [r4, #16]
 802264c:	2301      	movs	r3, #1
 802264e:	6163      	str	r3, [r4, #20]
 8022650:	b002      	add	sp, #8
 8022652:	bd70      	pop	{r4, r5, r6, pc}
 8022654:	ab01      	add	r3, sp, #4
 8022656:	466a      	mov	r2, sp
 8022658:	f7ff ffca 	bl	80225f0 <__swhatbuf_r>
 802265c:	9900      	ldr	r1, [sp, #0]
 802265e:	4605      	mov	r5, r0
 8022660:	4630      	mov	r0, r6
 8022662:	f7ff f881 	bl	8021768 <_malloc_r>
 8022666:	b948      	cbnz	r0, 802267c <__smakebuf_r+0x44>
 8022668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802266c:	059a      	lsls	r2, r3, #22
 802266e:	d4ef      	bmi.n	8022650 <__smakebuf_r+0x18>
 8022670:	f023 0303 	bic.w	r3, r3, #3
 8022674:	f043 0302 	orr.w	r3, r3, #2
 8022678:	81a3      	strh	r3, [r4, #12]
 802267a:	e7e3      	b.n	8022644 <__smakebuf_r+0xc>
 802267c:	4b0d      	ldr	r3, [pc, #52]	; (80226b4 <__smakebuf_r+0x7c>)
 802267e:	62b3      	str	r3, [r6, #40]	; 0x28
 8022680:	89a3      	ldrh	r3, [r4, #12]
 8022682:	6020      	str	r0, [r4, #0]
 8022684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022688:	81a3      	strh	r3, [r4, #12]
 802268a:	9b00      	ldr	r3, [sp, #0]
 802268c:	6163      	str	r3, [r4, #20]
 802268e:	9b01      	ldr	r3, [sp, #4]
 8022690:	6120      	str	r0, [r4, #16]
 8022692:	b15b      	cbz	r3, 80226ac <__smakebuf_r+0x74>
 8022694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022698:	4630      	mov	r0, r6
 802269a:	f000 f875 	bl	8022788 <_isatty_r>
 802269e:	b128      	cbz	r0, 80226ac <__smakebuf_r+0x74>
 80226a0:	89a3      	ldrh	r3, [r4, #12]
 80226a2:	f023 0303 	bic.w	r3, r3, #3
 80226a6:	f043 0301 	orr.w	r3, r3, #1
 80226aa:	81a3      	strh	r3, [r4, #12]
 80226ac:	89a0      	ldrh	r0, [r4, #12]
 80226ae:	4305      	orrs	r5, r0
 80226b0:	81a5      	strh	r5, [r4, #12]
 80226b2:	e7cd      	b.n	8022650 <__smakebuf_r+0x18>
 80226b4:	0802199d 	.word	0x0802199d

080226b8 <_read_r>:
 80226b8:	b538      	push	{r3, r4, r5, lr}
 80226ba:	4d07      	ldr	r5, [pc, #28]	; (80226d8 <_read_r+0x20>)
 80226bc:	4604      	mov	r4, r0
 80226be:	4608      	mov	r0, r1
 80226c0:	4611      	mov	r1, r2
 80226c2:	2200      	movs	r2, #0
 80226c4:	602a      	str	r2, [r5, #0]
 80226c6:	461a      	mov	r2, r3
 80226c8:	f7df fd6c 	bl	80021a4 <_read>
 80226cc:	1c43      	adds	r3, r0, #1
 80226ce:	d102      	bne.n	80226d6 <_read_r+0x1e>
 80226d0:	682b      	ldr	r3, [r5, #0]
 80226d2:	b103      	cbz	r3, 80226d6 <_read_r+0x1e>
 80226d4:	6023      	str	r3, [r4, #0]
 80226d6:	bd38      	pop	{r3, r4, r5, pc}
 80226d8:	20011f70 	.word	0x20011f70

080226dc <_raise_r>:
 80226dc:	291f      	cmp	r1, #31
 80226de:	b538      	push	{r3, r4, r5, lr}
 80226e0:	4604      	mov	r4, r0
 80226e2:	460d      	mov	r5, r1
 80226e4:	d904      	bls.n	80226f0 <_raise_r+0x14>
 80226e6:	2316      	movs	r3, #22
 80226e8:	6003      	str	r3, [r0, #0]
 80226ea:	f04f 30ff 	mov.w	r0, #4294967295
 80226ee:	bd38      	pop	{r3, r4, r5, pc}
 80226f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80226f2:	b112      	cbz	r2, 80226fa <_raise_r+0x1e>
 80226f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80226f8:	b94b      	cbnz	r3, 802270e <_raise_r+0x32>
 80226fa:	4620      	mov	r0, r4
 80226fc:	f000 f830 	bl	8022760 <_getpid_r>
 8022700:	462a      	mov	r2, r5
 8022702:	4601      	mov	r1, r0
 8022704:	4620      	mov	r0, r4
 8022706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802270a:	f000 b817 	b.w	802273c <_kill_r>
 802270e:	2b01      	cmp	r3, #1
 8022710:	d00a      	beq.n	8022728 <_raise_r+0x4c>
 8022712:	1c59      	adds	r1, r3, #1
 8022714:	d103      	bne.n	802271e <_raise_r+0x42>
 8022716:	2316      	movs	r3, #22
 8022718:	6003      	str	r3, [r0, #0]
 802271a:	2001      	movs	r0, #1
 802271c:	e7e7      	b.n	80226ee <_raise_r+0x12>
 802271e:	2400      	movs	r4, #0
 8022720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022724:	4628      	mov	r0, r5
 8022726:	4798      	blx	r3
 8022728:	2000      	movs	r0, #0
 802272a:	e7e0      	b.n	80226ee <_raise_r+0x12>

0802272c <raise>:
 802272c:	4b02      	ldr	r3, [pc, #8]	; (8022738 <raise+0xc>)
 802272e:	4601      	mov	r1, r0
 8022730:	6818      	ldr	r0, [r3, #0]
 8022732:	f7ff bfd3 	b.w	80226dc <_raise_r>
 8022736:	bf00      	nop
 8022738:	200001a8 	.word	0x200001a8

0802273c <_kill_r>:
 802273c:	b538      	push	{r3, r4, r5, lr}
 802273e:	4d07      	ldr	r5, [pc, #28]	; (802275c <_kill_r+0x20>)
 8022740:	2300      	movs	r3, #0
 8022742:	4604      	mov	r4, r0
 8022744:	4608      	mov	r0, r1
 8022746:	4611      	mov	r1, r2
 8022748:	602b      	str	r3, [r5, #0]
 802274a:	f7df fd0f 	bl	800216c <_kill>
 802274e:	1c43      	adds	r3, r0, #1
 8022750:	d102      	bne.n	8022758 <_kill_r+0x1c>
 8022752:	682b      	ldr	r3, [r5, #0]
 8022754:	b103      	cbz	r3, 8022758 <_kill_r+0x1c>
 8022756:	6023      	str	r3, [r4, #0]
 8022758:	bd38      	pop	{r3, r4, r5, pc}
 802275a:	bf00      	nop
 802275c:	20011f70 	.word	0x20011f70

08022760 <_getpid_r>:
 8022760:	f7df bcfc 	b.w	800215c <_getpid>

08022764 <_fstat_r>:
 8022764:	b538      	push	{r3, r4, r5, lr}
 8022766:	4d07      	ldr	r5, [pc, #28]	; (8022784 <_fstat_r+0x20>)
 8022768:	2300      	movs	r3, #0
 802276a:	4604      	mov	r4, r0
 802276c:	4608      	mov	r0, r1
 802276e:	4611      	mov	r1, r2
 8022770:	602b      	str	r3, [r5, #0]
 8022772:	f7df fd5c 	bl	800222e <_fstat>
 8022776:	1c43      	adds	r3, r0, #1
 8022778:	d102      	bne.n	8022780 <_fstat_r+0x1c>
 802277a:	682b      	ldr	r3, [r5, #0]
 802277c:	b103      	cbz	r3, 8022780 <_fstat_r+0x1c>
 802277e:	6023      	str	r3, [r4, #0]
 8022780:	bd38      	pop	{r3, r4, r5, pc}
 8022782:	bf00      	nop
 8022784:	20011f70 	.word	0x20011f70

08022788 <_isatty_r>:
 8022788:	b538      	push	{r3, r4, r5, lr}
 802278a:	4d06      	ldr	r5, [pc, #24]	; (80227a4 <_isatty_r+0x1c>)
 802278c:	2300      	movs	r3, #0
 802278e:	4604      	mov	r4, r0
 8022790:	4608      	mov	r0, r1
 8022792:	602b      	str	r3, [r5, #0]
 8022794:	f7df fd5b 	bl	800224e <_isatty>
 8022798:	1c43      	adds	r3, r0, #1
 802279a:	d102      	bne.n	80227a2 <_isatty_r+0x1a>
 802279c:	682b      	ldr	r3, [r5, #0]
 802279e:	b103      	cbz	r3, 80227a2 <_isatty_r+0x1a>
 80227a0:	6023      	str	r3, [r4, #0]
 80227a2:	bd38      	pop	{r3, r4, r5, pc}
 80227a4:	20011f70 	.word	0x20011f70

080227a8 <_init>:
 80227a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227aa:	bf00      	nop
 80227ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80227ae:	bc08      	pop	{r3}
 80227b0:	469e      	mov	lr, r3
 80227b2:	4770      	bx	lr

080227b4 <_fini>:
 80227b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227b6:	bf00      	nop
 80227b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80227ba:	bc08      	pop	{r3}
 80227bc:	469e      	mov	lr, r3
 80227be:	4770      	bx	lr
